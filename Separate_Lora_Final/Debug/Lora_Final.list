
Lora_Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a9c  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000474  08006be0  08006be0  00016be0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007054  08007054  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  08007054  08007054  00017054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800705c  0800705c  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800705c  0800705c  0001705c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007060  08007060  00017060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08007064  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  200001d4  08007238  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003d8  08007238  000203d8  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201fe  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ddbe  00000000  00000000  00020241  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000022b0  00000000  00000000  0002dfff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f50  00000000  00000000  000302b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b94  00000000  00000000  00031200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a0e3  00000000  00000000  00031d94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e821  00000000  00000000  0004be77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009fc3b  00000000  00000000  0005a698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000504c  00000000  00000000  000fa2d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000ff320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001d4 	.word	0x200001d4
 800015c:	00000000 	.word	0x00000000
 8000160:	08006bc4 	.word	0x08006bc4

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001d8 	.word	0x200001d8
 800017c:	08006bc4 	.word	0x08006bc4

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b970 	b.w	8000ef0 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9e08      	ldr	r6, [sp, #32]
 8000c2e:	460d      	mov	r5, r1
 8000c30:	4604      	mov	r4, r0
 8000c32:	460f      	mov	r7, r1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d14a      	bne.n	8000cce <__udivmoddi4+0xa6>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4694      	mov	ip, r2
 8000c3c:	d965      	bls.n	8000d0a <__udivmoddi4+0xe2>
 8000c3e:	fab2 f382 	clz	r3, r2
 8000c42:	b143      	cbz	r3, 8000c56 <__udivmoddi4+0x2e>
 8000c44:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c48:	f1c3 0220 	rsb	r2, r3, #32
 8000c4c:	409f      	lsls	r7, r3
 8000c4e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c52:	4317      	orrs	r7, r2
 8000c54:	409c      	lsls	r4, r3
 8000c56:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c5a:	fa1f f58c 	uxth.w	r5, ip
 8000c5e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c62:	0c22      	lsrs	r2, r4, #16
 8000c64:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c68:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c6c:	fb01 f005 	mul.w	r0, r1, r5
 8000c70:	4290      	cmp	r0, r2
 8000c72:	d90a      	bls.n	8000c8a <__udivmoddi4+0x62>
 8000c74:	eb1c 0202 	adds.w	r2, ip, r2
 8000c78:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c7c:	f080 811b 	bcs.w	8000eb6 <__udivmoddi4+0x28e>
 8000c80:	4290      	cmp	r0, r2
 8000c82:	f240 8118 	bls.w	8000eb6 <__udivmoddi4+0x28e>
 8000c86:	3902      	subs	r1, #2
 8000c88:	4462      	add	r2, ip
 8000c8a:	1a12      	subs	r2, r2, r0
 8000c8c:	b2a4      	uxth	r4, r4
 8000c8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c96:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c9a:	fb00 f505 	mul.w	r5, r0, r5
 8000c9e:	42a5      	cmp	r5, r4
 8000ca0:	d90a      	bls.n	8000cb8 <__udivmoddi4+0x90>
 8000ca2:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000caa:	f080 8106 	bcs.w	8000eba <__udivmoddi4+0x292>
 8000cae:	42a5      	cmp	r5, r4
 8000cb0:	f240 8103 	bls.w	8000eba <__udivmoddi4+0x292>
 8000cb4:	4464      	add	r4, ip
 8000cb6:	3802      	subs	r0, #2
 8000cb8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cbc:	1b64      	subs	r4, r4, r5
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11e      	cbz	r6, 8000cca <__udivmoddi4+0xa2>
 8000cc2:	40dc      	lsrs	r4, r3
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0xbc>
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	f000 80ec 	beq.w	8000eb0 <__udivmoddi4+0x288>
 8000cd8:	2100      	movs	r1, #0
 8000cda:	e9c6 0500 	strd	r0, r5, [r6]
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce4:	fab3 f183 	clz	r1, r3
 8000ce8:	2900      	cmp	r1, #0
 8000cea:	d149      	bne.n	8000d80 <__udivmoddi4+0x158>
 8000cec:	42ab      	cmp	r3, r5
 8000cee:	d302      	bcc.n	8000cf6 <__udivmoddi4+0xce>
 8000cf0:	4282      	cmp	r2, r0
 8000cf2:	f200 80f7 	bhi.w	8000ee4 <__udivmoddi4+0x2bc>
 8000cf6:	1a84      	subs	r4, r0, r2
 8000cf8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	4617      	mov	r7, r2
 8000d00:	2e00      	cmp	r6, #0
 8000d02:	d0e2      	beq.n	8000cca <__udivmoddi4+0xa2>
 8000d04:	e9c6 4700 	strd	r4, r7, [r6]
 8000d08:	e7df      	b.n	8000cca <__udivmoddi4+0xa2>
 8000d0a:	b902      	cbnz	r2, 8000d0e <__udivmoddi4+0xe6>
 8000d0c:	deff      	udf	#255	; 0xff
 8000d0e:	fab2 f382 	clz	r3, r2
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	f040 808f 	bne.w	8000e36 <__udivmoddi4+0x20e>
 8000d18:	1a8a      	subs	r2, r1, r2
 8000d1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1e:	fa1f fe8c 	uxth.w	lr, ip
 8000d22:	2101      	movs	r1, #1
 8000d24:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d28:	fb07 2015 	mls	r0, r7, r5, r2
 8000d2c:	0c22      	lsrs	r2, r4, #16
 8000d2e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d32:	fb0e f005 	mul.w	r0, lr, r5
 8000d36:	4290      	cmp	r0, r2
 8000d38:	d908      	bls.n	8000d4c <__udivmoddi4+0x124>
 8000d3a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d3e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0x122>
 8000d44:	4290      	cmp	r0, r2
 8000d46:	f200 80ca 	bhi.w	8000ede <__udivmoddi4+0x2b6>
 8000d4a:	4645      	mov	r5, r8
 8000d4c:	1a12      	subs	r2, r2, r0
 8000d4e:	b2a4      	uxth	r4, r4
 8000d50:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d54:	fb07 2210 	mls	r2, r7, r0, r2
 8000d58:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d5c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d60:	45a6      	cmp	lr, r4
 8000d62:	d908      	bls.n	8000d76 <__udivmoddi4+0x14e>
 8000d64:	eb1c 0404 	adds.w	r4, ip, r4
 8000d68:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d6c:	d202      	bcs.n	8000d74 <__udivmoddi4+0x14c>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f200 80ba 	bhi.w	8000ee8 <__udivmoddi4+0x2c0>
 8000d74:	4610      	mov	r0, r2
 8000d76:	eba4 040e 	sub.w	r4, r4, lr
 8000d7a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d7e:	e79f      	b.n	8000cc0 <__udivmoddi4+0x98>
 8000d80:	f1c1 0720 	rsb	r7, r1, #32
 8000d84:	408b      	lsls	r3, r1
 8000d86:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d8a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d8e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d92:	fa20 f307 	lsr.w	r3, r0, r7
 8000d96:	40fd      	lsrs	r5, r7
 8000d98:	4323      	orrs	r3, r4
 8000d9a:	fa00 f901 	lsl.w	r9, r0, r1
 8000d9e:	ea4f 401c 	mov.w	r0, ip, lsr #16
 8000da2:	fa1f fe8c 	uxth.w	lr, ip
 8000da6:	fbb5 f8f0 	udiv	r8, r5, r0
 8000daa:	0c1c      	lsrs	r4, r3, #16
 8000dac:	fb00 5518 	mls	r5, r0, r8, r5
 8000db0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000db4:	fb08 f50e 	mul.w	r5, r8, lr
 8000db8:	42a5      	cmp	r5, r4
 8000dba:	fa02 f201 	lsl.w	r2, r2, r1
 8000dbe:	d90b      	bls.n	8000dd8 <__udivmoddi4+0x1b0>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc8:	f080 8087 	bcs.w	8000eda <__udivmoddi4+0x2b2>
 8000dcc:	42a5      	cmp	r5, r4
 8000dce:	f240 8084 	bls.w	8000eda <__udivmoddi4+0x2b2>
 8000dd2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dd6:	4464      	add	r4, ip
 8000dd8:	1b64      	subs	r4, r4, r5
 8000dda:	b29d      	uxth	r5, r3
 8000ddc:	fbb4 f3f0 	udiv	r3, r4, r0
 8000de0:	fb00 4413 	mls	r4, r0, r3, r4
 8000de4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000de8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dec:	45a6      	cmp	lr, r4
 8000dee:	d908      	bls.n	8000e02 <__udivmoddi4+0x1da>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f103 30ff 	add.w	r0, r3, #4294967295
 8000df8:	d26b      	bcs.n	8000ed2 <__udivmoddi4+0x2aa>
 8000dfa:	45a6      	cmp	lr, r4
 8000dfc:	d969      	bls.n	8000ed2 <__udivmoddi4+0x2aa>
 8000dfe:	3b02      	subs	r3, #2
 8000e00:	4464      	add	r4, ip
 8000e02:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000e06:	fba0 8302 	umull	r8, r3, r0, r2
 8000e0a:	eba4 040e 	sub.w	r4, r4, lr
 8000e0e:	429c      	cmp	r4, r3
 8000e10:	46c6      	mov	lr, r8
 8000e12:	461d      	mov	r5, r3
 8000e14:	d355      	bcc.n	8000ec2 <__udivmoddi4+0x29a>
 8000e16:	d052      	beq.n	8000ebe <__udivmoddi4+0x296>
 8000e18:	b156      	cbz	r6, 8000e30 <__udivmoddi4+0x208>
 8000e1a:	ebb9 030e 	subs.w	r3, r9, lr
 8000e1e:	eb64 0405 	sbc.w	r4, r4, r5
 8000e22:	fa04 f707 	lsl.w	r7, r4, r7
 8000e26:	40cb      	lsrs	r3, r1
 8000e28:	40cc      	lsrs	r4, r1
 8000e2a:	431f      	orrs	r7, r3
 8000e2c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e30:	2100      	movs	r1, #0
 8000e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e36:	f1c3 0120 	rsb	r1, r3, #32
 8000e3a:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e3e:	fa20 f201 	lsr.w	r2, r0, r1
 8000e42:	fa25 f101 	lsr.w	r1, r5, r1
 8000e46:	409d      	lsls	r5, r3
 8000e48:	432a      	orrs	r2, r5
 8000e4a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e4e:	fa1f fe8c 	uxth.w	lr, ip
 8000e52:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e56:	fb07 1510 	mls	r5, r7, r0, r1
 8000e5a:	0c11      	lsrs	r1, r2, #16
 8000e5c:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e60:	fb00 f50e 	mul.w	r5, r0, lr
 8000e64:	428d      	cmp	r5, r1
 8000e66:	fa04 f403 	lsl.w	r4, r4, r3
 8000e6a:	d908      	bls.n	8000e7e <__udivmoddi4+0x256>
 8000e6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e70:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e74:	d22f      	bcs.n	8000ed6 <__udivmoddi4+0x2ae>
 8000e76:	428d      	cmp	r5, r1
 8000e78:	d92d      	bls.n	8000ed6 <__udivmoddi4+0x2ae>
 8000e7a:	3802      	subs	r0, #2
 8000e7c:	4461      	add	r1, ip
 8000e7e:	1b49      	subs	r1, r1, r5
 8000e80:	b292      	uxth	r2, r2
 8000e82:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e86:	fb07 1115 	mls	r1, r7, r5, r1
 8000e8a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e8e:	fb05 f10e 	mul.w	r1, r5, lr
 8000e92:	4291      	cmp	r1, r2
 8000e94:	d908      	bls.n	8000ea8 <__udivmoddi4+0x280>
 8000e96:	eb1c 0202 	adds.w	r2, ip, r2
 8000e9a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e9e:	d216      	bcs.n	8000ece <__udivmoddi4+0x2a6>
 8000ea0:	4291      	cmp	r1, r2
 8000ea2:	d914      	bls.n	8000ece <__udivmoddi4+0x2a6>
 8000ea4:	3d02      	subs	r5, #2
 8000ea6:	4462      	add	r2, ip
 8000ea8:	1a52      	subs	r2, r2, r1
 8000eaa:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000eae:	e739      	b.n	8000d24 <__udivmoddi4+0xfc>
 8000eb0:	4631      	mov	r1, r6
 8000eb2:	4630      	mov	r0, r6
 8000eb4:	e709      	b.n	8000cca <__udivmoddi4+0xa2>
 8000eb6:	4639      	mov	r1, r7
 8000eb8:	e6e7      	b.n	8000c8a <__udivmoddi4+0x62>
 8000eba:	4610      	mov	r0, r2
 8000ebc:	e6fc      	b.n	8000cb8 <__udivmoddi4+0x90>
 8000ebe:	45c1      	cmp	r9, r8
 8000ec0:	d2aa      	bcs.n	8000e18 <__udivmoddi4+0x1f0>
 8000ec2:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ec6:	eb63 050c 	sbc.w	r5, r3, ip
 8000eca:	3801      	subs	r0, #1
 8000ecc:	e7a4      	b.n	8000e18 <__udivmoddi4+0x1f0>
 8000ece:	4645      	mov	r5, r8
 8000ed0:	e7ea      	b.n	8000ea8 <__udivmoddi4+0x280>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	e795      	b.n	8000e02 <__udivmoddi4+0x1da>
 8000ed6:	4640      	mov	r0, r8
 8000ed8:	e7d1      	b.n	8000e7e <__udivmoddi4+0x256>
 8000eda:	46d0      	mov	r8, sl
 8000edc:	e77c      	b.n	8000dd8 <__udivmoddi4+0x1b0>
 8000ede:	3d02      	subs	r5, #2
 8000ee0:	4462      	add	r2, ip
 8000ee2:	e733      	b.n	8000d4c <__udivmoddi4+0x124>
 8000ee4:	4608      	mov	r0, r1
 8000ee6:	e70b      	b.n	8000d00 <__udivmoddi4+0xd8>
 8000ee8:	4464      	add	r4, ip
 8000eea:	3802      	subs	r0, #2
 8000eec:	e743      	b.n	8000d76 <__udivmoddi4+0x14e>
 8000eee:	bf00      	nop

08000ef0 <__aeabi_idiv0>:
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop

08000ef4 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b085      	sub	sp, #20
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000efc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f00:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f02:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000f0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f10:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4013      	ands	r3, r2
 8000f16:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f18:	68fb      	ldr	r3, [r7, #12]
}
 8000f1a:	bf00      	nop
 8000f1c:	3714      	adds	r7, #20
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bc80      	pop	{r7}
 8000f22:	4770      	bx	lr

08000f24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b09c      	sub	sp, #112	; 0x70
 8000f28:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f2a:	f000 fbf3 	bl	8001714 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f2e:	f000 f871 	bl	8001014 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f32:	f000 f91d 	bl	8001170 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000f36:	f000 f8cf 	bl	80010d8 <MX_USART1_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  uint8_t Presence = 0, Temp_byte1 = 0, Temp_byte2 = 0;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8000f40:	2300      	movs	r3, #0
 8000f42:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8000f46:	2300      	movs	r3, #0
 8000f48:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
  float temp_data = 0;
 8000f4c:	f04f 0300 	mov.w	r3, #0
 8000f50:	66bb      	str	r3, [r7, #104]	; 0x68

  int8_t str[100] = {0};
 8000f52:	2300      	movs	r3, #0
 8000f54:	607b      	str	r3, [r7, #4]
 8000f56:	f107 0308 	add.w	r3, r7, #8
 8000f5a:	2260      	movs	r2, #96	; 0x60
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f003 fd5b 	bl	8004a1a <memset>

  while (1)
  {
	  Presence = DS18B20_Start ();
 8000f64:	f000 f988 	bl	8001278 <DS18B20_Start>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	  HAL_Delay (1);
 8000f6e:	2001      	movs	r0, #1
 8000f70:	f000 fc46 	bl	8001800 <HAL_Delay>
	  DS18B20_Write (0xCC);  // skip ROM
 8000f74:	20cc      	movs	r0, #204	; 0xcc
 8000f76:	f000 f9af 	bl	80012d8 <DS18B20_Write>
	  DS18B20_Write (0x44);  // convert t
 8000f7a:	2044      	movs	r0, #68	; 0x44
 8000f7c:	f000 f9ac 	bl	80012d8 <DS18B20_Write>
	  HAL_Delay (800);
 8000f80:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000f84:	f000 fc3c 	bl	8001800 <HAL_Delay>

	  Presence = DS18B20_Start ();
 8000f88:	f000 f976 	bl	8001278 <DS18B20_Start>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	  HAL_Delay(1);
 8000f92:	2001      	movs	r0, #1
 8000f94:	f000 fc34 	bl	8001800 <HAL_Delay>
	  DS18B20_Write (0xCC);  // skip ROM
 8000f98:	20cc      	movs	r0, #204	; 0xcc
 8000f9a:	f000 f99d 	bl	80012d8 <DS18B20_Write>
	  DS18B20_Write (0xBE);  // Read Scratch-pad
 8000f9e:	20be      	movs	r0, #190	; 0xbe
 8000fa0:	f000 f99a 	bl	80012d8 <DS18B20_Write>

	  Temp_byte1 = DS18B20_Read();
 8000fa4:	f000 f9de 	bl	8001364 <DS18B20_Read>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
	  Temp_byte2 = DS18B20_Read();
 8000fae:	f000 f9d9 	bl	8001364 <DS18B20_Read>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d

	  temp_data = (float)(((Temp_byte2<<8)|(Temp_byte1))*RESOLUTION_FACTOR_FOR_12_BIT);
 8000fb8:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8000fbc:	021a      	lsls	r2, r3, #8
 8000fbe:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff fa85 	bl	80004d4 <__aeabi_i2d>
 8000fca:	f04f 0200 	mov.w	r2, #0
 8000fce:	4b0e      	ldr	r3, [pc, #56]	; (8001008 <main+0xe4>)
 8000fd0:	f7ff faea 	bl	80005a8 <__aeabi_dmul>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	460b      	mov	r3, r1
 8000fd8:	4610      	mov	r0, r2
 8000fda:	4619      	mov	r1, r3
 8000fdc:	f7ff fdbc 	bl	8000b58 <__aeabi_d2f>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	66bb      	str	r3, [r7, #104]	; 0x68

	  sprintf(str,"Temperature in degC = %0.2f\r\n", temp_data);
 8000fe4:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8000fe6:	f7ff fa87 	bl	80004f8 <__aeabi_f2d>
 8000fea:	4602      	mov	r2, r0
 8000fec:	460b      	mov	r3, r1
 8000fee:	1d38      	adds	r0, r7, #4
 8000ff0:	4906      	ldr	r1, [pc, #24]	; (800100c <main+0xe8>)
 8000ff2:	f003 fcaf 	bl	8004954 <siprintf>
	  HAL_UART_Transmit(&huart1, str, sizeof(str), 1000);
 8000ff6:	1d39      	adds	r1, r7, #4
 8000ff8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ffc:	2264      	movs	r2, #100	; 0x64
 8000ffe:	4804      	ldr	r0, [pc, #16]	; (8001010 <main+0xec>)
 8001000:	f002 f9eb 	bl	80033da <HAL_UART_Transmit>
  {
 8001004:	e7ae      	b.n	8000f64 <main+0x40>
 8001006:	bf00      	nop
 8001008:	3fb00000 	.word	0x3fb00000
 800100c:	08006be0 	.word	0x08006be0
 8001010:	200001f0 	.word	0x200001f0

08001014 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b09a      	sub	sp, #104	; 0x68
 8001018:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800101a:	f107 0320 	add.w	r3, r7, #32
 800101e:	2248      	movs	r2, #72	; 0x48
 8001020:	2100      	movs	r1, #0
 8001022:	4618      	mov	r0, r3
 8001024:	f003 fcf9 	bl	8004a1a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001028:	f107 0308 	add.w	r3, r7, #8
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	60da      	str	r2, [r3, #12]
 8001036:	611a      	str	r2, [r3, #16]
 8001038:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800103a:	4b26      	ldr	r3, [pc, #152]	; (80010d4 <SystemClock_Config+0xc0>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001042:	4a24      	ldr	r2, [pc, #144]	; (80010d4 <SystemClock_Config+0xc0>)
 8001044:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001048:	6013      	str	r3, [r2, #0]
 800104a:	4b22      	ldr	r3, [pc, #136]	; (80010d4 <SystemClock_Config+0xc0>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001052:	607b      	str	r3, [r7, #4]
 8001054:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001056:	2302      	movs	r3, #2
 8001058:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800105a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800105e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001060:	2340      	movs	r3, #64	; 0x40
 8001062:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001064:	2302      	movs	r3, #2
 8001066:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001068:	2302      	movs	r3, #2
 800106a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800106c:	2300      	movs	r3, #0
 800106e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 6;
 8001070:	2306      	movs	r3, #6
 8001072:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001074:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001078:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800107a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800107e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001080:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001084:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001086:	f107 0320 	add.w	r3, r7, #32
 800108a:	4618      	mov	r0, r3
 800108c:	f001 f8f6 	bl	800227c <HAL_RCC_OscConfig>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <SystemClock_Config+0x86>
  {
    Error_Handler();
 8001096:	f000 f9a3 	bl	80013e0 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 800109a:	234f      	movs	r3, #79	; 0x4f
 800109c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800109e:	2303      	movs	r3, #3
 80010a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010a2:	2300      	movs	r3, #0
 80010a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010ac:	2300      	movs	r3, #0
 80010ae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80010b0:	2300      	movs	r3, #0
 80010b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010b4:	f107 0308 	add.w	r3, r7, #8
 80010b8:	2102      	movs	r1, #2
 80010ba:	4618      	mov	r0, r3
 80010bc:	f001 fc60 	bl	8002980 <HAL_RCC_ClockConfig>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80010c6:	f000 f98b 	bl	80013e0 <Error_Handler>
  }
}
 80010ca:	bf00      	nop
 80010cc:	3768      	adds	r7, #104	; 0x68
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	58000400 	.word	0x58000400

080010d8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010dc:	4b22      	ldr	r3, [pc, #136]	; (8001168 <MX_USART1_UART_Init+0x90>)
 80010de:	4a23      	ldr	r2, [pc, #140]	; (800116c <MX_USART1_UART_Init+0x94>)
 80010e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80010e2:	4b21      	ldr	r3, [pc, #132]	; (8001168 <MX_USART1_UART_Init+0x90>)
 80010e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010ea:	4b1f      	ldr	r3, [pc, #124]	; (8001168 <MX_USART1_UART_Init+0x90>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010f0:	4b1d      	ldr	r3, [pc, #116]	; (8001168 <MX_USART1_UART_Init+0x90>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010f6:	4b1c      	ldr	r3, [pc, #112]	; (8001168 <MX_USART1_UART_Init+0x90>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010fc:	4b1a      	ldr	r3, [pc, #104]	; (8001168 <MX_USART1_UART_Init+0x90>)
 80010fe:	220c      	movs	r2, #12
 8001100:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001102:	4b19      	ldr	r3, [pc, #100]	; (8001168 <MX_USART1_UART_Init+0x90>)
 8001104:	2200      	movs	r2, #0
 8001106:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001108:	4b17      	ldr	r3, [pc, #92]	; (8001168 <MX_USART1_UART_Init+0x90>)
 800110a:	2200      	movs	r2, #0
 800110c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800110e:	4b16      	ldr	r3, [pc, #88]	; (8001168 <MX_USART1_UART_Init+0x90>)
 8001110:	2200      	movs	r2, #0
 8001112:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001114:	4b14      	ldr	r3, [pc, #80]	; (8001168 <MX_USART1_UART_Init+0x90>)
 8001116:	2200      	movs	r2, #0
 8001118:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800111a:	4b13      	ldr	r3, [pc, #76]	; (8001168 <MX_USART1_UART_Init+0x90>)
 800111c:	2200      	movs	r2, #0
 800111e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001120:	4811      	ldr	r0, [pc, #68]	; (8001168 <MX_USART1_UART_Init+0x90>)
 8001122:	f002 f90a 	bl	800333a <HAL_UART_Init>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800112c:	f000 f958 	bl	80013e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001130:	2100      	movs	r1, #0
 8001132:	480d      	ldr	r0, [pc, #52]	; (8001168 <MX_USART1_UART_Init+0x90>)
 8001134:	f002 fe3b 	bl	8003dae <HAL_UARTEx_SetTxFifoThreshold>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800113e:	f000 f94f 	bl	80013e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001142:	2100      	movs	r1, #0
 8001144:	4808      	ldr	r0, [pc, #32]	; (8001168 <MX_USART1_UART_Init+0x90>)
 8001146:	f002 fe70 	bl	8003e2a <HAL_UARTEx_SetRxFifoThreshold>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001150:	f000 f946 	bl	80013e0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001154:	4804      	ldr	r0, [pc, #16]	; (8001168 <MX_USART1_UART_Init+0x90>)
 8001156:	f002 fdf2 	bl	8003d3e <HAL_UARTEx_DisableFifoMode>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001160:	f000 f93e 	bl	80013e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001164:	bf00      	nop
 8001166:	bd80      	pop	{r7, pc}
 8001168:	200001f0 	.word	0x200001f0
 800116c:	40013800 	.word	0x40013800

08001170 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b086      	sub	sp, #24
 8001174:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001176:	1d3b      	adds	r3, r7, #4
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]
 8001180:	60da      	str	r2, [r3, #12]
 8001182:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001184:	2004      	movs	r0, #4
 8001186:	f7ff feb5 	bl	8000ef4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800118a:	2002      	movs	r0, #2
 800118c:	f7ff feb2 	bl	8000ef4 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8001190:	2200      	movs	r2, #0
 8001192:	2110      	movs	r1, #16
 8001194:	4809      	ldr	r0, [pc, #36]	; (80011bc <MX_GPIO_Init+0x4c>)
 8001196:	f000 fdb0 	bl	8001cfa <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800119a:	2310      	movs	r3, #16
 800119c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800119e:	2301      	movs	r3, #1
 80011a0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a2:	2300      	movs	r3, #0
 80011a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a6:	2300      	movs	r3, #0
 80011a8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011aa:	1d3b      	adds	r3, r7, #4
 80011ac:	4619      	mov	r1, r3
 80011ae:	4803      	ldr	r0, [pc, #12]	; (80011bc <MX_GPIO_Init+0x4c>)
 80011b0:	f000 fc2c 	bl	8001a0c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011b4:	bf00      	nop
 80011b6:	3718      	adds	r7, #24
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	48000400 	.word	0x48000400

080011c0 <Set_Pin_Output>:

/* USER CODE BEGIN 4 */
void Set_Pin_Output(GPIO_TypeDef*GPIOx, uint16_t GPIO_Pin)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b088      	sub	sp, #32
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	460b      	mov	r3, r1
 80011ca:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011cc:	f107 030c 	add.w	r3, r7, #12
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	605a      	str	r2, [r3, #4]
 80011d6:	609a      	str	r2, [r3, #8]
 80011d8:	60da      	str	r2, [r3, #12]
 80011da:	611a      	str	r2, [r3, #16]

	//Configure GPIO Pin PXx
	GPIO_InitStruct.Pin = GPIO_Pin;
 80011dc:	887b      	ldrh	r3, [r7, #2]
 80011de:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80011e0:	2311      	movs	r3, #17
 80011e2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e4:	2300      	movs	r3, #0
 80011e6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e8:	2300      	movs	r3, #0
 80011ea:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80011ec:	f107 030c 	add.w	r3, r7, #12
 80011f0:	4619      	mov	r1, r3
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	f000 fc0a 	bl	8001a0c <HAL_GPIO_Init>
}
 80011f8:	bf00      	nop
 80011fa:	3720      	adds	r7, #32
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}

08001200 <Set_Pin_Input>:

void Set_Pin_Input(GPIO_TypeDef*GPIOx, uint16_t GPIO_Pin)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b088      	sub	sp, #32
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	460b      	mov	r3, r1
 800120a:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800120c:	f107 030c 	add.w	r3, r7, #12
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	605a      	str	r2, [r3, #4]
 8001216:	609a      	str	r2, [r3, #8]
 8001218:	60da      	str	r2, [r3, #12]
 800121a:	611a      	str	r2, [r3, #16]

	//Configure GPIO Pin PXx
	GPIO_InitStruct.Pin = GPIO_Pin;
 800121c:	887b      	ldrh	r3, [r7, #2]
 800121e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001220:	2300      	movs	r3, #0
 8001222:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001224:	2300      	movs	r3, #0
 8001226:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001228:	f107 030c 	add.w	r3, r7, #12
 800122c:	4619      	mov	r1, r3
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f000 fbec 	bl	8001a0c <HAL_GPIO_Init>
}
 8001234:	bf00      	nop
 8001236:	3720      	adds	r7, #32
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}

0800123c <delay>:

void delay(uint32_t us)
{
 800123c:	b480      	push	{r7}
 800123e:	b085      	sub	sp, #20
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
	for(int i= 0;i < us;i++)
 8001244:	2300      	movs	r3, #0
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	e00b      	b.n	8001262 <delay+0x26>
	{
		for(int j=0;j<5;j++)
 800124a:	2300      	movs	r3, #0
 800124c:	60bb      	str	r3, [r7, #8]
 800124e:	e002      	b.n	8001256 <delay+0x1a>
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	3301      	adds	r3, #1
 8001254:	60bb      	str	r3, [r7, #8]
 8001256:	68bb      	ldr	r3, [r7, #8]
 8001258:	2b04      	cmp	r3, #4
 800125a:	ddf9      	ble.n	8001250 <delay+0x14>
	for(int i= 0;i < us;i++)
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	3301      	adds	r3, #1
 8001260:	60fb      	str	r3, [r7, #12]
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	687a      	ldr	r2, [r7, #4]
 8001266:	429a      	cmp	r2, r3
 8001268:	d8ef      	bhi.n	800124a <delay+0xe>
		{
			;
		}
	}
}
 800126a:	bf00      	nop
 800126c:	bf00      	nop
 800126e:	3714      	adds	r7, #20
 8001270:	46bd      	mov	sp, r7
 8001272:	bc80      	pop	{r7}
 8001274:	4770      	bx	lr
	...

08001278 <DS18B20_Start>:

uint8_t DS18B20_Start(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 800127e:	2300      	movs	r3, #0
 8001280:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);		//set pin as o/p
 8001282:	2110      	movs	r1, #16
 8001284:	4813      	ldr	r0, [pc, #76]	; (80012d4 <DS18B20_Start+0x5c>)
 8001286:	f7ff ff9b 	bl	80011c0 <Set_Pin_Output>
	HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, 0);		//pin pulled to low
 800128a:	2200      	movs	r2, #0
 800128c:	2110      	movs	r1, #16
 800128e:	4811      	ldr	r0, [pc, #68]	; (80012d4 <DS18B20_Start+0x5c>)
 8001290:	f000 fd33 	bl	8001cfa <HAL_GPIO_WritePin>
	delay(480);		//acc to datasheet
 8001294:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8001298:	f7ff ffd0 	bl	800123c <delay>

	Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);		//set pin as i/p
 800129c:	2110      	movs	r1, #16
 800129e:	480d      	ldr	r0, [pc, #52]	; (80012d4 <DS18B20_Start+0x5c>)
 80012a0:	f7ff ffae 	bl	8001200 <Set_Pin_Input>
	delay(80);
 80012a4:	2050      	movs	r0, #80	; 0x50
 80012a6:	f7ff ffc9 	bl	800123c <delay>

	if(!(HAL_GPIO_ReadPin(DS18B20_PORT, DS18B20_PIN)))
 80012aa:	2110      	movs	r1, #16
 80012ac:	4809      	ldr	r0, [pc, #36]	; (80012d4 <DS18B20_Start+0x5c>)
 80012ae:	f000 fd0d 	bl	8001ccc <HAL_GPIO_ReadPin>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d102      	bne.n	80012be <DS18B20_Start+0x46>
		Response = 1;		//pin is low==presence pulse detected
 80012b8:	2301      	movs	r3, #1
 80012ba:	71fb      	strb	r3, [r7, #7]
 80012bc:	e001      	b.n	80012c2 <DS18B20_Start+0x4a>
	else
		Response =-1;
 80012be:	23ff      	movs	r3, #255	; 0xff
 80012c0:	71fb      	strb	r3, [r7, #7]

	delay(400);		//480us total
 80012c2:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80012c6:	f7ff ffb9 	bl	800123c <delay>

	return Response;
 80012ca:	79fb      	ldrb	r3, [r7, #7]
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3708      	adds	r7, #8
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	48000400 	.word	0x48000400

080012d8 <DS18B20_Write>:

void DS18B20_Write(uint8_t data)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	4603      	mov	r3, r0
 80012e0:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);		//set pin as o/p
 80012e2:	2110      	movs	r1, #16
 80012e4:	481e      	ldr	r0, [pc, #120]	; (8001360 <DS18B20_Write+0x88>)
 80012e6:	f7ff ff6b 	bl	80011c0 <Set_Pin_Output>
	for(int i=0;i<8;i++)
 80012ea:	2300      	movs	r3, #0
 80012ec:	60fb      	str	r3, [r7, #12]
 80012ee:	e02e      	b.n	800134e <DS18B20_Write+0x76>
	{
		if((data&(1<<i))!=0)		//if bit high
 80012f0:	79fa      	ldrb	r2, [r7, #7]
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	fa42 f303 	asr.w	r3, r2, r3
 80012f8:	f003 0301 	and.w	r3, r3, #1
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d013      	beq.n	8001328 <DS18B20_Write+0x50>
		{
			//write 1
			Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);		//set pin as o/p
 8001300:	2110      	movs	r1, #16
 8001302:	4817      	ldr	r0, [pc, #92]	; (8001360 <DS18B20_Write+0x88>)
 8001304:	f7ff ff5c 	bl	80011c0 <Set_Pin_Output>
			HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, 0);		//pull pin low
 8001308:	2200      	movs	r2, #0
 800130a:	2110      	movs	r1, #16
 800130c:	4814      	ldr	r0, [pc, #80]	; (8001360 <DS18B20_Write+0x88>)
 800130e:	f000 fcf4 	bl	8001cfa <HAL_GPIO_WritePin>
			delay(1);
 8001312:	2001      	movs	r0, #1
 8001314:	f7ff ff92 	bl	800123c <delay>

			Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);		//set pin as i/p
 8001318:	2110      	movs	r1, #16
 800131a:	4811      	ldr	r0, [pc, #68]	; (8001360 <DS18B20_Write+0x88>)
 800131c:	f7ff ff70 	bl	8001200 <Set_Pin_Input>
			delay(50);		//wait for 60 us
 8001320:	2032      	movs	r0, #50	; 0x32
 8001322:	f7ff ff8b 	bl	800123c <delay>
 8001326:	e00f      	b.n	8001348 <DS18B20_Write+0x70>
		}
		else		//if bit low
		{
			//write 0
			Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);		//set pin as i/p
 8001328:	2110      	movs	r1, #16
 800132a:	480d      	ldr	r0, [pc, #52]	; (8001360 <DS18B20_Write+0x88>)
 800132c:	f7ff ff48 	bl	80011c0 <Set_Pin_Output>
			HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, 0);		//pull pin low
 8001330:	2200      	movs	r2, #0
 8001332:	2110      	movs	r1, #16
 8001334:	480a      	ldr	r0, [pc, #40]	; (8001360 <DS18B20_Write+0x88>)
 8001336:	f000 fce0 	bl	8001cfa <HAL_GPIO_WritePin>
			delay(50);		//wait for 60 us
 800133a:	2032      	movs	r0, #50	; 0x32
 800133c:	f7ff ff7e 	bl	800123c <delay>

			Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);		//set pin as i/p
 8001340:	2110      	movs	r1, #16
 8001342:	4807      	ldr	r0, [pc, #28]	; (8001360 <DS18B20_Write+0x88>)
 8001344:	f7ff ff5c 	bl	8001200 <Set_Pin_Input>
	for(int i=0;i<8;i++)
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	3301      	adds	r3, #1
 800134c:	60fb      	str	r3, [r7, #12]
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	2b07      	cmp	r3, #7
 8001352:	ddcd      	ble.n	80012f0 <DS18B20_Write+0x18>
		}
	}
}
 8001354:	bf00      	nop
 8001356:	bf00      	nop
 8001358:	3710      	adds	r7, #16
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	48000400 	.word	0x48000400

08001364 <DS18B20_Read>:

uint8_t DS18B20_Read(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
	uint8_t Value = 0;
 800136a:	2300      	movs	r3, #0
 800136c:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);		//set pin as i/p
 800136e:	2110      	movs	r1, #16
 8001370:	481a      	ldr	r0, [pc, #104]	; (80013dc <DS18B20_Read+0x78>)
 8001372:	f7ff ff45 	bl	8001200 <Set_Pin_Input>
	for(int i=0;i<8;i++)
 8001376:	2300      	movs	r3, #0
 8001378:	603b      	str	r3, [r7, #0]
 800137a:	e026      	b.n	80013ca <DS18B20_Read+0x66>
	{
		Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);		//set pin as o/p
 800137c:	2110      	movs	r1, #16
 800137e:	4817      	ldr	r0, [pc, #92]	; (80013dc <DS18B20_Read+0x78>)
 8001380:	f7ff ff1e 	bl	80011c0 <Set_Pin_Output>
		HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, 0);		//pull data pin low
 8001384:	2200      	movs	r2, #0
 8001386:	2110      	movs	r1, #16
 8001388:	4814      	ldr	r0, [pc, #80]	; (80013dc <DS18B20_Read+0x78>)
 800138a:	f000 fcb6 	bl	8001cfa <HAL_GPIO_WritePin>
		delay(2);		//2us delay
 800138e:	2002      	movs	r0, #2
 8001390:	f7ff ff54 	bl	800123c <delay>

		Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);		//set pin as i/p
 8001394:	2110      	movs	r1, #16
 8001396:	4811      	ldr	r0, [pc, #68]	; (80013dc <DS18B20_Read+0x78>)
 8001398:	f7ff ff32 	bl	8001200 <Set_Pin_Input>
		if(HAL_GPIO_ReadPin(DS18B20_PORT, DS18B20_PIN))		//if pin high
 800139c:	2110      	movs	r1, #16
 800139e:	480f      	ldr	r0, [pc, #60]	; (80013dc <DS18B20_Read+0x78>)
 80013a0:	f000 fc94 	bl	8001ccc <HAL_GPIO_ReadPin>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d009      	beq.n	80013be <DS18B20_Read+0x5a>
		{
			Value |= 1<<i;		//read =1
 80013aa:	2201      	movs	r2, #1
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	fa02 f303 	lsl.w	r3, r2, r3
 80013b2:	b25a      	sxtb	r2, r3
 80013b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	b25b      	sxtb	r3, r3
 80013bc:	71fb      	strb	r3, [r7, #7]
		}
		delay(60);		//wait 60us
 80013be:	203c      	movs	r0, #60	; 0x3c
 80013c0:	f7ff ff3c 	bl	800123c <delay>
	for(int i=0;i<8;i++)
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	3301      	adds	r3, #1
 80013c8:	603b      	str	r3, [r7, #0]
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	2b07      	cmp	r3, #7
 80013ce:	ddd5      	ble.n	800137c <DS18B20_Read+0x18>
	}
	return Value;
 80013d0:	79fb      	ldrb	r3, [r7, #7]
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	48000400 	.word	0x48000400

080013e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013e4:	b672      	cpsid	i
}
 80013e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013e8:	e7fe      	b.n	80013e8 <Error_Handler+0x8>

080013ea <LL_AHB2_GRP1_EnableClock>:
{
 80013ea:	b480      	push	{r7}
 80013ec:	b085      	sub	sp, #20
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80013f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80013f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	4313      	orrs	r3, r2
 8001400:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001402:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001406:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	4013      	ands	r3, r2
 800140c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800140e:	68fb      	ldr	r3, [r7, #12]
}
 8001410:	bf00      	nop
 8001412:	3714      	adds	r7, #20
 8001414:	46bd      	mov	sp, r7
 8001416:	bc80      	pop	{r7}
 8001418:	4770      	bx	lr

0800141a <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800141a:	b480      	push	{r7}
 800141c:	b085      	sub	sp, #20
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001422:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001426:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001428:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	4313      	orrs	r3, r2
 8001430:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001432:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001436:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	4013      	ands	r3, r2
 800143c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800143e:	68fb      	ldr	r3, [r7, #12]
}
 8001440:	bf00      	nop
 8001442:	3714      	adds	r7, #20
 8001444:	46bd      	mov	sp, r7
 8001446:	bc80      	pop	{r7}
 8001448:	4770      	bx	lr

0800144a <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800144a:	b480      	push	{r7}
 800144c:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800144e:	bf00      	nop
 8001450:	46bd      	mov	sp, r7
 8001452:	bc80      	pop	{r7}
 8001454:	4770      	bx	lr
	...

08001458 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b096      	sub	sp, #88	; 0x58
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001460:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	609a      	str	r2, [r3, #8]
 800146c:	60da      	str	r2, [r3, #12]
 800146e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001470:	f107 030c 	add.w	r3, r7, #12
 8001474:	2238      	movs	r2, #56	; 0x38
 8001476:	2100      	movs	r1, #0
 8001478:	4618      	mov	r0, r3
 800147a:	f003 face 	bl	8004a1a <memset>
  if(huart->Instance==USART1)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a16      	ldr	r2, [pc, #88]	; (80014dc <HAL_UART_MspInit+0x84>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d125      	bne.n	80014d4 <HAL_UART_MspInit+0x7c>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001488:	2301      	movs	r3, #1
 800148a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800148c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001490:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001492:	f107 030c 	add.w	r3, r7, #12
 8001496:	4618      	mov	r0, r3
 8001498:	f001 fe14 	bl	80030c4 <HAL_RCCEx_PeriphCLKConfig>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80014a2:	f7ff ff9d 	bl	80013e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014a6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80014aa:	f7ff ffb6 	bl	800141a <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ae:	2002      	movs	r0, #2
 80014b0:	f7ff ff9b 	bl	80013ea <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 80014b4:	23c0      	movs	r3, #192	; 0xc0
 80014b6:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b8:	2302      	movs	r3, #2
 80014ba:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014bc:	2300      	movs	r3, #0
 80014be:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c0:	2300      	movs	r3, #0
 80014c2:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80014c4:	2307      	movs	r3, #7
 80014c6:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014c8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80014cc:	4619      	mov	r1, r3
 80014ce:	4804      	ldr	r0, [pc, #16]	; (80014e0 <HAL_UART_MspInit+0x88>)
 80014d0:	f000 fa9c 	bl	8001a0c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80014d4:	bf00      	nop
 80014d6:	3758      	adds	r7, #88	; 0x58
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	40013800 	.word	0x40013800
 80014e0:	48000400 	.word	0x48000400

080014e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014e8:	e7fe      	b.n	80014e8 <NMI_Handler+0x4>

080014ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014ea:	b480      	push	{r7}
 80014ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014ee:	e7fe      	b.n	80014ee <HardFault_Handler+0x4>

080014f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014f4:	e7fe      	b.n	80014f4 <MemManage_Handler+0x4>

080014f6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014f6:	b480      	push	{r7}
 80014f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014fa:	e7fe      	b.n	80014fa <BusFault_Handler+0x4>

080014fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001500:	e7fe      	b.n	8001500 <UsageFault_Handler+0x4>

08001502 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001502:	b480      	push	{r7}
 8001504:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001506:	bf00      	nop
 8001508:	46bd      	mov	sp, r7
 800150a:	bc80      	pop	{r7}
 800150c:	4770      	bx	lr

0800150e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800150e:	b480      	push	{r7}
 8001510:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001512:	bf00      	nop
 8001514:	46bd      	mov	sp, r7
 8001516:	bc80      	pop	{r7}
 8001518:	4770      	bx	lr

0800151a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800151a:	b480      	push	{r7}
 800151c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800151e:	bf00      	nop
 8001520:	46bd      	mov	sp, r7
 8001522:	bc80      	pop	{r7}
 8001524:	4770      	bx	lr

08001526 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001526:	b580      	push	{r7, lr}
 8001528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800152a:	f000 f94d 	bl	80017c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800152e:	bf00      	nop
 8001530:	bd80      	pop	{r7, pc}

08001532 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001532:	b480      	push	{r7}
 8001534:	af00      	add	r7, sp, #0
  return 1;
 8001536:	2301      	movs	r3, #1
}
 8001538:	4618      	mov	r0, r3
 800153a:	46bd      	mov	sp, r7
 800153c:	bc80      	pop	{r7}
 800153e:	4770      	bx	lr

08001540 <_kill>:

int _kill(int pid, int sig)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800154a:	f003 fab9 	bl	8004ac0 <__errno>
 800154e:	4603      	mov	r3, r0
 8001550:	2216      	movs	r2, #22
 8001552:	601a      	str	r2, [r3, #0]
  return -1;
 8001554:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001558:	4618      	mov	r0, r3
 800155a:	3708      	adds	r7, #8
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}

08001560 <_exit>:

void _exit (int status)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001568:	f04f 31ff 	mov.w	r1, #4294967295
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f7ff ffe7 	bl	8001540 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001572:	e7fe      	b.n	8001572 <_exit+0x12>

08001574 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b086      	sub	sp, #24
 8001578:	af00      	add	r7, sp, #0
 800157a:	60f8      	str	r0, [r7, #12]
 800157c:	60b9      	str	r1, [r7, #8]
 800157e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001580:	2300      	movs	r3, #0
 8001582:	617b      	str	r3, [r7, #20]
 8001584:	e00a      	b.n	800159c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001586:	f3af 8000 	nop.w
 800158a:	4601      	mov	r1, r0
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	1c5a      	adds	r2, r3, #1
 8001590:	60ba      	str	r2, [r7, #8]
 8001592:	b2ca      	uxtb	r2, r1
 8001594:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	3301      	adds	r3, #1
 800159a:	617b      	str	r3, [r7, #20]
 800159c:	697a      	ldr	r2, [r7, #20]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	429a      	cmp	r2, r3
 80015a2:	dbf0      	blt.n	8001586 <_read+0x12>
  }

  return len;
 80015a4:	687b      	ldr	r3, [r7, #4]
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3718      	adds	r7, #24
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}

080015ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015ae:	b580      	push	{r7, lr}
 80015b0:	b086      	sub	sp, #24
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	60f8      	str	r0, [r7, #12]
 80015b6:	60b9      	str	r1, [r7, #8]
 80015b8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ba:	2300      	movs	r3, #0
 80015bc:	617b      	str	r3, [r7, #20]
 80015be:	e009      	b.n	80015d4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	1c5a      	adds	r2, r3, #1
 80015c4:	60ba      	str	r2, [r7, #8]
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	4618      	mov	r0, r3
 80015ca:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	3301      	adds	r3, #1
 80015d2:	617b      	str	r3, [r7, #20]
 80015d4:	697a      	ldr	r2, [r7, #20]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	429a      	cmp	r2, r3
 80015da:	dbf1      	blt.n	80015c0 <_write+0x12>
  }
  return len;
 80015dc:	687b      	ldr	r3, [r7, #4]
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3718      	adds	r7, #24
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}

080015e6 <_close>:

int _close(int file)
{
 80015e6:	b480      	push	{r7}
 80015e8:	b083      	sub	sp, #12
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bc80      	pop	{r7}
 80015fa:	4770      	bx	lr

080015fc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800160c:	605a      	str	r2, [r3, #4]
  return 0;
 800160e:	2300      	movs	r3, #0
}
 8001610:	4618      	mov	r0, r3
 8001612:	370c      	adds	r7, #12
 8001614:	46bd      	mov	sp, r7
 8001616:	bc80      	pop	{r7}
 8001618:	4770      	bx	lr

0800161a <_isatty>:

int _isatty(int file)
{
 800161a:	b480      	push	{r7}
 800161c:	b083      	sub	sp, #12
 800161e:	af00      	add	r7, sp, #0
 8001620:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001622:	2301      	movs	r3, #1
}
 8001624:	4618      	mov	r0, r3
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	bc80      	pop	{r7}
 800162c:	4770      	bx	lr

0800162e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800162e:	b480      	push	{r7}
 8001630:	b085      	sub	sp, #20
 8001632:	af00      	add	r7, sp, #0
 8001634:	60f8      	str	r0, [r7, #12]
 8001636:	60b9      	str	r1, [r7, #8]
 8001638:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800163a:	2300      	movs	r3, #0
}
 800163c:	4618      	mov	r0, r3
 800163e:	3714      	adds	r7, #20
 8001640:	46bd      	mov	sp, r7
 8001642:	bc80      	pop	{r7}
 8001644:	4770      	bx	lr
	...

08001648 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b086      	sub	sp, #24
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001650:	4a14      	ldr	r2, [pc, #80]	; (80016a4 <_sbrk+0x5c>)
 8001652:	4b15      	ldr	r3, [pc, #84]	; (80016a8 <_sbrk+0x60>)
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800165c:	4b13      	ldr	r3, [pc, #76]	; (80016ac <_sbrk+0x64>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d102      	bne.n	800166a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001664:	4b11      	ldr	r3, [pc, #68]	; (80016ac <_sbrk+0x64>)
 8001666:	4a12      	ldr	r2, [pc, #72]	; (80016b0 <_sbrk+0x68>)
 8001668:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800166a:	4b10      	ldr	r3, [pc, #64]	; (80016ac <_sbrk+0x64>)
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4413      	add	r3, r2
 8001672:	693a      	ldr	r2, [r7, #16]
 8001674:	429a      	cmp	r2, r3
 8001676:	d207      	bcs.n	8001688 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001678:	f003 fa22 	bl	8004ac0 <__errno>
 800167c:	4603      	mov	r3, r0
 800167e:	220c      	movs	r2, #12
 8001680:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001682:	f04f 33ff 	mov.w	r3, #4294967295
 8001686:	e009      	b.n	800169c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001688:	4b08      	ldr	r3, [pc, #32]	; (80016ac <_sbrk+0x64>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800168e:	4b07      	ldr	r3, [pc, #28]	; (80016ac <_sbrk+0x64>)
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4413      	add	r3, r2
 8001696:	4a05      	ldr	r2, [pc, #20]	; (80016ac <_sbrk+0x64>)
 8001698:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800169a:	68fb      	ldr	r3, [r7, #12]
}
 800169c:	4618      	mov	r0, r3
 800169e:	3718      	adds	r7, #24
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	20010000 	.word	0x20010000
 80016a8:	00000400 	.word	0x00000400
 80016ac:	20000284 	.word	0x20000284
 80016b0:	200003d8 	.word	0x200003d8

080016b4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 80016b8:	bf00      	nop
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bc80      	pop	{r7}
 80016be:	4770      	bx	lr

080016c0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80016c0:	480d      	ldr	r0, [pc, #52]	; (80016f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80016c2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80016c4:	f7ff fff6 	bl	80016b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016c8:	480c      	ldr	r0, [pc, #48]	; (80016fc <LoopForever+0x6>)
  ldr r1, =_edata
 80016ca:	490d      	ldr	r1, [pc, #52]	; (8001700 <LoopForever+0xa>)
  ldr r2, =_sidata
 80016cc:	4a0d      	ldr	r2, [pc, #52]	; (8001704 <LoopForever+0xe>)
  movs r3, #0
 80016ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016d0:	e002      	b.n	80016d8 <LoopCopyDataInit>

080016d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016d6:	3304      	adds	r3, #4

080016d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016dc:	d3f9      	bcc.n	80016d2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016de:	4a0a      	ldr	r2, [pc, #40]	; (8001708 <LoopForever+0x12>)
  ldr r4, =_ebss
 80016e0:	4c0a      	ldr	r4, [pc, #40]	; (800170c <LoopForever+0x16>)
  movs r3, #0
 80016e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016e4:	e001      	b.n	80016ea <LoopFillZerobss>

080016e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016e8:	3204      	adds	r2, #4

080016ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016ec:	d3fb      	bcc.n	80016e6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80016ee:	f003 f9ed 	bl	8004acc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80016f2:	f7ff fc17 	bl	8000f24 <main>

080016f6 <LoopForever>:

LoopForever:
    b LoopForever
 80016f6:	e7fe      	b.n	80016f6 <LoopForever>
  ldr   r0, =_estack
 80016f8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80016fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001700:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001704:	08007064 	.word	0x08007064
  ldr r2, =_sbss
 8001708:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 800170c:	200003d8 	.word	0x200003d8

08001710 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001710:	e7fe      	b.n	8001710 <ADC_IRQHandler>
	...

08001714 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800171a:	2300      	movs	r3, #0
 800171c:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800171e:	2003      	movs	r0, #3
 8001720:	f000 f942 	bl	80019a8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001724:	f001 faf0 	bl	8002d08 <HAL_RCC_GetHCLKFreq>
 8001728:	4603      	mov	r3, r0
 800172a:	4a09      	ldr	r2, [pc, #36]	; (8001750 <HAL_Init+0x3c>)
 800172c:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800172e:	200f      	movs	r0, #15
 8001730:	f000 f810 	bl	8001754 <HAL_InitTick>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d002      	beq.n	8001740 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	71fb      	strb	r3, [r7, #7]
 800173e:	e001      	b.n	8001744 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001740:	f7ff fe83 	bl	800144a <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001744:	79fb      	ldrb	r3, [r7, #7]
}
 8001746:	4618      	mov	r0, r3
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	20000000 	.word	0x20000000

08001754 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800175c:	2300      	movs	r3, #0
 800175e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001760:	4b17      	ldr	r3, [pc, #92]	; (80017c0 <HAL_InitTick+0x6c>)
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d024      	beq.n	80017b2 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001768:	f001 face 	bl	8002d08 <HAL_RCC_GetHCLKFreq>
 800176c:	4602      	mov	r2, r0
 800176e:	4b14      	ldr	r3, [pc, #80]	; (80017c0 <HAL_InitTick+0x6c>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	4619      	mov	r1, r3
 8001774:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001778:	fbb3 f3f1 	udiv	r3, r3, r1
 800177c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001780:	4618      	mov	r0, r3
 8001782:	f000 f936 	bl	80019f2 <HAL_SYSTICK_Config>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d10f      	bne.n	80017ac <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2b0f      	cmp	r3, #15
 8001790:	d809      	bhi.n	80017a6 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001792:	2200      	movs	r2, #0
 8001794:	6879      	ldr	r1, [r7, #4]
 8001796:	f04f 30ff 	mov.w	r0, #4294967295
 800179a:	f000 f910 	bl	80019be <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800179e:	4a09      	ldr	r2, [pc, #36]	; (80017c4 <HAL_InitTick+0x70>)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6013      	str	r3, [r2, #0]
 80017a4:	e007      	b.n	80017b6 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	73fb      	strb	r3, [r7, #15]
 80017aa:	e004      	b.n	80017b6 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	73fb      	strb	r3, [r7, #15]
 80017b0:	e001      	b.n	80017b6 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80017b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3710      	adds	r7, #16
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	20000008 	.word	0x20000008
 80017c4:	20000004 	.word	0x20000004

080017c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017cc:	4b05      	ldr	r3, [pc, #20]	; (80017e4 <HAL_IncTick+0x1c>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	461a      	mov	r2, r3
 80017d2:	4b05      	ldr	r3, [pc, #20]	; (80017e8 <HAL_IncTick+0x20>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4413      	add	r3, r2
 80017d8:	4a03      	ldr	r2, [pc, #12]	; (80017e8 <HAL_IncTick+0x20>)
 80017da:	6013      	str	r3, [r2, #0]
}
 80017dc:	bf00      	nop
 80017de:	46bd      	mov	sp, r7
 80017e0:	bc80      	pop	{r7}
 80017e2:	4770      	bx	lr
 80017e4:	20000008 	.word	0x20000008
 80017e8:	20000288 	.word	0x20000288

080017ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  return uwTick;
 80017f0:	4b02      	ldr	r3, [pc, #8]	; (80017fc <HAL_GetTick+0x10>)
 80017f2:	681b      	ldr	r3, [r3, #0]
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bc80      	pop	{r7}
 80017fa:	4770      	bx	lr
 80017fc:	20000288 	.word	0x20000288

08001800 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001808:	f7ff fff0 	bl	80017ec <HAL_GetTick>
 800180c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001818:	d005      	beq.n	8001826 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800181a:	4b0a      	ldr	r3, [pc, #40]	; (8001844 <HAL_Delay+0x44>)
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	461a      	mov	r2, r3
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	4413      	add	r3, r2
 8001824:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001826:	bf00      	nop
 8001828:	f7ff ffe0 	bl	80017ec <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	68fa      	ldr	r2, [r7, #12]
 8001834:	429a      	cmp	r2, r3
 8001836:	d8f7      	bhi.n	8001828 <HAL_Delay+0x28>
  {
  }
}
 8001838:	bf00      	nop
 800183a:	bf00      	nop
 800183c:	3710      	adds	r7, #16
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	20000008 	.word	0x20000008

08001848 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001848:	b480      	push	{r7}
 800184a:	b085      	sub	sp, #20
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	f003 0307 	and.w	r3, r3, #7
 8001856:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001858:	4b0c      	ldr	r3, [pc, #48]	; (800188c <__NVIC_SetPriorityGrouping+0x44>)
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800185e:	68ba      	ldr	r2, [r7, #8]
 8001860:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001864:	4013      	ands	r3, r2
 8001866:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001870:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001874:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001878:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800187a:	4a04      	ldr	r2, [pc, #16]	; (800188c <__NVIC_SetPriorityGrouping+0x44>)
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	60d3      	str	r3, [r2, #12]
}
 8001880:	bf00      	nop
 8001882:	3714      	adds	r7, #20
 8001884:	46bd      	mov	sp, r7
 8001886:	bc80      	pop	{r7}
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	e000ed00 	.word	0xe000ed00

08001890 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001894:	4b04      	ldr	r3, [pc, #16]	; (80018a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	0a1b      	lsrs	r3, r3, #8
 800189a:	f003 0307 	and.w	r3, r3, #7
}
 800189e:	4618      	mov	r0, r3
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bc80      	pop	{r7}
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	e000ed00 	.word	0xe000ed00

080018ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	4603      	mov	r3, r0
 80018b4:	6039      	str	r1, [r7, #0]
 80018b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	db0a      	blt.n	80018d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	b2da      	uxtb	r2, r3
 80018c4:	490c      	ldr	r1, [pc, #48]	; (80018f8 <__NVIC_SetPriority+0x4c>)
 80018c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ca:	0112      	lsls	r2, r2, #4
 80018cc:	b2d2      	uxtb	r2, r2
 80018ce:	440b      	add	r3, r1
 80018d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018d4:	e00a      	b.n	80018ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	b2da      	uxtb	r2, r3
 80018da:	4908      	ldr	r1, [pc, #32]	; (80018fc <__NVIC_SetPriority+0x50>)
 80018dc:	79fb      	ldrb	r3, [r7, #7]
 80018de:	f003 030f 	and.w	r3, r3, #15
 80018e2:	3b04      	subs	r3, #4
 80018e4:	0112      	lsls	r2, r2, #4
 80018e6:	b2d2      	uxtb	r2, r2
 80018e8:	440b      	add	r3, r1
 80018ea:	761a      	strb	r2, [r3, #24]
}
 80018ec:	bf00      	nop
 80018ee:	370c      	adds	r7, #12
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bc80      	pop	{r7}
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	e000e100 	.word	0xe000e100
 80018fc:	e000ed00 	.word	0xe000ed00

08001900 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001900:	b480      	push	{r7}
 8001902:	b089      	sub	sp, #36	; 0x24
 8001904:	af00      	add	r7, sp, #0
 8001906:	60f8      	str	r0, [r7, #12]
 8001908:	60b9      	str	r1, [r7, #8]
 800190a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	f003 0307 	and.w	r3, r3, #7
 8001912:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	f1c3 0307 	rsb	r3, r3, #7
 800191a:	2b04      	cmp	r3, #4
 800191c:	bf28      	it	cs
 800191e:	2304      	movcs	r3, #4
 8001920:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	3304      	adds	r3, #4
 8001926:	2b06      	cmp	r3, #6
 8001928:	d902      	bls.n	8001930 <NVIC_EncodePriority+0x30>
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	3b03      	subs	r3, #3
 800192e:	e000      	b.n	8001932 <NVIC_EncodePriority+0x32>
 8001930:	2300      	movs	r3, #0
 8001932:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001934:	f04f 32ff 	mov.w	r2, #4294967295
 8001938:	69bb      	ldr	r3, [r7, #24]
 800193a:	fa02 f303 	lsl.w	r3, r2, r3
 800193e:	43da      	mvns	r2, r3
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	401a      	ands	r2, r3
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001948:	f04f 31ff 	mov.w	r1, #4294967295
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	fa01 f303 	lsl.w	r3, r1, r3
 8001952:	43d9      	mvns	r1, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001958:	4313      	orrs	r3, r2
         );
}
 800195a:	4618      	mov	r0, r3
 800195c:	3724      	adds	r7, #36	; 0x24
 800195e:	46bd      	mov	sp, r7
 8001960:	bc80      	pop	{r7}
 8001962:	4770      	bx	lr

08001964 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	3b01      	subs	r3, #1
 8001970:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001974:	d301      	bcc.n	800197a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001976:	2301      	movs	r3, #1
 8001978:	e00f      	b.n	800199a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800197a:	4a0a      	ldr	r2, [pc, #40]	; (80019a4 <SysTick_Config+0x40>)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	3b01      	subs	r3, #1
 8001980:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001982:	210f      	movs	r1, #15
 8001984:	f04f 30ff 	mov.w	r0, #4294967295
 8001988:	f7ff ff90 	bl	80018ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800198c:	4b05      	ldr	r3, [pc, #20]	; (80019a4 <SysTick_Config+0x40>)
 800198e:	2200      	movs	r2, #0
 8001990:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001992:	4b04      	ldr	r3, [pc, #16]	; (80019a4 <SysTick_Config+0x40>)
 8001994:	2207      	movs	r2, #7
 8001996:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001998:	2300      	movs	r3, #0
}
 800199a:	4618      	mov	r0, r3
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	e000e010 	.word	0xe000e010

080019a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f7ff ff49 	bl	8001848 <__NVIC_SetPriorityGrouping>
}
 80019b6:	bf00      	nop
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}

080019be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019be:	b580      	push	{r7, lr}
 80019c0:	b086      	sub	sp, #24
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	4603      	mov	r3, r0
 80019c6:	60b9      	str	r1, [r7, #8]
 80019c8:	607a      	str	r2, [r7, #4]
 80019ca:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80019cc:	f7ff ff60 	bl	8001890 <__NVIC_GetPriorityGrouping>
 80019d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	68b9      	ldr	r1, [r7, #8]
 80019d6:	6978      	ldr	r0, [r7, #20]
 80019d8:	f7ff ff92 	bl	8001900 <NVIC_EncodePriority>
 80019dc:	4602      	mov	r2, r0
 80019de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019e2:	4611      	mov	r1, r2
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7ff ff61 	bl	80018ac <__NVIC_SetPriority>
}
 80019ea:	bf00      	nop
 80019ec:	3718      	adds	r7, #24
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}

080019f2 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019f2:	b580      	push	{r7, lr}
 80019f4:	b082      	sub	sp, #8
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f7ff ffb2 	bl	8001964 <SysTick_Config>
 8001a00:	4603      	mov	r3, r0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
	...

08001a0c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b087      	sub	sp, #28
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a16:	2300      	movs	r3, #0
 8001a18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a1a:	e140      	b.n	8001c9e <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	2101      	movs	r1, #1
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	fa01 f303 	lsl.w	r3, r1, r3
 8001a28:	4013      	ands	r3, r2
 8001a2a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	f000 8132 	beq.w	8001c98 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f003 0303 	and.w	r3, r3, #3
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d005      	beq.n	8001a4c <HAL_GPIO_Init+0x40>
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f003 0303 	and.w	r3, r3, #3
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d130      	bne.n	8001aae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	005b      	lsls	r3, r3, #1
 8001a56:	2203      	movs	r2, #3
 8001a58:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5c:	43db      	mvns	r3, r3
 8001a5e:	693a      	ldr	r2, [r7, #16]
 8001a60:	4013      	ands	r3, r2
 8001a62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	68da      	ldr	r2, [r3, #12]
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	005b      	lsls	r3, r3, #1
 8001a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a70:	693a      	ldr	r2, [r7, #16]
 8001a72:	4313      	orrs	r3, r2
 8001a74:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	693a      	ldr	r2, [r7, #16]
 8001a7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a82:	2201      	movs	r2, #1
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8a:	43db      	mvns	r3, r3
 8001a8c:	693a      	ldr	r2, [r7, #16]
 8001a8e:	4013      	ands	r3, r2
 8001a90:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	091b      	lsrs	r3, r3, #4
 8001a98:	f003 0201 	and.w	r2, r3, #1
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa2:	693a      	ldr	r2, [r7, #16]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	693a      	ldr	r2, [r7, #16]
 8001aac:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f003 0303 	and.w	r3, r3, #3
 8001ab6:	2b03      	cmp	r3, #3
 8001ab8:	d017      	beq.n	8001aea <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	68db      	ldr	r3, [r3, #12]
 8001abe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	005b      	lsls	r3, r3, #1
 8001ac4:	2203      	movs	r2, #3
 8001ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aca:	43db      	mvns	r3, r3
 8001acc:	693a      	ldr	r2, [r7, #16]
 8001ace:	4013      	ands	r3, r2
 8001ad0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	689a      	ldr	r2, [r3, #8]
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	fa02 f303 	lsl.w	r3, r2, r3
 8001ade:	693a      	ldr	r2, [r7, #16]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	693a      	ldr	r2, [r7, #16]
 8001ae8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f003 0303 	and.w	r3, r3, #3
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d123      	bne.n	8001b3e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	08da      	lsrs	r2, r3, #3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	3208      	adds	r2, #8
 8001afe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b02:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	f003 0307 	and.w	r3, r3, #7
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	220f      	movs	r2, #15
 8001b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b12:	43db      	mvns	r3, r3
 8001b14:	693a      	ldr	r2, [r7, #16]
 8001b16:	4013      	ands	r3, r2
 8001b18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	691a      	ldr	r2, [r3, #16]
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	f003 0307 	and.w	r3, r3, #7
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2a:	693a      	ldr	r2, [r7, #16]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	08da      	lsrs	r2, r3, #3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	3208      	adds	r2, #8
 8001b38:	6939      	ldr	r1, [r7, #16]
 8001b3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	005b      	lsls	r3, r3, #1
 8001b48:	2203      	movs	r2, #3
 8001b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4e:	43db      	mvns	r3, r3
 8001b50:	693a      	ldr	r2, [r7, #16]
 8001b52:	4013      	ands	r3, r2
 8001b54:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	f003 0203 	and.w	r2, r3, #3
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	fa02 f303 	lsl.w	r3, r2, r3
 8001b66:	693a      	ldr	r2, [r7, #16]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	693a      	ldr	r2, [r7, #16]
 8001b70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	f000 808c 	beq.w	8001c98 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001b80:	4a4e      	ldr	r2, [pc, #312]	; (8001cbc <HAL_GPIO_Init+0x2b0>)
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	089b      	lsrs	r3, r3, #2
 8001b86:	3302      	adds	r3, #2
 8001b88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b8c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	f003 0303 	and.w	r3, r3, #3
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	2207      	movs	r2, #7
 8001b98:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9c:	43db      	mvns	r3, r3
 8001b9e:	693a      	ldr	r2, [r7, #16]
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001baa:	d00d      	beq.n	8001bc8 <HAL_GPIO_Init+0x1bc>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	4a44      	ldr	r2, [pc, #272]	; (8001cc0 <HAL_GPIO_Init+0x2b4>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d007      	beq.n	8001bc4 <HAL_GPIO_Init+0x1b8>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	4a43      	ldr	r2, [pc, #268]	; (8001cc4 <HAL_GPIO_Init+0x2b8>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d101      	bne.n	8001bc0 <HAL_GPIO_Init+0x1b4>
 8001bbc:	2302      	movs	r3, #2
 8001bbe:	e004      	b.n	8001bca <HAL_GPIO_Init+0x1be>
 8001bc0:	2307      	movs	r3, #7
 8001bc2:	e002      	b.n	8001bca <HAL_GPIO_Init+0x1be>
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e000      	b.n	8001bca <HAL_GPIO_Init+0x1be>
 8001bc8:	2300      	movs	r3, #0
 8001bca:	697a      	ldr	r2, [r7, #20]
 8001bcc:	f002 0203 	and.w	r2, r2, #3
 8001bd0:	0092      	lsls	r2, r2, #2
 8001bd2:	4093      	lsls	r3, r2
 8001bd4:	693a      	ldr	r2, [r7, #16]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001bda:	4938      	ldr	r1, [pc, #224]	; (8001cbc <HAL_GPIO_Init+0x2b0>)
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	089b      	lsrs	r3, r3, #2
 8001be0:	3302      	adds	r3, #2
 8001be2:	693a      	ldr	r2, [r7, #16]
 8001be4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001be8:	4b37      	ldr	r3, [pc, #220]	; (8001cc8 <HAL_GPIO_Init+0x2bc>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	43db      	mvns	r3, r3
 8001bf2:	693a      	ldr	r2, [r7, #16]
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d003      	beq.n	8001c0c <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8001c04:	693a      	ldr	r2, [r7, #16]
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c0c:	4a2e      	ldr	r2, [pc, #184]	; (8001cc8 <HAL_GPIO_Init+0x2bc>)
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001c12:	4b2d      	ldr	r3, [pc, #180]	; (8001cc8 <HAL_GPIO_Init+0x2bc>)
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	43db      	mvns	r3, r3
 8001c1c:	693a      	ldr	r2, [r7, #16]
 8001c1e:	4013      	ands	r3, r2
 8001c20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d003      	beq.n	8001c36 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8001c2e:	693a      	ldr	r2, [r7, #16]
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c36:	4a24      	ldr	r2, [pc, #144]	; (8001cc8 <HAL_GPIO_Init+0x2bc>)
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8001c3c:	4b22      	ldr	r3, [pc, #136]	; (8001cc8 <HAL_GPIO_Init+0x2bc>)
 8001c3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c42:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	43db      	mvns	r3, r3
 8001c48:	693a      	ldr	r2, [r7, #16]
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d003      	beq.n	8001c62 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8001c5a:	693a      	ldr	r2, [r7, #16]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8001c62:	4a19      	ldr	r2, [pc, #100]	; (8001cc8 <HAL_GPIO_Init+0x2bc>)
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8001c6a:	4b17      	ldr	r3, [pc, #92]	; (8001cc8 <HAL_GPIO_Init+0x2bc>)
 8001c6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c70:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	43db      	mvns	r3, r3
 8001c76:	693a      	ldr	r2, [r7, #16]
 8001c78:	4013      	ands	r3, r2
 8001c7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d003      	beq.n	8001c90 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001c88:	693a      	ldr	r2, [r7, #16]
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8001c90:	4a0d      	ldr	r2, [pc, #52]	; (8001cc8 <HAL_GPIO_Init+0x2bc>)
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	f47f aeb7 	bne.w	8001a1c <HAL_GPIO_Init+0x10>
  }
}
 8001cae:	bf00      	nop
 8001cb0:	bf00      	nop
 8001cb2:	371c      	adds	r7, #28
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bc80      	pop	{r7}
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	40010000 	.word	0x40010000
 8001cc0:	48000400 	.word	0x48000400
 8001cc4:	48000800 	.word	0x48000800
 8001cc8:	58000800 	.word	0x58000800

08001ccc <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b085      	sub	sp, #20
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	460b      	mov	r3, r1
 8001cd6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	691a      	ldr	r2, [r3, #16]
 8001cdc:	887b      	ldrh	r3, [r7, #2]
 8001cde:	4013      	ands	r3, r2
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d002      	beq.n	8001cea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	73fb      	strb	r3, [r7, #15]
 8001ce8:	e001      	b.n	8001cee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001cea:	2300      	movs	r3, #0
 8001cec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3714      	adds	r7, #20
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bc80      	pop	{r7}
 8001cf8:	4770      	bx	lr

08001cfa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	b083      	sub	sp, #12
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
 8001d02:	460b      	mov	r3, r1
 8001d04:	807b      	strh	r3, [r7, #2]
 8001d06:	4613      	mov	r3, r2
 8001d08:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d0a:	787b      	ldrb	r3, [r7, #1]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d003      	beq.n	8001d18 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d10:	887a      	ldrh	r2, [r7, #2]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d16:	e002      	b.n	8001d1e <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d18:	887a      	ldrh	r2, [r7, #2]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d1e:	bf00      	nop
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bc80      	pop	{r7}
 8001d26:	4770      	bx	lr

08001d28 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d2c:	4b04      	ldr	r3, [pc, #16]	; (8001d40 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a03      	ldr	r2, [pc, #12]	; (8001d40 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001d32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d36:	6013      	str	r3, [r2, #0]
}
 8001d38:	bf00      	nop
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bc80      	pop	{r7}
 8001d3e:	4770      	bx	lr
 8001d40:	58000400 	.word	0x58000400

08001d44 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8001d48:	4b03      	ldr	r3, [pc, #12]	; (8001d58 <HAL_PWREx_GetVoltageRange+0x14>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bc80      	pop	{r7}
 8001d56:	4770      	bx	lr
 8001d58:	58000400 	.word	0x58000400

08001d5c <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8001d60:	4b06      	ldr	r3, [pc, #24]	; (8001d7c <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d6c:	d101      	bne.n	8001d72 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e000      	b.n	8001d74 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8001d72:	2300      	movs	r3, #0
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bc80      	pop	{r7}
 8001d7a:	4770      	bx	lr
 8001d7c:	58000400 	.word	0x58000400

08001d80 <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001d84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d8e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d92:	6013      	str	r3, [r2, #0]
}
 8001d94:	bf00      	nop
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bc80      	pop	{r7}
 8001d9a:	4770      	bx	lr

08001d9c <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001da0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001daa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001dae:	6013      	str	r3, [r2, #0]
}
 8001db0:	bf00      	nop
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bc80      	pop	{r7}
 8001db6:	4770      	bx	lr

08001db8 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001dbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001dca:	d101      	bne.n	8001dd0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e000      	b.n	8001dd2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001dd0:	2300      	movs	r3, #0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bc80      	pop	{r7}
 8001dd8:	4770      	bx	lr

08001dda <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001dde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001de8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dec:	6013      	str	r3, [r2, #0]
}
 8001dee:	bf00      	nop
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bc80      	pop	{r7}
 8001df4:	4770      	bx	lr

08001df6 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8001df6:	b480      	push	{r7}
 8001df8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001dfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e08:	6013      	str	r3, [r2, #0]
}
 8001e0a:	bf00      	nop
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bc80      	pop	{r7}
 8001e10:	4770      	bx	lr

08001e12 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8001e12:	b480      	push	{r7}
 8001e14:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001e16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e20:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001e24:	d101      	bne.n	8001e2a <LL_RCC_HSE_IsReady+0x18>
 8001e26:	2301      	movs	r3, #1
 8001e28:	e000      	b.n	8001e2c <LL_RCC_HSE_IsReady+0x1a>
 8001e2a:	2300      	movs	r3, #0
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bc80      	pop	{r7}
 8001e32:	4770      	bx	lr

08001e34 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001e38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e46:	6013      	str	r3, [r2, #0]
}
 8001e48:	bf00      	nop
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bc80      	pop	{r7}
 8001e4e:	4770      	bx	lr

08001e50 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001e54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e5e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e62:	6013      	str	r3, [r2, #0]
}
 8001e64:	bf00      	nop
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bc80      	pop	{r7}
 8001e6a:	4770      	bx	lr

08001e6c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001e70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e7e:	d101      	bne.n	8001e84 <LL_RCC_HSI_IsReady+0x18>
 8001e80:	2301      	movs	r3, #1
 8001e82:	e000      	b.n	8001e86 <LL_RCC_HSI_IsReady+0x1a>
 8001e84:	2300      	movs	r3, #0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bc80      	pop	{r7}
 8001e8c:	4770      	bx	lr

08001e8e <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001e8e:	b480      	push	{r7}
 8001e90:	b083      	sub	sp, #12
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001e96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	061b      	lsls	r3, r3, #24
 8001ea4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	604b      	str	r3, [r1, #4]
}
 8001eac:	bf00      	nop
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bc80      	pop	{r7}
 8001eb4:	4770      	bx	lr

08001eb6 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001eb6:	b480      	push	{r7}
 8001eb8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001eba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ec2:	f003 0302 	and.w	r3, r3, #2
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	d101      	bne.n	8001ece <LL_RCC_LSE_IsReady+0x18>
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e000      	b.n	8001ed0 <LL_RCC_LSE_IsReady+0x1a>
 8001ece:	2300      	movs	r3, #0
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bc80      	pop	{r7}
 8001ed6:	4770      	bx	lr

08001ed8 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8001edc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ee0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ee4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ee8:	f043 0301 	orr.w	r3, r3, #1
 8001eec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001ef0:	bf00      	nop
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bc80      	pop	{r7}
 8001ef6:	4770      	bx	lr

08001ef8 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8001efc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f04:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f08:	f023 0301 	bic.w	r3, r3, #1
 8001f0c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001f10:	bf00      	nop
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bc80      	pop	{r7}
 8001f16:	4770      	bx	lr

08001f18 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8001f1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f24:	f003 0302 	and.w	r3, r3, #2
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d101      	bne.n	8001f30 <LL_RCC_LSI_IsReady+0x18>
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e000      	b.n	8001f32 <LL_RCC_LSI_IsReady+0x1a>
 8001f30:	2300      	movs	r3, #0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bc80      	pop	{r7}
 8001f38:	4770      	bx	lr

08001f3a <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001f3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f48:	f043 0301 	orr.w	r3, r3, #1
 8001f4c:	6013      	str	r3, [r2, #0]
}
 8001f4e:	bf00      	nop
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bc80      	pop	{r7}
 8001f54:	4770      	bx	lr

08001f56 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001f56:	b480      	push	{r7}
 8001f58:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001f5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f64:	f023 0301 	bic.w	r3, r3, #1
 8001f68:	6013      	str	r3, [r2, #0]
}
 8001f6a:	bf00      	nop
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bc80      	pop	{r7}
 8001f70:	4770      	bx	lr

08001f72 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001f72:	b480      	push	{r7}
 8001f74:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001f76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 0302 	and.w	r3, r3, #2
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d101      	bne.n	8001f88 <LL_RCC_MSI_IsReady+0x16>
 8001f84:	2301      	movs	r3, #1
 8001f86:	e000      	b.n	8001f8a <LL_RCC_MSI_IsReady+0x18>
 8001f88:	2300      	movs	r3, #0
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bc80      	pop	{r7}
 8001f90:	4770      	bx	lr

08001f92 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8001f92:	b480      	push	{r7}
 8001f94:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8001f96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0308 	and.w	r3, r3, #8
 8001fa0:	2b08      	cmp	r3, #8
 8001fa2:	d101      	bne.n	8001fa8 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e000      	b.n	8001faa <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8001fa8:	2300      	movs	r3, #0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bc80      	pop	{r7}
 8001fb0:	4770      	bx	lr

08001fb2 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001fb2:	b480      	push	{r7}
 8001fb4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8001fb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bc80      	pop	{r7}
 8001fc6:	4770      	bx	lr

08001fc8 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8001fcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fd4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bc80      	pop	{r7}
 8001fde:	4770      	bx	lr

08001fe0 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001fe8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	021b      	lsls	r3, r3, #8
 8001ff6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	604b      	str	r3, [r1, #4]
}
 8001ffe:	bf00      	nop
 8002000:	370c      	adds	r7, #12
 8002002:	46bd      	mov	sp, r7
 8002004:	bc80      	pop	{r7}
 8002006:	4770      	bx	lr

08002008 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002010:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	f023 0203 	bic.w	r2, r3, #3
 800201a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4313      	orrs	r3, r2
 8002022:	608b      	str	r3, [r1, #8]
}
 8002024:	bf00      	nop
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	bc80      	pop	{r7}
 800202c:	4770      	bx	lr

0800202e <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800202e:	b480      	push	{r7}
 8002030:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002032:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	f003 030c 	and.w	r3, r3, #12
}
 800203c:	4618      	mov	r0, r3
 800203e:	46bd      	mov	sp, r7
 8002040:	bc80      	pop	{r7}
 8002042:	4770      	bx	lr

08002044 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800204c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002056:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4313      	orrs	r3, r2
 800205e:	608b      	str	r3, [r1, #8]
}
 8002060:	bf00      	nop
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	bc80      	pop	{r7}
 8002068:	4770      	bx	lr

0800206a <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 800206a:	b480      	push	{r7}
 800206c:	b083      	sub	sp, #12
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002072:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002076:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800207a:	f023 020f 	bic.w	r2, r3, #15
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	091b      	lsrs	r3, r3, #4
 8002082:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002086:	4313      	orrs	r3, r2
 8002088:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800208c:	bf00      	nop
 800208e:	370c      	adds	r7, #12
 8002090:	46bd      	mov	sp, r7
 8002092:	bc80      	pop	{r7}
 8002094:	4770      	bx	lr

08002096 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002096:	b480      	push	{r7}
 8002098:	b083      	sub	sp, #12
 800209a:	af00      	add	r7, sp, #0
 800209c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800209e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	608b      	str	r3, [r1, #8]
}
 80020b2:	bf00      	nop
 80020b4:	370c      	adds	r7, #12
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bc80      	pop	{r7}
 80020ba:	4770      	bx	lr

080020bc <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80020c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	608b      	str	r3, [r1, #8]
}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	bc80      	pop	{r7}
 80020e0:	4770      	bx	lr

080020e2 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80020e2:	b480      	push	{r7}
 80020e4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80020e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bc80      	pop	{r7}
 80020f6:	4770      	bx	lr

080020f8 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80020fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002100:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002104:	011b      	lsls	r3, r3, #4
 8002106:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800210a:	4618      	mov	r0, r3
 800210c:	46bd      	mov	sp, r7
 800210e:	bc80      	pop	{r7}
 8002110:	4770      	bx	lr

08002112 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002112:	b480      	push	{r7}
 8002114:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002116:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8002120:	4618      	mov	r0, r3
 8002122:	46bd      	mov	sp, r7
 8002124:	bc80      	pop	{r7}
 8002126:	4770      	bx	lr

08002128 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800212c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002136:	4618      	mov	r0, r3
 8002138:	46bd      	mov	sp, r7
 800213a:	bc80      	pop	{r7}
 800213c:	4770      	bx	lr

0800213e <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800213e:	b480      	push	{r7}
 8002140:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002142:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800214c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002150:	6013      	str	r3, [r2, #0]
}
 8002152:	bf00      	nop
 8002154:	46bd      	mov	sp, r7
 8002156:	bc80      	pop	{r7}
 8002158:	4770      	bx	lr

0800215a <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800215a:	b480      	push	{r7}
 800215c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800215e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002168:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800216c:	6013      	str	r3, [r2, #0]
}
 800216e:	bf00      	nop
 8002170:	46bd      	mov	sp, r7
 8002172:	bc80      	pop	{r7}
 8002174:	4770      	bx	lr

08002176 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002176:	b480      	push	{r7}
 8002178:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800217a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002184:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002188:	d101      	bne.n	800218e <LL_RCC_PLL_IsReady+0x18>
 800218a:	2301      	movs	r3, #1
 800218c:	e000      	b.n	8002190 <LL_RCC_PLL_IsReady+0x1a>
 800218e:	2300      	movs	r3, #0
}
 8002190:	4618      	mov	r0, r3
 8002192:	46bd      	mov	sp, r7
 8002194:	bc80      	pop	{r7}
 8002196:	4770      	bx	lr

08002198 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800219c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021a0:	68db      	ldr	r3, [r3, #12]
 80021a2:	0a1b      	lsrs	r3, r3, #8
 80021a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bc80      	pop	{r7}
 80021ae:	4770      	bx	lr

080021b0 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80021b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021b8:	68db      	ldr	r3, [r3, #12]
 80021ba:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80021be:	4618      	mov	r0, r3
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bc80      	pop	{r7}
 80021c4:	4770      	bx	lr

080021c6 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80021c6:	b480      	push	{r7}
 80021c8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80021ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bc80      	pop	{r7}
 80021da:	4770      	bx	lr

080021dc <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80021e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	f003 0303 	and.w	r3, r3, #3
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bc80      	pop	{r7}
 80021f0:	4770      	bx	lr

080021f2 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80021f2:	b480      	push	{r7}
 80021f4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80021f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002200:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002204:	d101      	bne.n	800220a <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002206:	2301      	movs	r3, #1
 8002208:	e000      	b.n	800220c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800220a:	2300      	movs	r3, #0
}
 800220c:	4618      	mov	r0, r3
 800220e:	46bd      	mov	sp, r7
 8002210:	bc80      	pop	{r7}
 8002212:	4770      	bx	lr

08002214 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002218:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800221c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002220:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002224:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002228:	d101      	bne.n	800222e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800222a:	2301      	movs	r3, #1
 800222c:	e000      	b.n	8002230 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800222e:	2300      	movs	r3, #0
}
 8002230:	4618      	mov	r0, r3
 8002232:	46bd      	mov	sp, r7
 8002234:	bc80      	pop	{r7}
 8002236:	4770      	bx	lr

08002238 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800223c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002246:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800224a:	d101      	bne.n	8002250 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800224c:	2301      	movs	r3, #1
 800224e:	e000      	b.n	8002252 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002250:	2300      	movs	r3, #0
}
 8002252:	4618      	mov	r0, r3
 8002254:	46bd      	mov	sp, r7
 8002256:	bc80      	pop	{r7}
 8002258:	4770      	bx	lr

0800225a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800225a:	b480      	push	{r7}
 800225c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800225e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002268:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800226c:	d101      	bne.n	8002272 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800226e:	2301      	movs	r3, #1
 8002270:	e000      	b.n	8002274 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002272:	2300      	movs	r3, #0
}
 8002274:	4618      	mov	r0, r3
 8002276:	46bd      	mov	sp, r7
 8002278:	bc80      	pop	{r7}
 800227a:	4770      	bx	lr

0800227c <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b088      	sub	sp, #32
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d101      	bne.n	800228e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e36f      	b.n	800296e <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800228e:	f7ff fece 	bl	800202e <LL_RCC_GetSysClkSource>
 8002292:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002294:	f7ff ffa2 	bl	80021dc <LL_RCC_PLL_GetMainSource>
 8002298:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0320 	and.w	r3, r3, #32
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	f000 80c4 	beq.w	8002430 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d005      	beq.n	80022ba <HAL_RCC_OscConfig+0x3e>
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	2b0c      	cmp	r3, #12
 80022b2:	d176      	bne.n	80023a2 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80022b4:	69bb      	ldr	r3, [r7, #24]
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d173      	bne.n	80023a2 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6a1b      	ldr	r3, [r3, #32]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d101      	bne.n	80022c6 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e353      	b.n	800296e <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0308 	and.w	r3, r3, #8
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d005      	beq.n	80022e4 <HAL_RCC_OscConfig+0x68>
 80022d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022e2:	e006      	b.n	80022f2 <HAL_RCC_OscConfig+0x76>
 80022e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022ec:	091b      	lsrs	r3, r3, #4
 80022ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d222      	bcs.n	800233c <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022fa:	4618      	mov	r0, r3
 80022fc:	f000 fd3c 	bl	8002d78 <RCC_SetFlashLatencyFromMSIRange>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e331      	b.n	800296e <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800230a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002314:	f043 0308 	orr.w	r3, r3, #8
 8002318:	6013      	str	r3, [r2, #0]
 800231a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002328:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800232c:	4313      	orrs	r3, r2
 800232e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002334:	4618      	mov	r0, r3
 8002336:	f7ff fe53 	bl	8001fe0 <LL_RCC_MSI_SetCalibTrimming>
 800233a:	e021      	b.n	8002380 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800233c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002346:	f043 0308 	orr.w	r3, r3, #8
 800234a:	6013      	str	r3, [r2, #0]
 800234c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800235a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800235e:	4313      	orrs	r3, r2
 8002360:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002366:	4618      	mov	r0, r3
 8002368:	f7ff fe3a 	bl	8001fe0 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002370:	4618      	mov	r0, r3
 8002372:	f000 fd01 	bl	8002d78 <RCC_SetFlashLatencyFromMSIRange>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d001      	beq.n	8002380 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e2f6      	b.n	800296e <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002380:	f000 fcc2 	bl	8002d08 <HAL_RCC_GetHCLKFreq>
 8002384:	4603      	mov	r3, r0
 8002386:	4aa7      	ldr	r2, [pc, #668]	; (8002624 <HAL_RCC_OscConfig+0x3a8>)
 8002388:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 800238a:	4ba7      	ldr	r3, [pc, #668]	; (8002628 <HAL_RCC_OscConfig+0x3ac>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4618      	mov	r0, r3
 8002390:	f7ff f9e0 	bl	8001754 <HAL_InitTick>
 8002394:	4603      	mov	r3, r0
 8002396:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8002398:	7cfb      	ldrb	r3, [r7, #19]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d047      	beq.n	800242e <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 800239e:	7cfb      	ldrb	r3, [r7, #19]
 80023a0:	e2e5      	b.n	800296e <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6a1b      	ldr	r3, [r3, #32]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d02c      	beq.n	8002404 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80023aa:	f7ff fdc6 	bl	8001f3a <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80023ae:	f7ff fa1d 	bl	80017ec <HAL_GetTick>
 80023b2:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80023b4:	e008      	b.n	80023c8 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023b6:	f7ff fa19 	bl	80017ec <HAL_GetTick>
 80023ba:	4602      	mov	r2, r0
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d901      	bls.n	80023c8 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	e2d2      	b.n	800296e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 80023c8:	f7ff fdd3 	bl	8001f72 <LL_RCC_MSI_IsReady>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d0f1      	beq.n	80023b6 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023dc:	f043 0308 	orr.w	r3, r3, #8
 80023e0:	6013      	str	r3, [r2, #0]
 80023e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023f4:	4313      	orrs	r3, r2
 80023f6:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7ff fdef 	bl	8001fe0 <LL_RCC_MSI_SetCalibTrimming>
 8002402:	e015      	b.n	8002430 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002404:	f7ff fda7 	bl	8001f56 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002408:	f7ff f9f0 	bl	80017ec <HAL_GetTick>
 800240c:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800240e:	e008      	b.n	8002422 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002410:	f7ff f9ec 	bl	80017ec <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	2b02      	cmp	r3, #2
 800241c:	d901      	bls.n	8002422 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e2a5      	b.n	800296e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002422:	f7ff fda6 	bl	8001f72 <LL_RCC_MSI_IsReady>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d1f1      	bne.n	8002410 <HAL_RCC_OscConfig+0x194>
 800242c:	e000      	b.n	8002430 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800242e:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0301 	and.w	r3, r3, #1
 8002438:	2b00      	cmp	r3, #0
 800243a:	d058      	beq.n	80024ee <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	2b08      	cmp	r3, #8
 8002440:	d005      	beq.n	800244e <HAL_RCC_OscConfig+0x1d2>
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	2b0c      	cmp	r3, #12
 8002446:	d108      	bne.n	800245a <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002448:	69bb      	ldr	r3, [r7, #24]
 800244a:	2b03      	cmp	r3, #3
 800244c:	d105      	bne.n	800245a <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d14b      	bne.n	80024ee <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e289      	b.n	800296e <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 800245a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800246c:	4313      	orrs	r3, r2
 800246e:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002478:	d102      	bne.n	8002480 <HAL_RCC_OscConfig+0x204>
 800247a:	f7ff fcae 	bl	8001dda <LL_RCC_HSE_Enable>
 800247e:	e00d      	b.n	800249c <HAL_RCC_OscConfig+0x220>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8002488:	d104      	bne.n	8002494 <HAL_RCC_OscConfig+0x218>
 800248a:	f7ff fc79 	bl	8001d80 <LL_RCC_HSE_EnableTcxo>
 800248e:	f7ff fca4 	bl	8001dda <LL_RCC_HSE_Enable>
 8002492:	e003      	b.n	800249c <HAL_RCC_OscConfig+0x220>
 8002494:	f7ff fcaf 	bl	8001df6 <LL_RCC_HSE_Disable>
 8002498:	f7ff fc80 	bl	8001d9c <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d012      	beq.n	80024ca <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a4:	f7ff f9a2 	bl	80017ec <HAL_GetTick>
 80024a8:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80024aa:	e008      	b.n	80024be <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024ac:	f7ff f99e 	bl	80017ec <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	2b64      	cmp	r3, #100	; 0x64
 80024b8:	d901      	bls.n	80024be <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e257      	b.n	800296e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 80024be:	f7ff fca8 	bl	8001e12 <LL_RCC_HSE_IsReady>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d0f1      	beq.n	80024ac <HAL_RCC_OscConfig+0x230>
 80024c8:	e011      	b.n	80024ee <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ca:	f7ff f98f 	bl	80017ec <HAL_GetTick>
 80024ce:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80024d0:	e008      	b.n	80024e4 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024d2:	f7ff f98b 	bl	80017ec <HAL_GetTick>
 80024d6:	4602      	mov	r2, r0
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	2b64      	cmp	r3, #100	; 0x64
 80024de:	d901      	bls.n	80024e4 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80024e0:	2303      	movs	r3, #3
 80024e2:	e244      	b.n	800296e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 80024e4:	f7ff fc95 	bl	8001e12 <LL_RCC_HSE_IsReady>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d1f1      	bne.n	80024d2 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0302 	and.w	r3, r3, #2
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d046      	beq.n	8002588 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	2b04      	cmp	r3, #4
 80024fe:	d005      	beq.n	800250c <HAL_RCC_OscConfig+0x290>
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	2b0c      	cmp	r3, #12
 8002504:	d10e      	bne.n	8002524 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002506:	69bb      	ldr	r3, [r7, #24]
 8002508:	2b02      	cmp	r3, #2
 800250a:	d10b      	bne.n	8002524 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	691b      	ldr	r3, [r3, #16]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d101      	bne.n	8002518 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e22a      	b.n	800296e <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	695b      	ldr	r3, [r3, #20]
 800251c:	4618      	mov	r0, r3
 800251e:	f7ff fcb6 	bl	8001e8e <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002522:	e031      	b.n	8002588 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	691b      	ldr	r3, [r3, #16]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d019      	beq.n	8002560 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800252c:	f7ff fc82 	bl	8001e34 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002530:	f7ff f95c 	bl	80017ec <HAL_GetTick>
 8002534:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002536:	e008      	b.n	800254a <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002538:	f7ff f958 	bl	80017ec <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b02      	cmp	r3, #2
 8002544:	d901      	bls.n	800254a <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e211      	b.n	800296e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 800254a:	f7ff fc8f 	bl	8001e6c <LL_RCC_HSI_IsReady>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d0f1      	beq.n	8002538 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	695b      	ldr	r3, [r3, #20]
 8002558:	4618      	mov	r0, r3
 800255a:	f7ff fc98 	bl	8001e8e <LL_RCC_HSI_SetCalibTrimming>
 800255e:	e013      	b.n	8002588 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002560:	f7ff fc76 	bl	8001e50 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002564:	f7ff f942 	bl	80017ec <HAL_GetTick>
 8002568:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800256a:	e008      	b.n	800257e <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800256c:	f7ff f93e 	bl	80017ec <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	2b02      	cmp	r3, #2
 8002578:	d901      	bls.n	800257e <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e1f7      	b.n	800296e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 800257e:	f7ff fc75 	bl	8001e6c <LL_RCC_HSI_IsReady>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d1f1      	bne.n	800256c <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0308 	and.w	r3, r3, #8
 8002590:	2b00      	cmp	r3, #0
 8002592:	d06e      	beq.n	8002672 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	699b      	ldr	r3, [r3, #24]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d056      	beq.n	800264a <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 800259c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025a4:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	69da      	ldr	r2, [r3, #28]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	f003 0310 	and.w	r3, r3, #16
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d031      	beq.n	8002618 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	f003 0302 	and.w	r3, r3, #2
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d006      	beq.n	80025cc <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d101      	bne.n	80025cc <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e1d0      	b.n	800296e <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f003 0301 	and.w	r3, r3, #1
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d013      	beq.n	80025fe <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 80025d6:	f7ff fc8f 	bl	8001ef8 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80025da:	f7ff f907 	bl	80017ec <HAL_GetTick>
 80025de:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 80025e0:	e008      	b.n	80025f4 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025e2:	f7ff f903 	bl	80017ec <HAL_GetTick>
 80025e6:	4602      	mov	r2, r0
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	2b11      	cmp	r3, #17
 80025ee:	d901      	bls.n	80025f4 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 80025f0:	2303      	movs	r3, #3
 80025f2:	e1bc      	b.n	800296e <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 80025f4:	f7ff fc90 	bl	8001f18 <LL_RCC_LSI_IsReady>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d1f1      	bne.n	80025e2 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80025fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002602:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002606:	f023 0210 	bic.w	r2, r3, #16
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	69db      	ldr	r3, [r3, #28]
 800260e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002612:	4313      	orrs	r3, r2
 8002614:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002618:	f7ff fc5e 	bl	8001ed8 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800261c:	f7ff f8e6 	bl	80017ec <HAL_GetTick>
 8002620:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8002622:	e00c      	b.n	800263e <HAL_RCC_OscConfig+0x3c2>
 8002624:	20000000 	.word	0x20000000
 8002628:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800262c:	f7ff f8de 	bl	80017ec <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	2b11      	cmp	r3, #17
 8002638:	d901      	bls.n	800263e <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e197      	b.n	800296e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 800263e:	f7ff fc6b 	bl	8001f18 <LL_RCC_LSI_IsReady>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d0f1      	beq.n	800262c <HAL_RCC_OscConfig+0x3b0>
 8002648:	e013      	b.n	8002672 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800264a:	f7ff fc55 	bl	8001ef8 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800264e:	f7ff f8cd 	bl	80017ec <HAL_GetTick>
 8002652:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8002654:	e008      	b.n	8002668 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002656:	f7ff f8c9 	bl	80017ec <HAL_GetTick>
 800265a:	4602      	mov	r2, r0
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	2b11      	cmp	r3, #17
 8002662:	d901      	bls.n	8002668 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8002664:	2303      	movs	r3, #3
 8002666:	e182      	b.n	800296e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8002668:	f7ff fc56 	bl	8001f18 <LL_RCC_LSI_IsReady>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d1f1      	bne.n	8002656 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0304 	and.w	r3, r3, #4
 800267a:	2b00      	cmp	r3, #0
 800267c:	f000 80d8 	beq.w	8002830 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002680:	f7ff fb6c 	bl	8001d5c <LL_PWR_IsEnabledBkUpAccess>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d113      	bne.n	80026b2 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800268a:	f7ff fb4d 	bl	8001d28 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800268e:	f7ff f8ad 	bl	80017ec <HAL_GetTick>
 8002692:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002694:	e008      	b.n	80026a8 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002696:	f7ff f8a9 	bl	80017ec <HAL_GetTick>
 800269a:	4602      	mov	r2, r0
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d901      	bls.n	80026a8 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	e162      	b.n	800296e <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80026a8:	f7ff fb58 	bl	8001d5c <LL_PWR_IsEnabledBkUpAccess>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d0f1      	beq.n	8002696 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d07b      	beq.n	80027b2 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	2b85      	cmp	r3, #133	; 0x85
 80026c0:	d003      	beq.n	80026ca <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	2b05      	cmp	r3, #5
 80026c8:	d109      	bne.n	80026de <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80026ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026d6:	f043 0304 	orr.w	r3, r3, #4
 80026da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026de:	f7ff f885 	bl	80017ec <HAL_GetTick>
 80026e2:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80026e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026f0:	f043 0301 	orr.w	r3, r3, #1
 80026f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80026f8:	e00a      	b.n	8002710 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026fa:	f7ff f877 	bl	80017ec <HAL_GetTick>
 80026fe:	4602      	mov	r2, r0
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	f241 3288 	movw	r2, #5000	; 0x1388
 8002708:	4293      	cmp	r3, r2
 800270a:	d901      	bls.n	8002710 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 800270c:	2303      	movs	r3, #3
 800270e:	e12e      	b.n	800296e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002710:	f7ff fbd1 	bl	8001eb6 <LL_RCC_LSE_IsReady>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d0ef      	beq.n	80026fa <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	2b81      	cmp	r3, #129	; 0x81
 8002720:	d003      	beq.n	800272a <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	2b85      	cmp	r3, #133	; 0x85
 8002728:	d121      	bne.n	800276e <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800272a:	f7ff f85f 	bl	80017ec <HAL_GetTick>
 800272e:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002730:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002734:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002738:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800273c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002740:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002744:	e00a      	b.n	800275c <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002746:	f7ff f851 	bl	80017ec <HAL_GetTick>
 800274a:	4602      	mov	r2, r0
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	f241 3288 	movw	r2, #5000	; 0x1388
 8002754:	4293      	cmp	r3, r2
 8002756:	d901      	bls.n	800275c <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	e108      	b.n	800296e <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800275c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002760:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002764:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002768:	2b00      	cmp	r3, #0
 800276a:	d0ec      	beq.n	8002746 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800276c:	e060      	b.n	8002830 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800276e:	f7ff f83d 	bl	80017ec <HAL_GetTick>
 8002772:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002774:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002778:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800277c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002780:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002784:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002788:	e00a      	b.n	80027a0 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800278a:	f7ff f82f 	bl	80017ec <HAL_GetTick>
 800278e:	4602      	mov	r2, r0
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	f241 3288 	movw	r2, #5000	; 0x1388
 8002798:	4293      	cmp	r3, r2
 800279a:	d901      	bls.n	80027a0 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 800279c:	2303      	movs	r3, #3
 800279e:	e0e6      	b.n	800296e <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80027a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d1ec      	bne.n	800278a <HAL_RCC_OscConfig+0x50e>
 80027b0:	e03e      	b.n	8002830 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027b2:	f7ff f81b 	bl	80017ec <HAL_GetTick>
 80027b6:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80027b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80027c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80027cc:	e00a      	b.n	80027e4 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027ce:	f7ff f80d 	bl	80017ec <HAL_GetTick>
 80027d2:	4602      	mov	r2, r0
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80027dc:	4293      	cmp	r3, r2
 80027de:	d901      	bls.n	80027e4 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80027e0:	2303      	movs	r3, #3
 80027e2:	e0c4      	b.n	800296e <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80027e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d1ec      	bne.n	80027ce <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027f4:	f7fe fffa 	bl	80017ec <HAL_GetTick>
 80027f8:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80027fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002802:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002806:	f023 0301 	bic.w	r3, r3, #1
 800280a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800280e:	e00a      	b.n	8002826 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002810:	f7fe ffec 	bl	80017ec <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	f241 3288 	movw	r2, #5000	; 0x1388
 800281e:	4293      	cmp	r3, r2
 8002820:	d901      	bls.n	8002826 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e0a3      	b.n	800296e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002826:	f7ff fb46 	bl	8001eb6 <LL_RCC_LSE_IsReady>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d1ef      	bne.n	8002810 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002834:	2b00      	cmp	r3, #0
 8002836:	f000 8099 	beq.w	800296c <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	2b0c      	cmp	r3, #12
 800283e:	d06c      	beq.n	800291a <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002844:	2b02      	cmp	r3, #2
 8002846:	d14b      	bne.n	80028e0 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002848:	f7ff fc87 	bl	800215a <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800284c:	f7fe ffce 	bl	80017ec <HAL_GetTick>
 8002850:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8002852:	e008      	b.n	8002866 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002854:	f7fe ffca 	bl	80017ec <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	2b0a      	cmp	r3, #10
 8002860:	d901      	bls.n	8002866 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e083      	b.n	800296e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8002866:	f7ff fc86 	bl	8002176 <LL_RCC_PLL_IsReady>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d1f1      	bne.n	8002854 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002870:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002874:	68da      	ldr	r2, [r3, #12]
 8002876:	4b40      	ldr	r3, [pc, #256]	; (8002978 <HAL_RCC_OscConfig+0x6fc>)
 8002878:	4013      	ands	r3, r2
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002882:	4311      	orrs	r1, r2
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002888:	0212      	lsls	r2, r2, #8
 800288a:	4311      	orrs	r1, r2
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002890:	4311      	orrs	r1, r2
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002896:	4311      	orrs	r1, r2
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800289c:	430a      	orrs	r2, r1
 800289e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028a2:	4313      	orrs	r3, r2
 80028a4:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028a6:	f7ff fc4a 	bl	800213e <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028b8:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ba:	f7fe ff97 	bl	80017ec <HAL_GetTick>
 80028be:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80028c0:	e008      	b.n	80028d4 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028c2:	f7fe ff93 	bl	80017ec <HAL_GetTick>
 80028c6:	4602      	mov	r2, r0
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	2b0a      	cmp	r3, #10
 80028ce:	d901      	bls.n	80028d4 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 80028d0:	2303      	movs	r3, #3
 80028d2:	e04c      	b.n	800296e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 80028d4:	f7ff fc4f 	bl	8002176 <LL_RCC_PLL_IsReady>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d0f1      	beq.n	80028c2 <HAL_RCC_OscConfig+0x646>
 80028de:	e045      	b.n	800296c <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028e0:	f7ff fc3b 	bl	800215a <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e4:	f7fe ff82 	bl	80017ec <HAL_GetTick>
 80028e8:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 80028ea:	e008      	b.n	80028fe <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028ec:	f7fe ff7e 	bl	80017ec <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	2b0a      	cmp	r3, #10
 80028f8:	d901      	bls.n	80028fe <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e037      	b.n	800296e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80028fe:	f7ff fc3a 	bl	8002176 <LL_RCC_PLL_IsReady>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d1f1      	bne.n	80028ec <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8002908:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800290c:	68da      	ldr	r2, [r3, #12]
 800290e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002912:	4b1a      	ldr	r3, [pc, #104]	; (800297c <HAL_RCC_OscConfig+0x700>)
 8002914:	4013      	ands	r3, r2
 8002916:	60cb      	str	r3, [r1, #12]
 8002918:	e028      	b.n	800296c <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800291e:	2b01      	cmp	r3, #1
 8002920:	d101      	bne.n	8002926 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e023      	b.n	800296e <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002926:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 800292e:	69bb      	ldr	r3, [r7, #24]
 8002930:	f003 0203 	and.w	r2, r3, #3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002938:	429a      	cmp	r2, r3
 800293a:	d115      	bne.n	8002968 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002946:	429a      	cmp	r2, r3
 8002948:	d10e      	bne.n	8002968 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 800294a:	69bb      	ldr	r3, [r7, #24]
 800294c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002954:	021b      	lsls	r3, r3, #8
 8002956:	429a      	cmp	r2, r3
 8002958:	d106      	bne.n	8002968 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 800295a:	69bb      	ldr	r3, [r7, #24]
 800295c:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002964:	429a      	cmp	r2, r3
 8002966:	d001      	beq.n	800296c <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e000      	b.n	800296e <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 800296c:	2300      	movs	r3, #0
}
 800296e:	4618      	mov	r0, r3
 8002970:	3720      	adds	r7, #32
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	11c1808c 	.word	0x11c1808c
 800297c:	eefefffc 	.word	0xeefefffc

08002980 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d101      	bne.n	8002994 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e10f      	b.n	8002bb4 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002994:	4b89      	ldr	r3, [pc, #548]	; (8002bbc <HAL_RCC_ClockConfig+0x23c>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0307 	and.w	r3, r3, #7
 800299c:	683a      	ldr	r2, [r7, #0]
 800299e:	429a      	cmp	r2, r3
 80029a0:	d91b      	bls.n	80029da <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029a2:	4b86      	ldr	r3, [pc, #536]	; (8002bbc <HAL_RCC_ClockConfig+0x23c>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f023 0207 	bic.w	r2, r3, #7
 80029aa:	4984      	ldr	r1, [pc, #528]	; (8002bbc <HAL_RCC_ClockConfig+0x23c>)
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029b2:	f7fe ff1b 	bl	80017ec <HAL_GetTick>
 80029b6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029b8:	e008      	b.n	80029cc <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80029ba:	f7fe ff17 	bl	80017ec <HAL_GetTick>
 80029be:	4602      	mov	r2, r0
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d901      	bls.n	80029cc <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80029c8:	2303      	movs	r3, #3
 80029ca:	e0f3      	b.n	8002bb4 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029cc:	4b7b      	ldr	r3, [pc, #492]	; (8002bbc <HAL_RCC_ClockConfig+0x23c>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0307 	and.w	r3, r3, #7
 80029d4:	683a      	ldr	r2, [r7, #0]
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d1ef      	bne.n	80029ba <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0302 	and.w	r3, r3, #2
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d016      	beq.n	8002a14 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	4618      	mov	r0, r3
 80029ec:	f7ff fb2a 	bl	8002044 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80029f0:	f7fe fefc 	bl	80017ec <HAL_GetTick>
 80029f4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80029f6:	e008      	b.n	8002a0a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80029f8:	f7fe fef8 	bl	80017ec <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d901      	bls.n	8002a0a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e0d4      	b.n	8002bb4 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002a0a:	f7ff fbf2 	bl	80021f2 <LL_RCC_IsActiveFlag_HPRE>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d0f1      	beq.n	80029f8 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d016      	beq.n	8002a4e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	695b      	ldr	r3, [r3, #20]
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7ff fb20 	bl	800206a <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002a2a:	f7fe fedf 	bl	80017ec <HAL_GetTick>
 8002a2e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002a30:	e008      	b.n	8002a44 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002a32:	f7fe fedb 	bl	80017ec <HAL_GetTick>
 8002a36:	4602      	mov	r2, r0
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d901      	bls.n	8002a44 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002a40:	2303      	movs	r3, #3
 8002a42:	e0b7      	b.n	8002bb4 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002a44:	f7ff fbe6 	bl	8002214 <LL_RCC_IsActiveFlag_SHDHPRE>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d0f1      	beq.n	8002a32 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0304 	and.w	r3, r3, #4
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d016      	beq.n	8002a88 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	68db      	ldr	r3, [r3, #12]
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f7ff fb19 	bl	8002096 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002a64:	f7fe fec2 	bl	80017ec <HAL_GetTick>
 8002a68:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002a6a:	e008      	b.n	8002a7e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002a6c:	f7fe febe 	bl	80017ec <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d901      	bls.n	8002a7e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e09a      	b.n	8002bb4 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002a7e:	f7ff fbdb 	bl	8002238 <LL_RCC_IsActiveFlag_PPRE1>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d0f1      	beq.n	8002a6c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0308 	and.w	r3, r3, #8
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d017      	beq.n	8002ac4 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	691b      	ldr	r3, [r3, #16]
 8002a98:	00db      	lsls	r3, r3, #3
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f7ff fb0e 	bl	80020bc <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002aa0:	f7fe fea4 	bl	80017ec <HAL_GetTick>
 8002aa4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002aa6:	e008      	b.n	8002aba <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002aa8:	f7fe fea0 	bl	80017ec <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d901      	bls.n	8002aba <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e07c      	b.n	8002bb4 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002aba:	f7ff fbce 	bl	800225a <LL_RCC_IsActiveFlag_PPRE2>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d0f1      	beq.n	8002aa8 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 0301 	and.w	r3, r3, #1
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d043      	beq.n	8002b58 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d106      	bne.n	8002ae6 <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002ad8:	f7ff f99b 	bl	8001e12 <LL_RCC_HSE_IsReady>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d11e      	bne.n	8002b20 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e066      	b.n	8002bb4 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	2b03      	cmp	r3, #3
 8002aec:	d106      	bne.n	8002afc <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002aee:	f7ff fb42 	bl	8002176 <LL_RCC_PLL_IsReady>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d113      	bne.n	8002b20 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e05b      	b.n	8002bb4 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d106      	bne.n	8002b12 <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002b04:	f7ff fa35 	bl	8001f72 <LL_RCC_MSI_IsReady>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d108      	bne.n	8002b20 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e050      	b.n	8002bb4 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002b12:	f7ff f9ab 	bl	8001e6c <LL_RCC_HSI_IsReady>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d101      	bne.n	8002b20 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e049      	b.n	8002bb4 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	4618      	mov	r0, r3
 8002b26:	f7ff fa6f 	bl	8002008 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b2a:	f7fe fe5f 	bl	80017ec <HAL_GetTick>
 8002b2e:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b30:	e00a      	b.n	8002b48 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b32:	f7fe fe5b 	bl	80017ec <HAL_GetTick>
 8002b36:	4602      	mov	r2, r0
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d901      	bls.n	8002b48 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e035      	b.n	8002bb4 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b48:	f7ff fa71 	bl	800202e <LL_RCC_GetSysClkSource>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d1ec      	bne.n	8002b32 <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b58:	4b18      	ldr	r3, [pc, #96]	; (8002bbc <HAL_RCC_ClockConfig+0x23c>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0307 	and.w	r3, r3, #7
 8002b60:	683a      	ldr	r2, [r7, #0]
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d21b      	bcs.n	8002b9e <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b66:	4b15      	ldr	r3, [pc, #84]	; (8002bbc <HAL_RCC_ClockConfig+0x23c>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f023 0207 	bic.w	r2, r3, #7
 8002b6e:	4913      	ldr	r1, [pc, #76]	; (8002bbc <HAL_RCC_ClockConfig+0x23c>)
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	4313      	orrs	r3, r2
 8002b74:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b76:	f7fe fe39 	bl	80017ec <HAL_GetTick>
 8002b7a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b7c:	e008      	b.n	8002b90 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002b7e:	f7fe fe35 	bl	80017ec <HAL_GetTick>
 8002b82:	4602      	mov	r2, r0
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d901      	bls.n	8002b90 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8002b8c:	2303      	movs	r3, #3
 8002b8e:	e011      	b.n	8002bb4 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b90:	4b0a      	ldr	r3, [pc, #40]	; (8002bbc <HAL_RCC_ClockConfig+0x23c>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0307 	and.w	r3, r3, #7
 8002b98:	683a      	ldr	r2, [r7, #0]
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d1ef      	bne.n	8002b7e <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002b9e:	f000 f8b3 	bl	8002d08 <HAL_RCC_GetHCLKFreq>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	4a06      	ldr	r2, [pc, #24]	; (8002bc0 <HAL_RCC_ClockConfig+0x240>)
 8002ba6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8002ba8:	4b06      	ldr	r3, [pc, #24]	; (8002bc4 <HAL_RCC_ClockConfig+0x244>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4618      	mov	r0, r3
 8002bae:	f7fe fdd1 	bl	8001754 <HAL_InitTick>
 8002bb2:	4603      	mov	r3, r0
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3710      	adds	r7, #16
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	58004000 	.word	0x58004000
 8002bc0:	20000000 	.word	0x20000000
 8002bc4:	20000004 	.word	0x20000004

08002bc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bc8:	b590      	push	{r4, r7, lr}
 8002bca:	b087      	sub	sp, #28
 8002bcc:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bd6:	f7ff fa2a 	bl	800202e <LL_RCC_GetSysClkSource>
 8002bda:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002bdc:	f7ff fafe 	bl	80021dc <LL_RCC_PLL_GetMainSource>
 8002be0:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d005      	beq.n	8002bf4 <HAL_RCC_GetSysClockFreq+0x2c>
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	2b0c      	cmp	r3, #12
 8002bec:	d139      	bne.n	8002c62 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d136      	bne.n	8002c62 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002bf4:	f7ff f9cd 	bl	8001f92 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d115      	bne.n	8002c2a <HAL_RCC_GetSysClockFreq+0x62>
 8002bfe:	f7ff f9c8 	bl	8001f92 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002c02:	4603      	mov	r3, r0
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d106      	bne.n	8002c16 <HAL_RCC_GetSysClockFreq+0x4e>
 8002c08:	f7ff f9d3 	bl	8001fb2 <LL_RCC_MSI_GetRange>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	0a1b      	lsrs	r3, r3, #8
 8002c10:	f003 030f 	and.w	r3, r3, #15
 8002c14:	e005      	b.n	8002c22 <HAL_RCC_GetSysClockFreq+0x5a>
 8002c16:	f7ff f9d7 	bl	8001fc8 <LL_RCC_MSI_GetRangeAfterStandby>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	0a1b      	lsrs	r3, r3, #8
 8002c1e:	f003 030f 	and.w	r3, r3, #15
 8002c22:	4a36      	ldr	r2, [pc, #216]	; (8002cfc <HAL_RCC_GetSysClockFreq+0x134>)
 8002c24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c28:	e014      	b.n	8002c54 <HAL_RCC_GetSysClockFreq+0x8c>
 8002c2a:	f7ff f9b2 	bl	8001f92 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d106      	bne.n	8002c42 <HAL_RCC_GetSysClockFreq+0x7a>
 8002c34:	f7ff f9bd 	bl	8001fb2 <LL_RCC_MSI_GetRange>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	091b      	lsrs	r3, r3, #4
 8002c3c:	f003 030f 	and.w	r3, r3, #15
 8002c40:	e005      	b.n	8002c4e <HAL_RCC_GetSysClockFreq+0x86>
 8002c42:	f7ff f9c1 	bl	8001fc8 <LL_RCC_MSI_GetRangeAfterStandby>
 8002c46:	4603      	mov	r3, r0
 8002c48:	091b      	lsrs	r3, r3, #4
 8002c4a:	f003 030f 	and.w	r3, r3, #15
 8002c4e:	4a2b      	ldr	r2, [pc, #172]	; (8002cfc <HAL_RCC_GetSysClockFreq+0x134>)
 8002c50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c54:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d115      	bne.n	8002c88 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002c60:	e012      	b.n	8002c88 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	2b04      	cmp	r3, #4
 8002c66:	d102      	bne.n	8002c6e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002c68:	4b25      	ldr	r3, [pc, #148]	; (8002d00 <HAL_RCC_GetSysClockFreq+0x138>)
 8002c6a:	617b      	str	r3, [r7, #20]
 8002c6c:	e00c      	b.n	8002c88 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	2b08      	cmp	r3, #8
 8002c72:	d109      	bne.n	8002c88 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002c74:	f7ff f8a0 	bl	8001db8 <LL_RCC_HSE_IsEnabledDiv2>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d102      	bne.n	8002c84 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002c7e:	4b20      	ldr	r3, [pc, #128]	; (8002d00 <HAL_RCC_GetSysClockFreq+0x138>)
 8002c80:	617b      	str	r3, [r7, #20]
 8002c82:	e001      	b.n	8002c88 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002c84:	4b1f      	ldr	r3, [pc, #124]	; (8002d04 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002c86:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c88:	f7ff f9d1 	bl	800202e <LL_RCC_GetSysClkSource>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b0c      	cmp	r3, #12
 8002c90:	d12f      	bne.n	8002cf2 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002c92:	f7ff faa3 	bl	80021dc <LL_RCC_PLL_GetMainSource>
 8002c96:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d003      	beq.n	8002ca6 <HAL_RCC_GetSysClockFreq+0xde>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2b03      	cmp	r3, #3
 8002ca2:	d003      	beq.n	8002cac <HAL_RCC_GetSysClockFreq+0xe4>
 8002ca4:	e00d      	b.n	8002cc2 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002ca6:	4b16      	ldr	r3, [pc, #88]	; (8002d00 <HAL_RCC_GetSysClockFreq+0x138>)
 8002ca8:	60fb      	str	r3, [r7, #12]
        break;
 8002caa:	e00d      	b.n	8002cc8 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002cac:	f7ff f884 	bl	8001db8 <LL_RCC_HSE_IsEnabledDiv2>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d102      	bne.n	8002cbc <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002cb6:	4b12      	ldr	r3, [pc, #72]	; (8002d00 <HAL_RCC_GetSysClockFreq+0x138>)
 8002cb8:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002cba:	e005      	b.n	8002cc8 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8002cbc:	4b11      	ldr	r3, [pc, #68]	; (8002d04 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002cbe:	60fb      	str	r3, [r7, #12]
        break;
 8002cc0:	e002      	b.n	8002cc8 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	60fb      	str	r3, [r7, #12]
        break;
 8002cc6:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002cc8:	f7ff fa66 	bl	8002198 <LL_RCC_PLL_GetN>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	fb03 f402 	mul.w	r4, r3, r2
 8002cd4:	f7ff fa77 	bl	80021c6 <LL_RCC_PLL_GetDivider>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	091b      	lsrs	r3, r3, #4
 8002cdc:	3301      	adds	r3, #1
 8002cde:	fbb4 f4f3 	udiv	r4, r4, r3
 8002ce2:	f7ff fa65 	bl	80021b0 <LL_RCC_PLL_GetR>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	0f5b      	lsrs	r3, r3, #29
 8002cea:	3301      	adds	r3, #1
 8002cec:	fbb4 f3f3 	udiv	r3, r4, r3
 8002cf0:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002cf2:	697b      	ldr	r3, [r7, #20]
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	371c      	adds	r7, #28
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd90      	pop	{r4, r7, pc}
 8002cfc:	08006c7c 	.word	0x08006c7c
 8002d00:	00f42400 	.word	0x00f42400
 8002d04:	01e84800 	.word	0x01e84800

08002d08 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d08:	b598      	push	{r3, r4, r7, lr}
 8002d0a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002d0c:	f7ff ff5c 	bl	8002bc8 <HAL_RCC_GetSysClockFreq>
 8002d10:	4604      	mov	r4, r0
 8002d12:	f7ff f9e6 	bl	80020e2 <LL_RCC_GetAHBPrescaler>
 8002d16:	4603      	mov	r3, r0
 8002d18:	091b      	lsrs	r3, r3, #4
 8002d1a:	f003 030f 	and.w	r3, r3, #15
 8002d1e:	4a03      	ldr	r2, [pc, #12]	; (8002d2c <HAL_RCC_GetHCLKFreq+0x24>)
 8002d20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d24:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	bd98      	pop	{r3, r4, r7, pc}
 8002d2c:	08006c1c 	.word	0x08006c1c

08002d30 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d30:	b598      	push	{r3, r4, r7, lr}
 8002d32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002d34:	f7ff ffe8 	bl	8002d08 <HAL_RCC_GetHCLKFreq>
 8002d38:	4604      	mov	r4, r0
 8002d3a:	f7ff f9ea 	bl	8002112 <LL_RCC_GetAPB1Prescaler>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	0a1b      	lsrs	r3, r3, #8
 8002d42:	4a03      	ldr	r2, [pc, #12]	; (8002d50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d48:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	bd98      	pop	{r3, r4, r7, pc}
 8002d50:	08006c5c 	.word	0x08006c5c

08002d54 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d54:	b598      	push	{r3, r4, r7, lr}
 8002d56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002d58:	f7ff ffd6 	bl	8002d08 <HAL_RCC_GetHCLKFreq>
 8002d5c:	4604      	mov	r4, r0
 8002d5e:	f7ff f9e3 	bl	8002128 <LL_RCC_GetAPB2Prescaler>
 8002d62:	4603      	mov	r3, r0
 8002d64:	0adb      	lsrs	r3, r3, #11
 8002d66:	4a03      	ldr	r2, [pc, #12]	; (8002d74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d6c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	bd98      	pop	{r3, r4, r7, pc}
 8002d74:	08006c5c 	.word	0x08006c5c

08002d78 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002d78:	b590      	push	{r4, r7, lr}
 8002d7a:	b085      	sub	sp, #20
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	091b      	lsrs	r3, r3, #4
 8002d84:	f003 030f 	and.w	r3, r3, #15
 8002d88:	4a10      	ldr	r2, [pc, #64]	; (8002dcc <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8002d8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d8e:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8002d90:	f7ff f9b2 	bl	80020f8 <LL_RCC_GetAHB3Prescaler>
 8002d94:	4603      	mov	r3, r0
 8002d96:	091b      	lsrs	r3, r3, #4
 8002d98:	f003 030f 	and.w	r3, r3, #15
 8002d9c:	4a0c      	ldr	r2, [pc, #48]	; (8002dd0 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8002d9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002da2:	68fa      	ldr	r2, [r7, #12]
 8002da4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002da8:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	4a09      	ldr	r2, [pc, #36]	; (8002dd4 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8002dae:	fba2 2303 	umull	r2, r3, r2, r3
 8002db2:	0c9c      	lsrs	r4, r3, #18
 8002db4:	f7fe ffc6 	bl	8001d44 <HAL_PWREx_GetVoltageRange>
 8002db8:	4603      	mov	r3, r0
 8002dba:	4619      	mov	r1, r3
 8002dbc:	4620      	mov	r0, r4
 8002dbe:	f000 f80b 	bl	8002dd8 <RCC_SetFlashLatency>
 8002dc2:	4603      	mov	r3, r0
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3714      	adds	r7, #20
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd90      	pop	{r4, r7, pc}
 8002dcc:	08006c7c 	.word	0x08006c7c
 8002dd0:	08006c1c 	.word	0x08006c1c
 8002dd4:	431bde83 	.word	0x431bde83

08002dd8 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b08e      	sub	sp, #56	; 0x38
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8002de2:	4a3a      	ldr	r2, [pc, #232]	; (8002ecc <RCC_SetFlashLatency+0xf4>)
 8002de4:	f107 0320 	add.w	r3, r7, #32
 8002de8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002dec:	6018      	str	r0, [r3, #0]
 8002dee:	3304      	adds	r3, #4
 8002df0:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8002df2:	4a37      	ldr	r2, [pc, #220]	; (8002ed0 <RCC_SetFlashLatency+0xf8>)
 8002df4:	f107 0318 	add.w	r3, r7, #24
 8002df8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002dfc:	6018      	str	r0, [r3, #0]
 8002dfe:	3304      	adds	r3, #4
 8002e00:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8002e02:	4a34      	ldr	r2, [pc, #208]	; (8002ed4 <RCC_SetFlashLatency+0xfc>)
 8002e04:	f107 030c 	add.w	r3, r7, #12
 8002e08:	ca07      	ldmia	r2, {r0, r1, r2}
 8002e0a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002e0e:	2300      	movs	r3, #0
 8002e10:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e18:	d11b      	bne.n	8002e52 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	633b      	str	r3, [r7, #48]	; 0x30
 8002e1e:	e014      	b.n	8002e4a <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e22:	005b      	lsls	r3, r3, #1
 8002e24:	3338      	adds	r3, #56	; 0x38
 8002e26:	443b      	add	r3, r7
 8002e28:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d807      	bhi.n	8002e44 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	3338      	adds	r3, #56	; 0x38
 8002e3a:	443b      	add	r3, r7
 8002e3c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002e40:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002e42:	e021      	b.n	8002e88 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e46:	3301      	adds	r3, #1
 8002e48:	633b      	str	r3, [r7, #48]	; 0x30
 8002e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	d9e7      	bls.n	8002e20 <RCC_SetFlashLatency+0x48>
 8002e50:	e01a      	b.n	8002e88 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002e52:	2300      	movs	r3, #0
 8002e54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e56:	e014      	b.n	8002e82 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e5a:	005b      	lsls	r3, r3, #1
 8002e5c:	3338      	adds	r3, #56	; 0x38
 8002e5e:	443b      	add	r3, r7
 8002e60:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8002e64:	461a      	mov	r2, r3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d807      	bhi.n	8002e7c <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	3338      	adds	r3, #56	; 0x38
 8002e72:	443b      	add	r3, r7
 8002e74:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002e78:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002e7a:	e005      	b.n	8002e88 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e7e:	3301      	adds	r3, #1
 8002e80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d9e7      	bls.n	8002e58 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002e88:	4b13      	ldr	r3, [pc, #76]	; (8002ed8 <RCC_SetFlashLatency+0x100>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f023 0207 	bic.w	r2, r3, #7
 8002e90:	4911      	ldr	r1, [pc, #68]	; (8002ed8 <RCC_SetFlashLatency+0x100>)
 8002e92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e94:	4313      	orrs	r3, r2
 8002e96:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002e98:	f7fe fca8 	bl	80017ec <HAL_GetTick>
 8002e9c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002e9e:	e008      	b.n	8002eb2 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002ea0:	f7fe fca4 	bl	80017ec <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d901      	bls.n	8002eb2 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e007      	b.n	8002ec2 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002eb2:	4b09      	ldr	r3, [pc, #36]	; (8002ed8 <RCC_SetFlashLatency+0x100>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0307 	and.w	r3, r3, #7
 8002eba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d1ef      	bne.n	8002ea0 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8002ec0:	2300      	movs	r3, #0
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3738      	adds	r7, #56	; 0x38
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	08006c00 	.word	0x08006c00
 8002ed0:	08006c08 	.word	0x08006c08
 8002ed4:	08006c10 	.word	0x08006c10
 8002ed8:	58004000 	.word	0x58004000

08002edc <LL_RCC_LSE_IsReady>:
{
 8002edc:	b480      	push	{r7}
 8002ede:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002ee0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ee8:	f003 0302 	and.w	r3, r3, #2
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d101      	bne.n	8002ef4 <LL_RCC_LSE_IsReady+0x18>
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e000      	b.n	8002ef6 <LL_RCC_LSE_IsReady+0x1a>
 8002ef4:	2300      	movs	r3, #0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bc80      	pop	{r7}
 8002efc:	4770      	bx	lr

08002efe <LL_RCC_SetUSARTClockSource>:
{
 8002efe:	b480      	push	{r7}
 8002f00:	b083      	sub	sp, #12
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8002f06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f0a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	0c1b      	lsrs	r3, r3, #16
 8002f12:	43db      	mvns	r3, r3
 8002f14:	401a      	ands	r2, r3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002f24:	bf00      	nop
 8002f26:	370c      	adds	r7, #12
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bc80      	pop	{r7}
 8002f2c:	4770      	bx	lr

08002f2e <LL_RCC_SetI2SClockSource>:
{
 8002f2e:	b480      	push	{r7}
 8002f30:	b083      	sub	sp, #12
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8002f36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f3e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002f4e:	bf00      	nop
 8002f50:	370c      	adds	r7, #12
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bc80      	pop	{r7}
 8002f56:	4770      	bx	lr

08002f58 <LL_RCC_SetLPUARTClockSource>:
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002f60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f68:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002f6c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002f78:	bf00      	nop
 8002f7a:	370c      	adds	r7, #12
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bc80      	pop	{r7}
 8002f80:	4770      	bx	lr

08002f82 <LL_RCC_SetI2CClockSource>:
{
 8002f82:	b480      	push	{r7}
 8002f84:	b083      	sub	sp, #12
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002f8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f8e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	091b      	lsrs	r3, r3, #4
 8002f96:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002f9a:	43db      	mvns	r3, r3
 8002f9c:	401a      	ands	r2, r3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	011b      	lsls	r3, r3, #4
 8002fa2:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002fa6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002faa:	4313      	orrs	r3, r2
 8002fac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002fb0:	bf00      	nop
 8002fb2:	370c      	adds	r7, #12
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bc80      	pop	{r7}
 8002fb8:	4770      	bx	lr

08002fba <LL_RCC_SetLPTIMClockSource>:
{
 8002fba:	b480      	push	{r7}
 8002fbc:	b083      	sub	sp, #12
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002fc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fc6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	0c1b      	lsrs	r3, r3, #16
 8002fce:	041b      	lsls	r3, r3, #16
 8002fd0:	43db      	mvns	r3, r3
 8002fd2:	401a      	ands	r2, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	041b      	lsls	r3, r3, #16
 8002fd8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002fe2:	bf00      	nop
 8002fe4:	370c      	adds	r7, #12
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bc80      	pop	{r7}
 8002fea:	4770      	bx	lr

08002fec <LL_RCC_SetRNGClockSource>:
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002ff4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ffc:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003000:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	4313      	orrs	r3, r2
 8003008:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800300c:	bf00      	nop
 800300e:	370c      	adds	r7, #12
 8003010:	46bd      	mov	sp, r7
 8003012:	bc80      	pop	{r7}
 8003014:	4770      	bx	lr

08003016 <LL_RCC_SetADCClockSource>:
{
 8003016:	b480      	push	{r7}
 8003018:	b083      	sub	sp, #12
 800301a:	af00      	add	r7, sp, #0
 800301c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800301e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003026:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800302a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4313      	orrs	r3, r2
 8003032:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003036:	bf00      	nop
 8003038:	370c      	adds	r7, #12
 800303a:	46bd      	mov	sp, r7
 800303c:	bc80      	pop	{r7}
 800303e:	4770      	bx	lr

08003040 <LL_RCC_SetRTCClockSource>:
{
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003048:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800304c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003050:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003054:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	4313      	orrs	r3, r2
 800305c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003060:	bf00      	nop
 8003062:	370c      	adds	r7, #12
 8003064:	46bd      	mov	sp, r7
 8003066:	bc80      	pop	{r7}
 8003068:	4770      	bx	lr

0800306a <LL_RCC_GetRTCClockSource>:
{
 800306a:	b480      	push	{r7}
 800306c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800306e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003072:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003076:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800307a:	4618      	mov	r0, r3
 800307c:	46bd      	mov	sp, r7
 800307e:	bc80      	pop	{r7}
 8003080:	4770      	bx	lr

08003082 <LL_RCC_ForceBackupDomainReset>:
{
 8003082:	b480      	push	{r7}
 8003084:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003086:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800308a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800308e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003092:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003096:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800309a:	bf00      	nop
 800309c:	46bd      	mov	sp, r7
 800309e:	bc80      	pop	{r7}
 80030a0:	4770      	bx	lr

080030a2 <LL_RCC_ReleaseBackupDomainReset>:
{
 80030a2:	b480      	push	{r7}
 80030a4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80030a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80030ba:	bf00      	nop
 80030bc:	46bd      	mov	sp, r7
 80030be:	bc80      	pop	{r7}
 80030c0:	4770      	bx	lr
	...

080030c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b086      	sub	sp, #24
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 80030cc:	2300      	movs	r3, #0
 80030ce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 80030d0:	2300      	movs	r3, #0
 80030d2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80030d4:	2300      	movs	r3, #0
 80030d6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d058      	beq.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 80030e4:	f7fe fe20 	bl	8001d28 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80030e8:	f7fe fb80 	bl	80017ec <HAL_GetTick>
 80030ec:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80030ee:	e009      	b.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030f0:	f7fe fb7c 	bl	80017ec <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d902      	bls.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	74fb      	strb	r3, [r7, #19]
        break;
 8003102:	e006      	b.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003104:	4b7b      	ldr	r3, [pc, #492]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800310c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003110:	d1ee      	bne.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8003112:	7cfb      	ldrb	r3, [r7, #19]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d13c      	bne.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8003118:	f7ff ffa7 	bl	800306a <LL_RCC_GetRTCClockSource>
 800311c:	4602      	mov	r2, r0
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003122:	429a      	cmp	r2, r3
 8003124:	d00f      	beq.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003126:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800312a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800312e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003132:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003134:	f7ff ffa5 	bl	8003082 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003138:	f7ff ffb3 	bl	80030a2 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800313c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	f003 0302 	and.w	r3, r3, #2
 800314c:	2b00      	cmp	r3, #0
 800314e:	d014      	beq.n	800317a <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003150:	f7fe fb4c 	bl	80017ec <HAL_GetTick>
 8003154:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8003156:	e00b      	b.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003158:	f7fe fb48 	bl	80017ec <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	f241 3288 	movw	r2, #5000	; 0x1388
 8003166:	4293      	cmp	r3, r2
 8003168:	d902      	bls.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 800316a:	2303      	movs	r3, #3
 800316c:	74fb      	strb	r3, [r7, #19]
            break;
 800316e:	e004      	b.n	800317a <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8003170:	f7ff feb4 	bl	8002edc <LL_RCC_LSE_IsReady>
 8003174:	4603      	mov	r3, r0
 8003176:	2b01      	cmp	r3, #1
 8003178:	d1ee      	bne.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 800317a:	7cfb      	ldrb	r3, [r7, #19]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d105      	bne.n	800318c <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003184:	4618      	mov	r0, r3
 8003186:	f7ff ff5b 	bl	8003040 <LL_RCC_SetRTCClockSource>
 800318a:	e004      	b.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800318c:	7cfb      	ldrb	r3, [r7, #19]
 800318e:	74bb      	strb	r3, [r7, #18]
 8003190:	e001      	b.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003192:	7cfb      	ldrb	r3, [r7, #19]
 8003194:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0301 	and.w	r3, r3, #1
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d004      	beq.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	4618      	mov	r0, r3
 80031a8:	f7ff fea9 	bl	8002efe <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0302 	and.w	r3, r3, #2
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d004      	beq.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	4618      	mov	r0, r3
 80031be:	f7ff fe9e 	bl	8002efe <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0320 	and.w	r3, r3, #32
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d004      	beq.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	691b      	ldr	r3, [r3, #16]
 80031d2:	4618      	mov	r0, r3
 80031d4:	f7ff fec0 	bl	8002f58 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d004      	beq.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6a1b      	ldr	r3, [r3, #32]
 80031e8:	4618      	mov	r0, r3
 80031ea:	f7ff fee6 	bl	8002fba <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d004      	beq.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fe:	4618      	mov	r0, r3
 8003200:	f7ff fedb 	bl	8002fba <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800320c:	2b00      	cmp	r3, #0
 800320e:	d004      	beq.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003214:	4618      	mov	r0, r3
 8003216:	f7ff fed0 	bl	8002fba <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003222:	2b00      	cmp	r3, #0
 8003224:	d004      	beq.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	695b      	ldr	r3, [r3, #20]
 800322a:	4618      	mov	r0, r3
 800322c:	f7ff fea9 	bl	8002f82 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003238:	2b00      	cmp	r3, #0
 800323a:	d004      	beq.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	699b      	ldr	r3, [r3, #24]
 8003240:	4618      	mov	r0, r3
 8003242:	f7ff fe9e 	bl	8002f82 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800324e:	2b00      	cmp	r3, #0
 8003250:	d004      	beq.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	69db      	ldr	r3, [r3, #28]
 8003256:	4618      	mov	r0, r3
 8003258:	f7ff fe93 	bl	8002f82 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0310 	and.w	r3, r3, #16
 8003264:	2b00      	cmp	r3, #0
 8003266:	d011      	beq.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	4618      	mov	r0, r3
 800326e:	f7ff fe5e 	bl	8002f2e <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	68db      	ldr	r3, [r3, #12]
 8003276:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800327a:	d107      	bne.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 800327c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003286:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800328a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d010      	beq.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329c:	4618      	mov	r0, r3
 800329e:	f7ff fea5 	bl	8002fec <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d107      	bne.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80032aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032b4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032b8:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d011      	beq.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ca:	4618      	mov	r0, r3
 80032cc:	f7ff fea3 	bl	8003016 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032d8:	d107      	bne.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80032da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032e8:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 80032ea:	7cbb      	ldrb	r3, [r7, #18]
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3718      	adds	r7, #24
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	58000400 	.word	0x58000400

080032f8 <LL_RCC_GetUSARTClockSource>:
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8003300:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003304:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	401a      	ands	r2, r3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	041b      	lsls	r3, r3, #16
 8003310:	4313      	orrs	r3, r2
}
 8003312:	4618      	mov	r0, r3
 8003314:	370c      	adds	r7, #12
 8003316:	46bd      	mov	sp, r7
 8003318:	bc80      	pop	{r7}
 800331a:	4770      	bx	lr

0800331c <LL_RCC_GetLPUARTClockSource>:
{
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8003324:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003328:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	4013      	ands	r3, r2
}
 8003330:	4618      	mov	r0, r3
 8003332:	370c      	adds	r7, #12
 8003334:	46bd      	mov	sp, r7
 8003336:	bc80      	pop	{r7}
 8003338:	4770      	bx	lr

0800333a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800333a:	b580      	push	{r7, lr}
 800333c:	b082      	sub	sp, #8
 800333e:	af00      	add	r7, sp, #0
 8003340:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d101      	bne.n	800334c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e042      	b.n	80033d2 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003352:	2b00      	cmp	r3, #0
 8003354:	d106      	bne.n	8003364 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f7fe f87a 	bl	8001458 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2224      	movs	r2, #36	; 0x24
 8003368:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f022 0201 	bic.w	r2, r2, #1
 800337a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f000 f8b3 	bl	80034e8 <UART_SetConfig>
 8003382:	4603      	mov	r3, r0
 8003384:	2b01      	cmp	r3, #1
 8003386:	d101      	bne.n	800338c <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	e022      	b.n	80033d2 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003390:	2b00      	cmp	r3, #0
 8003392:	d002      	beq.n	800339a <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	f000 fb1b 	bl	80039d0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	685a      	ldr	r2, [r3, #4]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80033a8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	689a      	ldr	r2, [r3, #8]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033b8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f042 0201 	orr.w	r2, r2, #1
 80033c8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f000 fba1 	bl	8003b12 <UART_CheckIdleState>
 80033d0:	4603      	mov	r3, r0
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3708      	adds	r7, #8
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}

080033da <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033da:	b580      	push	{r7, lr}
 80033dc:	b08a      	sub	sp, #40	; 0x28
 80033de:	af02      	add	r7, sp, #8
 80033e0:	60f8      	str	r0, [r7, #12]
 80033e2:	60b9      	str	r1, [r7, #8]
 80033e4:	603b      	str	r3, [r7, #0]
 80033e6:	4613      	mov	r3, r2
 80033e8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033f0:	2b20      	cmp	r3, #32
 80033f2:	d173      	bne.n	80034dc <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d002      	beq.n	8003400 <HAL_UART_Transmit+0x26>
 80033fa:	88fb      	ldrh	r3, [r7, #6]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d101      	bne.n	8003404 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	e06c      	b.n	80034de <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2200      	movs	r2, #0
 8003408:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2221      	movs	r2, #33	; 0x21
 8003410:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003414:	f7fe f9ea 	bl	80017ec <HAL_GetTick>
 8003418:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	88fa      	ldrh	r2, [r7, #6]
 800341e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	88fa      	ldrh	r2, [r7, #6]
 8003426:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003432:	d108      	bne.n	8003446 <HAL_UART_Transmit+0x6c>
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	691b      	ldr	r3, [r3, #16]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d104      	bne.n	8003446 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800343c:	2300      	movs	r3, #0
 800343e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	61bb      	str	r3, [r7, #24]
 8003444:	e003      	b.n	800344e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800344a:	2300      	movs	r3, #0
 800344c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800344e:	e02c      	b.n	80034aa <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	9300      	str	r3, [sp, #0]
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	2200      	movs	r2, #0
 8003458:	2180      	movs	r1, #128	; 0x80
 800345a:	68f8      	ldr	r0, [r7, #12]
 800345c:	f000 fba7 	bl	8003bae <UART_WaitOnFlagUntilTimeout>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d001      	beq.n	800346a <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e039      	b.n	80034de <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d10b      	bne.n	8003488 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003470:	69bb      	ldr	r3, [r7, #24]
 8003472:	881b      	ldrh	r3, [r3, #0]
 8003474:	461a      	mov	r2, r3
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800347e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003480:	69bb      	ldr	r3, [r7, #24]
 8003482:	3302      	adds	r3, #2
 8003484:	61bb      	str	r3, [r7, #24]
 8003486:	e007      	b.n	8003498 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	781a      	ldrb	r2, [r3, #0]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	3301      	adds	r3, #1
 8003496:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800349e:	b29b      	uxth	r3, r3
 80034a0:	3b01      	subs	r3, #1
 80034a2:	b29a      	uxth	r2, r3
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d1cc      	bne.n	8003450 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	9300      	str	r3, [sp, #0]
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	2200      	movs	r2, #0
 80034be:	2140      	movs	r1, #64	; 0x40
 80034c0:	68f8      	ldr	r0, [r7, #12]
 80034c2:	f000 fb74 	bl	8003bae <UART_WaitOnFlagUntilTimeout>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d001      	beq.n	80034d0 <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 80034cc:	2303      	movs	r3, #3
 80034ce:	e006      	b.n	80034de <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2220      	movs	r2, #32
 80034d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80034d8:	2300      	movs	r3, #0
 80034da:	e000      	b.n	80034de <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 80034dc:	2302      	movs	r3, #2
  }
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3720      	adds	r7, #32
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
	...

080034e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034ec:	b08c      	sub	sp, #48	; 0x30
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80034f2:	2300      	movs	r3, #0
 80034f4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	689a      	ldr	r2, [r3, #8]
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	691b      	ldr	r3, [r3, #16]
 8003500:	431a      	orrs	r2, r3
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	695b      	ldr	r3, [r3, #20]
 8003506:	431a      	orrs	r2, r3
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	69db      	ldr	r3, [r3, #28]
 800350c:	4313      	orrs	r3, r2
 800350e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	4b94      	ldr	r3, [pc, #592]	; (8003768 <UART_SetConfig+0x280>)
 8003518:	4013      	ands	r3, r2
 800351a:	697a      	ldr	r2, [r7, #20]
 800351c:	6812      	ldr	r2, [r2, #0]
 800351e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003520:	430b      	orrs	r3, r1
 8003522:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	68da      	ldr	r2, [r3, #12]
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	430a      	orrs	r2, r1
 8003538:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	699b      	ldr	r3, [r3, #24]
 800353e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a89      	ldr	r2, [pc, #548]	; (800376c <UART_SetConfig+0x284>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d004      	beq.n	8003554 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	6a1b      	ldr	r3, [r3, #32]
 800354e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003550:	4313      	orrs	r3, r2
 8003552:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800355e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003562:	697a      	ldr	r2, [r7, #20]
 8003564:	6812      	ldr	r2, [r2, #0]
 8003566:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003568:	430b      	orrs	r3, r1
 800356a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003572:	f023 010f 	bic.w	r1, r3, #15
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	430a      	orrs	r2, r1
 8003580:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a7a      	ldr	r2, [pc, #488]	; (8003770 <UART_SetConfig+0x288>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d127      	bne.n	80035dc <UART_SetConfig+0xf4>
 800358c:	2003      	movs	r0, #3
 800358e:	f7ff feb3 	bl	80032f8 <LL_RCC_GetUSARTClockSource>
 8003592:	4603      	mov	r3, r0
 8003594:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8003598:	2b03      	cmp	r3, #3
 800359a:	d81b      	bhi.n	80035d4 <UART_SetConfig+0xec>
 800359c:	a201      	add	r2, pc, #4	; (adr r2, 80035a4 <UART_SetConfig+0xbc>)
 800359e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035a2:	bf00      	nop
 80035a4:	080035b5 	.word	0x080035b5
 80035a8:	080035c5 	.word	0x080035c5
 80035ac:	080035bd 	.word	0x080035bd
 80035b0:	080035cd 	.word	0x080035cd
 80035b4:	2301      	movs	r3, #1
 80035b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035ba:	e080      	b.n	80036be <UART_SetConfig+0x1d6>
 80035bc:	2302      	movs	r3, #2
 80035be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035c2:	e07c      	b.n	80036be <UART_SetConfig+0x1d6>
 80035c4:	2304      	movs	r3, #4
 80035c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035ca:	e078      	b.n	80036be <UART_SetConfig+0x1d6>
 80035cc:	2308      	movs	r3, #8
 80035ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035d2:	e074      	b.n	80036be <UART_SetConfig+0x1d6>
 80035d4:	2310      	movs	r3, #16
 80035d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035da:	e070      	b.n	80036be <UART_SetConfig+0x1d6>
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a64      	ldr	r2, [pc, #400]	; (8003774 <UART_SetConfig+0x28c>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d138      	bne.n	8003658 <UART_SetConfig+0x170>
 80035e6:	200c      	movs	r0, #12
 80035e8:	f7ff fe86 	bl	80032f8 <LL_RCC_GetUSARTClockSource>
 80035ec:	4603      	mov	r3, r0
 80035ee:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 80035f2:	2b0c      	cmp	r3, #12
 80035f4:	d82c      	bhi.n	8003650 <UART_SetConfig+0x168>
 80035f6:	a201      	add	r2, pc, #4	; (adr r2, 80035fc <UART_SetConfig+0x114>)
 80035f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035fc:	08003631 	.word	0x08003631
 8003600:	08003651 	.word	0x08003651
 8003604:	08003651 	.word	0x08003651
 8003608:	08003651 	.word	0x08003651
 800360c:	08003641 	.word	0x08003641
 8003610:	08003651 	.word	0x08003651
 8003614:	08003651 	.word	0x08003651
 8003618:	08003651 	.word	0x08003651
 800361c:	08003639 	.word	0x08003639
 8003620:	08003651 	.word	0x08003651
 8003624:	08003651 	.word	0x08003651
 8003628:	08003651 	.word	0x08003651
 800362c:	08003649 	.word	0x08003649
 8003630:	2300      	movs	r3, #0
 8003632:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003636:	e042      	b.n	80036be <UART_SetConfig+0x1d6>
 8003638:	2302      	movs	r3, #2
 800363a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800363e:	e03e      	b.n	80036be <UART_SetConfig+0x1d6>
 8003640:	2304      	movs	r3, #4
 8003642:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003646:	e03a      	b.n	80036be <UART_SetConfig+0x1d6>
 8003648:	2308      	movs	r3, #8
 800364a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800364e:	e036      	b.n	80036be <UART_SetConfig+0x1d6>
 8003650:	2310      	movs	r3, #16
 8003652:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003656:	e032      	b.n	80036be <UART_SetConfig+0x1d6>
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a43      	ldr	r2, [pc, #268]	; (800376c <UART_SetConfig+0x284>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d12a      	bne.n	80036b8 <UART_SetConfig+0x1d0>
 8003662:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8003666:	f7ff fe59 	bl	800331c <LL_RCC_GetLPUARTClockSource>
 800366a:	4603      	mov	r3, r0
 800366c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003670:	d01a      	beq.n	80036a8 <UART_SetConfig+0x1c0>
 8003672:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003676:	d81b      	bhi.n	80036b0 <UART_SetConfig+0x1c8>
 8003678:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800367c:	d00c      	beq.n	8003698 <UART_SetConfig+0x1b0>
 800367e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003682:	d815      	bhi.n	80036b0 <UART_SetConfig+0x1c8>
 8003684:	2b00      	cmp	r3, #0
 8003686:	d003      	beq.n	8003690 <UART_SetConfig+0x1a8>
 8003688:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800368c:	d008      	beq.n	80036a0 <UART_SetConfig+0x1b8>
 800368e:	e00f      	b.n	80036b0 <UART_SetConfig+0x1c8>
 8003690:	2300      	movs	r3, #0
 8003692:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003696:	e012      	b.n	80036be <UART_SetConfig+0x1d6>
 8003698:	2302      	movs	r3, #2
 800369a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800369e:	e00e      	b.n	80036be <UART_SetConfig+0x1d6>
 80036a0:	2304      	movs	r3, #4
 80036a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036a6:	e00a      	b.n	80036be <UART_SetConfig+0x1d6>
 80036a8:	2308      	movs	r3, #8
 80036aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036ae:	e006      	b.n	80036be <UART_SetConfig+0x1d6>
 80036b0:	2310      	movs	r3, #16
 80036b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036b6:	e002      	b.n	80036be <UART_SetConfig+0x1d6>
 80036b8:	2310      	movs	r3, #16
 80036ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a2a      	ldr	r2, [pc, #168]	; (800376c <UART_SetConfig+0x284>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	f040 80a4 	bne.w	8003812 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80036ca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80036ce:	2b08      	cmp	r3, #8
 80036d0:	d823      	bhi.n	800371a <UART_SetConfig+0x232>
 80036d2:	a201      	add	r2, pc, #4	; (adr r2, 80036d8 <UART_SetConfig+0x1f0>)
 80036d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036d8:	080036fd 	.word	0x080036fd
 80036dc:	0800371b 	.word	0x0800371b
 80036e0:	08003705 	.word	0x08003705
 80036e4:	0800371b 	.word	0x0800371b
 80036e8:	0800370b 	.word	0x0800370b
 80036ec:	0800371b 	.word	0x0800371b
 80036f0:	0800371b 	.word	0x0800371b
 80036f4:	0800371b 	.word	0x0800371b
 80036f8:	08003713 	.word	0x08003713
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036fc:	f7ff fb18 	bl	8002d30 <HAL_RCC_GetPCLK1Freq>
 8003700:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003702:	e010      	b.n	8003726 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003704:	4b1c      	ldr	r3, [pc, #112]	; (8003778 <UART_SetConfig+0x290>)
 8003706:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003708:	e00d      	b.n	8003726 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800370a:	f7ff fa5d 	bl	8002bc8 <HAL_RCC_GetSysClockFreq>
 800370e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003710:	e009      	b.n	8003726 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003712:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003716:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003718:	e005      	b.n	8003726 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 800371a:	2300      	movs	r3, #0
 800371c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003724:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003728:	2b00      	cmp	r3, #0
 800372a:	f000 8137 	beq.w	800399c <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003732:	4a12      	ldr	r2, [pc, #72]	; (800377c <UART_SetConfig+0x294>)
 8003734:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003738:	461a      	mov	r2, r3
 800373a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003740:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	685a      	ldr	r2, [r3, #4]
 8003746:	4613      	mov	r3, r2
 8003748:	005b      	lsls	r3, r3, #1
 800374a:	4413      	add	r3, r2
 800374c:	69ba      	ldr	r2, [r7, #24]
 800374e:	429a      	cmp	r2, r3
 8003750:	d305      	bcc.n	800375e <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003758:	69ba      	ldr	r2, [r7, #24]
 800375a:	429a      	cmp	r2, r3
 800375c:	d910      	bls.n	8003780 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003764:	e11a      	b.n	800399c <UART_SetConfig+0x4b4>
 8003766:	bf00      	nop
 8003768:	cfff69f3 	.word	0xcfff69f3
 800376c:	40008000 	.word	0x40008000
 8003770:	40013800 	.word	0x40013800
 8003774:	40004400 	.word	0x40004400
 8003778:	00f42400 	.word	0x00f42400
 800377c:	08006cbc 	.word	0x08006cbc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003782:	2200      	movs	r2, #0
 8003784:	60bb      	str	r3, [r7, #8]
 8003786:	60fa      	str	r2, [r7, #12]
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378c:	4a8e      	ldr	r2, [pc, #568]	; (80039c8 <UART_SetConfig+0x4e0>)
 800378e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003792:	b29b      	uxth	r3, r3
 8003794:	2200      	movs	r2, #0
 8003796:	603b      	str	r3, [r7, #0]
 8003798:	607a      	str	r2, [r7, #4]
 800379a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800379e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80037a2:	f7fd fa29 	bl	8000bf8 <__aeabi_uldivmod>
 80037a6:	4602      	mov	r2, r0
 80037a8:	460b      	mov	r3, r1
 80037aa:	4610      	mov	r0, r2
 80037ac:	4619      	mov	r1, r3
 80037ae:	f04f 0200 	mov.w	r2, #0
 80037b2:	f04f 0300 	mov.w	r3, #0
 80037b6:	020b      	lsls	r3, r1, #8
 80037b8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80037bc:	0202      	lsls	r2, r0, #8
 80037be:	6979      	ldr	r1, [r7, #20]
 80037c0:	6849      	ldr	r1, [r1, #4]
 80037c2:	0849      	lsrs	r1, r1, #1
 80037c4:	2000      	movs	r0, #0
 80037c6:	460c      	mov	r4, r1
 80037c8:	4605      	mov	r5, r0
 80037ca:	eb12 0804 	adds.w	r8, r2, r4
 80037ce:	eb43 0905 	adc.w	r9, r3, r5
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	2200      	movs	r2, #0
 80037d8:	469a      	mov	sl, r3
 80037da:	4693      	mov	fp, r2
 80037dc:	4652      	mov	r2, sl
 80037de:	465b      	mov	r3, fp
 80037e0:	4640      	mov	r0, r8
 80037e2:	4649      	mov	r1, r9
 80037e4:	f7fd fa08 	bl	8000bf8 <__aeabi_uldivmod>
 80037e8:	4602      	mov	r2, r0
 80037ea:	460b      	mov	r3, r1
 80037ec:	4613      	mov	r3, r2
 80037ee:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80037f0:	6a3b      	ldr	r3, [r7, #32]
 80037f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037f6:	d308      	bcc.n	800380a <UART_SetConfig+0x322>
 80037f8:	6a3b      	ldr	r3, [r7, #32]
 80037fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037fe:	d204      	bcs.n	800380a <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	6a3a      	ldr	r2, [r7, #32]
 8003806:	60da      	str	r2, [r3, #12]
 8003808:	e0c8      	b.n	800399c <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003810:	e0c4      	b.n	800399c <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	69db      	ldr	r3, [r3, #28]
 8003816:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800381a:	d167      	bne.n	80038ec <UART_SetConfig+0x404>
  {
    switch (clocksource)
 800381c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003820:	2b08      	cmp	r3, #8
 8003822:	d828      	bhi.n	8003876 <UART_SetConfig+0x38e>
 8003824:	a201      	add	r2, pc, #4	; (adr r2, 800382c <UART_SetConfig+0x344>)
 8003826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800382a:	bf00      	nop
 800382c:	08003851 	.word	0x08003851
 8003830:	08003859 	.word	0x08003859
 8003834:	08003861 	.word	0x08003861
 8003838:	08003877 	.word	0x08003877
 800383c:	08003867 	.word	0x08003867
 8003840:	08003877 	.word	0x08003877
 8003844:	08003877 	.word	0x08003877
 8003848:	08003877 	.word	0x08003877
 800384c:	0800386f 	.word	0x0800386f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003850:	f7ff fa6e 	bl	8002d30 <HAL_RCC_GetPCLK1Freq>
 8003854:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003856:	e014      	b.n	8003882 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003858:	f7ff fa7c 	bl	8002d54 <HAL_RCC_GetPCLK2Freq>
 800385c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800385e:	e010      	b.n	8003882 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003860:	4b5a      	ldr	r3, [pc, #360]	; (80039cc <UART_SetConfig+0x4e4>)
 8003862:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003864:	e00d      	b.n	8003882 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003866:	f7ff f9af 	bl	8002bc8 <HAL_RCC_GetSysClockFreq>
 800386a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800386c:	e009      	b.n	8003882 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800386e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003872:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003874:	e005      	b.n	8003882 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8003876:	2300      	movs	r3, #0
 8003878:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003880:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003884:	2b00      	cmp	r3, #0
 8003886:	f000 8089 	beq.w	800399c <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388e:	4a4e      	ldr	r2, [pc, #312]	; (80039c8 <UART_SetConfig+0x4e0>)
 8003890:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003894:	461a      	mov	r2, r3
 8003896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003898:	fbb3 f3f2 	udiv	r3, r3, r2
 800389c:	005a      	lsls	r2, r3, #1
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	085b      	lsrs	r3, r3, #1
 80038a4:	441a      	add	r2, r3
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ae:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038b0:	6a3b      	ldr	r3, [r7, #32]
 80038b2:	2b0f      	cmp	r3, #15
 80038b4:	d916      	bls.n	80038e4 <UART_SetConfig+0x3fc>
 80038b6:	6a3b      	ldr	r3, [r7, #32]
 80038b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038bc:	d212      	bcs.n	80038e4 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80038be:	6a3b      	ldr	r3, [r7, #32]
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	f023 030f 	bic.w	r3, r3, #15
 80038c6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80038c8:	6a3b      	ldr	r3, [r7, #32]
 80038ca:	085b      	lsrs	r3, r3, #1
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	f003 0307 	and.w	r3, r3, #7
 80038d2:	b29a      	uxth	r2, r3
 80038d4:	8bfb      	ldrh	r3, [r7, #30]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	8bfa      	ldrh	r2, [r7, #30]
 80038e0:	60da      	str	r2, [r3, #12]
 80038e2:	e05b      	b.n	800399c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80038ea:	e057      	b.n	800399c <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80038ec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80038f0:	2b08      	cmp	r3, #8
 80038f2:	d828      	bhi.n	8003946 <UART_SetConfig+0x45e>
 80038f4:	a201      	add	r2, pc, #4	; (adr r2, 80038fc <UART_SetConfig+0x414>)
 80038f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038fa:	bf00      	nop
 80038fc:	08003921 	.word	0x08003921
 8003900:	08003929 	.word	0x08003929
 8003904:	08003931 	.word	0x08003931
 8003908:	08003947 	.word	0x08003947
 800390c:	08003937 	.word	0x08003937
 8003910:	08003947 	.word	0x08003947
 8003914:	08003947 	.word	0x08003947
 8003918:	08003947 	.word	0x08003947
 800391c:	0800393f 	.word	0x0800393f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003920:	f7ff fa06 	bl	8002d30 <HAL_RCC_GetPCLK1Freq>
 8003924:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003926:	e014      	b.n	8003952 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003928:	f7ff fa14 	bl	8002d54 <HAL_RCC_GetPCLK2Freq>
 800392c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800392e:	e010      	b.n	8003952 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003930:	4b26      	ldr	r3, [pc, #152]	; (80039cc <UART_SetConfig+0x4e4>)
 8003932:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003934:	e00d      	b.n	8003952 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003936:	f7ff f947 	bl	8002bc8 <HAL_RCC_GetSysClockFreq>
 800393a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800393c:	e009      	b.n	8003952 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800393e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003942:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003944:	e005      	b.n	8003952 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8003946:	2300      	movs	r3, #0
 8003948:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003950:	bf00      	nop
    }

    if (pclk != 0U)
 8003952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003954:	2b00      	cmp	r3, #0
 8003956:	d021      	beq.n	800399c <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395c:	4a1a      	ldr	r2, [pc, #104]	; (80039c8 <UART_SetConfig+0x4e0>)
 800395e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003962:	461a      	mov	r2, r3
 8003964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003966:	fbb3 f2f2 	udiv	r2, r3, r2
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	085b      	lsrs	r3, r3, #1
 8003970:	441a      	add	r2, r3
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	fbb2 f3f3 	udiv	r3, r2, r3
 800397a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800397c:	6a3b      	ldr	r3, [r7, #32]
 800397e:	2b0f      	cmp	r3, #15
 8003980:	d909      	bls.n	8003996 <UART_SetConfig+0x4ae>
 8003982:	6a3b      	ldr	r3, [r7, #32]
 8003984:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003988:	d205      	bcs.n	8003996 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800398a:	6a3b      	ldr	r3, [r7, #32]
 800398c:	b29a      	uxth	r2, r3
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	60da      	str	r2, [r3, #12]
 8003994:	e002      	b.n	800399c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	2201      	movs	r2, #1
 80039a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	2200      	movs	r2, #0
 80039b0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	2200      	movs	r2, #0
 80039b6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80039b8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3730      	adds	r7, #48	; 0x30
 80039c0:	46bd      	mov	sp, r7
 80039c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039c6:	bf00      	nop
 80039c8:	08006cbc 	.word	0x08006cbc
 80039cc:	00f42400 	.word	0x00f42400

080039d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b083      	sub	sp, #12
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039dc:	f003 0301 	and.w	r3, r3, #1
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d00a      	beq.n	80039fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	430a      	orrs	r2, r1
 80039f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039fe:	f003 0302 	and.w	r3, r3, #2
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d00a      	beq.n	8003a1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	430a      	orrs	r2, r1
 8003a1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a20:	f003 0304 	and.w	r3, r3, #4
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d00a      	beq.n	8003a3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	430a      	orrs	r2, r1
 8003a3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a42:	f003 0308 	and.w	r3, r3, #8
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d00a      	beq.n	8003a60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	430a      	orrs	r2, r1
 8003a5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a64:	f003 0310 	and.w	r3, r3, #16
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d00a      	beq.n	8003a82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	430a      	orrs	r2, r1
 8003a80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a86:	f003 0320 	and.w	r3, r3, #32
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d00a      	beq.n	8003aa4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	430a      	orrs	r2, r1
 8003aa2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d01a      	beq.n	8003ae6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	430a      	orrs	r2, r1
 8003ac4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ace:	d10a      	bne.n	8003ae6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	430a      	orrs	r2, r1
 8003ae4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d00a      	beq.n	8003b08 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	430a      	orrs	r2, r1
 8003b06:	605a      	str	r2, [r3, #4]
  }
}
 8003b08:	bf00      	nop
 8003b0a:	370c      	adds	r7, #12
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bc80      	pop	{r7}
 8003b10:	4770      	bx	lr

08003b12 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b12:	b580      	push	{r7, lr}
 8003b14:	b086      	sub	sp, #24
 8003b16:	af02      	add	r7, sp, #8
 8003b18:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003b22:	f7fd fe63 	bl	80017ec <HAL_GetTick>
 8003b26:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 0308 	and.w	r3, r3, #8
 8003b32:	2b08      	cmp	r3, #8
 8003b34:	d10e      	bne.n	8003b54 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b36:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003b3a:	9300      	str	r3, [sp, #0]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f000 f832 	bl	8003bae <UART_WaitOnFlagUntilTimeout>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d001      	beq.n	8003b54 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b50:	2303      	movs	r3, #3
 8003b52:	e028      	b.n	8003ba6 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0304 	and.w	r3, r3, #4
 8003b5e:	2b04      	cmp	r3, #4
 8003b60:	d10e      	bne.n	8003b80 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b62:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003b66:	9300      	str	r3, [sp, #0]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f000 f81c 	bl	8003bae <UART_WaitOnFlagUntilTimeout>
 8003b76:	4603      	mov	r3, r0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d001      	beq.n	8003b80 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	e012      	b.n	8003ba6 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2220      	movs	r2, #32
 8003b84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2220      	movs	r2, #32
 8003b8c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003ba4:	2300      	movs	r3, #0
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3710      	adds	r7, #16
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}

08003bae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003bae:	b580      	push	{r7, lr}
 8003bb0:	b09c      	sub	sp, #112	; 0x70
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	60f8      	str	r0, [r7, #12]
 8003bb6:	60b9      	str	r1, [r7, #8]
 8003bb8:	603b      	str	r3, [r7, #0]
 8003bba:	4613      	mov	r3, r2
 8003bbc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bbe:	e0a9      	b.n	8003d14 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bc0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003bc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bc6:	f000 80a5 	beq.w	8003d14 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bca:	f7fd fe0f 	bl	80017ec <HAL_GetTick>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	1ad3      	subs	r3, r2, r3
 8003bd4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d302      	bcc.n	8003be0 <UART_WaitOnFlagUntilTimeout+0x32>
 8003bda:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d140      	bne.n	8003c62 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003be6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003be8:	e853 3f00 	ldrex	r3, [r3]
 8003bec:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003bee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bf0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003bf4:	667b      	str	r3, [r7, #100]	; 0x64
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003bfe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c00:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c02:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003c04:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003c06:	e841 2300 	strex	r3, r2, [r1]
 8003c0a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003c0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d1e6      	bne.n	8003be0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	3308      	adds	r3, #8
 8003c18:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c1c:	e853 3f00 	ldrex	r3, [r3]
 8003c20:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c24:	f023 0301 	bic.w	r3, r3, #1
 8003c28:	663b      	str	r3, [r7, #96]	; 0x60
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	3308      	adds	r3, #8
 8003c30:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003c32:	64ba      	str	r2, [r7, #72]	; 0x48
 8003c34:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c36:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003c38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c3a:	e841 2300 	strex	r3, r2, [r1]
 8003c3e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003c40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d1e5      	bne.n	8003c12 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2220      	movs	r2, #32
 8003c4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2220      	movs	r2, #32
 8003c52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e069      	b.n	8003d36 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0304 	and.w	r3, r3, #4
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d051      	beq.n	8003d14 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	69db      	ldr	r3, [r3, #28]
 8003c76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c7e:	d149      	bne.n	8003d14 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c88:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c92:	e853 3f00 	ldrex	r3, [r3]
 8003c96:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003c9e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ca8:	637b      	str	r3, [r7, #52]	; 0x34
 8003caa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003cae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003cb0:	e841 2300 	strex	r3, r2, [r1]
 8003cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d1e6      	bne.n	8003c8a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	3308      	adds	r3, #8
 8003cc2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	e853 3f00 	ldrex	r3, [r3]
 8003cca:	613b      	str	r3, [r7, #16]
   return(result);
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	f023 0301 	bic.w	r3, r3, #1
 8003cd2:	66bb      	str	r3, [r7, #104]	; 0x68
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	3308      	adds	r3, #8
 8003cda:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003cdc:	623a      	str	r2, [r7, #32]
 8003cde:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ce0:	69f9      	ldr	r1, [r7, #28]
 8003ce2:	6a3a      	ldr	r2, [r7, #32]
 8003ce4:	e841 2300 	strex	r3, r2, [r1]
 8003ce8:	61bb      	str	r3, [r7, #24]
   return(result);
 8003cea:	69bb      	ldr	r3, [r7, #24]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d1e5      	bne.n	8003cbc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2220      	movs	r2, #32
 8003cf4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2220      	movs	r2, #32
 8003cfc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2220      	movs	r2, #32
 8003d04:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8003d10:	2303      	movs	r3, #3
 8003d12:	e010      	b.n	8003d36 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	69da      	ldr	r2, [r3, #28]
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	68ba      	ldr	r2, [r7, #8]
 8003d20:	429a      	cmp	r2, r3
 8003d22:	bf0c      	ite	eq
 8003d24:	2301      	moveq	r3, #1
 8003d26:	2300      	movne	r3, #0
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	79fb      	ldrb	r3, [r7, #7]
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	f43f af46 	beq.w	8003bc0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d34:	2300      	movs	r3, #0
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3770      	adds	r7, #112	; 0x70
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}

08003d3e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003d3e:	b480      	push	{r7}
 8003d40:	b085      	sub	sp, #20
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d101      	bne.n	8003d54 <HAL_UARTEx_DisableFifoMode+0x16>
 8003d50:	2302      	movs	r3, #2
 8003d52:	e027      	b.n	8003da4 <HAL_UARTEx_DisableFifoMode+0x66>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2201      	movs	r2, #1
 8003d58:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2224      	movs	r2, #36	; 0x24
 8003d60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f022 0201 	bic.w	r2, r2, #1
 8003d7a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003d82:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2200      	movs	r2, #0
 8003d88:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	68fa      	ldr	r2, [r7, #12]
 8003d90:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2220      	movs	r2, #32
 8003d96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003da2:	2300      	movs	r3, #0
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3714      	adds	r7, #20
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bc80      	pop	{r7}
 8003dac:	4770      	bx	lr

08003dae <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003dae:	b580      	push	{r7, lr}
 8003db0:	b084      	sub	sp, #16
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	6078      	str	r0, [r7, #4]
 8003db6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d101      	bne.n	8003dc6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003dc2:	2302      	movs	r3, #2
 8003dc4:	e02d      	b.n	8003e22 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2201      	movs	r2, #1
 8003dca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2224      	movs	r2, #36	; 0x24
 8003dd2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f022 0201 	bic.w	r2, r2, #1
 8003dec:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	683a      	ldr	r2, [r7, #0]
 8003dfe:	430a      	orrs	r2, r1
 8003e00:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f000 f850 	bl	8003ea8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	68fa      	ldr	r2, [r7, #12]
 8003e0e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2220      	movs	r2, #32
 8003e14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003e20:	2300      	movs	r3, #0
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3710      	adds	r7, #16
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}

08003e2a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003e2a:	b580      	push	{r7, lr}
 8003e2c:	b084      	sub	sp, #16
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	6078      	str	r0, [r7, #4]
 8003e32:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d101      	bne.n	8003e42 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003e3e:	2302      	movs	r3, #2
 8003e40:	e02d      	b.n	8003e9e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2201      	movs	r2, #1
 8003e46:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2224      	movs	r2, #36	; 0x24
 8003e4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f022 0201 	bic.w	r2, r2, #1
 8003e68:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	683a      	ldr	r2, [r7, #0]
 8003e7a:	430a      	orrs	r2, r1
 8003e7c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f000 f812 	bl	8003ea8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	68fa      	ldr	r2, [r7, #12]
 8003e8a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2220      	movs	r2, #32
 8003e90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2200      	movs	r2, #0
 8003e98:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3710      	adds	r7, #16
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
	...

08003ea8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b085      	sub	sp, #20
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d108      	bne.n	8003eca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003ec8:	e031      	b.n	8003f2e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003eca:	2308      	movs	r3, #8
 8003ecc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003ece:	2308      	movs	r3, #8
 8003ed0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	0e5b      	lsrs	r3, r3, #25
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	f003 0307 	and.w	r3, r3, #7
 8003ee0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	0f5b      	lsrs	r3, r3, #29
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	f003 0307 	and.w	r3, r3, #7
 8003ef0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003ef2:	7bbb      	ldrb	r3, [r7, #14]
 8003ef4:	7b3a      	ldrb	r2, [r7, #12]
 8003ef6:	4910      	ldr	r1, [pc, #64]	; (8003f38 <UARTEx_SetNbDataToProcess+0x90>)
 8003ef8:	5c8a      	ldrb	r2, [r1, r2]
 8003efa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003efe:	7b3a      	ldrb	r2, [r7, #12]
 8003f00:	490e      	ldr	r1, [pc, #56]	; (8003f3c <UARTEx_SetNbDataToProcess+0x94>)
 8003f02:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003f04:	fb93 f3f2 	sdiv	r3, r3, r2
 8003f08:	b29a      	uxth	r2, r3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003f10:	7bfb      	ldrb	r3, [r7, #15]
 8003f12:	7b7a      	ldrb	r2, [r7, #13]
 8003f14:	4908      	ldr	r1, [pc, #32]	; (8003f38 <UARTEx_SetNbDataToProcess+0x90>)
 8003f16:	5c8a      	ldrb	r2, [r1, r2]
 8003f18:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003f1c:	7b7a      	ldrb	r2, [r7, #13]
 8003f1e:	4907      	ldr	r1, [pc, #28]	; (8003f3c <UARTEx_SetNbDataToProcess+0x94>)
 8003f20:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003f22:	fb93 f3f2 	sdiv	r3, r3, r2
 8003f26:	b29a      	uxth	r2, r3
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8003f2e:	bf00      	nop
 8003f30:	3714      	adds	r7, #20
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bc80      	pop	{r7}
 8003f36:	4770      	bx	lr
 8003f38:	08006cd4 	.word	0x08006cd4
 8003f3c:	08006cdc 	.word	0x08006cdc

08003f40 <__cvt>:
 8003f40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f44:	b088      	sub	sp, #32
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	461f      	mov	r7, r3
 8003f4a:	4614      	mov	r4, r2
 8003f4c:	bfb8      	it	lt
 8003f4e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003f52:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003f54:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003f56:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8003f5a:	bfb6      	itet	lt
 8003f5c:	461f      	movlt	r7, r3
 8003f5e:	2300      	movge	r3, #0
 8003f60:	232d      	movlt	r3, #45	; 0x2d
 8003f62:	7013      	strb	r3, [r2, #0]
 8003f64:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003f66:	f023 0820 	bic.w	r8, r3, #32
 8003f6a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003f6e:	d005      	beq.n	8003f7c <__cvt+0x3c>
 8003f70:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003f74:	d100      	bne.n	8003f78 <__cvt+0x38>
 8003f76:	3501      	adds	r5, #1
 8003f78:	2302      	movs	r3, #2
 8003f7a:	e000      	b.n	8003f7e <__cvt+0x3e>
 8003f7c:	2303      	movs	r3, #3
 8003f7e:	aa07      	add	r2, sp, #28
 8003f80:	9204      	str	r2, [sp, #16]
 8003f82:	aa06      	add	r2, sp, #24
 8003f84:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003f88:	e9cd 3500 	strd	r3, r5, [sp]
 8003f8c:	4622      	mov	r2, r4
 8003f8e:	463b      	mov	r3, r7
 8003f90:	f000 fe4a 	bl	8004c28 <_dtoa_r>
 8003f94:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003f98:	4606      	mov	r6, r0
 8003f9a:	d102      	bne.n	8003fa2 <__cvt+0x62>
 8003f9c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003f9e:	07db      	lsls	r3, r3, #31
 8003fa0:	d522      	bpl.n	8003fe8 <__cvt+0xa8>
 8003fa2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003fa6:	eb06 0905 	add.w	r9, r6, r5
 8003faa:	d110      	bne.n	8003fce <__cvt+0x8e>
 8003fac:	7833      	ldrb	r3, [r6, #0]
 8003fae:	2b30      	cmp	r3, #48	; 0x30
 8003fb0:	d10a      	bne.n	8003fc8 <__cvt+0x88>
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	4620      	mov	r0, r4
 8003fb8:	4639      	mov	r1, r7
 8003fba:	f7fc fd5d 	bl	8000a78 <__aeabi_dcmpeq>
 8003fbe:	b918      	cbnz	r0, 8003fc8 <__cvt+0x88>
 8003fc0:	f1c5 0501 	rsb	r5, r5, #1
 8003fc4:	f8ca 5000 	str.w	r5, [sl]
 8003fc8:	f8da 3000 	ldr.w	r3, [sl]
 8003fcc:	4499      	add	r9, r3
 8003fce:	2200      	movs	r2, #0
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	4620      	mov	r0, r4
 8003fd4:	4639      	mov	r1, r7
 8003fd6:	f7fc fd4f 	bl	8000a78 <__aeabi_dcmpeq>
 8003fda:	b108      	cbz	r0, 8003fe0 <__cvt+0xa0>
 8003fdc:	f8cd 901c 	str.w	r9, [sp, #28]
 8003fe0:	2230      	movs	r2, #48	; 0x30
 8003fe2:	9b07      	ldr	r3, [sp, #28]
 8003fe4:	454b      	cmp	r3, r9
 8003fe6:	d307      	bcc.n	8003ff8 <__cvt+0xb8>
 8003fe8:	9b07      	ldr	r3, [sp, #28]
 8003fea:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003fec:	1b9b      	subs	r3, r3, r6
 8003fee:	4630      	mov	r0, r6
 8003ff0:	6013      	str	r3, [r2, #0]
 8003ff2:	b008      	add	sp, #32
 8003ff4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ff8:	1c59      	adds	r1, r3, #1
 8003ffa:	9107      	str	r1, [sp, #28]
 8003ffc:	701a      	strb	r2, [r3, #0]
 8003ffe:	e7f0      	b.n	8003fe2 <__cvt+0xa2>

08004000 <__exponent>:
 8004000:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004002:	4603      	mov	r3, r0
 8004004:	2900      	cmp	r1, #0
 8004006:	bfb8      	it	lt
 8004008:	4249      	neglt	r1, r1
 800400a:	f803 2b02 	strb.w	r2, [r3], #2
 800400e:	bfb4      	ite	lt
 8004010:	222d      	movlt	r2, #45	; 0x2d
 8004012:	222b      	movge	r2, #43	; 0x2b
 8004014:	2909      	cmp	r1, #9
 8004016:	7042      	strb	r2, [r0, #1]
 8004018:	dd2a      	ble.n	8004070 <__exponent+0x70>
 800401a:	f10d 0207 	add.w	r2, sp, #7
 800401e:	4617      	mov	r7, r2
 8004020:	260a      	movs	r6, #10
 8004022:	4694      	mov	ip, r2
 8004024:	fb91 f5f6 	sdiv	r5, r1, r6
 8004028:	fb06 1415 	mls	r4, r6, r5, r1
 800402c:	3430      	adds	r4, #48	; 0x30
 800402e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004032:	460c      	mov	r4, r1
 8004034:	2c63      	cmp	r4, #99	; 0x63
 8004036:	f102 32ff 	add.w	r2, r2, #4294967295
 800403a:	4629      	mov	r1, r5
 800403c:	dcf1      	bgt.n	8004022 <__exponent+0x22>
 800403e:	3130      	adds	r1, #48	; 0x30
 8004040:	f1ac 0402 	sub.w	r4, ip, #2
 8004044:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004048:	1c41      	adds	r1, r0, #1
 800404a:	4622      	mov	r2, r4
 800404c:	42ba      	cmp	r2, r7
 800404e:	d30a      	bcc.n	8004066 <__exponent+0x66>
 8004050:	f10d 0209 	add.w	r2, sp, #9
 8004054:	eba2 020c 	sub.w	r2, r2, ip
 8004058:	42bc      	cmp	r4, r7
 800405a:	bf88      	it	hi
 800405c:	2200      	movhi	r2, #0
 800405e:	4413      	add	r3, r2
 8004060:	1a18      	subs	r0, r3, r0
 8004062:	b003      	add	sp, #12
 8004064:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004066:	f812 5b01 	ldrb.w	r5, [r2], #1
 800406a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800406e:	e7ed      	b.n	800404c <__exponent+0x4c>
 8004070:	2330      	movs	r3, #48	; 0x30
 8004072:	3130      	adds	r1, #48	; 0x30
 8004074:	7083      	strb	r3, [r0, #2]
 8004076:	70c1      	strb	r1, [r0, #3]
 8004078:	1d03      	adds	r3, r0, #4
 800407a:	e7f1      	b.n	8004060 <__exponent+0x60>

0800407c <_printf_float>:
 800407c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004080:	b091      	sub	sp, #68	; 0x44
 8004082:	460c      	mov	r4, r1
 8004084:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004088:	4616      	mov	r6, r2
 800408a:	461f      	mov	r7, r3
 800408c:	4605      	mov	r5, r0
 800408e:	f000 fccd 	bl	8004a2c <_localeconv_r>
 8004092:	6803      	ldr	r3, [r0, #0]
 8004094:	9309      	str	r3, [sp, #36]	; 0x24
 8004096:	4618      	mov	r0, r3
 8004098:	f7fc f8c2 	bl	8000220 <strlen>
 800409c:	2300      	movs	r3, #0
 800409e:	930e      	str	r3, [sp, #56]	; 0x38
 80040a0:	f8d8 3000 	ldr.w	r3, [r8]
 80040a4:	900a      	str	r0, [sp, #40]	; 0x28
 80040a6:	3307      	adds	r3, #7
 80040a8:	f023 0307 	bic.w	r3, r3, #7
 80040ac:	f103 0208 	add.w	r2, r3, #8
 80040b0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80040b4:	f8d4 b000 	ldr.w	fp, [r4]
 80040b8:	f8c8 2000 	str.w	r2, [r8]
 80040bc:	e9d3 a800 	ldrd	sl, r8, [r3]
 80040c0:	4652      	mov	r2, sl
 80040c2:	4643      	mov	r3, r8
 80040c4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80040c8:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 80040cc:	930b      	str	r3, [sp, #44]	; 0x2c
 80040ce:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80040d0:	4b9c      	ldr	r3, [pc, #624]	; (8004344 <_printf_float+0x2c8>)
 80040d2:	f04f 32ff 	mov.w	r2, #4294967295
 80040d6:	4650      	mov	r0, sl
 80040d8:	f7fc fd00 	bl	8000adc <__aeabi_dcmpun>
 80040dc:	bb70      	cbnz	r0, 800413c <_printf_float+0xc0>
 80040de:	4b99      	ldr	r3, [pc, #612]	; (8004344 <_printf_float+0x2c8>)
 80040e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80040e2:	f04f 32ff 	mov.w	r2, #4294967295
 80040e6:	4650      	mov	r0, sl
 80040e8:	f7fc fcda 	bl	8000aa0 <__aeabi_dcmple>
 80040ec:	bb30      	cbnz	r0, 800413c <_printf_float+0xc0>
 80040ee:	2200      	movs	r2, #0
 80040f0:	2300      	movs	r3, #0
 80040f2:	4650      	mov	r0, sl
 80040f4:	4641      	mov	r1, r8
 80040f6:	f7fc fcc9 	bl	8000a8c <__aeabi_dcmplt>
 80040fa:	b110      	cbz	r0, 8004102 <_printf_float+0x86>
 80040fc:	232d      	movs	r3, #45	; 0x2d
 80040fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004102:	4a91      	ldr	r2, [pc, #580]	; (8004348 <_printf_float+0x2cc>)
 8004104:	4b91      	ldr	r3, [pc, #580]	; (800434c <_printf_float+0x2d0>)
 8004106:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800410a:	bf94      	ite	ls
 800410c:	4690      	movls	r8, r2
 800410e:	4698      	movhi	r8, r3
 8004110:	2303      	movs	r3, #3
 8004112:	6123      	str	r3, [r4, #16]
 8004114:	f02b 0304 	bic.w	r3, fp, #4
 8004118:	6023      	str	r3, [r4, #0]
 800411a:	f04f 0a00 	mov.w	sl, #0
 800411e:	9700      	str	r7, [sp, #0]
 8004120:	4633      	mov	r3, r6
 8004122:	aa0f      	add	r2, sp, #60	; 0x3c
 8004124:	4621      	mov	r1, r4
 8004126:	4628      	mov	r0, r5
 8004128:	f000 f9d4 	bl	80044d4 <_printf_common>
 800412c:	3001      	adds	r0, #1
 800412e:	f040 808f 	bne.w	8004250 <_printf_float+0x1d4>
 8004132:	f04f 30ff 	mov.w	r0, #4294967295
 8004136:	b011      	add	sp, #68	; 0x44
 8004138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800413c:	4652      	mov	r2, sl
 800413e:	4643      	mov	r3, r8
 8004140:	4650      	mov	r0, sl
 8004142:	4641      	mov	r1, r8
 8004144:	f7fc fcca 	bl	8000adc <__aeabi_dcmpun>
 8004148:	b140      	cbz	r0, 800415c <_printf_float+0xe0>
 800414a:	f1b8 0f00 	cmp.w	r8, #0
 800414e:	bfbc      	itt	lt
 8004150:	232d      	movlt	r3, #45	; 0x2d
 8004152:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004156:	4a7e      	ldr	r2, [pc, #504]	; (8004350 <_printf_float+0x2d4>)
 8004158:	4b7e      	ldr	r3, [pc, #504]	; (8004354 <_printf_float+0x2d8>)
 800415a:	e7d4      	b.n	8004106 <_printf_float+0x8a>
 800415c:	6863      	ldr	r3, [r4, #4]
 800415e:	1c5a      	adds	r2, r3, #1
 8004160:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004164:	d142      	bne.n	80041ec <_printf_float+0x170>
 8004166:	2306      	movs	r3, #6
 8004168:	6063      	str	r3, [r4, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	9206      	str	r2, [sp, #24]
 800416e:	aa0e      	add	r2, sp, #56	; 0x38
 8004170:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004174:	aa0d      	add	r2, sp, #52	; 0x34
 8004176:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800417a:	9203      	str	r2, [sp, #12]
 800417c:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004180:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004184:	6023      	str	r3, [r4, #0]
 8004186:	6863      	ldr	r3, [r4, #4]
 8004188:	9300      	str	r3, [sp, #0]
 800418a:	4652      	mov	r2, sl
 800418c:	4643      	mov	r3, r8
 800418e:	4628      	mov	r0, r5
 8004190:	910b      	str	r1, [sp, #44]	; 0x2c
 8004192:	f7ff fed5 	bl	8003f40 <__cvt>
 8004196:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004198:	2947      	cmp	r1, #71	; 0x47
 800419a:	4680      	mov	r8, r0
 800419c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800419e:	d108      	bne.n	80041b2 <_printf_float+0x136>
 80041a0:	1cc8      	adds	r0, r1, #3
 80041a2:	db02      	blt.n	80041aa <_printf_float+0x12e>
 80041a4:	6863      	ldr	r3, [r4, #4]
 80041a6:	4299      	cmp	r1, r3
 80041a8:	dd40      	ble.n	800422c <_printf_float+0x1b0>
 80041aa:	f1a9 0902 	sub.w	r9, r9, #2
 80041ae:	fa5f f989 	uxtb.w	r9, r9
 80041b2:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80041b6:	d81f      	bhi.n	80041f8 <_printf_float+0x17c>
 80041b8:	3901      	subs	r1, #1
 80041ba:	464a      	mov	r2, r9
 80041bc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80041c0:	910d      	str	r1, [sp, #52]	; 0x34
 80041c2:	f7ff ff1d 	bl	8004000 <__exponent>
 80041c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80041c8:	1813      	adds	r3, r2, r0
 80041ca:	2a01      	cmp	r2, #1
 80041cc:	4682      	mov	sl, r0
 80041ce:	6123      	str	r3, [r4, #16]
 80041d0:	dc02      	bgt.n	80041d8 <_printf_float+0x15c>
 80041d2:	6822      	ldr	r2, [r4, #0]
 80041d4:	07d2      	lsls	r2, r2, #31
 80041d6:	d501      	bpl.n	80041dc <_printf_float+0x160>
 80041d8:	3301      	adds	r3, #1
 80041da:	6123      	str	r3, [r4, #16]
 80041dc:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d09c      	beq.n	800411e <_printf_float+0xa2>
 80041e4:	232d      	movs	r3, #45	; 0x2d
 80041e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041ea:	e798      	b.n	800411e <_printf_float+0xa2>
 80041ec:	2947      	cmp	r1, #71	; 0x47
 80041ee:	d1bc      	bne.n	800416a <_printf_float+0xee>
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d1ba      	bne.n	800416a <_printf_float+0xee>
 80041f4:	2301      	movs	r3, #1
 80041f6:	e7b7      	b.n	8004168 <_printf_float+0xec>
 80041f8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80041fc:	d118      	bne.n	8004230 <_printf_float+0x1b4>
 80041fe:	2900      	cmp	r1, #0
 8004200:	6863      	ldr	r3, [r4, #4]
 8004202:	dd0b      	ble.n	800421c <_printf_float+0x1a0>
 8004204:	6121      	str	r1, [r4, #16]
 8004206:	b913      	cbnz	r3, 800420e <_printf_float+0x192>
 8004208:	6822      	ldr	r2, [r4, #0]
 800420a:	07d0      	lsls	r0, r2, #31
 800420c:	d502      	bpl.n	8004214 <_printf_float+0x198>
 800420e:	3301      	adds	r3, #1
 8004210:	440b      	add	r3, r1
 8004212:	6123      	str	r3, [r4, #16]
 8004214:	65a1      	str	r1, [r4, #88]	; 0x58
 8004216:	f04f 0a00 	mov.w	sl, #0
 800421a:	e7df      	b.n	80041dc <_printf_float+0x160>
 800421c:	b913      	cbnz	r3, 8004224 <_printf_float+0x1a8>
 800421e:	6822      	ldr	r2, [r4, #0]
 8004220:	07d2      	lsls	r2, r2, #31
 8004222:	d501      	bpl.n	8004228 <_printf_float+0x1ac>
 8004224:	3302      	adds	r3, #2
 8004226:	e7f4      	b.n	8004212 <_printf_float+0x196>
 8004228:	2301      	movs	r3, #1
 800422a:	e7f2      	b.n	8004212 <_printf_float+0x196>
 800422c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004230:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004232:	4299      	cmp	r1, r3
 8004234:	db05      	blt.n	8004242 <_printf_float+0x1c6>
 8004236:	6823      	ldr	r3, [r4, #0]
 8004238:	6121      	str	r1, [r4, #16]
 800423a:	07d8      	lsls	r0, r3, #31
 800423c:	d5ea      	bpl.n	8004214 <_printf_float+0x198>
 800423e:	1c4b      	adds	r3, r1, #1
 8004240:	e7e7      	b.n	8004212 <_printf_float+0x196>
 8004242:	2900      	cmp	r1, #0
 8004244:	bfd4      	ite	le
 8004246:	f1c1 0202 	rsble	r2, r1, #2
 800424a:	2201      	movgt	r2, #1
 800424c:	4413      	add	r3, r2
 800424e:	e7e0      	b.n	8004212 <_printf_float+0x196>
 8004250:	6823      	ldr	r3, [r4, #0]
 8004252:	055a      	lsls	r2, r3, #21
 8004254:	d407      	bmi.n	8004266 <_printf_float+0x1ea>
 8004256:	6923      	ldr	r3, [r4, #16]
 8004258:	4642      	mov	r2, r8
 800425a:	4631      	mov	r1, r6
 800425c:	4628      	mov	r0, r5
 800425e:	47b8      	blx	r7
 8004260:	3001      	adds	r0, #1
 8004262:	d12b      	bne.n	80042bc <_printf_float+0x240>
 8004264:	e765      	b.n	8004132 <_printf_float+0xb6>
 8004266:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800426a:	f240 80dc 	bls.w	8004426 <_printf_float+0x3aa>
 800426e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004272:	2200      	movs	r2, #0
 8004274:	2300      	movs	r3, #0
 8004276:	f7fc fbff 	bl	8000a78 <__aeabi_dcmpeq>
 800427a:	2800      	cmp	r0, #0
 800427c:	d033      	beq.n	80042e6 <_printf_float+0x26a>
 800427e:	4a36      	ldr	r2, [pc, #216]	; (8004358 <_printf_float+0x2dc>)
 8004280:	2301      	movs	r3, #1
 8004282:	4631      	mov	r1, r6
 8004284:	4628      	mov	r0, r5
 8004286:	47b8      	blx	r7
 8004288:	3001      	adds	r0, #1
 800428a:	f43f af52 	beq.w	8004132 <_printf_float+0xb6>
 800428e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004292:	429a      	cmp	r2, r3
 8004294:	db02      	blt.n	800429c <_printf_float+0x220>
 8004296:	6823      	ldr	r3, [r4, #0]
 8004298:	07d8      	lsls	r0, r3, #31
 800429a:	d50f      	bpl.n	80042bc <_printf_float+0x240>
 800429c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80042a0:	4631      	mov	r1, r6
 80042a2:	4628      	mov	r0, r5
 80042a4:	47b8      	blx	r7
 80042a6:	3001      	adds	r0, #1
 80042a8:	f43f af43 	beq.w	8004132 <_printf_float+0xb6>
 80042ac:	f04f 0800 	mov.w	r8, #0
 80042b0:	f104 091a 	add.w	r9, r4, #26
 80042b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80042b6:	3b01      	subs	r3, #1
 80042b8:	4543      	cmp	r3, r8
 80042ba:	dc09      	bgt.n	80042d0 <_printf_float+0x254>
 80042bc:	6823      	ldr	r3, [r4, #0]
 80042be:	079b      	lsls	r3, r3, #30
 80042c0:	f100 8103 	bmi.w	80044ca <_printf_float+0x44e>
 80042c4:	68e0      	ldr	r0, [r4, #12]
 80042c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80042c8:	4298      	cmp	r0, r3
 80042ca:	bfb8      	it	lt
 80042cc:	4618      	movlt	r0, r3
 80042ce:	e732      	b.n	8004136 <_printf_float+0xba>
 80042d0:	2301      	movs	r3, #1
 80042d2:	464a      	mov	r2, r9
 80042d4:	4631      	mov	r1, r6
 80042d6:	4628      	mov	r0, r5
 80042d8:	47b8      	blx	r7
 80042da:	3001      	adds	r0, #1
 80042dc:	f43f af29 	beq.w	8004132 <_printf_float+0xb6>
 80042e0:	f108 0801 	add.w	r8, r8, #1
 80042e4:	e7e6      	b.n	80042b4 <_printf_float+0x238>
 80042e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	dc37      	bgt.n	800435c <_printf_float+0x2e0>
 80042ec:	4a1a      	ldr	r2, [pc, #104]	; (8004358 <_printf_float+0x2dc>)
 80042ee:	2301      	movs	r3, #1
 80042f0:	4631      	mov	r1, r6
 80042f2:	4628      	mov	r0, r5
 80042f4:	47b8      	blx	r7
 80042f6:	3001      	adds	r0, #1
 80042f8:	f43f af1b 	beq.w	8004132 <_printf_float+0xb6>
 80042fc:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004300:	4313      	orrs	r3, r2
 8004302:	d102      	bne.n	800430a <_printf_float+0x28e>
 8004304:	6823      	ldr	r3, [r4, #0]
 8004306:	07d9      	lsls	r1, r3, #31
 8004308:	d5d8      	bpl.n	80042bc <_printf_float+0x240>
 800430a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800430e:	4631      	mov	r1, r6
 8004310:	4628      	mov	r0, r5
 8004312:	47b8      	blx	r7
 8004314:	3001      	adds	r0, #1
 8004316:	f43f af0c 	beq.w	8004132 <_printf_float+0xb6>
 800431a:	f04f 0900 	mov.w	r9, #0
 800431e:	f104 0a1a 	add.w	sl, r4, #26
 8004322:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004324:	425b      	negs	r3, r3
 8004326:	454b      	cmp	r3, r9
 8004328:	dc01      	bgt.n	800432e <_printf_float+0x2b2>
 800432a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800432c:	e794      	b.n	8004258 <_printf_float+0x1dc>
 800432e:	2301      	movs	r3, #1
 8004330:	4652      	mov	r2, sl
 8004332:	4631      	mov	r1, r6
 8004334:	4628      	mov	r0, r5
 8004336:	47b8      	blx	r7
 8004338:	3001      	adds	r0, #1
 800433a:	f43f aefa 	beq.w	8004132 <_printf_float+0xb6>
 800433e:	f109 0901 	add.w	r9, r9, #1
 8004342:	e7ee      	b.n	8004322 <_printf_float+0x2a6>
 8004344:	7fefffff 	.word	0x7fefffff
 8004348:	08006ce4 	.word	0x08006ce4
 800434c:	08006ce8 	.word	0x08006ce8
 8004350:	08006cec 	.word	0x08006cec
 8004354:	08006cf0 	.word	0x08006cf0
 8004358:	08006cf4 	.word	0x08006cf4
 800435c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800435e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004360:	429a      	cmp	r2, r3
 8004362:	bfa8      	it	ge
 8004364:	461a      	movge	r2, r3
 8004366:	2a00      	cmp	r2, #0
 8004368:	4691      	mov	r9, r2
 800436a:	dc37      	bgt.n	80043dc <_printf_float+0x360>
 800436c:	f04f 0b00 	mov.w	fp, #0
 8004370:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004374:	f104 021a 	add.w	r2, r4, #26
 8004378:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800437c:	ebaa 0309 	sub.w	r3, sl, r9
 8004380:	455b      	cmp	r3, fp
 8004382:	dc33      	bgt.n	80043ec <_printf_float+0x370>
 8004384:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004388:	429a      	cmp	r2, r3
 800438a:	db3b      	blt.n	8004404 <_printf_float+0x388>
 800438c:	6823      	ldr	r3, [r4, #0]
 800438e:	07da      	lsls	r2, r3, #31
 8004390:	d438      	bmi.n	8004404 <_printf_float+0x388>
 8004392:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004396:	eba2 0903 	sub.w	r9, r2, r3
 800439a:	eba2 020a 	sub.w	r2, r2, sl
 800439e:	4591      	cmp	r9, r2
 80043a0:	bfa8      	it	ge
 80043a2:	4691      	movge	r9, r2
 80043a4:	f1b9 0f00 	cmp.w	r9, #0
 80043a8:	dc34      	bgt.n	8004414 <_printf_float+0x398>
 80043aa:	f04f 0800 	mov.w	r8, #0
 80043ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80043b2:	f104 0a1a 	add.w	sl, r4, #26
 80043b6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80043ba:	1a9b      	subs	r3, r3, r2
 80043bc:	eba3 0309 	sub.w	r3, r3, r9
 80043c0:	4543      	cmp	r3, r8
 80043c2:	f77f af7b 	ble.w	80042bc <_printf_float+0x240>
 80043c6:	2301      	movs	r3, #1
 80043c8:	4652      	mov	r2, sl
 80043ca:	4631      	mov	r1, r6
 80043cc:	4628      	mov	r0, r5
 80043ce:	47b8      	blx	r7
 80043d0:	3001      	adds	r0, #1
 80043d2:	f43f aeae 	beq.w	8004132 <_printf_float+0xb6>
 80043d6:	f108 0801 	add.w	r8, r8, #1
 80043da:	e7ec      	b.n	80043b6 <_printf_float+0x33a>
 80043dc:	4613      	mov	r3, r2
 80043de:	4631      	mov	r1, r6
 80043e0:	4642      	mov	r2, r8
 80043e2:	4628      	mov	r0, r5
 80043e4:	47b8      	blx	r7
 80043e6:	3001      	adds	r0, #1
 80043e8:	d1c0      	bne.n	800436c <_printf_float+0x2f0>
 80043ea:	e6a2      	b.n	8004132 <_printf_float+0xb6>
 80043ec:	2301      	movs	r3, #1
 80043ee:	4631      	mov	r1, r6
 80043f0:	4628      	mov	r0, r5
 80043f2:	920b      	str	r2, [sp, #44]	; 0x2c
 80043f4:	47b8      	blx	r7
 80043f6:	3001      	adds	r0, #1
 80043f8:	f43f ae9b 	beq.w	8004132 <_printf_float+0xb6>
 80043fc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80043fe:	f10b 0b01 	add.w	fp, fp, #1
 8004402:	e7b9      	b.n	8004378 <_printf_float+0x2fc>
 8004404:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004408:	4631      	mov	r1, r6
 800440a:	4628      	mov	r0, r5
 800440c:	47b8      	blx	r7
 800440e:	3001      	adds	r0, #1
 8004410:	d1bf      	bne.n	8004392 <_printf_float+0x316>
 8004412:	e68e      	b.n	8004132 <_printf_float+0xb6>
 8004414:	464b      	mov	r3, r9
 8004416:	eb08 020a 	add.w	r2, r8, sl
 800441a:	4631      	mov	r1, r6
 800441c:	4628      	mov	r0, r5
 800441e:	47b8      	blx	r7
 8004420:	3001      	adds	r0, #1
 8004422:	d1c2      	bne.n	80043aa <_printf_float+0x32e>
 8004424:	e685      	b.n	8004132 <_printf_float+0xb6>
 8004426:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004428:	2a01      	cmp	r2, #1
 800442a:	dc01      	bgt.n	8004430 <_printf_float+0x3b4>
 800442c:	07db      	lsls	r3, r3, #31
 800442e:	d539      	bpl.n	80044a4 <_printf_float+0x428>
 8004430:	2301      	movs	r3, #1
 8004432:	4642      	mov	r2, r8
 8004434:	4631      	mov	r1, r6
 8004436:	4628      	mov	r0, r5
 8004438:	47b8      	blx	r7
 800443a:	3001      	adds	r0, #1
 800443c:	f43f ae79 	beq.w	8004132 <_printf_float+0xb6>
 8004440:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004444:	4631      	mov	r1, r6
 8004446:	4628      	mov	r0, r5
 8004448:	47b8      	blx	r7
 800444a:	3001      	adds	r0, #1
 800444c:	f43f ae71 	beq.w	8004132 <_printf_float+0xb6>
 8004450:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004454:	2200      	movs	r2, #0
 8004456:	2300      	movs	r3, #0
 8004458:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 800445c:	f7fc fb0c 	bl	8000a78 <__aeabi_dcmpeq>
 8004460:	b9d8      	cbnz	r0, 800449a <_printf_float+0x41e>
 8004462:	f109 33ff 	add.w	r3, r9, #4294967295
 8004466:	f108 0201 	add.w	r2, r8, #1
 800446a:	4631      	mov	r1, r6
 800446c:	4628      	mov	r0, r5
 800446e:	47b8      	blx	r7
 8004470:	3001      	adds	r0, #1
 8004472:	d10e      	bne.n	8004492 <_printf_float+0x416>
 8004474:	e65d      	b.n	8004132 <_printf_float+0xb6>
 8004476:	2301      	movs	r3, #1
 8004478:	464a      	mov	r2, r9
 800447a:	4631      	mov	r1, r6
 800447c:	4628      	mov	r0, r5
 800447e:	47b8      	blx	r7
 8004480:	3001      	adds	r0, #1
 8004482:	f43f ae56 	beq.w	8004132 <_printf_float+0xb6>
 8004486:	f108 0801 	add.w	r8, r8, #1
 800448a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800448c:	3b01      	subs	r3, #1
 800448e:	4543      	cmp	r3, r8
 8004490:	dcf1      	bgt.n	8004476 <_printf_float+0x3fa>
 8004492:	4653      	mov	r3, sl
 8004494:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004498:	e6df      	b.n	800425a <_printf_float+0x1de>
 800449a:	f04f 0800 	mov.w	r8, #0
 800449e:	f104 091a 	add.w	r9, r4, #26
 80044a2:	e7f2      	b.n	800448a <_printf_float+0x40e>
 80044a4:	2301      	movs	r3, #1
 80044a6:	4642      	mov	r2, r8
 80044a8:	e7df      	b.n	800446a <_printf_float+0x3ee>
 80044aa:	2301      	movs	r3, #1
 80044ac:	464a      	mov	r2, r9
 80044ae:	4631      	mov	r1, r6
 80044b0:	4628      	mov	r0, r5
 80044b2:	47b8      	blx	r7
 80044b4:	3001      	adds	r0, #1
 80044b6:	f43f ae3c 	beq.w	8004132 <_printf_float+0xb6>
 80044ba:	f108 0801 	add.w	r8, r8, #1
 80044be:	68e3      	ldr	r3, [r4, #12]
 80044c0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80044c2:	1a5b      	subs	r3, r3, r1
 80044c4:	4543      	cmp	r3, r8
 80044c6:	dcf0      	bgt.n	80044aa <_printf_float+0x42e>
 80044c8:	e6fc      	b.n	80042c4 <_printf_float+0x248>
 80044ca:	f04f 0800 	mov.w	r8, #0
 80044ce:	f104 0919 	add.w	r9, r4, #25
 80044d2:	e7f4      	b.n	80044be <_printf_float+0x442>

080044d4 <_printf_common>:
 80044d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044d8:	4616      	mov	r6, r2
 80044da:	4699      	mov	r9, r3
 80044dc:	688a      	ldr	r2, [r1, #8]
 80044de:	690b      	ldr	r3, [r1, #16]
 80044e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80044e4:	4293      	cmp	r3, r2
 80044e6:	bfb8      	it	lt
 80044e8:	4613      	movlt	r3, r2
 80044ea:	6033      	str	r3, [r6, #0]
 80044ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80044f0:	4607      	mov	r7, r0
 80044f2:	460c      	mov	r4, r1
 80044f4:	b10a      	cbz	r2, 80044fa <_printf_common+0x26>
 80044f6:	3301      	adds	r3, #1
 80044f8:	6033      	str	r3, [r6, #0]
 80044fa:	6823      	ldr	r3, [r4, #0]
 80044fc:	0699      	lsls	r1, r3, #26
 80044fe:	bf42      	ittt	mi
 8004500:	6833      	ldrmi	r3, [r6, #0]
 8004502:	3302      	addmi	r3, #2
 8004504:	6033      	strmi	r3, [r6, #0]
 8004506:	6825      	ldr	r5, [r4, #0]
 8004508:	f015 0506 	ands.w	r5, r5, #6
 800450c:	d106      	bne.n	800451c <_printf_common+0x48>
 800450e:	f104 0a19 	add.w	sl, r4, #25
 8004512:	68e3      	ldr	r3, [r4, #12]
 8004514:	6832      	ldr	r2, [r6, #0]
 8004516:	1a9b      	subs	r3, r3, r2
 8004518:	42ab      	cmp	r3, r5
 800451a:	dc26      	bgt.n	800456a <_printf_common+0x96>
 800451c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004520:	1e13      	subs	r3, r2, #0
 8004522:	6822      	ldr	r2, [r4, #0]
 8004524:	bf18      	it	ne
 8004526:	2301      	movne	r3, #1
 8004528:	0692      	lsls	r2, r2, #26
 800452a:	d42b      	bmi.n	8004584 <_printf_common+0xb0>
 800452c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004530:	4649      	mov	r1, r9
 8004532:	4638      	mov	r0, r7
 8004534:	47c0      	blx	r8
 8004536:	3001      	adds	r0, #1
 8004538:	d01e      	beq.n	8004578 <_printf_common+0xa4>
 800453a:	6823      	ldr	r3, [r4, #0]
 800453c:	6922      	ldr	r2, [r4, #16]
 800453e:	f003 0306 	and.w	r3, r3, #6
 8004542:	2b04      	cmp	r3, #4
 8004544:	bf02      	ittt	eq
 8004546:	68e5      	ldreq	r5, [r4, #12]
 8004548:	6833      	ldreq	r3, [r6, #0]
 800454a:	1aed      	subeq	r5, r5, r3
 800454c:	68a3      	ldr	r3, [r4, #8]
 800454e:	bf0c      	ite	eq
 8004550:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004554:	2500      	movne	r5, #0
 8004556:	4293      	cmp	r3, r2
 8004558:	bfc4      	itt	gt
 800455a:	1a9b      	subgt	r3, r3, r2
 800455c:	18ed      	addgt	r5, r5, r3
 800455e:	2600      	movs	r6, #0
 8004560:	341a      	adds	r4, #26
 8004562:	42b5      	cmp	r5, r6
 8004564:	d11a      	bne.n	800459c <_printf_common+0xc8>
 8004566:	2000      	movs	r0, #0
 8004568:	e008      	b.n	800457c <_printf_common+0xa8>
 800456a:	2301      	movs	r3, #1
 800456c:	4652      	mov	r2, sl
 800456e:	4649      	mov	r1, r9
 8004570:	4638      	mov	r0, r7
 8004572:	47c0      	blx	r8
 8004574:	3001      	adds	r0, #1
 8004576:	d103      	bne.n	8004580 <_printf_common+0xac>
 8004578:	f04f 30ff 	mov.w	r0, #4294967295
 800457c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004580:	3501      	adds	r5, #1
 8004582:	e7c6      	b.n	8004512 <_printf_common+0x3e>
 8004584:	18e1      	adds	r1, r4, r3
 8004586:	1c5a      	adds	r2, r3, #1
 8004588:	2030      	movs	r0, #48	; 0x30
 800458a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800458e:	4422      	add	r2, r4
 8004590:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004594:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004598:	3302      	adds	r3, #2
 800459a:	e7c7      	b.n	800452c <_printf_common+0x58>
 800459c:	2301      	movs	r3, #1
 800459e:	4622      	mov	r2, r4
 80045a0:	4649      	mov	r1, r9
 80045a2:	4638      	mov	r0, r7
 80045a4:	47c0      	blx	r8
 80045a6:	3001      	adds	r0, #1
 80045a8:	d0e6      	beq.n	8004578 <_printf_common+0xa4>
 80045aa:	3601      	adds	r6, #1
 80045ac:	e7d9      	b.n	8004562 <_printf_common+0x8e>
	...

080045b0 <_printf_i>:
 80045b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80045b4:	7e0f      	ldrb	r7, [r1, #24]
 80045b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80045b8:	2f78      	cmp	r7, #120	; 0x78
 80045ba:	4691      	mov	r9, r2
 80045bc:	4680      	mov	r8, r0
 80045be:	460c      	mov	r4, r1
 80045c0:	469a      	mov	sl, r3
 80045c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80045c6:	d807      	bhi.n	80045d8 <_printf_i+0x28>
 80045c8:	2f62      	cmp	r7, #98	; 0x62
 80045ca:	d80a      	bhi.n	80045e2 <_printf_i+0x32>
 80045cc:	2f00      	cmp	r7, #0
 80045ce:	f000 80d4 	beq.w	800477a <_printf_i+0x1ca>
 80045d2:	2f58      	cmp	r7, #88	; 0x58
 80045d4:	f000 80c0 	beq.w	8004758 <_printf_i+0x1a8>
 80045d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80045dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80045e0:	e03a      	b.n	8004658 <_printf_i+0xa8>
 80045e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80045e6:	2b15      	cmp	r3, #21
 80045e8:	d8f6      	bhi.n	80045d8 <_printf_i+0x28>
 80045ea:	a101      	add	r1, pc, #4	; (adr r1, 80045f0 <_printf_i+0x40>)
 80045ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80045f0:	08004649 	.word	0x08004649
 80045f4:	0800465d 	.word	0x0800465d
 80045f8:	080045d9 	.word	0x080045d9
 80045fc:	080045d9 	.word	0x080045d9
 8004600:	080045d9 	.word	0x080045d9
 8004604:	080045d9 	.word	0x080045d9
 8004608:	0800465d 	.word	0x0800465d
 800460c:	080045d9 	.word	0x080045d9
 8004610:	080045d9 	.word	0x080045d9
 8004614:	080045d9 	.word	0x080045d9
 8004618:	080045d9 	.word	0x080045d9
 800461c:	08004761 	.word	0x08004761
 8004620:	08004689 	.word	0x08004689
 8004624:	0800471b 	.word	0x0800471b
 8004628:	080045d9 	.word	0x080045d9
 800462c:	080045d9 	.word	0x080045d9
 8004630:	08004783 	.word	0x08004783
 8004634:	080045d9 	.word	0x080045d9
 8004638:	08004689 	.word	0x08004689
 800463c:	080045d9 	.word	0x080045d9
 8004640:	080045d9 	.word	0x080045d9
 8004644:	08004723 	.word	0x08004723
 8004648:	682b      	ldr	r3, [r5, #0]
 800464a:	1d1a      	adds	r2, r3, #4
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	602a      	str	r2, [r5, #0]
 8004650:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004654:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004658:	2301      	movs	r3, #1
 800465a:	e09f      	b.n	800479c <_printf_i+0x1ec>
 800465c:	6820      	ldr	r0, [r4, #0]
 800465e:	682b      	ldr	r3, [r5, #0]
 8004660:	0607      	lsls	r7, r0, #24
 8004662:	f103 0104 	add.w	r1, r3, #4
 8004666:	6029      	str	r1, [r5, #0]
 8004668:	d501      	bpl.n	800466e <_printf_i+0xbe>
 800466a:	681e      	ldr	r6, [r3, #0]
 800466c:	e003      	b.n	8004676 <_printf_i+0xc6>
 800466e:	0646      	lsls	r6, r0, #25
 8004670:	d5fb      	bpl.n	800466a <_printf_i+0xba>
 8004672:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004676:	2e00      	cmp	r6, #0
 8004678:	da03      	bge.n	8004682 <_printf_i+0xd2>
 800467a:	232d      	movs	r3, #45	; 0x2d
 800467c:	4276      	negs	r6, r6
 800467e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004682:	485a      	ldr	r0, [pc, #360]	; (80047ec <_printf_i+0x23c>)
 8004684:	230a      	movs	r3, #10
 8004686:	e012      	b.n	80046ae <_printf_i+0xfe>
 8004688:	682b      	ldr	r3, [r5, #0]
 800468a:	6820      	ldr	r0, [r4, #0]
 800468c:	1d19      	adds	r1, r3, #4
 800468e:	6029      	str	r1, [r5, #0]
 8004690:	0605      	lsls	r5, r0, #24
 8004692:	d501      	bpl.n	8004698 <_printf_i+0xe8>
 8004694:	681e      	ldr	r6, [r3, #0]
 8004696:	e002      	b.n	800469e <_printf_i+0xee>
 8004698:	0641      	lsls	r1, r0, #25
 800469a:	d5fb      	bpl.n	8004694 <_printf_i+0xe4>
 800469c:	881e      	ldrh	r6, [r3, #0]
 800469e:	4853      	ldr	r0, [pc, #332]	; (80047ec <_printf_i+0x23c>)
 80046a0:	2f6f      	cmp	r7, #111	; 0x6f
 80046a2:	bf0c      	ite	eq
 80046a4:	2308      	moveq	r3, #8
 80046a6:	230a      	movne	r3, #10
 80046a8:	2100      	movs	r1, #0
 80046aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80046ae:	6865      	ldr	r5, [r4, #4]
 80046b0:	60a5      	str	r5, [r4, #8]
 80046b2:	2d00      	cmp	r5, #0
 80046b4:	bfa2      	ittt	ge
 80046b6:	6821      	ldrge	r1, [r4, #0]
 80046b8:	f021 0104 	bicge.w	r1, r1, #4
 80046bc:	6021      	strge	r1, [r4, #0]
 80046be:	b90e      	cbnz	r6, 80046c4 <_printf_i+0x114>
 80046c0:	2d00      	cmp	r5, #0
 80046c2:	d04b      	beq.n	800475c <_printf_i+0x1ac>
 80046c4:	4615      	mov	r5, r2
 80046c6:	fbb6 f1f3 	udiv	r1, r6, r3
 80046ca:	fb03 6711 	mls	r7, r3, r1, r6
 80046ce:	5dc7      	ldrb	r7, [r0, r7]
 80046d0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80046d4:	4637      	mov	r7, r6
 80046d6:	42bb      	cmp	r3, r7
 80046d8:	460e      	mov	r6, r1
 80046da:	d9f4      	bls.n	80046c6 <_printf_i+0x116>
 80046dc:	2b08      	cmp	r3, #8
 80046de:	d10b      	bne.n	80046f8 <_printf_i+0x148>
 80046e0:	6823      	ldr	r3, [r4, #0]
 80046e2:	07de      	lsls	r6, r3, #31
 80046e4:	d508      	bpl.n	80046f8 <_printf_i+0x148>
 80046e6:	6923      	ldr	r3, [r4, #16]
 80046e8:	6861      	ldr	r1, [r4, #4]
 80046ea:	4299      	cmp	r1, r3
 80046ec:	bfde      	ittt	le
 80046ee:	2330      	movle	r3, #48	; 0x30
 80046f0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80046f4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80046f8:	1b52      	subs	r2, r2, r5
 80046fa:	6122      	str	r2, [r4, #16]
 80046fc:	f8cd a000 	str.w	sl, [sp]
 8004700:	464b      	mov	r3, r9
 8004702:	aa03      	add	r2, sp, #12
 8004704:	4621      	mov	r1, r4
 8004706:	4640      	mov	r0, r8
 8004708:	f7ff fee4 	bl	80044d4 <_printf_common>
 800470c:	3001      	adds	r0, #1
 800470e:	d14a      	bne.n	80047a6 <_printf_i+0x1f6>
 8004710:	f04f 30ff 	mov.w	r0, #4294967295
 8004714:	b004      	add	sp, #16
 8004716:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800471a:	6823      	ldr	r3, [r4, #0]
 800471c:	f043 0320 	orr.w	r3, r3, #32
 8004720:	6023      	str	r3, [r4, #0]
 8004722:	4833      	ldr	r0, [pc, #204]	; (80047f0 <_printf_i+0x240>)
 8004724:	2778      	movs	r7, #120	; 0x78
 8004726:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800472a:	6823      	ldr	r3, [r4, #0]
 800472c:	6829      	ldr	r1, [r5, #0]
 800472e:	061f      	lsls	r7, r3, #24
 8004730:	f851 6b04 	ldr.w	r6, [r1], #4
 8004734:	d402      	bmi.n	800473c <_printf_i+0x18c>
 8004736:	065f      	lsls	r7, r3, #25
 8004738:	bf48      	it	mi
 800473a:	b2b6      	uxthmi	r6, r6
 800473c:	07df      	lsls	r7, r3, #31
 800473e:	bf48      	it	mi
 8004740:	f043 0320 	orrmi.w	r3, r3, #32
 8004744:	6029      	str	r1, [r5, #0]
 8004746:	bf48      	it	mi
 8004748:	6023      	strmi	r3, [r4, #0]
 800474a:	b91e      	cbnz	r6, 8004754 <_printf_i+0x1a4>
 800474c:	6823      	ldr	r3, [r4, #0]
 800474e:	f023 0320 	bic.w	r3, r3, #32
 8004752:	6023      	str	r3, [r4, #0]
 8004754:	2310      	movs	r3, #16
 8004756:	e7a7      	b.n	80046a8 <_printf_i+0xf8>
 8004758:	4824      	ldr	r0, [pc, #144]	; (80047ec <_printf_i+0x23c>)
 800475a:	e7e4      	b.n	8004726 <_printf_i+0x176>
 800475c:	4615      	mov	r5, r2
 800475e:	e7bd      	b.n	80046dc <_printf_i+0x12c>
 8004760:	682b      	ldr	r3, [r5, #0]
 8004762:	6826      	ldr	r6, [r4, #0]
 8004764:	6961      	ldr	r1, [r4, #20]
 8004766:	1d18      	adds	r0, r3, #4
 8004768:	6028      	str	r0, [r5, #0]
 800476a:	0635      	lsls	r5, r6, #24
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	d501      	bpl.n	8004774 <_printf_i+0x1c4>
 8004770:	6019      	str	r1, [r3, #0]
 8004772:	e002      	b.n	800477a <_printf_i+0x1ca>
 8004774:	0670      	lsls	r0, r6, #25
 8004776:	d5fb      	bpl.n	8004770 <_printf_i+0x1c0>
 8004778:	8019      	strh	r1, [r3, #0]
 800477a:	2300      	movs	r3, #0
 800477c:	6123      	str	r3, [r4, #16]
 800477e:	4615      	mov	r5, r2
 8004780:	e7bc      	b.n	80046fc <_printf_i+0x14c>
 8004782:	682b      	ldr	r3, [r5, #0]
 8004784:	1d1a      	adds	r2, r3, #4
 8004786:	602a      	str	r2, [r5, #0]
 8004788:	681d      	ldr	r5, [r3, #0]
 800478a:	6862      	ldr	r2, [r4, #4]
 800478c:	2100      	movs	r1, #0
 800478e:	4628      	mov	r0, r5
 8004790:	f7fb fcf6 	bl	8000180 <memchr>
 8004794:	b108      	cbz	r0, 800479a <_printf_i+0x1ea>
 8004796:	1b40      	subs	r0, r0, r5
 8004798:	6060      	str	r0, [r4, #4]
 800479a:	6863      	ldr	r3, [r4, #4]
 800479c:	6123      	str	r3, [r4, #16]
 800479e:	2300      	movs	r3, #0
 80047a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047a4:	e7aa      	b.n	80046fc <_printf_i+0x14c>
 80047a6:	6923      	ldr	r3, [r4, #16]
 80047a8:	462a      	mov	r2, r5
 80047aa:	4649      	mov	r1, r9
 80047ac:	4640      	mov	r0, r8
 80047ae:	47d0      	blx	sl
 80047b0:	3001      	adds	r0, #1
 80047b2:	d0ad      	beq.n	8004710 <_printf_i+0x160>
 80047b4:	6823      	ldr	r3, [r4, #0]
 80047b6:	079b      	lsls	r3, r3, #30
 80047b8:	d413      	bmi.n	80047e2 <_printf_i+0x232>
 80047ba:	68e0      	ldr	r0, [r4, #12]
 80047bc:	9b03      	ldr	r3, [sp, #12]
 80047be:	4298      	cmp	r0, r3
 80047c0:	bfb8      	it	lt
 80047c2:	4618      	movlt	r0, r3
 80047c4:	e7a6      	b.n	8004714 <_printf_i+0x164>
 80047c6:	2301      	movs	r3, #1
 80047c8:	4632      	mov	r2, r6
 80047ca:	4649      	mov	r1, r9
 80047cc:	4640      	mov	r0, r8
 80047ce:	47d0      	blx	sl
 80047d0:	3001      	adds	r0, #1
 80047d2:	d09d      	beq.n	8004710 <_printf_i+0x160>
 80047d4:	3501      	adds	r5, #1
 80047d6:	68e3      	ldr	r3, [r4, #12]
 80047d8:	9903      	ldr	r1, [sp, #12]
 80047da:	1a5b      	subs	r3, r3, r1
 80047dc:	42ab      	cmp	r3, r5
 80047de:	dcf2      	bgt.n	80047c6 <_printf_i+0x216>
 80047e0:	e7eb      	b.n	80047ba <_printf_i+0x20a>
 80047e2:	2500      	movs	r5, #0
 80047e4:	f104 0619 	add.w	r6, r4, #25
 80047e8:	e7f5      	b.n	80047d6 <_printf_i+0x226>
 80047ea:	bf00      	nop
 80047ec:	08006cf6 	.word	0x08006cf6
 80047f0:	08006d07 	.word	0x08006d07

080047f4 <std>:
 80047f4:	2300      	movs	r3, #0
 80047f6:	b510      	push	{r4, lr}
 80047f8:	4604      	mov	r4, r0
 80047fa:	e9c0 3300 	strd	r3, r3, [r0]
 80047fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004802:	6083      	str	r3, [r0, #8]
 8004804:	8181      	strh	r1, [r0, #12]
 8004806:	6643      	str	r3, [r0, #100]	; 0x64
 8004808:	81c2      	strh	r2, [r0, #14]
 800480a:	6183      	str	r3, [r0, #24]
 800480c:	4619      	mov	r1, r3
 800480e:	2208      	movs	r2, #8
 8004810:	305c      	adds	r0, #92	; 0x5c
 8004812:	f000 f902 	bl	8004a1a <memset>
 8004816:	4b05      	ldr	r3, [pc, #20]	; (800482c <std+0x38>)
 8004818:	6263      	str	r3, [r4, #36]	; 0x24
 800481a:	4b05      	ldr	r3, [pc, #20]	; (8004830 <std+0x3c>)
 800481c:	62a3      	str	r3, [r4, #40]	; 0x28
 800481e:	4b05      	ldr	r3, [pc, #20]	; (8004834 <std+0x40>)
 8004820:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004822:	4b05      	ldr	r3, [pc, #20]	; (8004838 <std+0x44>)
 8004824:	6224      	str	r4, [r4, #32]
 8004826:	6323      	str	r3, [r4, #48]	; 0x30
 8004828:	bd10      	pop	{r4, pc}
 800482a:	bf00      	nop
 800482c:	08004995 	.word	0x08004995
 8004830:	080049b7 	.word	0x080049b7
 8004834:	080049ef 	.word	0x080049ef
 8004838:	08004a13 	.word	0x08004a13

0800483c <stdio_exit_handler>:
 800483c:	4a02      	ldr	r2, [pc, #8]	; (8004848 <stdio_exit_handler+0xc>)
 800483e:	4903      	ldr	r1, [pc, #12]	; (800484c <stdio_exit_handler+0x10>)
 8004840:	4803      	ldr	r0, [pc, #12]	; (8004850 <stdio_exit_handler+0x14>)
 8004842:	f000 b869 	b.w	8004918 <_fwalk_sglue>
 8004846:	bf00      	nop
 8004848:	2000000c 	.word	0x2000000c
 800484c:	08006485 	.word	0x08006485
 8004850:	20000018 	.word	0x20000018

08004854 <cleanup_stdio>:
 8004854:	6841      	ldr	r1, [r0, #4]
 8004856:	4b0c      	ldr	r3, [pc, #48]	; (8004888 <cleanup_stdio+0x34>)
 8004858:	4299      	cmp	r1, r3
 800485a:	b510      	push	{r4, lr}
 800485c:	4604      	mov	r4, r0
 800485e:	d001      	beq.n	8004864 <cleanup_stdio+0x10>
 8004860:	f001 fe10 	bl	8006484 <_fflush_r>
 8004864:	68a1      	ldr	r1, [r4, #8]
 8004866:	4b09      	ldr	r3, [pc, #36]	; (800488c <cleanup_stdio+0x38>)
 8004868:	4299      	cmp	r1, r3
 800486a:	d002      	beq.n	8004872 <cleanup_stdio+0x1e>
 800486c:	4620      	mov	r0, r4
 800486e:	f001 fe09 	bl	8006484 <_fflush_r>
 8004872:	68e1      	ldr	r1, [r4, #12]
 8004874:	4b06      	ldr	r3, [pc, #24]	; (8004890 <cleanup_stdio+0x3c>)
 8004876:	4299      	cmp	r1, r3
 8004878:	d004      	beq.n	8004884 <cleanup_stdio+0x30>
 800487a:	4620      	mov	r0, r4
 800487c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004880:	f001 be00 	b.w	8006484 <_fflush_r>
 8004884:	bd10      	pop	{r4, pc}
 8004886:	bf00      	nop
 8004888:	2000028c 	.word	0x2000028c
 800488c:	200002f4 	.word	0x200002f4
 8004890:	2000035c 	.word	0x2000035c

08004894 <global_stdio_init.part.0>:
 8004894:	b510      	push	{r4, lr}
 8004896:	4b0b      	ldr	r3, [pc, #44]	; (80048c4 <global_stdio_init.part.0+0x30>)
 8004898:	4c0b      	ldr	r4, [pc, #44]	; (80048c8 <global_stdio_init.part.0+0x34>)
 800489a:	4a0c      	ldr	r2, [pc, #48]	; (80048cc <global_stdio_init.part.0+0x38>)
 800489c:	601a      	str	r2, [r3, #0]
 800489e:	4620      	mov	r0, r4
 80048a0:	2200      	movs	r2, #0
 80048a2:	2104      	movs	r1, #4
 80048a4:	f7ff ffa6 	bl	80047f4 <std>
 80048a8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80048ac:	2201      	movs	r2, #1
 80048ae:	2109      	movs	r1, #9
 80048b0:	f7ff ffa0 	bl	80047f4 <std>
 80048b4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80048b8:	2202      	movs	r2, #2
 80048ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048be:	2112      	movs	r1, #18
 80048c0:	f7ff bf98 	b.w	80047f4 <std>
 80048c4:	200003c4 	.word	0x200003c4
 80048c8:	2000028c 	.word	0x2000028c
 80048cc:	0800483d 	.word	0x0800483d

080048d0 <__sfp_lock_acquire>:
 80048d0:	4801      	ldr	r0, [pc, #4]	; (80048d8 <__sfp_lock_acquire+0x8>)
 80048d2:	f000 b91f 	b.w	8004b14 <__retarget_lock_acquire_recursive>
 80048d6:	bf00      	nop
 80048d8:	200003cd 	.word	0x200003cd

080048dc <__sfp_lock_release>:
 80048dc:	4801      	ldr	r0, [pc, #4]	; (80048e4 <__sfp_lock_release+0x8>)
 80048de:	f000 b91a 	b.w	8004b16 <__retarget_lock_release_recursive>
 80048e2:	bf00      	nop
 80048e4:	200003cd 	.word	0x200003cd

080048e8 <__sinit>:
 80048e8:	b510      	push	{r4, lr}
 80048ea:	4604      	mov	r4, r0
 80048ec:	f7ff fff0 	bl	80048d0 <__sfp_lock_acquire>
 80048f0:	6a23      	ldr	r3, [r4, #32]
 80048f2:	b11b      	cbz	r3, 80048fc <__sinit+0x14>
 80048f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048f8:	f7ff bff0 	b.w	80048dc <__sfp_lock_release>
 80048fc:	4b04      	ldr	r3, [pc, #16]	; (8004910 <__sinit+0x28>)
 80048fe:	6223      	str	r3, [r4, #32]
 8004900:	4b04      	ldr	r3, [pc, #16]	; (8004914 <__sinit+0x2c>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d1f5      	bne.n	80048f4 <__sinit+0xc>
 8004908:	f7ff ffc4 	bl	8004894 <global_stdio_init.part.0>
 800490c:	e7f2      	b.n	80048f4 <__sinit+0xc>
 800490e:	bf00      	nop
 8004910:	08004855 	.word	0x08004855
 8004914:	200003c4 	.word	0x200003c4

08004918 <_fwalk_sglue>:
 8004918:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800491c:	4607      	mov	r7, r0
 800491e:	4688      	mov	r8, r1
 8004920:	4614      	mov	r4, r2
 8004922:	2600      	movs	r6, #0
 8004924:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004928:	f1b9 0901 	subs.w	r9, r9, #1
 800492c:	d505      	bpl.n	800493a <_fwalk_sglue+0x22>
 800492e:	6824      	ldr	r4, [r4, #0]
 8004930:	2c00      	cmp	r4, #0
 8004932:	d1f7      	bne.n	8004924 <_fwalk_sglue+0xc>
 8004934:	4630      	mov	r0, r6
 8004936:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800493a:	89ab      	ldrh	r3, [r5, #12]
 800493c:	2b01      	cmp	r3, #1
 800493e:	d907      	bls.n	8004950 <_fwalk_sglue+0x38>
 8004940:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004944:	3301      	adds	r3, #1
 8004946:	d003      	beq.n	8004950 <_fwalk_sglue+0x38>
 8004948:	4629      	mov	r1, r5
 800494a:	4638      	mov	r0, r7
 800494c:	47c0      	blx	r8
 800494e:	4306      	orrs	r6, r0
 8004950:	3568      	adds	r5, #104	; 0x68
 8004952:	e7e9      	b.n	8004928 <_fwalk_sglue+0x10>

08004954 <siprintf>:
 8004954:	b40e      	push	{r1, r2, r3}
 8004956:	b500      	push	{lr}
 8004958:	b09c      	sub	sp, #112	; 0x70
 800495a:	ab1d      	add	r3, sp, #116	; 0x74
 800495c:	9002      	str	r0, [sp, #8]
 800495e:	9006      	str	r0, [sp, #24]
 8004960:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004964:	4809      	ldr	r0, [pc, #36]	; (800498c <siprintf+0x38>)
 8004966:	9107      	str	r1, [sp, #28]
 8004968:	9104      	str	r1, [sp, #16]
 800496a:	4909      	ldr	r1, [pc, #36]	; (8004990 <siprintf+0x3c>)
 800496c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004970:	9105      	str	r1, [sp, #20]
 8004972:	6800      	ldr	r0, [r0, #0]
 8004974:	9301      	str	r3, [sp, #4]
 8004976:	a902      	add	r1, sp, #8
 8004978:	f001 fc04 	bl	8006184 <_svfiprintf_r>
 800497c:	9b02      	ldr	r3, [sp, #8]
 800497e:	2200      	movs	r2, #0
 8004980:	701a      	strb	r2, [r3, #0]
 8004982:	b01c      	add	sp, #112	; 0x70
 8004984:	f85d eb04 	ldr.w	lr, [sp], #4
 8004988:	b003      	add	sp, #12
 800498a:	4770      	bx	lr
 800498c:	20000064 	.word	0x20000064
 8004990:	ffff0208 	.word	0xffff0208

08004994 <__sread>:
 8004994:	b510      	push	{r4, lr}
 8004996:	460c      	mov	r4, r1
 8004998:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800499c:	f000 f86c 	bl	8004a78 <_read_r>
 80049a0:	2800      	cmp	r0, #0
 80049a2:	bfab      	itete	ge
 80049a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80049a6:	89a3      	ldrhlt	r3, [r4, #12]
 80049a8:	181b      	addge	r3, r3, r0
 80049aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80049ae:	bfac      	ite	ge
 80049b0:	6563      	strge	r3, [r4, #84]	; 0x54
 80049b2:	81a3      	strhlt	r3, [r4, #12]
 80049b4:	bd10      	pop	{r4, pc}

080049b6 <__swrite>:
 80049b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049ba:	461f      	mov	r7, r3
 80049bc:	898b      	ldrh	r3, [r1, #12]
 80049be:	05db      	lsls	r3, r3, #23
 80049c0:	4605      	mov	r5, r0
 80049c2:	460c      	mov	r4, r1
 80049c4:	4616      	mov	r6, r2
 80049c6:	d505      	bpl.n	80049d4 <__swrite+0x1e>
 80049c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049cc:	2302      	movs	r3, #2
 80049ce:	2200      	movs	r2, #0
 80049d0:	f000 f840 	bl	8004a54 <_lseek_r>
 80049d4:	89a3      	ldrh	r3, [r4, #12]
 80049d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80049da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80049de:	81a3      	strh	r3, [r4, #12]
 80049e0:	4632      	mov	r2, r6
 80049e2:	463b      	mov	r3, r7
 80049e4:	4628      	mov	r0, r5
 80049e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80049ea:	f000 b857 	b.w	8004a9c <_write_r>

080049ee <__sseek>:
 80049ee:	b510      	push	{r4, lr}
 80049f0:	460c      	mov	r4, r1
 80049f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049f6:	f000 f82d 	bl	8004a54 <_lseek_r>
 80049fa:	1c43      	adds	r3, r0, #1
 80049fc:	89a3      	ldrh	r3, [r4, #12]
 80049fe:	bf15      	itete	ne
 8004a00:	6560      	strne	r0, [r4, #84]	; 0x54
 8004a02:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004a06:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004a0a:	81a3      	strheq	r3, [r4, #12]
 8004a0c:	bf18      	it	ne
 8004a0e:	81a3      	strhne	r3, [r4, #12]
 8004a10:	bd10      	pop	{r4, pc}

08004a12 <__sclose>:
 8004a12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a16:	f000 b80d 	b.w	8004a34 <_close_r>

08004a1a <memset>:
 8004a1a:	4402      	add	r2, r0
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d100      	bne.n	8004a24 <memset+0xa>
 8004a22:	4770      	bx	lr
 8004a24:	f803 1b01 	strb.w	r1, [r3], #1
 8004a28:	e7f9      	b.n	8004a1e <memset+0x4>
	...

08004a2c <_localeconv_r>:
 8004a2c:	4800      	ldr	r0, [pc, #0]	; (8004a30 <_localeconv_r+0x4>)
 8004a2e:	4770      	bx	lr
 8004a30:	20000158 	.word	0x20000158

08004a34 <_close_r>:
 8004a34:	b538      	push	{r3, r4, r5, lr}
 8004a36:	4d06      	ldr	r5, [pc, #24]	; (8004a50 <_close_r+0x1c>)
 8004a38:	2300      	movs	r3, #0
 8004a3a:	4604      	mov	r4, r0
 8004a3c:	4608      	mov	r0, r1
 8004a3e:	602b      	str	r3, [r5, #0]
 8004a40:	f7fc fdd1 	bl	80015e6 <_close>
 8004a44:	1c43      	adds	r3, r0, #1
 8004a46:	d102      	bne.n	8004a4e <_close_r+0x1a>
 8004a48:	682b      	ldr	r3, [r5, #0]
 8004a4a:	b103      	cbz	r3, 8004a4e <_close_r+0x1a>
 8004a4c:	6023      	str	r3, [r4, #0]
 8004a4e:	bd38      	pop	{r3, r4, r5, pc}
 8004a50:	200003c8 	.word	0x200003c8

08004a54 <_lseek_r>:
 8004a54:	b538      	push	{r3, r4, r5, lr}
 8004a56:	4d07      	ldr	r5, [pc, #28]	; (8004a74 <_lseek_r+0x20>)
 8004a58:	4604      	mov	r4, r0
 8004a5a:	4608      	mov	r0, r1
 8004a5c:	4611      	mov	r1, r2
 8004a5e:	2200      	movs	r2, #0
 8004a60:	602a      	str	r2, [r5, #0]
 8004a62:	461a      	mov	r2, r3
 8004a64:	f7fc fde3 	bl	800162e <_lseek>
 8004a68:	1c43      	adds	r3, r0, #1
 8004a6a:	d102      	bne.n	8004a72 <_lseek_r+0x1e>
 8004a6c:	682b      	ldr	r3, [r5, #0]
 8004a6e:	b103      	cbz	r3, 8004a72 <_lseek_r+0x1e>
 8004a70:	6023      	str	r3, [r4, #0]
 8004a72:	bd38      	pop	{r3, r4, r5, pc}
 8004a74:	200003c8 	.word	0x200003c8

08004a78 <_read_r>:
 8004a78:	b538      	push	{r3, r4, r5, lr}
 8004a7a:	4d07      	ldr	r5, [pc, #28]	; (8004a98 <_read_r+0x20>)
 8004a7c:	4604      	mov	r4, r0
 8004a7e:	4608      	mov	r0, r1
 8004a80:	4611      	mov	r1, r2
 8004a82:	2200      	movs	r2, #0
 8004a84:	602a      	str	r2, [r5, #0]
 8004a86:	461a      	mov	r2, r3
 8004a88:	f7fc fd74 	bl	8001574 <_read>
 8004a8c:	1c43      	adds	r3, r0, #1
 8004a8e:	d102      	bne.n	8004a96 <_read_r+0x1e>
 8004a90:	682b      	ldr	r3, [r5, #0]
 8004a92:	b103      	cbz	r3, 8004a96 <_read_r+0x1e>
 8004a94:	6023      	str	r3, [r4, #0]
 8004a96:	bd38      	pop	{r3, r4, r5, pc}
 8004a98:	200003c8 	.word	0x200003c8

08004a9c <_write_r>:
 8004a9c:	b538      	push	{r3, r4, r5, lr}
 8004a9e:	4d07      	ldr	r5, [pc, #28]	; (8004abc <_write_r+0x20>)
 8004aa0:	4604      	mov	r4, r0
 8004aa2:	4608      	mov	r0, r1
 8004aa4:	4611      	mov	r1, r2
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	602a      	str	r2, [r5, #0]
 8004aaa:	461a      	mov	r2, r3
 8004aac:	f7fc fd7f 	bl	80015ae <_write>
 8004ab0:	1c43      	adds	r3, r0, #1
 8004ab2:	d102      	bne.n	8004aba <_write_r+0x1e>
 8004ab4:	682b      	ldr	r3, [r5, #0]
 8004ab6:	b103      	cbz	r3, 8004aba <_write_r+0x1e>
 8004ab8:	6023      	str	r3, [r4, #0]
 8004aba:	bd38      	pop	{r3, r4, r5, pc}
 8004abc:	200003c8 	.word	0x200003c8

08004ac0 <__errno>:
 8004ac0:	4b01      	ldr	r3, [pc, #4]	; (8004ac8 <__errno+0x8>)
 8004ac2:	6818      	ldr	r0, [r3, #0]
 8004ac4:	4770      	bx	lr
 8004ac6:	bf00      	nop
 8004ac8:	20000064 	.word	0x20000064

08004acc <__libc_init_array>:
 8004acc:	b570      	push	{r4, r5, r6, lr}
 8004ace:	4d0d      	ldr	r5, [pc, #52]	; (8004b04 <__libc_init_array+0x38>)
 8004ad0:	4c0d      	ldr	r4, [pc, #52]	; (8004b08 <__libc_init_array+0x3c>)
 8004ad2:	1b64      	subs	r4, r4, r5
 8004ad4:	10a4      	asrs	r4, r4, #2
 8004ad6:	2600      	movs	r6, #0
 8004ad8:	42a6      	cmp	r6, r4
 8004ada:	d109      	bne.n	8004af0 <__libc_init_array+0x24>
 8004adc:	4d0b      	ldr	r5, [pc, #44]	; (8004b0c <__libc_init_array+0x40>)
 8004ade:	4c0c      	ldr	r4, [pc, #48]	; (8004b10 <__libc_init_array+0x44>)
 8004ae0:	f002 f870 	bl	8006bc4 <_init>
 8004ae4:	1b64      	subs	r4, r4, r5
 8004ae6:	10a4      	asrs	r4, r4, #2
 8004ae8:	2600      	movs	r6, #0
 8004aea:	42a6      	cmp	r6, r4
 8004aec:	d105      	bne.n	8004afa <__libc_init_array+0x2e>
 8004aee:	bd70      	pop	{r4, r5, r6, pc}
 8004af0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004af4:	4798      	blx	r3
 8004af6:	3601      	adds	r6, #1
 8004af8:	e7ee      	b.n	8004ad8 <__libc_init_array+0xc>
 8004afa:	f855 3b04 	ldr.w	r3, [r5], #4
 8004afe:	4798      	blx	r3
 8004b00:	3601      	adds	r6, #1
 8004b02:	e7f2      	b.n	8004aea <__libc_init_array+0x1e>
 8004b04:	0800705c 	.word	0x0800705c
 8004b08:	0800705c 	.word	0x0800705c
 8004b0c:	0800705c 	.word	0x0800705c
 8004b10:	08007060 	.word	0x08007060

08004b14 <__retarget_lock_acquire_recursive>:
 8004b14:	4770      	bx	lr

08004b16 <__retarget_lock_release_recursive>:
 8004b16:	4770      	bx	lr

08004b18 <quorem>:
 8004b18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b1c:	6903      	ldr	r3, [r0, #16]
 8004b1e:	690c      	ldr	r4, [r1, #16]
 8004b20:	42a3      	cmp	r3, r4
 8004b22:	4607      	mov	r7, r0
 8004b24:	db7b      	blt.n	8004c1e <quorem+0x106>
 8004b26:	3c01      	subs	r4, #1
 8004b28:	f101 0814 	add.w	r8, r1, #20
 8004b2c:	f100 0514 	add.w	r5, r0, #20
 8004b30:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004b34:	9301      	str	r3, [sp, #4]
 8004b36:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004b3a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004b3e:	3301      	adds	r3, #1
 8004b40:	429a      	cmp	r2, r3
 8004b42:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004b46:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004b4a:	fbb2 f6f3 	udiv	r6, r2, r3
 8004b4e:	d32e      	bcc.n	8004bae <quorem+0x96>
 8004b50:	f04f 0e00 	mov.w	lr, #0
 8004b54:	4640      	mov	r0, r8
 8004b56:	46ac      	mov	ip, r5
 8004b58:	46f2      	mov	sl, lr
 8004b5a:	f850 2b04 	ldr.w	r2, [r0], #4
 8004b5e:	b293      	uxth	r3, r2
 8004b60:	fb06 e303 	mla	r3, r6, r3, lr
 8004b64:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004b68:	0c1a      	lsrs	r2, r3, #16
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	fb06 220e 	mla	r2, r6, lr, r2
 8004b70:	ebaa 0303 	sub.w	r3, sl, r3
 8004b74:	f8dc a000 	ldr.w	sl, [ip]
 8004b78:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004b7c:	b292      	uxth	r2, r2
 8004b7e:	fa13 f38a 	uxtah	r3, r3, sl
 8004b82:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004b86:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004b90:	4581      	cmp	r9, r0
 8004b92:	f84c 3b04 	str.w	r3, [ip], #4
 8004b96:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004b9a:	d2de      	bcs.n	8004b5a <quorem+0x42>
 8004b9c:	f855 300b 	ldr.w	r3, [r5, fp]
 8004ba0:	b92b      	cbnz	r3, 8004bae <quorem+0x96>
 8004ba2:	9b01      	ldr	r3, [sp, #4]
 8004ba4:	3b04      	subs	r3, #4
 8004ba6:	429d      	cmp	r5, r3
 8004ba8:	461a      	mov	r2, r3
 8004baa:	d32c      	bcc.n	8004c06 <quorem+0xee>
 8004bac:	613c      	str	r4, [r7, #16]
 8004bae:	4638      	mov	r0, r7
 8004bb0:	f001 f994 	bl	8005edc <__mcmp>
 8004bb4:	2800      	cmp	r0, #0
 8004bb6:	db22      	blt.n	8004bfe <quorem+0xe6>
 8004bb8:	3601      	adds	r6, #1
 8004bba:	4629      	mov	r1, r5
 8004bbc:	2000      	movs	r0, #0
 8004bbe:	f858 2b04 	ldr.w	r2, [r8], #4
 8004bc2:	f8d1 c000 	ldr.w	ip, [r1]
 8004bc6:	b293      	uxth	r3, r2
 8004bc8:	1ac3      	subs	r3, r0, r3
 8004bca:	0c12      	lsrs	r2, r2, #16
 8004bcc:	fa13 f38c 	uxtah	r3, r3, ip
 8004bd0:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8004bd4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004bd8:	b29b      	uxth	r3, r3
 8004bda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004bde:	45c1      	cmp	r9, r8
 8004be0:	f841 3b04 	str.w	r3, [r1], #4
 8004be4:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004be8:	d2e9      	bcs.n	8004bbe <quorem+0xa6>
 8004bea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004bee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004bf2:	b922      	cbnz	r2, 8004bfe <quorem+0xe6>
 8004bf4:	3b04      	subs	r3, #4
 8004bf6:	429d      	cmp	r5, r3
 8004bf8:	461a      	mov	r2, r3
 8004bfa:	d30a      	bcc.n	8004c12 <quorem+0xfa>
 8004bfc:	613c      	str	r4, [r7, #16]
 8004bfe:	4630      	mov	r0, r6
 8004c00:	b003      	add	sp, #12
 8004c02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c06:	6812      	ldr	r2, [r2, #0]
 8004c08:	3b04      	subs	r3, #4
 8004c0a:	2a00      	cmp	r2, #0
 8004c0c:	d1ce      	bne.n	8004bac <quorem+0x94>
 8004c0e:	3c01      	subs	r4, #1
 8004c10:	e7c9      	b.n	8004ba6 <quorem+0x8e>
 8004c12:	6812      	ldr	r2, [r2, #0]
 8004c14:	3b04      	subs	r3, #4
 8004c16:	2a00      	cmp	r2, #0
 8004c18:	d1f0      	bne.n	8004bfc <quorem+0xe4>
 8004c1a:	3c01      	subs	r4, #1
 8004c1c:	e7eb      	b.n	8004bf6 <quorem+0xde>
 8004c1e:	2000      	movs	r0, #0
 8004c20:	e7ee      	b.n	8004c00 <quorem+0xe8>
 8004c22:	0000      	movs	r0, r0
 8004c24:	0000      	movs	r0, r0
	...

08004c28 <_dtoa_r>:
 8004c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c2c:	69c4      	ldr	r4, [r0, #28]
 8004c2e:	b099      	sub	sp, #100	; 0x64
 8004c30:	4616      	mov	r6, r2
 8004c32:	461f      	mov	r7, r3
 8004c34:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004c38:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8004c3c:	4605      	mov	r5, r0
 8004c3e:	b974      	cbnz	r4, 8004c5e <_dtoa_r+0x36>
 8004c40:	2010      	movs	r0, #16
 8004c42:	f000 fe1b 	bl	800587c <malloc>
 8004c46:	4602      	mov	r2, r0
 8004c48:	61e8      	str	r0, [r5, #28]
 8004c4a:	b920      	cbnz	r0, 8004c56 <_dtoa_r+0x2e>
 8004c4c:	4baa      	ldr	r3, [pc, #680]	; (8004ef8 <_dtoa_r+0x2d0>)
 8004c4e:	21ef      	movs	r1, #239	; 0xef
 8004c50:	48aa      	ldr	r0, [pc, #680]	; (8004efc <_dtoa_r+0x2d4>)
 8004c52:	f001 fc77 	bl	8006544 <__assert_func>
 8004c56:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004c5a:	6004      	str	r4, [r0, #0]
 8004c5c:	60c4      	str	r4, [r0, #12]
 8004c5e:	69eb      	ldr	r3, [r5, #28]
 8004c60:	6819      	ldr	r1, [r3, #0]
 8004c62:	b151      	cbz	r1, 8004c7a <_dtoa_r+0x52>
 8004c64:	685a      	ldr	r2, [r3, #4]
 8004c66:	604a      	str	r2, [r1, #4]
 8004c68:	2301      	movs	r3, #1
 8004c6a:	4093      	lsls	r3, r2
 8004c6c:	608b      	str	r3, [r1, #8]
 8004c6e:	4628      	mov	r0, r5
 8004c70:	f000 fef8 	bl	8005a64 <_Bfree>
 8004c74:	69eb      	ldr	r3, [r5, #28]
 8004c76:	2200      	movs	r2, #0
 8004c78:	601a      	str	r2, [r3, #0]
 8004c7a:	1e3b      	subs	r3, r7, #0
 8004c7c:	bfb9      	ittee	lt
 8004c7e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004c82:	9305      	strlt	r3, [sp, #20]
 8004c84:	2300      	movge	r3, #0
 8004c86:	f8c8 3000 	strge.w	r3, [r8]
 8004c8a:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8004c8e:	4b9c      	ldr	r3, [pc, #624]	; (8004f00 <_dtoa_r+0x2d8>)
 8004c90:	bfbc      	itt	lt
 8004c92:	2201      	movlt	r2, #1
 8004c94:	f8c8 2000 	strlt.w	r2, [r8]
 8004c98:	ea33 0309 	bics.w	r3, r3, r9
 8004c9c:	d119      	bne.n	8004cd2 <_dtoa_r+0xaa>
 8004c9e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004ca0:	f242 730f 	movw	r3, #9999	; 0x270f
 8004ca4:	6013      	str	r3, [r2, #0]
 8004ca6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004caa:	4333      	orrs	r3, r6
 8004cac:	f000 8587 	beq.w	80057be <_dtoa_r+0xb96>
 8004cb0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004cb2:	b953      	cbnz	r3, 8004cca <_dtoa_r+0xa2>
 8004cb4:	4b93      	ldr	r3, [pc, #588]	; (8004f04 <_dtoa_r+0x2dc>)
 8004cb6:	e023      	b.n	8004d00 <_dtoa_r+0xd8>
 8004cb8:	4b93      	ldr	r3, [pc, #588]	; (8004f08 <_dtoa_r+0x2e0>)
 8004cba:	9303      	str	r3, [sp, #12]
 8004cbc:	3308      	adds	r3, #8
 8004cbe:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004cc0:	6013      	str	r3, [r2, #0]
 8004cc2:	9803      	ldr	r0, [sp, #12]
 8004cc4:	b019      	add	sp, #100	; 0x64
 8004cc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cca:	4b8e      	ldr	r3, [pc, #568]	; (8004f04 <_dtoa_r+0x2dc>)
 8004ccc:	9303      	str	r3, [sp, #12]
 8004cce:	3303      	adds	r3, #3
 8004cd0:	e7f5      	b.n	8004cbe <_dtoa_r+0x96>
 8004cd2:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004cd6:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8004cda:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004cde:	2200      	movs	r2, #0
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	f7fb fec9 	bl	8000a78 <__aeabi_dcmpeq>
 8004ce6:	4680      	mov	r8, r0
 8004ce8:	b160      	cbz	r0, 8004d04 <_dtoa_r+0xdc>
 8004cea:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004cec:	2301      	movs	r3, #1
 8004cee:	6013      	str	r3, [r2, #0]
 8004cf0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	f000 8560 	beq.w	80057b8 <_dtoa_r+0xb90>
 8004cf8:	4b84      	ldr	r3, [pc, #528]	; (8004f0c <_dtoa_r+0x2e4>)
 8004cfa:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004cfc:	6013      	str	r3, [r2, #0]
 8004cfe:	3b01      	subs	r3, #1
 8004d00:	9303      	str	r3, [sp, #12]
 8004d02:	e7de      	b.n	8004cc2 <_dtoa_r+0x9a>
 8004d04:	ab16      	add	r3, sp, #88	; 0x58
 8004d06:	9301      	str	r3, [sp, #4]
 8004d08:	ab17      	add	r3, sp, #92	; 0x5c
 8004d0a:	9300      	str	r3, [sp, #0]
 8004d0c:	4628      	mov	r0, r5
 8004d0e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004d12:	f001 f987 	bl	8006024 <__d2b>
 8004d16:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004d1a:	4682      	mov	sl, r0
 8004d1c:	2c00      	cmp	r4, #0
 8004d1e:	d07d      	beq.n	8004e1c <_dtoa_r+0x1f4>
 8004d20:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004d22:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8004d26:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d2a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004d2e:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8004d32:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8004d36:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004d3a:	4619      	mov	r1, r3
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	4b74      	ldr	r3, [pc, #464]	; (8004f10 <_dtoa_r+0x2e8>)
 8004d40:	f7fb fa7a 	bl	8000238 <__aeabi_dsub>
 8004d44:	a366      	add	r3, pc, #408	; (adr r3, 8004ee0 <_dtoa_r+0x2b8>)
 8004d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d4a:	f7fb fc2d 	bl	80005a8 <__aeabi_dmul>
 8004d4e:	a366      	add	r3, pc, #408	; (adr r3, 8004ee8 <_dtoa_r+0x2c0>)
 8004d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d54:	f7fb fa72 	bl	800023c <__adddf3>
 8004d58:	4606      	mov	r6, r0
 8004d5a:	4620      	mov	r0, r4
 8004d5c:	460f      	mov	r7, r1
 8004d5e:	f7fb fbb9 	bl	80004d4 <__aeabi_i2d>
 8004d62:	a363      	add	r3, pc, #396	; (adr r3, 8004ef0 <_dtoa_r+0x2c8>)
 8004d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d68:	f7fb fc1e 	bl	80005a8 <__aeabi_dmul>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	460b      	mov	r3, r1
 8004d70:	4630      	mov	r0, r6
 8004d72:	4639      	mov	r1, r7
 8004d74:	f7fb fa62 	bl	800023c <__adddf3>
 8004d78:	4606      	mov	r6, r0
 8004d7a:	460f      	mov	r7, r1
 8004d7c:	f7fb fec4 	bl	8000b08 <__aeabi_d2iz>
 8004d80:	2200      	movs	r2, #0
 8004d82:	4683      	mov	fp, r0
 8004d84:	2300      	movs	r3, #0
 8004d86:	4630      	mov	r0, r6
 8004d88:	4639      	mov	r1, r7
 8004d8a:	f7fb fe7f 	bl	8000a8c <__aeabi_dcmplt>
 8004d8e:	b148      	cbz	r0, 8004da4 <_dtoa_r+0x17c>
 8004d90:	4658      	mov	r0, fp
 8004d92:	f7fb fb9f 	bl	80004d4 <__aeabi_i2d>
 8004d96:	4632      	mov	r2, r6
 8004d98:	463b      	mov	r3, r7
 8004d9a:	f7fb fe6d 	bl	8000a78 <__aeabi_dcmpeq>
 8004d9e:	b908      	cbnz	r0, 8004da4 <_dtoa_r+0x17c>
 8004da0:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004da4:	f1bb 0f16 	cmp.w	fp, #22
 8004da8:	d856      	bhi.n	8004e58 <_dtoa_r+0x230>
 8004daa:	4b5a      	ldr	r3, [pc, #360]	; (8004f14 <_dtoa_r+0x2ec>)
 8004dac:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004db4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004db8:	f7fb fe68 	bl	8000a8c <__aeabi_dcmplt>
 8004dbc:	2800      	cmp	r0, #0
 8004dbe:	d04d      	beq.n	8004e5c <_dtoa_r+0x234>
 8004dc0:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	930f      	str	r3, [sp, #60]	; 0x3c
 8004dc8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004dca:	1b1b      	subs	r3, r3, r4
 8004dcc:	1e5a      	subs	r2, r3, #1
 8004dce:	bf44      	itt	mi
 8004dd0:	f1c3 0901 	rsbmi	r9, r3, #1
 8004dd4:	2300      	movmi	r3, #0
 8004dd6:	9209      	str	r2, [sp, #36]	; 0x24
 8004dd8:	bf54      	ite	pl
 8004dda:	f04f 0900 	movpl.w	r9, #0
 8004dde:	9309      	strmi	r3, [sp, #36]	; 0x24
 8004de0:	f1bb 0f00 	cmp.w	fp, #0
 8004de4:	db3c      	blt.n	8004e60 <_dtoa_r+0x238>
 8004de6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004de8:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8004dec:	445b      	add	r3, fp
 8004dee:	9309      	str	r3, [sp, #36]	; 0x24
 8004df0:	2300      	movs	r3, #0
 8004df2:	930a      	str	r3, [sp, #40]	; 0x28
 8004df4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004df6:	2b09      	cmp	r3, #9
 8004df8:	d866      	bhi.n	8004ec8 <_dtoa_r+0x2a0>
 8004dfa:	2b05      	cmp	r3, #5
 8004dfc:	bfc4      	itt	gt
 8004dfe:	3b04      	subgt	r3, #4
 8004e00:	9322      	strgt	r3, [sp, #136]	; 0x88
 8004e02:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004e04:	f1a3 0302 	sub.w	r3, r3, #2
 8004e08:	bfcc      	ite	gt
 8004e0a:	2400      	movgt	r4, #0
 8004e0c:	2401      	movle	r4, #1
 8004e0e:	2b03      	cmp	r3, #3
 8004e10:	f200 8084 	bhi.w	8004f1c <_dtoa_r+0x2f4>
 8004e14:	e8df f003 	tbb	[pc, r3]
 8004e18:	5637392c 	.word	0x5637392c
 8004e1c:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8004e20:	441c      	add	r4, r3
 8004e22:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8004e26:	2b20      	cmp	r3, #32
 8004e28:	bfc1      	itttt	gt
 8004e2a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004e2e:	fa09 f903 	lslgt.w	r9, r9, r3
 8004e32:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8004e36:	fa26 f303 	lsrgt.w	r3, r6, r3
 8004e3a:	bfd6      	itet	le
 8004e3c:	f1c3 0320 	rsble	r3, r3, #32
 8004e40:	ea49 0003 	orrgt.w	r0, r9, r3
 8004e44:	fa06 f003 	lslle.w	r0, r6, r3
 8004e48:	f7fb fb34 	bl	80004b4 <__aeabi_ui2d>
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8004e52:	3c01      	subs	r4, #1
 8004e54:	9213      	str	r2, [sp, #76]	; 0x4c
 8004e56:	e770      	b.n	8004d3a <_dtoa_r+0x112>
 8004e58:	2301      	movs	r3, #1
 8004e5a:	e7b4      	b.n	8004dc6 <_dtoa_r+0x19e>
 8004e5c:	900f      	str	r0, [sp, #60]	; 0x3c
 8004e5e:	e7b3      	b.n	8004dc8 <_dtoa_r+0x1a0>
 8004e60:	f1cb 0300 	rsb	r3, fp, #0
 8004e64:	930a      	str	r3, [sp, #40]	; 0x28
 8004e66:	2300      	movs	r3, #0
 8004e68:	eba9 090b 	sub.w	r9, r9, fp
 8004e6c:	930e      	str	r3, [sp, #56]	; 0x38
 8004e6e:	e7c1      	b.n	8004df4 <_dtoa_r+0x1cc>
 8004e70:	2300      	movs	r3, #0
 8004e72:	930b      	str	r3, [sp, #44]	; 0x2c
 8004e74:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	dc53      	bgt.n	8004f22 <_dtoa_r+0x2fa>
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	9306      	str	r3, [sp, #24]
 8004e7e:	9308      	str	r3, [sp, #32]
 8004e80:	461a      	mov	r2, r3
 8004e82:	9223      	str	r2, [sp, #140]	; 0x8c
 8004e84:	e00b      	b.n	8004e9e <_dtoa_r+0x276>
 8004e86:	2301      	movs	r3, #1
 8004e88:	e7f3      	b.n	8004e72 <_dtoa_r+0x24a>
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	930b      	str	r3, [sp, #44]	; 0x2c
 8004e8e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004e90:	445b      	add	r3, fp
 8004e92:	9306      	str	r3, [sp, #24]
 8004e94:	3301      	adds	r3, #1
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	9308      	str	r3, [sp, #32]
 8004e9a:	bfb8      	it	lt
 8004e9c:	2301      	movlt	r3, #1
 8004e9e:	69e8      	ldr	r0, [r5, #28]
 8004ea0:	2100      	movs	r1, #0
 8004ea2:	2204      	movs	r2, #4
 8004ea4:	f102 0614 	add.w	r6, r2, #20
 8004ea8:	429e      	cmp	r6, r3
 8004eaa:	d93e      	bls.n	8004f2a <_dtoa_r+0x302>
 8004eac:	6041      	str	r1, [r0, #4]
 8004eae:	4628      	mov	r0, r5
 8004eb0:	f000 fd98 	bl	80059e4 <_Balloc>
 8004eb4:	9003      	str	r0, [sp, #12]
 8004eb6:	2800      	cmp	r0, #0
 8004eb8:	d13a      	bne.n	8004f30 <_dtoa_r+0x308>
 8004eba:	4b17      	ldr	r3, [pc, #92]	; (8004f18 <_dtoa_r+0x2f0>)
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	f240 11af 	movw	r1, #431	; 0x1af
 8004ec2:	e6c5      	b.n	8004c50 <_dtoa_r+0x28>
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	e7e1      	b.n	8004e8c <_dtoa_r+0x264>
 8004ec8:	2401      	movs	r4, #1
 8004eca:	2300      	movs	r3, #0
 8004ecc:	9322      	str	r3, [sp, #136]	; 0x88
 8004ece:	940b      	str	r4, [sp, #44]	; 0x2c
 8004ed0:	f04f 33ff 	mov.w	r3, #4294967295
 8004ed4:	9306      	str	r3, [sp, #24]
 8004ed6:	9308      	str	r3, [sp, #32]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	2312      	movs	r3, #18
 8004edc:	e7d1      	b.n	8004e82 <_dtoa_r+0x25a>
 8004ede:	bf00      	nop
 8004ee0:	636f4361 	.word	0x636f4361
 8004ee4:	3fd287a7 	.word	0x3fd287a7
 8004ee8:	8b60c8b3 	.word	0x8b60c8b3
 8004eec:	3fc68a28 	.word	0x3fc68a28
 8004ef0:	509f79fb 	.word	0x509f79fb
 8004ef4:	3fd34413 	.word	0x3fd34413
 8004ef8:	08006d25 	.word	0x08006d25
 8004efc:	08006d3c 	.word	0x08006d3c
 8004f00:	7ff00000 	.word	0x7ff00000
 8004f04:	08006d21 	.word	0x08006d21
 8004f08:	08006d18 	.word	0x08006d18
 8004f0c:	08006cf5 	.word	0x08006cf5
 8004f10:	3ff80000 	.word	0x3ff80000
 8004f14:	08006e28 	.word	0x08006e28
 8004f18:	08006d94 	.word	0x08006d94
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004f20:	e7d6      	b.n	8004ed0 <_dtoa_r+0x2a8>
 8004f22:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004f24:	9306      	str	r3, [sp, #24]
 8004f26:	9308      	str	r3, [sp, #32]
 8004f28:	e7b9      	b.n	8004e9e <_dtoa_r+0x276>
 8004f2a:	3101      	adds	r1, #1
 8004f2c:	0052      	lsls	r2, r2, #1
 8004f2e:	e7b9      	b.n	8004ea4 <_dtoa_r+0x27c>
 8004f30:	69eb      	ldr	r3, [r5, #28]
 8004f32:	9a03      	ldr	r2, [sp, #12]
 8004f34:	601a      	str	r2, [r3, #0]
 8004f36:	9b08      	ldr	r3, [sp, #32]
 8004f38:	2b0e      	cmp	r3, #14
 8004f3a:	f200 80a8 	bhi.w	800508e <_dtoa_r+0x466>
 8004f3e:	2c00      	cmp	r4, #0
 8004f40:	f000 80a5 	beq.w	800508e <_dtoa_r+0x466>
 8004f44:	f1bb 0f00 	cmp.w	fp, #0
 8004f48:	dd34      	ble.n	8004fb4 <_dtoa_r+0x38c>
 8004f4a:	4b9a      	ldr	r3, [pc, #616]	; (80051b4 <_dtoa_r+0x58c>)
 8004f4c:	f00b 020f 	and.w	r2, fp, #15
 8004f50:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004f54:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004f58:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8004f5c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004f60:	ea4f 142b 	mov.w	r4, fp, asr #4
 8004f64:	d016      	beq.n	8004f94 <_dtoa_r+0x36c>
 8004f66:	4b94      	ldr	r3, [pc, #592]	; (80051b8 <_dtoa_r+0x590>)
 8004f68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004f6c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004f70:	f7fb fc44 	bl	80007fc <__aeabi_ddiv>
 8004f74:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004f78:	f004 040f 	and.w	r4, r4, #15
 8004f7c:	2703      	movs	r7, #3
 8004f7e:	4e8e      	ldr	r6, [pc, #568]	; (80051b8 <_dtoa_r+0x590>)
 8004f80:	b954      	cbnz	r4, 8004f98 <_dtoa_r+0x370>
 8004f82:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004f86:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004f8a:	f7fb fc37 	bl	80007fc <__aeabi_ddiv>
 8004f8e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004f92:	e029      	b.n	8004fe8 <_dtoa_r+0x3c0>
 8004f94:	2702      	movs	r7, #2
 8004f96:	e7f2      	b.n	8004f7e <_dtoa_r+0x356>
 8004f98:	07e1      	lsls	r1, r4, #31
 8004f9a:	d508      	bpl.n	8004fae <_dtoa_r+0x386>
 8004f9c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004fa0:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004fa4:	f7fb fb00 	bl	80005a8 <__aeabi_dmul>
 8004fa8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004fac:	3701      	adds	r7, #1
 8004fae:	1064      	asrs	r4, r4, #1
 8004fb0:	3608      	adds	r6, #8
 8004fb2:	e7e5      	b.n	8004f80 <_dtoa_r+0x358>
 8004fb4:	f000 80a5 	beq.w	8005102 <_dtoa_r+0x4da>
 8004fb8:	f1cb 0400 	rsb	r4, fp, #0
 8004fbc:	4b7d      	ldr	r3, [pc, #500]	; (80051b4 <_dtoa_r+0x58c>)
 8004fbe:	4e7e      	ldr	r6, [pc, #504]	; (80051b8 <_dtoa_r+0x590>)
 8004fc0:	f004 020f 	and.w	r2, r4, #15
 8004fc4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fcc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004fd0:	f7fb faea 	bl	80005a8 <__aeabi_dmul>
 8004fd4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004fd8:	1124      	asrs	r4, r4, #4
 8004fda:	2300      	movs	r3, #0
 8004fdc:	2702      	movs	r7, #2
 8004fde:	2c00      	cmp	r4, #0
 8004fe0:	f040 8084 	bne.w	80050ec <_dtoa_r+0x4c4>
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d1d2      	bne.n	8004f8e <_dtoa_r+0x366>
 8004fe8:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004fec:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004ff0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	f000 8087 	beq.w	8005106 <_dtoa_r+0x4de>
 8004ff8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004ffc:	4b6f      	ldr	r3, [pc, #444]	; (80051bc <_dtoa_r+0x594>)
 8004ffe:	2200      	movs	r2, #0
 8005000:	f7fb fd44 	bl	8000a8c <__aeabi_dcmplt>
 8005004:	2800      	cmp	r0, #0
 8005006:	d07e      	beq.n	8005106 <_dtoa_r+0x4de>
 8005008:	9b08      	ldr	r3, [sp, #32]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d07b      	beq.n	8005106 <_dtoa_r+0x4de>
 800500e:	9b06      	ldr	r3, [sp, #24]
 8005010:	2b00      	cmp	r3, #0
 8005012:	dd38      	ble.n	8005086 <_dtoa_r+0x45e>
 8005014:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005018:	4b69      	ldr	r3, [pc, #420]	; (80051c0 <_dtoa_r+0x598>)
 800501a:	2200      	movs	r2, #0
 800501c:	f7fb fac4 	bl	80005a8 <__aeabi_dmul>
 8005020:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005024:	9c06      	ldr	r4, [sp, #24]
 8005026:	f10b 38ff 	add.w	r8, fp, #4294967295
 800502a:	3701      	adds	r7, #1
 800502c:	4638      	mov	r0, r7
 800502e:	f7fb fa51 	bl	80004d4 <__aeabi_i2d>
 8005032:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005036:	f7fb fab7 	bl	80005a8 <__aeabi_dmul>
 800503a:	4b62      	ldr	r3, [pc, #392]	; (80051c4 <_dtoa_r+0x59c>)
 800503c:	2200      	movs	r2, #0
 800503e:	f7fb f8fd 	bl	800023c <__adddf3>
 8005042:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005046:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800504a:	9611      	str	r6, [sp, #68]	; 0x44
 800504c:	2c00      	cmp	r4, #0
 800504e:	d15d      	bne.n	800510c <_dtoa_r+0x4e4>
 8005050:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005054:	4b5c      	ldr	r3, [pc, #368]	; (80051c8 <_dtoa_r+0x5a0>)
 8005056:	2200      	movs	r2, #0
 8005058:	f7fb f8ee 	bl	8000238 <__aeabi_dsub>
 800505c:	4602      	mov	r2, r0
 800505e:	460b      	mov	r3, r1
 8005060:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005064:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005066:	4633      	mov	r3, r6
 8005068:	f7fb fd2e 	bl	8000ac8 <__aeabi_dcmpgt>
 800506c:	2800      	cmp	r0, #0
 800506e:	f040 8295 	bne.w	800559c <_dtoa_r+0x974>
 8005072:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005076:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005078:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800507c:	f7fb fd06 	bl	8000a8c <__aeabi_dcmplt>
 8005080:	2800      	cmp	r0, #0
 8005082:	f040 8289 	bne.w	8005598 <_dtoa_r+0x970>
 8005086:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800508a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800508e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005090:	2b00      	cmp	r3, #0
 8005092:	f2c0 8151 	blt.w	8005338 <_dtoa_r+0x710>
 8005096:	f1bb 0f0e 	cmp.w	fp, #14
 800509a:	f300 814d 	bgt.w	8005338 <_dtoa_r+0x710>
 800509e:	4b45      	ldr	r3, [pc, #276]	; (80051b4 <_dtoa_r+0x58c>)
 80050a0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80050a4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80050a8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80050ac:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	f280 80da 	bge.w	8005268 <_dtoa_r+0x640>
 80050b4:	9b08      	ldr	r3, [sp, #32]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	f300 80d6 	bgt.w	8005268 <_dtoa_r+0x640>
 80050bc:	f040 826b 	bne.w	8005596 <_dtoa_r+0x96e>
 80050c0:	4b41      	ldr	r3, [pc, #260]	; (80051c8 <_dtoa_r+0x5a0>)
 80050c2:	2200      	movs	r2, #0
 80050c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80050c8:	f7fb fa6e 	bl	80005a8 <__aeabi_dmul>
 80050cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80050d0:	f7fb fcf0 	bl	8000ab4 <__aeabi_dcmpge>
 80050d4:	9c08      	ldr	r4, [sp, #32]
 80050d6:	4626      	mov	r6, r4
 80050d8:	2800      	cmp	r0, #0
 80050da:	f040 8241 	bne.w	8005560 <_dtoa_r+0x938>
 80050de:	9f03      	ldr	r7, [sp, #12]
 80050e0:	2331      	movs	r3, #49	; 0x31
 80050e2:	f807 3b01 	strb.w	r3, [r7], #1
 80050e6:	f10b 0b01 	add.w	fp, fp, #1
 80050ea:	e23d      	b.n	8005568 <_dtoa_r+0x940>
 80050ec:	07e2      	lsls	r2, r4, #31
 80050ee:	d505      	bpl.n	80050fc <_dtoa_r+0x4d4>
 80050f0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80050f4:	f7fb fa58 	bl	80005a8 <__aeabi_dmul>
 80050f8:	3701      	adds	r7, #1
 80050fa:	2301      	movs	r3, #1
 80050fc:	1064      	asrs	r4, r4, #1
 80050fe:	3608      	adds	r6, #8
 8005100:	e76d      	b.n	8004fde <_dtoa_r+0x3b6>
 8005102:	2702      	movs	r7, #2
 8005104:	e770      	b.n	8004fe8 <_dtoa_r+0x3c0>
 8005106:	9c08      	ldr	r4, [sp, #32]
 8005108:	46d8      	mov	r8, fp
 800510a:	e78f      	b.n	800502c <_dtoa_r+0x404>
 800510c:	9903      	ldr	r1, [sp, #12]
 800510e:	4b29      	ldr	r3, [pc, #164]	; (80051b4 <_dtoa_r+0x58c>)
 8005110:	4421      	add	r1, r4
 8005112:	9112      	str	r1, [sp, #72]	; 0x48
 8005114:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005116:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800511a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800511e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005122:	2900      	cmp	r1, #0
 8005124:	d054      	beq.n	80051d0 <_dtoa_r+0x5a8>
 8005126:	4929      	ldr	r1, [pc, #164]	; (80051cc <_dtoa_r+0x5a4>)
 8005128:	2000      	movs	r0, #0
 800512a:	f7fb fb67 	bl	80007fc <__aeabi_ddiv>
 800512e:	463b      	mov	r3, r7
 8005130:	4632      	mov	r2, r6
 8005132:	f7fb f881 	bl	8000238 <__aeabi_dsub>
 8005136:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800513a:	9f03      	ldr	r7, [sp, #12]
 800513c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005140:	f7fb fce2 	bl	8000b08 <__aeabi_d2iz>
 8005144:	4604      	mov	r4, r0
 8005146:	f7fb f9c5 	bl	80004d4 <__aeabi_i2d>
 800514a:	4602      	mov	r2, r0
 800514c:	460b      	mov	r3, r1
 800514e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005152:	f7fb f871 	bl	8000238 <__aeabi_dsub>
 8005156:	3430      	adds	r4, #48	; 0x30
 8005158:	4602      	mov	r2, r0
 800515a:	460b      	mov	r3, r1
 800515c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005160:	f807 4b01 	strb.w	r4, [r7], #1
 8005164:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005168:	f7fb fc90 	bl	8000a8c <__aeabi_dcmplt>
 800516c:	2800      	cmp	r0, #0
 800516e:	d173      	bne.n	8005258 <_dtoa_r+0x630>
 8005170:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005174:	4911      	ldr	r1, [pc, #68]	; (80051bc <_dtoa_r+0x594>)
 8005176:	2000      	movs	r0, #0
 8005178:	f7fb f85e 	bl	8000238 <__aeabi_dsub>
 800517c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005180:	f7fb fc84 	bl	8000a8c <__aeabi_dcmplt>
 8005184:	2800      	cmp	r0, #0
 8005186:	f040 80b6 	bne.w	80052f6 <_dtoa_r+0x6ce>
 800518a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800518c:	429f      	cmp	r7, r3
 800518e:	f43f af7a 	beq.w	8005086 <_dtoa_r+0x45e>
 8005192:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005196:	4b0a      	ldr	r3, [pc, #40]	; (80051c0 <_dtoa_r+0x598>)
 8005198:	2200      	movs	r2, #0
 800519a:	f7fb fa05 	bl	80005a8 <__aeabi_dmul>
 800519e:	4b08      	ldr	r3, [pc, #32]	; (80051c0 <_dtoa_r+0x598>)
 80051a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80051a4:	2200      	movs	r2, #0
 80051a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80051aa:	f7fb f9fd 	bl	80005a8 <__aeabi_dmul>
 80051ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80051b2:	e7c3      	b.n	800513c <_dtoa_r+0x514>
 80051b4:	08006e28 	.word	0x08006e28
 80051b8:	08006e00 	.word	0x08006e00
 80051bc:	3ff00000 	.word	0x3ff00000
 80051c0:	40240000 	.word	0x40240000
 80051c4:	401c0000 	.word	0x401c0000
 80051c8:	40140000 	.word	0x40140000
 80051cc:	3fe00000 	.word	0x3fe00000
 80051d0:	4630      	mov	r0, r6
 80051d2:	4639      	mov	r1, r7
 80051d4:	f7fb f9e8 	bl	80005a8 <__aeabi_dmul>
 80051d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80051dc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80051de:	9c03      	ldr	r4, [sp, #12]
 80051e0:	9314      	str	r3, [sp, #80]	; 0x50
 80051e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80051e6:	f7fb fc8f 	bl	8000b08 <__aeabi_d2iz>
 80051ea:	9015      	str	r0, [sp, #84]	; 0x54
 80051ec:	f7fb f972 	bl	80004d4 <__aeabi_i2d>
 80051f0:	4602      	mov	r2, r0
 80051f2:	460b      	mov	r3, r1
 80051f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80051f8:	f7fb f81e 	bl	8000238 <__aeabi_dsub>
 80051fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80051fe:	3330      	adds	r3, #48	; 0x30
 8005200:	f804 3b01 	strb.w	r3, [r4], #1
 8005204:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005206:	429c      	cmp	r4, r3
 8005208:	4606      	mov	r6, r0
 800520a:	460f      	mov	r7, r1
 800520c:	f04f 0200 	mov.w	r2, #0
 8005210:	d124      	bne.n	800525c <_dtoa_r+0x634>
 8005212:	4bb0      	ldr	r3, [pc, #704]	; (80054d4 <_dtoa_r+0x8ac>)
 8005214:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005218:	f7fb f810 	bl	800023c <__adddf3>
 800521c:	4602      	mov	r2, r0
 800521e:	460b      	mov	r3, r1
 8005220:	4630      	mov	r0, r6
 8005222:	4639      	mov	r1, r7
 8005224:	f7fb fc50 	bl	8000ac8 <__aeabi_dcmpgt>
 8005228:	2800      	cmp	r0, #0
 800522a:	d163      	bne.n	80052f4 <_dtoa_r+0x6cc>
 800522c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005230:	49a8      	ldr	r1, [pc, #672]	; (80054d4 <_dtoa_r+0x8ac>)
 8005232:	2000      	movs	r0, #0
 8005234:	f7fb f800 	bl	8000238 <__aeabi_dsub>
 8005238:	4602      	mov	r2, r0
 800523a:	460b      	mov	r3, r1
 800523c:	4630      	mov	r0, r6
 800523e:	4639      	mov	r1, r7
 8005240:	f7fb fc24 	bl	8000a8c <__aeabi_dcmplt>
 8005244:	2800      	cmp	r0, #0
 8005246:	f43f af1e 	beq.w	8005086 <_dtoa_r+0x45e>
 800524a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800524c:	1e7b      	subs	r3, r7, #1
 800524e:	9314      	str	r3, [sp, #80]	; 0x50
 8005250:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8005254:	2b30      	cmp	r3, #48	; 0x30
 8005256:	d0f8      	beq.n	800524a <_dtoa_r+0x622>
 8005258:	46c3      	mov	fp, r8
 800525a:	e03b      	b.n	80052d4 <_dtoa_r+0x6ac>
 800525c:	4b9e      	ldr	r3, [pc, #632]	; (80054d8 <_dtoa_r+0x8b0>)
 800525e:	f7fb f9a3 	bl	80005a8 <__aeabi_dmul>
 8005262:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005266:	e7bc      	b.n	80051e2 <_dtoa_r+0x5ba>
 8005268:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800526c:	9f03      	ldr	r7, [sp, #12]
 800526e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005272:	4640      	mov	r0, r8
 8005274:	4649      	mov	r1, r9
 8005276:	f7fb fac1 	bl	80007fc <__aeabi_ddiv>
 800527a:	f7fb fc45 	bl	8000b08 <__aeabi_d2iz>
 800527e:	4604      	mov	r4, r0
 8005280:	f7fb f928 	bl	80004d4 <__aeabi_i2d>
 8005284:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005288:	f7fb f98e 	bl	80005a8 <__aeabi_dmul>
 800528c:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8005290:	4602      	mov	r2, r0
 8005292:	460b      	mov	r3, r1
 8005294:	4640      	mov	r0, r8
 8005296:	4649      	mov	r1, r9
 8005298:	f7fa ffce 	bl	8000238 <__aeabi_dsub>
 800529c:	f807 6b01 	strb.w	r6, [r7], #1
 80052a0:	9e03      	ldr	r6, [sp, #12]
 80052a2:	f8dd c020 	ldr.w	ip, [sp, #32]
 80052a6:	1bbe      	subs	r6, r7, r6
 80052a8:	45b4      	cmp	ip, r6
 80052aa:	4602      	mov	r2, r0
 80052ac:	460b      	mov	r3, r1
 80052ae:	d136      	bne.n	800531e <_dtoa_r+0x6f6>
 80052b0:	f7fa ffc4 	bl	800023c <__adddf3>
 80052b4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80052b8:	4680      	mov	r8, r0
 80052ba:	4689      	mov	r9, r1
 80052bc:	f7fb fc04 	bl	8000ac8 <__aeabi_dcmpgt>
 80052c0:	bb58      	cbnz	r0, 800531a <_dtoa_r+0x6f2>
 80052c2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80052c6:	4640      	mov	r0, r8
 80052c8:	4649      	mov	r1, r9
 80052ca:	f7fb fbd5 	bl	8000a78 <__aeabi_dcmpeq>
 80052ce:	b108      	cbz	r0, 80052d4 <_dtoa_r+0x6ac>
 80052d0:	07e3      	lsls	r3, r4, #31
 80052d2:	d422      	bmi.n	800531a <_dtoa_r+0x6f2>
 80052d4:	4651      	mov	r1, sl
 80052d6:	4628      	mov	r0, r5
 80052d8:	f000 fbc4 	bl	8005a64 <_Bfree>
 80052dc:	2300      	movs	r3, #0
 80052de:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80052e0:	703b      	strb	r3, [r7, #0]
 80052e2:	f10b 0301 	add.w	r3, fp, #1
 80052e6:	6013      	str	r3, [r2, #0]
 80052e8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	f43f ace9 	beq.w	8004cc2 <_dtoa_r+0x9a>
 80052f0:	601f      	str	r7, [r3, #0]
 80052f2:	e4e6      	b.n	8004cc2 <_dtoa_r+0x9a>
 80052f4:	4627      	mov	r7, r4
 80052f6:	463b      	mov	r3, r7
 80052f8:	461f      	mov	r7, r3
 80052fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80052fe:	2a39      	cmp	r2, #57	; 0x39
 8005300:	d107      	bne.n	8005312 <_dtoa_r+0x6ea>
 8005302:	9a03      	ldr	r2, [sp, #12]
 8005304:	429a      	cmp	r2, r3
 8005306:	d1f7      	bne.n	80052f8 <_dtoa_r+0x6d0>
 8005308:	9903      	ldr	r1, [sp, #12]
 800530a:	2230      	movs	r2, #48	; 0x30
 800530c:	f108 0801 	add.w	r8, r8, #1
 8005310:	700a      	strb	r2, [r1, #0]
 8005312:	781a      	ldrb	r2, [r3, #0]
 8005314:	3201      	adds	r2, #1
 8005316:	701a      	strb	r2, [r3, #0]
 8005318:	e79e      	b.n	8005258 <_dtoa_r+0x630>
 800531a:	46d8      	mov	r8, fp
 800531c:	e7eb      	b.n	80052f6 <_dtoa_r+0x6ce>
 800531e:	4b6e      	ldr	r3, [pc, #440]	; (80054d8 <_dtoa_r+0x8b0>)
 8005320:	2200      	movs	r2, #0
 8005322:	f7fb f941 	bl	80005a8 <__aeabi_dmul>
 8005326:	2200      	movs	r2, #0
 8005328:	2300      	movs	r3, #0
 800532a:	4680      	mov	r8, r0
 800532c:	4689      	mov	r9, r1
 800532e:	f7fb fba3 	bl	8000a78 <__aeabi_dcmpeq>
 8005332:	2800      	cmp	r0, #0
 8005334:	d09b      	beq.n	800526e <_dtoa_r+0x646>
 8005336:	e7cd      	b.n	80052d4 <_dtoa_r+0x6ac>
 8005338:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800533a:	2a00      	cmp	r2, #0
 800533c:	f000 80c4 	beq.w	80054c8 <_dtoa_r+0x8a0>
 8005340:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005342:	2a01      	cmp	r2, #1
 8005344:	f300 80a8 	bgt.w	8005498 <_dtoa_r+0x870>
 8005348:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800534a:	2a00      	cmp	r2, #0
 800534c:	f000 80a0 	beq.w	8005490 <_dtoa_r+0x868>
 8005350:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005354:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005356:	464f      	mov	r7, r9
 8005358:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800535a:	2101      	movs	r1, #1
 800535c:	441a      	add	r2, r3
 800535e:	4628      	mov	r0, r5
 8005360:	4499      	add	r9, r3
 8005362:	9209      	str	r2, [sp, #36]	; 0x24
 8005364:	f000 fc34 	bl	8005bd0 <__i2b>
 8005368:	4606      	mov	r6, r0
 800536a:	b15f      	cbz	r7, 8005384 <_dtoa_r+0x75c>
 800536c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800536e:	2b00      	cmp	r3, #0
 8005370:	dd08      	ble.n	8005384 <_dtoa_r+0x75c>
 8005372:	42bb      	cmp	r3, r7
 8005374:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005376:	bfa8      	it	ge
 8005378:	463b      	movge	r3, r7
 800537a:	eba9 0903 	sub.w	r9, r9, r3
 800537e:	1aff      	subs	r7, r7, r3
 8005380:	1ad3      	subs	r3, r2, r3
 8005382:	9309      	str	r3, [sp, #36]	; 0x24
 8005384:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005386:	b1f3      	cbz	r3, 80053c6 <_dtoa_r+0x79e>
 8005388:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800538a:	2b00      	cmp	r3, #0
 800538c:	f000 80a0 	beq.w	80054d0 <_dtoa_r+0x8a8>
 8005390:	2c00      	cmp	r4, #0
 8005392:	dd10      	ble.n	80053b6 <_dtoa_r+0x78e>
 8005394:	4631      	mov	r1, r6
 8005396:	4622      	mov	r2, r4
 8005398:	4628      	mov	r0, r5
 800539a:	f000 fcd9 	bl	8005d50 <__pow5mult>
 800539e:	4652      	mov	r2, sl
 80053a0:	4601      	mov	r1, r0
 80053a2:	4606      	mov	r6, r0
 80053a4:	4628      	mov	r0, r5
 80053a6:	f000 fc29 	bl	8005bfc <__multiply>
 80053aa:	4651      	mov	r1, sl
 80053ac:	4680      	mov	r8, r0
 80053ae:	4628      	mov	r0, r5
 80053b0:	f000 fb58 	bl	8005a64 <_Bfree>
 80053b4:	46c2      	mov	sl, r8
 80053b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053b8:	1b1a      	subs	r2, r3, r4
 80053ba:	d004      	beq.n	80053c6 <_dtoa_r+0x79e>
 80053bc:	4651      	mov	r1, sl
 80053be:	4628      	mov	r0, r5
 80053c0:	f000 fcc6 	bl	8005d50 <__pow5mult>
 80053c4:	4682      	mov	sl, r0
 80053c6:	2101      	movs	r1, #1
 80053c8:	4628      	mov	r0, r5
 80053ca:	f000 fc01 	bl	8005bd0 <__i2b>
 80053ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	4604      	mov	r4, r0
 80053d4:	f340 8082 	ble.w	80054dc <_dtoa_r+0x8b4>
 80053d8:	461a      	mov	r2, r3
 80053da:	4601      	mov	r1, r0
 80053dc:	4628      	mov	r0, r5
 80053de:	f000 fcb7 	bl	8005d50 <__pow5mult>
 80053e2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	4604      	mov	r4, r0
 80053e8:	dd7b      	ble.n	80054e2 <_dtoa_r+0x8ba>
 80053ea:	f04f 0800 	mov.w	r8, #0
 80053ee:	6923      	ldr	r3, [r4, #16]
 80053f0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80053f4:	6918      	ldr	r0, [r3, #16]
 80053f6:	f000 fb9d 	bl	8005b34 <__hi0bits>
 80053fa:	f1c0 0020 	rsb	r0, r0, #32
 80053fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005400:	4418      	add	r0, r3
 8005402:	f010 001f 	ands.w	r0, r0, #31
 8005406:	f000 8092 	beq.w	800552e <_dtoa_r+0x906>
 800540a:	f1c0 0320 	rsb	r3, r0, #32
 800540e:	2b04      	cmp	r3, #4
 8005410:	f340 8085 	ble.w	800551e <_dtoa_r+0x8f6>
 8005414:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005416:	f1c0 001c 	rsb	r0, r0, #28
 800541a:	4403      	add	r3, r0
 800541c:	4481      	add	r9, r0
 800541e:	4407      	add	r7, r0
 8005420:	9309      	str	r3, [sp, #36]	; 0x24
 8005422:	f1b9 0f00 	cmp.w	r9, #0
 8005426:	dd05      	ble.n	8005434 <_dtoa_r+0x80c>
 8005428:	4651      	mov	r1, sl
 800542a:	464a      	mov	r2, r9
 800542c:	4628      	mov	r0, r5
 800542e:	f000 fce9 	bl	8005e04 <__lshift>
 8005432:	4682      	mov	sl, r0
 8005434:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005436:	2b00      	cmp	r3, #0
 8005438:	dd05      	ble.n	8005446 <_dtoa_r+0x81e>
 800543a:	4621      	mov	r1, r4
 800543c:	461a      	mov	r2, r3
 800543e:	4628      	mov	r0, r5
 8005440:	f000 fce0 	bl	8005e04 <__lshift>
 8005444:	4604      	mov	r4, r0
 8005446:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005448:	2b00      	cmp	r3, #0
 800544a:	d072      	beq.n	8005532 <_dtoa_r+0x90a>
 800544c:	4621      	mov	r1, r4
 800544e:	4650      	mov	r0, sl
 8005450:	f000 fd44 	bl	8005edc <__mcmp>
 8005454:	2800      	cmp	r0, #0
 8005456:	da6c      	bge.n	8005532 <_dtoa_r+0x90a>
 8005458:	2300      	movs	r3, #0
 800545a:	4651      	mov	r1, sl
 800545c:	220a      	movs	r2, #10
 800545e:	4628      	mov	r0, r5
 8005460:	f000 fb22 	bl	8005aa8 <__multadd>
 8005464:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005466:	f10b 3bff 	add.w	fp, fp, #4294967295
 800546a:	4682      	mov	sl, r0
 800546c:	2b00      	cmp	r3, #0
 800546e:	f000 81ad 	beq.w	80057cc <_dtoa_r+0xba4>
 8005472:	2300      	movs	r3, #0
 8005474:	4631      	mov	r1, r6
 8005476:	220a      	movs	r2, #10
 8005478:	4628      	mov	r0, r5
 800547a:	f000 fb15 	bl	8005aa8 <__multadd>
 800547e:	9b06      	ldr	r3, [sp, #24]
 8005480:	2b00      	cmp	r3, #0
 8005482:	4606      	mov	r6, r0
 8005484:	f300 8093 	bgt.w	80055ae <_dtoa_r+0x986>
 8005488:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800548a:	2b02      	cmp	r3, #2
 800548c:	dc59      	bgt.n	8005542 <_dtoa_r+0x91a>
 800548e:	e08e      	b.n	80055ae <_dtoa_r+0x986>
 8005490:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005492:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005496:	e75d      	b.n	8005354 <_dtoa_r+0x72c>
 8005498:	9b08      	ldr	r3, [sp, #32]
 800549a:	1e5c      	subs	r4, r3, #1
 800549c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800549e:	42a3      	cmp	r3, r4
 80054a0:	bfbf      	itttt	lt
 80054a2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80054a4:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 80054a6:	940a      	strlt	r4, [sp, #40]	; 0x28
 80054a8:	1ae3      	sublt	r3, r4, r3
 80054aa:	bfb4      	ite	lt
 80054ac:	18d2      	addlt	r2, r2, r3
 80054ae:	1b1c      	subge	r4, r3, r4
 80054b0:	9b08      	ldr	r3, [sp, #32]
 80054b2:	bfbc      	itt	lt
 80054b4:	920e      	strlt	r2, [sp, #56]	; 0x38
 80054b6:	2400      	movlt	r4, #0
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	bfb5      	itete	lt
 80054bc:	eba9 0703 	sublt.w	r7, r9, r3
 80054c0:	9b08      	ldrge	r3, [sp, #32]
 80054c2:	2300      	movlt	r3, #0
 80054c4:	464f      	movge	r7, r9
 80054c6:	e747      	b.n	8005358 <_dtoa_r+0x730>
 80054c8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80054ca:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80054cc:	464f      	mov	r7, r9
 80054ce:	e74c      	b.n	800536a <_dtoa_r+0x742>
 80054d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80054d2:	e773      	b.n	80053bc <_dtoa_r+0x794>
 80054d4:	3fe00000 	.word	0x3fe00000
 80054d8:	40240000 	.word	0x40240000
 80054dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80054de:	2b01      	cmp	r3, #1
 80054e0:	dc18      	bgt.n	8005514 <_dtoa_r+0x8ec>
 80054e2:	9b04      	ldr	r3, [sp, #16]
 80054e4:	b9b3      	cbnz	r3, 8005514 <_dtoa_r+0x8ec>
 80054e6:	9b05      	ldr	r3, [sp, #20]
 80054e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80054ec:	b993      	cbnz	r3, 8005514 <_dtoa_r+0x8ec>
 80054ee:	9b05      	ldr	r3, [sp, #20]
 80054f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80054f4:	0d1b      	lsrs	r3, r3, #20
 80054f6:	051b      	lsls	r3, r3, #20
 80054f8:	b17b      	cbz	r3, 800551a <_dtoa_r+0x8f2>
 80054fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054fc:	3301      	adds	r3, #1
 80054fe:	f109 0901 	add.w	r9, r9, #1
 8005502:	9309      	str	r3, [sp, #36]	; 0x24
 8005504:	f04f 0801 	mov.w	r8, #1
 8005508:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800550a:	2b00      	cmp	r3, #0
 800550c:	f47f af6f 	bne.w	80053ee <_dtoa_r+0x7c6>
 8005510:	2001      	movs	r0, #1
 8005512:	e774      	b.n	80053fe <_dtoa_r+0x7d6>
 8005514:	f04f 0800 	mov.w	r8, #0
 8005518:	e7f6      	b.n	8005508 <_dtoa_r+0x8e0>
 800551a:	4698      	mov	r8, r3
 800551c:	e7f4      	b.n	8005508 <_dtoa_r+0x8e0>
 800551e:	d080      	beq.n	8005422 <_dtoa_r+0x7fa>
 8005520:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005522:	331c      	adds	r3, #28
 8005524:	441a      	add	r2, r3
 8005526:	4499      	add	r9, r3
 8005528:	441f      	add	r7, r3
 800552a:	9209      	str	r2, [sp, #36]	; 0x24
 800552c:	e779      	b.n	8005422 <_dtoa_r+0x7fa>
 800552e:	4603      	mov	r3, r0
 8005530:	e7f6      	b.n	8005520 <_dtoa_r+0x8f8>
 8005532:	9b08      	ldr	r3, [sp, #32]
 8005534:	2b00      	cmp	r3, #0
 8005536:	dc34      	bgt.n	80055a2 <_dtoa_r+0x97a>
 8005538:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800553a:	2b02      	cmp	r3, #2
 800553c:	dd31      	ble.n	80055a2 <_dtoa_r+0x97a>
 800553e:	9b08      	ldr	r3, [sp, #32]
 8005540:	9306      	str	r3, [sp, #24]
 8005542:	9b06      	ldr	r3, [sp, #24]
 8005544:	b963      	cbnz	r3, 8005560 <_dtoa_r+0x938>
 8005546:	4621      	mov	r1, r4
 8005548:	2205      	movs	r2, #5
 800554a:	4628      	mov	r0, r5
 800554c:	f000 faac 	bl	8005aa8 <__multadd>
 8005550:	4601      	mov	r1, r0
 8005552:	4604      	mov	r4, r0
 8005554:	4650      	mov	r0, sl
 8005556:	f000 fcc1 	bl	8005edc <__mcmp>
 800555a:	2800      	cmp	r0, #0
 800555c:	f73f adbf 	bgt.w	80050de <_dtoa_r+0x4b6>
 8005560:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005562:	9f03      	ldr	r7, [sp, #12]
 8005564:	ea6f 0b03 	mvn.w	fp, r3
 8005568:	f04f 0800 	mov.w	r8, #0
 800556c:	4621      	mov	r1, r4
 800556e:	4628      	mov	r0, r5
 8005570:	f000 fa78 	bl	8005a64 <_Bfree>
 8005574:	2e00      	cmp	r6, #0
 8005576:	f43f aead 	beq.w	80052d4 <_dtoa_r+0x6ac>
 800557a:	f1b8 0f00 	cmp.w	r8, #0
 800557e:	d005      	beq.n	800558c <_dtoa_r+0x964>
 8005580:	45b0      	cmp	r8, r6
 8005582:	d003      	beq.n	800558c <_dtoa_r+0x964>
 8005584:	4641      	mov	r1, r8
 8005586:	4628      	mov	r0, r5
 8005588:	f000 fa6c 	bl	8005a64 <_Bfree>
 800558c:	4631      	mov	r1, r6
 800558e:	4628      	mov	r0, r5
 8005590:	f000 fa68 	bl	8005a64 <_Bfree>
 8005594:	e69e      	b.n	80052d4 <_dtoa_r+0x6ac>
 8005596:	2400      	movs	r4, #0
 8005598:	4626      	mov	r6, r4
 800559a:	e7e1      	b.n	8005560 <_dtoa_r+0x938>
 800559c:	46c3      	mov	fp, r8
 800559e:	4626      	mov	r6, r4
 80055a0:	e59d      	b.n	80050de <_dtoa_r+0x4b6>
 80055a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	f000 80c8 	beq.w	800573a <_dtoa_r+0xb12>
 80055aa:	9b08      	ldr	r3, [sp, #32]
 80055ac:	9306      	str	r3, [sp, #24]
 80055ae:	2f00      	cmp	r7, #0
 80055b0:	dd05      	ble.n	80055be <_dtoa_r+0x996>
 80055b2:	4631      	mov	r1, r6
 80055b4:	463a      	mov	r2, r7
 80055b6:	4628      	mov	r0, r5
 80055b8:	f000 fc24 	bl	8005e04 <__lshift>
 80055bc:	4606      	mov	r6, r0
 80055be:	f1b8 0f00 	cmp.w	r8, #0
 80055c2:	d05b      	beq.n	800567c <_dtoa_r+0xa54>
 80055c4:	6871      	ldr	r1, [r6, #4]
 80055c6:	4628      	mov	r0, r5
 80055c8:	f000 fa0c 	bl	80059e4 <_Balloc>
 80055cc:	4607      	mov	r7, r0
 80055ce:	b928      	cbnz	r0, 80055dc <_dtoa_r+0x9b4>
 80055d0:	4b82      	ldr	r3, [pc, #520]	; (80057dc <_dtoa_r+0xbb4>)
 80055d2:	4602      	mov	r2, r0
 80055d4:	f240 21ef 	movw	r1, #751	; 0x2ef
 80055d8:	f7ff bb3a 	b.w	8004c50 <_dtoa_r+0x28>
 80055dc:	6932      	ldr	r2, [r6, #16]
 80055de:	3202      	adds	r2, #2
 80055e0:	0092      	lsls	r2, r2, #2
 80055e2:	f106 010c 	add.w	r1, r6, #12
 80055e6:	300c      	adds	r0, #12
 80055e8:	f000 ff9e 	bl	8006528 <memcpy>
 80055ec:	2201      	movs	r2, #1
 80055ee:	4639      	mov	r1, r7
 80055f0:	4628      	mov	r0, r5
 80055f2:	f000 fc07 	bl	8005e04 <__lshift>
 80055f6:	9b03      	ldr	r3, [sp, #12]
 80055f8:	9a03      	ldr	r2, [sp, #12]
 80055fa:	3301      	adds	r3, #1
 80055fc:	9308      	str	r3, [sp, #32]
 80055fe:	9b06      	ldr	r3, [sp, #24]
 8005600:	4413      	add	r3, r2
 8005602:	930b      	str	r3, [sp, #44]	; 0x2c
 8005604:	9b04      	ldr	r3, [sp, #16]
 8005606:	f003 0301 	and.w	r3, r3, #1
 800560a:	46b0      	mov	r8, r6
 800560c:	930a      	str	r3, [sp, #40]	; 0x28
 800560e:	4606      	mov	r6, r0
 8005610:	9b08      	ldr	r3, [sp, #32]
 8005612:	4621      	mov	r1, r4
 8005614:	3b01      	subs	r3, #1
 8005616:	4650      	mov	r0, sl
 8005618:	9304      	str	r3, [sp, #16]
 800561a:	f7ff fa7d 	bl	8004b18 <quorem>
 800561e:	4641      	mov	r1, r8
 8005620:	9006      	str	r0, [sp, #24]
 8005622:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005626:	4650      	mov	r0, sl
 8005628:	f000 fc58 	bl	8005edc <__mcmp>
 800562c:	4632      	mov	r2, r6
 800562e:	9009      	str	r0, [sp, #36]	; 0x24
 8005630:	4621      	mov	r1, r4
 8005632:	4628      	mov	r0, r5
 8005634:	f000 fc6e 	bl	8005f14 <__mdiff>
 8005638:	68c2      	ldr	r2, [r0, #12]
 800563a:	4607      	mov	r7, r0
 800563c:	bb02      	cbnz	r2, 8005680 <_dtoa_r+0xa58>
 800563e:	4601      	mov	r1, r0
 8005640:	4650      	mov	r0, sl
 8005642:	f000 fc4b 	bl	8005edc <__mcmp>
 8005646:	4602      	mov	r2, r0
 8005648:	4639      	mov	r1, r7
 800564a:	4628      	mov	r0, r5
 800564c:	920c      	str	r2, [sp, #48]	; 0x30
 800564e:	f000 fa09 	bl	8005a64 <_Bfree>
 8005652:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005654:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005656:	9f08      	ldr	r7, [sp, #32]
 8005658:	ea43 0102 	orr.w	r1, r3, r2
 800565c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800565e:	4319      	orrs	r1, r3
 8005660:	d110      	bne.n	8005684 <_dtoa_r+0xa5c>
 8005662:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005666:	d029      	beq.n	80056bc <_dtoa_r+0xa94>
 8005668:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800566a:	2b00      	cmp	r3, #0
 800566c:	dd02      	ble.n	8005674 <_dtoa_r+0xa4c>
 800566e:	9b06      	ldr	r3, [sp, #24]
 8005670:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8005674:	9b04      	ldr	r3, [sp, #16]
 8005676:	f883 9000 	strb.w	r9, [r3]
 800567a:	e777      	b.n	800556c <_dtoa_r+0x944>
 800567c:	4630      	mov	r0, r6
 800567e:	e7ba      	b.n	80055f6 <_dtoa_r+0x9ce>
 8005680:	2201      	movs	r2, #1
 8005682:	e7e1      	b.n	8005648 <_dtoa_r+0xa20>
 8005684:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005686:	2b00      	cmp	r3, #0
 8005688:	db04      	blt.n	8005694 <_dtoa_r+0xa6c>
 800568a:	9922      	ldr	r1, [sp, #136]	; 0x88
 800568c:	430b      	orrs	r3, r1
 800568e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005690:	430b      	orrs	r3, r1
 8005692:	d120      	bne.n	80056d6 <_dtoa_r+0xaae>
 8005694:	2a00      	cmp	r2, #0
 8005696:	dded      	ble.n	8005674 <_dtoa_r+0xa4c>
 8005698:	4651      	mov	r1, sl
 800569a:	2201      	movs	r2, #1
 800569c:	4628      	mov	r0, r5
 800569e:	f000 fbb1 	bl	8005e04 <__lshift>
 80056a2:	4621      	mov	r1, r4
 80056a4:	4682      	mov	sl, r0
 80056a6:	f000 fc19 	bl	8005edc <__mcmp>
 80056aa:	2800      	cmp	r0, #0
 80056ac:	dc03      	bgt.n	80056b6 <_dtoa_r+0xa8e>
 80056ae:	d1e1      	bne.n	8005674 <_dtoa_r+0xa4c>
 80056b0:	f019 0f01 	tst.w	r9, #1
 80056b4:	d0de      	beq.n	8005674 <_dtoa_r+0xa4c>
 80056b6:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80056ba:	d1d8      	bne.n	800566e <_dtoa_r+0xa46>
 80056bc:	9a04      	ldr	r2, [sp, #16]
 80056be:	2339      	movs	r3, #57	; 0x39
 80056c0:	7013      	strb	r3, [r2, #0]
 80056c2:	463b      	mov	r3, r7
 80056c4:	461f      	mov	r7, r3
 80056c6:	3b01      	subs	r3, #1
 80056c8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80056cc:	2a39      	cmp	r2, #57	; 0x39
 80056ce:	d06c      	beq.n	80057aa <_dtoa_r+0xb82>
 80056d0:	3201      	adds	r2, #1
 80056d2:	701a      	strb	r2, [r3, #0]
 80056d4:	e74a      	b.n	800556c <_dtoa_r+0x944>
 80056d6:	2a00      	cmp	r2, #0
 80056d8:	dd07      	ble.n	80056ea <_dtoa_r+0xac2>
 80056da:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80056de:	d0ed      	beq.n	80056bc <_dtoa_r+0xa94>
 80056e0:	9a04      	ldr	r2, [sp, #16]
 80056e2:	f109 0301 	add.w	r3, r9, #1
 80056e6:	7013      	strb	r3, [r2, #0]
 80056e8:	e740      	b.n	800556c <_dtoa_r+0x944>
 80056ea:	9b08      	ldr	r3, [sp, #32]
 80056ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80056ee:	f803 9c01 	strb.w	r9, [r3, #-1]
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d043      	beq.n	800577e <_dtoa_r+0xb56>
 80056f6:	4651      	mov	r1, sl
 80056f8:	2300      	movs	r3, #0
 80056fa:	220a      	movs	r2, #10
 80056fc:	4628      	mov	r0, r5
 80056fe:	f000 f9d3 	bl	8005aa8 <__multadd>
 8005702:	45b0      	cmp	r8, r6
 8005704:	4682      	mov	sl, r0
 8005706:	f04f 0300 	mov.w	r3, #0
 800570a:	f04f 020a 	mov.w	r2, #10
 800570e:	4641      	mov	r1, r8
 8005710:	4628      	mov	r0, r5
 8005712:	d107      	bne.n	8005724 <_dtoa_r+0xafc>
 8005714:	f000 f9c8 	bl	8005aa8 <__multadd>
 8005718:	4680      	mov	r8, r0
 800571a:	4606      	mov	r6, r0
 800571c:	9b08      	ldr	r3, [sp, #32]
 800571e:	3301      	adds	r3, #1
 8005720:	9308      	str	r3, [sp, #32]
 8005722:	e775      	b.n	8005610 <_dtoa_r+0x9e8>
 8005724:	f000 f9c0 	bl	8005aa8 <__multadd>
 8005728:	4631      	mov	r1, r6
 800572a:	4680      	mov	r8, r0
 800572c:	2300      	movs	r3, #0
 800572e:	220a      	movs	r2, #10
 8005730:	4628      	mov	r0, r5
 8005732:	f000 f9b9 	bl	8005aa8 <__multadd>
 8005736:	4606      	mov	r6, r0
 8005738:	e7f0      	b.n	800571c <_dtoa_r+0xaf4>
 800573a:	9b08      	ldr	r3, [sp, #32]
 800573c:	9306      	str	r3, [sp, #24]
 800573e:	9f03      	ldr	r7, [sp, #12]
 8005740:	4621      	mov	r1, r4
 8005742:	4650      	mov	r0, sl
 8005744:	f7ff f9e8 	bl	8004b18 <quorem>
 8005748:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800574c:	9b03      	ldr	r3, [sp, #12]
 800574e:	f807 9b01 	strb.w	r9, [r7], #1
 8005752:	1afa      	subs	r2, r7, r3
 8005754:	9b06      	ldr	r3, [sp, #24]
 8005756:	4293      	cmp	r3, r2
 8005758:	dd07      	ble.n	800576a <_dtoa_r+0xb42>
 800575a:	4651      	mov	r1, sl
 800575c:	2300      	movs	r3, #0
 800575e:	220a      	movs	r2, #10
 8005760:	4628      	mov	r0, r5
 8005762:	f000 f9a1 	bl	8005aa8 <__multadd>
 8005766:	4682      	mov	sl, r0
 8005768:	e7ea      	b.n	8005740 <_dtoa_r+0xb18>
 800576a:	9b06      	ldr	r3, [sp, #24]
 800576c:	2b00      	cmp	r3, #0
 800576e:	bfc8      	it	gt
 8005770:	461f      	movgt	r7, r3
 8005772:	9b03      	ldr	r3, [sp, #12]
 8005774:	bfd8      	it	le
 8005776:	2701      	movle	r7, #1
 8005778:	441f      	add	r7, r3
 800577a:	f04f 0800 	mov.w	r8, #0
 800577e:	4651      	mov	r1, sl
 8005780:	2201      	movs	r2, #1
 8005782:	4628      	mov	r0, r5
 8005784:	f000 fb3e 	bl	8005e04 <__lshift>
 8005788:	4621      	mov	r1, r4
 800578a:	4682      	mov	sl, r0
 800578c:	f000 fba6 	bl	8005edc <__mcmp>
 8005790:	2800      	cmp	r0, #0
 8005792:	dc96      	bgt.n	80056c2 <_dtoa_r+0xa9a>
 8005794:	d102      	bne.n	800579c <_dtoa_r+0xb74>
 8005796:	f019 0f01 	tst.w	r9, #1
 800579a:	d192      	bne.n	80056c2 <_dtoa_r+0xa9a>
 800579c:	463b      	mov	r3, r7
 800579e:	461f      	mov	r7, r3
 80057a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80057a4:	2a30      	cmp	r2, #48	; 0x30
 80057a6:	d0fa      	beq.n	800579e <_dtoa_r+0xb76>
 80057a8:	e6e0      	b.n	800556c <_dtoa_r+0x944>
 80057aa:	9a03      	ldr	r2, [sp, #12]
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d189      	bne.n	80056c4 <_dtoa_r+0xa9c>
 80057b0:	f10b 0b01 	add.w	fp, fp, #1
 80057b4:	2331      	movs	r3, #49	; 0x31
 80057b6:	e796      	b.n	80056e6 <_dtoa_r+0xabe>
 80057b8:	4b09      	ldr	r3, [pc, #36]	; (80057e0 <_dtoa_r+0xbb8>)
 80057ba:	f7ff baa1 	b.w	8004d00 <_dtoa_r+0xd8>
 80057be:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	f47f aa79 	bne.w	8004cb8 <_dtoa_r+0x90>
 80057c6:	4b07      	ldr	r3, [pc, #28]	; (80057e4 <_dtoa_r+0xbbc>)
 80057c8:	f7ff ba9a 	b.w	8004d00 <_dtoa_r+0xd8>
 80057cc:	9b06      	ldr	r3, [sp, #24]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	dcb5      	bgt.n	800573e <_dtoa_r+0xb16>
 80057d2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80057d4:	2b02      	cmp	r3, #2
 80057d6:	f73f aeb4 	bgt.w	8005542 <_dtoa_r+0x91a>
 80057da:	e7b0      	b.n	800573e <_dtoa_r+0xb16>
 80057dc:	08006d94 	.word	0x08006d94
 80057e0:	08006cf4 	.word	0x08006cf4
 80057e4:	08006d18 	.word	0x08006d18

080057e8 <_free_r>:
 80057e8:	b538      	push	{r3, r4, r5, lr}
 80057ea:	4605      	mov	r5, r0
 80057ec:	2900      	cmp	r1, #0
 80057ee:	d041      	beq.n	8005874 <_free_r+0x8c>
 80057f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057f4:	1f0c      	subs	r4, r1, #4
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	bfb8      	it	lt
 80057fa:	18e4      	addlt	r4, r4, r3
 80057fc:	f000 f8e6 	bl	80059cc <__malloc_lock>
 8005800:	4a1d      	ldr	r2, [pc, #116]	; (8005878 <_free_r+0x90>)
 8005802:	6813      	ldr	r3, [r2, #0]
 8005804:	b933      	cbnz	r3, 8005814 <_free_r+0x2c>
 8005806:	6063      	str	r3, [r4, #4]
 8005808:	6014      	str	r4, [r2, #0]
 800580a:	4628      	mov	r0, r5
 800580c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005810:	f000 b8e2 	b.w	80059d8 <__malloc_unlock>
 8005814:	42a3      	cmp	r3, r4
 8005816:	d908      	bls.n	800582a <_free_r+0x42>
 8005818:	6820      	ldr	r0, [r4, #0]
 800581a:	1821      	adds	r1, r4, r0
 800581c:	428b      	cmp	r3, r1
 800581e:	bf01      	itttt	eq
 8005820:	6819      	ldreq	r1, [r3, #0]
 8005822:	685b      	ldreq	r3, [r3, #4]
 8005824:	1809      	addeq	r1, r1, r0
 8005826:	6021      	streq	r1, [r4, #0]
 8005828:	e7ed      	b.n	8005806 <_free_r+0x1e>
 800582a:	461a      	mov	r2, r3
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	b10b      	cbz	r3, 8005834 <_free_r+0x4c>
 8005830:	42a3      	cmp	r3, r4
 8005832:	d9fa      	bls.n	800582a <_free_r+0x42>
 8005834:	6811      	ldr	r1, [r2, #0]
 8005836:	1850      	adds	r0, r2, r1
 8005838:	42a0      	cmp	r0, r4
 800583a:	d10b      	bne.n	8005854 <_free_r+0x6c>
 800583c:	6820      	ldr	r0, [r4, #0]
 800583e:	4401      	add	r1, r0
 8005840:	1850      	adds	r0, r2, r1
 8005842:	4283      	cmp	r3, r0
 8005844:	6011      	str	r1, [r2, #0]
 8005846:	d1e0      	bne.n	800580a <_free_r+0x22>
 8005848:	6818      	ldr	r0, [r3, #0]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	6053      	str	r3, [r2, #4]
 800584e:	4408      	add	r0, r1
 8005850:	6010      	str	r0, [r2, #0]
 8005852:	e7da      	b.n	800580a <_free_r+0x22>
 8005854:	d902      	bls.n	800585c <_free_r+0x74>
 8005856:	230c      	movs	r3, #12
 8005858:	602b      	str	r3, [r5, #0]
 800585a:	e7d6      	b.n	800580a <_free_r+0x22>
 800585c:	6820      	ldr	r0, [r4, #0]
 800585e:	1821      	adds	r1, r4, r0
 8005860:	428b      	cmp	r3, r1
 8005862:	bf04      	itt	eq
 8005864:	6819      	ldreq	r1, [r3, #0]
 8005866:	685b      	ldreq	r3, [r3, #4]
 8005868:	6063      	str	r3, [r4, #4]
 800586a:	bf04      	itt	eq
 800586c:	1809      	addeq	r1, r1, r0
 800586e:	6021      	streq	r1, [r4, #0]
 8005870:	6054      	str	r4, [r2, #4]
 8005872:	e7ca      	b.n	800580a <_free_r+0x22>
 8005874:	bd38      	pop	{r3, r4, r5, pc}
 8005876:	bf00      	nop
 8005878:	200003d0 	.word	0x200003d0

0800587c <malloc>:
 800587c:	4b02      	ldr	r3, [pc, #8]	; (8005888 <malloc+0xc>)
 800587e:	4601      	mov	r1, r0
 8005880:	6818      	ldr	r0, [r3, #0]
 8005882:	f000 b823 	b.w	80058cc <_malloc_r>
 8005886:	bf00      	nop
 8005888:	20000064 	.word	0x20000064

0800588c <sbrk_aligned>:
 800588c:	b570      	push	{r4, r5, r6, lr}
 800588e:	4e0e      	ldr	r6, [pc, #56]	; (80058c8 <sbrk_aligned+0x3c>)
 8005890:	460c      	mov	r4, r1
 8005892:	6831      	ldr	r1, [r6, #0]
 8005894:	4605      	mov	r5, r0
 8005896:	b911      	cbnz	r1, 800589e <sbrk_aligned+0x12>
 8005898:	f000 fe36 	bl	8006508 <_sbrk_r>
 800589c:	6030      	str	r0, [r6, #0]
 800589e:	4621      	mov	r1, r4
 80058a0:	4628      	mov	r0, r5
 80058a2:	f000 fe31 	bl	8006508 <_sbrk_r>
 80058a6:	1c43      	adds	r3, r0, #1
 80058a8:	d00a      	beq.n	80058c0 <sbrk_aligned+0x34>
 80058aa:	1cc4      	adds	r4, r0, #3
 80058ac:	f024 0403 	bic.w	r4, r4, #3
 80058b0:	42a0      	cmp	r0, r4
 80058b2:	d007      	beq.n	80058c4 <sbrk_aligned+0x38>
 80058b4:	1a21      	subs	r1, r4, r0
 80058b6:	4628      	mov	r0, r5
 80058b8:	f000 fe26 	bl	8006508 <_sbrk_r>
 80058bc:	3001      	adds	r0, #1
 80058be:	d101      	bne.n	80058c4 <sbrk_aligned+0x38>
 80058c0:	f04f 34ff 	mov.w	r4, #4294967295
 80058c4:	4620      	mov	r0, r4
 80058c6:	bd70      	pop	{r4, r5, r6, pc}
 80058c8:	200003d4 	.word	0x200003d4

080058cc <_malloc_r>:
 80058cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058d0:	1ccd      	adds	r5, r1, #3
 80058d2:	f025 0503 	bic.w	r5, r5, #3
 80058d6:	3508      	adds	r5, #8
 80058d8:	2d0c      	cmp	r5, #12
 80058da:	bf38      	it	cc
 80058dc:	250c      	movcc	r5, #12
 80058de:	2d00      	cmp	r5, #0
 80058e0:	4607      	mov	r7, r0
 80058e2:	db01      	blt.n	80058e8 <_malloc_r+0x1c>
 80058e4:	42a9      	cmp	r1, r5
 80058e6:	d905      	bls.n	80058f4 <_malloc_r+0x28>
 80058e8:	230c      	movs	r3, #12
 80058ea:	603b      	str	r3, [r7, #0]
 80058ec:	2600      	movs	r6, #0
 80058ee:	4630      	mov	r0, r6
 80058f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80058f4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80059c8 <_malloc_r+0xfc>
 80058f8:	f000 f868 	bl	80059cc <__malloc_lock>
 80058fc:	f8d8 3000 	ldr.w	r3, [r8]
 8005900:	461c      	mov	r4, r3
 8005902:	bb5c      	cbnz	r4, 800595c <_malloc_r+0x90>
 8005904:	4629      	mov	r1, r5
 8005906:	4638      	mov	r0, r7
 8005908:	f7ff ffc0 	bl	800588c <sbrk_aligned>
 800590c:	1c43      	adds	r3, r0, #1
 800590e:	4604      	mov	r4, r0
 8005910:	d155      	bne.n	80059be <_malloc_r+0xf2>
 8005912:	f8d8 4000 	ldr.w	r4, [r8]
 8005916:	4626      	mov	r6, r4
 8005918:	2e00      	cmp	r6, #0
 800591a:	d145      	bne.n	80059a8 <_malloc_r+0xdc>
 800591c:	2c00      	cmp	r4, #0
 800591e:	d048      	beq.n	80059b2 <_malloc_r+0xe6>
 8005920:	6823      	ldr	r3, [r4, #0]
 8005922:	4631      	mov	r1, r6
 8005924:	4638      	mov	r0, r7
 8005926:	eb04 0903 	add.w	r9, r4, r3
 800592a:	f000 fded 	bl	8006508 <_sbrk_r>
 800592e:	4581      	cmp	r9, r0
 8005930:	d13f      	bne.n	80059b2 <_malloc_r+0xe6>
 8005932:	6821      	ldr	r1, [r4, #0]
 8005934:	1a6d      	subs	r5, r5, r1
 8005936:	4629      	mov	r1, r5
 8005938:	4638      	mov	r0, r7
 800593a:	f7ff ffa7 	bl	800588c <sbrk_aligned>
 800593e:	3001      	adds	r0, #1
 8005940:	d037      	beq.n	80059b2 <_malloc_r+0xe6>
 8005942:	6823      	ldr	r3, [r4, #0]
 8005944:	442b      	add	r3, r5
 8005946:	6023      	str	r3, [r4, #0]
 8005948:	f8d8 3000 	ldr.w	r3, [r8]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d038      	beq.n	80059c2 <_malloc_r+0xf6>
 8005950:	685a      	ldr	r2, [r3, #4]
 8005952:	42a2      	cmp	r2, r4
 8005954:	d12b      	bne.n	80059ae <_malloc_r+0xe2>
 8005956:	2200      	movs	r2, #0
 8005958:	605a      	str	r2, [r3, #4]
 800595a:	e00f      	b.n	800597c <_malloc_r+0xb0>
 800595c:	6822      	ldr	r2, [r4, #0]
 800595e:	1b52      	subs	r2, r2, r5
 8005960:	d41f      	bmi.n	80059a2 <_malloc_r+0xd6>
 8005962:	2a0b      	cmp	r2, #11
 8005964:	d917      	bls.n	8005996 <_malloc_r+0xca>
 8005966:	1961      	adds	r1, r4, r5
 8005968:	42a3      	cmp	r3, r4
 800596a:	6025      	str	r5, [r4, #0]
 800596c:	bf18      	it	ne
 800596e:	6059      	strne	r1, [r3, #4]
 8005970:	6863      	ldr	r3, [r4, #4]
 8005972:	bf08      	it	eq
 8005974:	f8c8 1000 	streq.w	r1, [r8]
 8005978:	5162      	str	r2, [r4, r5]
 800597a:	604b      	str	r3, [r1, #4]
 800597c:	4638      	mov	r0, r7
 800597e:	f104 060b 	add.w	r6, r4, #11
 8005982:	f000 f829 	bl	80059d8 <__malloc_unlock>
 8005986:	f026 0607 	bic.w	r6, r6, #7
 800598a:	1d23      	adds	r3, r4, #4
 800598c:	1af2      	subs	r2, r6, r3
 800598e:	d0ae      	beq.n	80058ee <_malloc_r+0x22>
 8005990:	1b9b      	subs	r3, r3, r6
 8005992:	50a3      	str	r3, [r4, r2]
 8005994:	e7ab      	b.n	80058ee <_malloc_r+0x22>
 8005996:	42a3      	cmp	r3, r4
 8005998:	6862      	ldr	r2, [r4, #4]
 800599a:	d1dd      	bne.n	8005958 <_malloc_r+0x8c>
 800599c:	f8c8 2000 	str.w	r2, [r8]
 80059a0:	e7ec      	b.n	800597c <_malloc_r+0xb0>
 80059a2:	4623      	mov	r3, r4
 80059a4:	6864      	ldr	r4, [r4, #4]
 80059a6:	e7ac      	b.n	8005902 <_malloc_r+0x36>
 80059a8:	4634      	mov	r4, r6
 80059aa:	6876      	ldr	r6, [r6, #4]
 80059ac:	e7b4      	b.n	8005918 <_malloc_r+0x4c>
 80059ae:	4613      	mov	r3, r2
 80059b0:	e7cc      	b.n	800594c <_malloc_r+0x80>
 80059b2:	230c      	movs	r3, #12
 80059b4:	603b      	str	r3, [r7, #0]
 80059b6:	4638      	mov	r0, r7
 80059b8:	f000 f80e 	bl	80059d8 <__malloc_unlock>
 80059bc:	e797      	b.n	80058ee <_malloc_r+0x22>
 80059be:	6025      	str	r5, [r4, #0]
 80059c0:	e7dc      	b.n	800597c <_malloc_r+0xb0>
 80059c2:	605b      	str	r3, [r3, #4]
 80059c4:	deff      	udf	#255	; 0xff
 80059c6:	bf00      	nop
 80059c8:	200003d0 	.word	0x200003d0

080059cc <__malloc_lock>:
 80059cc:	4801      	ldr	r0, [pc, #4]	; (80059d4 <__malloc_lock+0x8>)
 80059ce:	f7ff b8a1 	b.w	8004b14 <__retarget_lock_acquire_recursive>
 80059d2:	bf00      	nop
 80059d4:	200003cc 	.word	0x200003cc

080059d8 <__malloc_unlock>:
 80059d8:	4801      	ldr	r0, [pc, #4]	; (80059e0 <__malloc_unlock+0x8>)
 80059da:	f7ff b89c 	b.w	8004b16 <__retarget_lock_release_recursive>
 80059de:	bf00      	nop
 80059e0:	200003cc 	.word	0x200003cc

080059e4 <_Balloc>:
 80059e4:	b570      	push	{r4, r5, r6, lr}
 80059e6:	69c6      	ldr	r6, [r0, #28]
 80059e8:	4604      	mov	r4, r0
 80059ea:	460d      	mov	r5, r1
 80059ec:	b976      	cbnz	r6, 8005a0c <_Balloc+0x28>
 80059ee:	2010      	movs	r0, #16
 80059f0:	f7ff ff44 	bl	800587c <malloc>
 80059f4:	4602      	mov	r2, r0
 80059f6:	61e0      	str	r0, [r4, #28]
 80059f8:	b920      	cbnz	r0, 8005a04 <_Balloc+0x20>
 80059fa:	4b18      	ldr	r3, [pc, #96]	; (8005a5c <_Balloc+0x78>)
 80059fc:	4818      	ldr	r0, [pc, #96]	; (8005a60 <_Balloc+0x7c>)
 80059fe:	216b      	movs	r1, #107	; 0x6b
 8005a00:	f000 fda0 	bl	8006544 <__assert_func>
 8005a04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005a08:	6006      	str	r6, [r0, #0]
 8005a0a:	60c6      	str	r6, [r0, #12]
 8005a0c:	69e6      	ldr	r6, [r4, #28]
 8005a0e:	68f3      	ldr	r3, [r6, #12]
 8005a10:	b183      	cbz	r3, 8005a34 <_Balloc+0x50>
 8005a12:	69e3      	ldr	r3, [r4, #28]
 8005a14:	68db      	ldr	r3, [r3, #12]
 8005a16:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005a1a:	b9b8      	cbnz	r0, 8005a4c <_Balloc+0x68>
 8005a1c:	2101      	movs	r1, #1
 8005a1e:	fa01 f605 	lsl.w	r6, r1, r5
 8005a22:	1d72      	adds	r2, r6, #5
 8005a24:	0092      	lsls	r2, r2, #2
 8005a26:	4620      	mov	r0, r4
 8005a28:	f000 fdaa 	bl	8006580 <_calloc_r>
 8005a2c:	b160      	cbz	r0, 8005a48 <_Balloc+0x64>
 8005a2e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005a32:	e00e      	b.n	8005a52 <_Balloc+0x6e>
 8005a34:	2221      	movs	r2, #33	; 0x21
 8005a36:	2104      	movs	r1, #4
 8005a38:	4620      	mov	r0, r4
 8005a3a:	f000 fda1 	bl	8006580 <_calloc_r>
 8005a3e:	69e3      	ldr	r3, [r4, #28]
 8005a40:	60f0      	str	r0, [r6, #12]
 8005a42:	68db      	ldr	r3, [r3, #12]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d1e4      	bne.n	8005a12 <_Balloc+0x2e>
 8005a48:	2000      	movs	r0, #0
 8005a4a:	bd70      	pop	{r4, r5, r6, pc}
 8005a4c:	6802      	ldr	r2, [r0, #0]
 8005a4e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005a52:	2300      	movs	r3, #0
 8005a54:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005a58:	e7f7      	b.n	8005a4a <_Balloc+0x66>
 8005a5a:	bf00      	nop
 8005a5c:	08006d25 	.word	0x08006d25
 8005a60:	08006da5 	.word	0x08006da5

08005a64 <_Bfree>:
 8005a64:	b570      	push	{r4, r5, r6, lr}
 8005a66:	69c6      	ldr	r6, [r0, #28]
 8005a68:	4605      	mov	r5, r0
 8005a6a:	460c      	mov	r4, r1
 8005a6c:	b976      	cbnz	r6, 8005a8c <_Bfree+0x28>
 8005a6e:	2010      	movs	r0, #16
 8005a70:	f7ff ff04 	bl	800587c <malloc>
 8005a74:	4602      	mov	r2, r0
 8005a76:	61e8      	str	r0, [r5, #28]
 8005a78:	b920      	cbnz	r0, 8005a84 <_Bfree+0x20>
 8005a7a:	4b09      	ldr	r3, [pc, #36]	; (8005aa0 <_Bfree+0x3c>)
 8005a7c:	4809      	ldr	r0, [pc, #36]	; (8005aa4 <_Bfree+0x40>)
 8005a7e:	218f      	movs	r1, #143	; 0x8f
 8005a80:	f000 fd60 	bl	8006544 <__assert_func>
 8005a84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005a88:	6006      	str	r6, [r0, #0]
 8005a8a:	60c6      	str	r6, [r0, #12]
 8005a8c:	b13c      	cbz	r4, 8005a9e <_Bfree+0x3a>
 8005a8e:	69eb      	ldr	r3, [r5, #28]
 8005a90:	6862      	ldr	r2, [r4, #4]
 8005a92:	68db      	ldr	r3, [r3, #12]
 8005a94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005a98:	6021      	str	r1, [r4, #0]
 8005a9a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005a9e:	bd70      	pop	{r4, r5, r6, pc}
 8005aa0:	08006d25 	.word	0x08006d25
 8005aa4:	08006da5 	.word	0x08006da5

08005aa8 <__multadd>:
 8005aa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005aac:	690d      	ldr	r5, [r1, #16]
 8005aae:	4607      	mov	r7, r0
 8005ab0:	460c      	mov	r4, r1
 8005ab2:	461e      	mov	r6, r3
 8005ab4:	f101 0c14 	add.w	ip, r1, #20
 8005ab8:	2000      	movs	r0, #0
 8005aba:	f8dc 3000 	ldr.w	r3, [ip]
 8005abe:	b299      	uxth	r1, r3
 8005ac0:	fb02 6101 	mla	r1, r2, r1, r6
 8005ac4:	0c1e      	lsrs	r6, r3, #16
 8005ac6:	0c0b      	lsrs	r3, r1, #16
 8005ac8:	fb02 3306 	mla	r3, r2, r6, r3
 8005acc:	b289      	uxth	r1, r1
 8005ace:	3001      	adds	r0, #1
 8005ad0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005ad4:	4285      	cmp	r5, r0
 8005ad6:	f84c 1b04 	str.w	r1, [ip], #4
 8005ada:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005ade:	dcec      	bgt.n	8005aba <__multadd+0x12>
 8005ae0:	b30e      	cbz	r6, 8005b26 <__multadd+0x7e>
 8005ae2:	68a3      	ldr	r3, [r4, #8]
 8005ae4:	42ab      	cmp	r3, r5
 8005ae6:	dc19      	bgt.n	8005b1c <__multadd+0x74>
 8005ae8:	6861      	ldr	r1, [r4, #4]
 8005aea:	4638      	mov	r0, r7
 8005aec:	3101      	adds	r1, #1
 8005aee:	f7ff ff79 	bl	80059e4 <_Balloc>
 8005af2:	4680      	mov	r8, r0
 8005af4:	b928      	cbnz	r0, 8005b02 <__multadd+0x5a>
 8005af6:	4602      	mov	r2, r0
 8005af8:	4b0c      	ldr	r3, [pc, #48]	; (8005b2c <__multadd+0x84>)
 8005afa:	480d      	ldr	r0, [pc, #52]	; (8005b30 <__multadd+0x88>)
 8005afc:	21ba      	movs	r1, #186	; 0xba
 8005afe:	f000 fd21 	bl	8006544 <__assert_func>
 8005b02:	6922      	ldr	r2, [r4, #16]
 8005b04:	3202      	adds	r2, #2
 8005b06:	f104 010c 	add.w	r1, r4, #12
 8005b0a:	0092      	lsls	r2, r2, #2
 8005b0c:	300c      	adds	r0, #12
 8005b0e:	f000 fd0b 	bl	8006528 <memcpy>
 8005b12:	4621      	mov	r1, r4
 8005b14:	4638      	mov	r0, r7
 8005b16:	f7ff ffa5 	bl	8005a64 <_Bfree>
 8005b1a:	4644      	mov	r4, r8
 8005b1c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005b20:	3501      	adds	r5, #1
 8005b22:	615e      	str	r6, [r3, #20]
 8005b24:	6125      	str	r5, [r4, #16]
 8005b26:	4620      	mov	r0, r4
 8005b28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b2c:	08006d94 	.word	0x08006d94
 8005b30:	08006da5 	.word	0x08006da5

08005b34 <__hi0bits>:
 8005b34:	0c02      	lsrs	r2, r0, #16
 8005b36:	0412      	lsls	r2, r2, #16
 8005b38:	4603      	mov	r3, r0
 8005b3a:	b9ca      	cbnz	r2, 8005b70 <__hi0bits+0x3c>
 8005b3c:	0403      	lsls	r3, r0, #16
 8005b3e:	2010      	movs	r0, #16
 8005b40:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005b44:	bf04      	itt	eq
 8005b46:	021b      	lsleq	r3, r3, #8
 8005b48:	3008      	addeq	r0, #8
 8005b4a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005b4e:	bf04      	itt	eq
 8005b50:	011b      	lsleq	r3, r3, #4
 8005b52:	3004      	addeq	r0, #4
 8005b54:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005b58:	bf04      	itt	eq
 8005b5a:	009b      	lsleq	r3, r3, #2
 8005b5c:	3002      	addeq	r0, #2
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	db05      	blt.n	8005b6e <__hi0bits+0x3a>
 8005b62:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8005b66:	f100 0001 	add.w	r0, r0, #1
 8005b6a:	bf08      	it	eq
 8005b6c:	2020      	moveq	r0, #32
 8005b6e:	4770      	bx	lr
 8005b70:	2000      	movs	r0, #0
 8005b72:	e7e5      	b.n	8005b40 <__hi0bits+0xc>

08005b74 <__lo0bits>:
 8005b74:	6803      	ldr	r3, [r0, #0]
 8005b76:	4602      	mov	r2, r0
 8005b78:	f013 0007 	ands.w	r0, r3, #7
 8005b7c:	d00b      	beq.n	8005b96 <__lo0bits+0x22>
 8005b7e:	07d9      	lsls	r1, r3, #31
 8005b80:	d421      	bmi.n	8005bc6 <__lo0bits+0x52>
 8005b82:	0798      	lsls	r0, r3, #30
 8005b84:	bf49      	itett	mi
 8005b86:	085b      	lsrmi	r3, r3, #1
 8005b88:	089b      	lsrpl	r3, r3, #2
 8005b8a:	2001      	movmi	r0, #1
 8005b8c:	6013      	strmi	r3, [r2, #0]
 8005b8e:	bf5c      	itt	pl
 8005b90:	6013      	strpl	r3, [r2, #0]
 8005b92:	2002      	movpl	r0, #2
 8005b94:	4770      	bx	lr
 8005b96:	b299      	uxth	r1, r3
 8005b98:	b909      	cbnz	r1, 8005b9e <__lo0bits+0x2a>
 8005b9a:	0c1b      	lsrs	r3, r3, #16
 8005b9c:	2010      	movs	r0, #16
 8005b9e:	b2d9      	uxtb	r1, r3
 8005ba0:	b909      	cbnz	r1, 8005ba6 <__lo0bits+0x32>
 8005ba2:	3008      	adds	r0, #8
 8005ba4:	0a1b      	lsrs	r3, r3, #8
 8005ba6:	0719      	lsls	r1, r3, #28
 8005ba8:	bf04      	itt	eq
 8005baa:	091b      	lsreq	r3, r3, #4
 8005bac:	3004      	addeq	r0, #4
 8005bae:	0799      	lsls	r1, r3, #30
 8005bb0:	bf04      	itt	eq
 8005bb2:	089b      	lsreq	r3, r3, #2
 8005bb4:	3002      	addeq	r0, #2
 8005bb6:	07d9      	lsls	r1, r3, #31
 8005bb8:	d403      	bmi.n	8005bc2 <__lo0bits+0x4e>
 8005bba:	085b      	lsrs	r3, r3, #1
 8005bbc:	f100 0001 	add.w	r0, r0, #1
 8005bc0:	d003      	beq.n	8005bca <__lo0bits+0x56>
 8005bc2:	6013      	str	r3, [r2, #0]
 8005bc4:	4770      	bx	lr
 8005bc6:	2000      	movs	r0, #0
 8005bc8:	4770      	bx	lr
 8005bca:	2020      	movs	r0, #32
 8005bcc:	4770      	bx	lr
	...

08005bd0 <__i2b>:
 8005bd0:	b510      	push	{r4, lr}
 8005bd2:	460c      	mov	r4, r1
 8005bd4:	2101      	movs	r1, #1
 8005bd6:	f7ff ff05 	bl	80059e4 <_Balloc>
 8005bda:	4602      	mov	r2, r0
 8005bdc:	b928      	cbnz	r0, 8005bea <__i2b+0x1a>
 8005bde:	4b05      	ldr	r3, [pc, #20]	; (8005bf4 <__i2b+0x24>)
 8005be0:	4805      	ldr	r0, [pc, #20]	; (8005bf8 <__i2b+0x28>)
 8005be2:	f240 1145 	movw	r1, #325	; 0x145
 8005be6:	f000 fcad 	bl	8006544 <__assert_func>
 8005bea:	2301      	movs	r3, #1
 8005bec:	6144      	str	r4, [r0, #20]
 8005bee:	6103      	str	r3, [r0, #16]
 8005bf0:	bd10      	pop	{r4, pc}
 8005bf2:	bf00      	nop
 8005bf4:	08006d94 	.word	0x08006d94
 8005bf8:	08006da5 	.word	0x08006da5

08005bfc <__multiply>:
 8005bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c00:	4691      	mov	r9, r2
 8005c02:	690a      	ldr	r2, [r1, #16]
 8005c04:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005c08:	429a      	cmp	r2, r3
 8005c0a:	bfb8      	it	lt
 8005c0c:	460b      	movlt	r3, r1
 8005c0e:	460c      	mov	r4, r1
 8005c10:	bfbc      	itt	lt
 8005c12:	464c      	movlt	r4, r9
 8005c14:	4699      	movlt	r9, r3
 8005c16:	6927      	ldr	r7, [r4, #16]
 8005c18:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005c1c:	68a3      	ldr	r3, [r4, #8]
 8005c1e:	6861      	ldr	r1, [r4, #4]
 8005c20:	eb07 060a 	add.w	r6, r7, sl
 8005c24:	42b3      	cmp	r3, r6
 8005c26:	b085      	sub	sp, #20
 8005c28:	bfb8      	it	lt
 8005c2a:	3101      	addlt	r1, #1
 8005c2c:	f7ff feda 	bl	80059e4 <_Balloc>
 8005c30:	b930      	cbnz	r0, 8005c40 <__multiply+0x44>
 8005c32:	4602      	mov	r2, r0
 8005c34:	4b44      	ldr	r3, [pc, #272]	; (8005d48 <__multiply+0x14c>)
 8005c36:	4845      	ldr	r0, [pc, #276]	; (8005d4c <__multiply+0x150>)
 8005c38:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8005c3c:	f000 fc82 	bl	8006544 <__assert_func>
 8005c40:	f100 0514 	add.w	r5, r0, #20
 8005c44:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005c48:	462b      	mov	r3, r5
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	4543      	cmp	r3, r8
 8005c4e:	d321      	bcc.n	8005c94 <__multiply+0x98>
 8005c50:	f104 0314 	add.w	r3, r4, #20
 8005c54:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005c58:	f109 0314 	add.w	r3, r9, #20
 8005c5c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005c60:	9202      	str	r2, [sp, #8]
 8005c62:	1b3a      	subs	r2, r7, r4
 8005c64:	3a15      	subs	r2, #21
 8005c66:	f022 0203 	bic.w	r2, r2, #3
 8005c6a:	3204      	adds	r2, #4
 8005c6c:	f104 0115 	add.w	r1, r4, #21
 8005c70:	428f      	cmp	r7, r1
 8005c72:	bf38      	it	cc
 8005c74:	2204      	movcc	r2, #4
 8005c76:	9201      	str	r2, [sp, #4]
 8005c78:	9a02      	ldr	r2, [sp, #8]
 8005c7a:	9303      	str	r3, [sp, #12]
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	d80c      	bhi.n	8005c9a <__multiply+0x9e>
 8005c80:	2e00      	cmp	r6, #0
 8005c82:	dd03      	ble.n	8005c8c <__multiply+0x90>
 8005c84:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d05a      	beq.n	8005d42 <__multiply+0x146>
 8005c8c:	6106      	str	r6, [r0, #16]
 8005c8e:	b005      	add	sp, #20
 8005c90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c94:	f843 2b04 	str.w	r2, [r3], #4
 8005c98:	e7d8      	b.n	8005c4c <__multiply+0x50>
 8005c9a:	f8b3 a000 	ldrh.w	sl, [r3]
 8005c9e:	f1ba 0f00 	cmp.w	sl, #0
 8005ca2:	d023      	beq.n	8005cec <__multiply+0xf0>
 8005ca4:	f104 0e14 	add.w	lr, r4, #20
 8005ca8:	46a9      	mov	r9, r5
 8005caa:	f04f 0c00 	mov.w	ip, #0
 8005cae:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005cb2:	f8d9 1000 	ldr.w	r1, [r9]
 8005cb6:	fa1f fb82 	uxth.w	fp, r2
 8005cba:	b289      	uxth	r1, r1
 8005cbc:	fb0a 110b 	mla	r1, sl, fp, r1
 8005cc0:	4461      	add	r1, ip
 8005cc2:	f8d9 c000 	ldr.w	ip, [r9]
 8005cc6:	0c12      	lsrs	r2, r2, #16
 8005cc8:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005ccc:	fb0a c202 	mla	r2, sl, r2, ip
 8005cd0:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005cd4:	b289      	uxth	r1, r1
 8005cd6:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005cda:	4577      	cmp	r7, lr
 8005cdc:	f849 1b04 	str.w	r1, [r9], #4
 8005ce0:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005ce4:	d8e3      	bhi.n	8005cae <__multiply+0xb2>
 8005ce6:	9a01      	ldr	r2, [sp, #4]
 8005ce8:	f845 c002 	str.w	ip, [r5, r2]
 8005cec:	9a03      	ldr	r2, [sp, #12]
 8005cee:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005cf2:	3304      	adds	r3, #4
 8005cf4:	f1b9 0f00 	cmp.w	r9, #0
 8005cf8:	d021      	beq.n	8005d3e <__multiply+0x142>
 8005cfa:	6829      	ldr	r1, [r5, #0]
 8005cfc:	f104 0c14 	add.w	ip, r4, #20
 8005d00:	46ae      	mov	lr, r5
 8005d02:	f04f 0a00 	mov.w	sl, #0
 8005d06:	f8bc b000 	ldrh.w	fp, [ip]
 8005d0a:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005d0e:	fb09 220b 	mla	r2, r9, fp, r2
 8005d12:	4452      	add	r2, sl
 8005d14:	b289      	uxth	r1, r1
 8005d16:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005d1a:	f84e 1b04 	str.w	r1, [lr], #4
 8005d1e:	f85c 1b04 	ldr.w	r1, [ip], #4
 8005d22:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005d26:	f8be 1000 	ldrh.w	r1, [lr]
 8005d2a:	fb09 110a 	mla	r1, r9, sl, r1
 8005d2e:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8005d32:	4567      	cmp	r7, ip
 8005d34:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005d38:	d8e5      	bhi.n	8005d06 <__multiply+0x10a>
 8005d3a:	9a01      	ldr	r2, [sp, #4]
 8005d3c:	50a9      	str	r1, [r5, r2]
 8005d3e:	3504      	adds	r5, #4
 8005d40:	e79a      	b.n	8005c78 <__multiply+0x7c>
 8005d42:	3e01      	subs	r6, #1
 8005d44:	e79c      	b.n	8005c80 <__multiply+0x84>
 8005d46:	bf00      	nop
 8005d48:	08006d94 	.word	0x08006d94
 8005d4c:	08006da5 	.word	0x08006da5

08005d50 <__pow5mult>:
 8005d50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d54:	4615      	mov	r5, r2
 8005d56:	f012 0203 	ands.w	r2, r2, #3
 8005d5a:	4606      	mov	r6, r0
 8005d5c:	460f      	mov	r7, r1
 8005d5e:	d007      	beq.n	8005d70 <__pow5mult+0x20>
 8005d60:	4c25      	ldr	r4, [pc, #148]	; (8005df8 <__pow5mult+0xa8>)
 8005d62:	3a01      	subs	r2, #1
 8005d64:	2300      	movs	r3, #0
 8005d66:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005d6a:	f7ff fe9d 	bl	8005aa8 <__multadd>
 8005d6e:	4607      	mov	r7, r0
 8005d70:	10ad      	asrs	r5, r5, #2
 8005d72:	d03d      	beq.n	8005df0 <__pow5mult+0xa0>
 8005d74:	69f4      	ldr	r4, [r6, #28]
 8005d76:	b97c      	cbnz	r4, 8005d98 <__pow5mult+0x48>
 8005d78:	2010      	movs	r0, #16
 8005d7a:	f7ff fd7f 	bl	800587c <malloc>
 8005d7e:	4602      	mov	r2, r0
 8005d80:	61f0      	str	r0, [r6, #28]
 8005d82:	b928      	cbnz	r0, 8005d90 <__pow5mult+0x40>
 8005d84:	4b1d      	ldr	r3, [pc, #116]	; (8005dfc <__pow5mult+0xac>)
 8005d86:	481e      	ldr	r0, [pc, #120]	; (8005e00 <__pow5mult+0xb0>)
 8005d88:	f240 11b3 	movw	r1, #435	; 0x1b3
 8005d8c:	f000 fbda 	bl	8006544 <__assert_func>
 8005d90:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005d94:	6004      	str	r4, [r0, #0]
 8005d96:	60c4      	str	r4, [r0, #12]
 8005d98:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8005d9c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005da0:	b94c      	cbnz	r4, 8005db6 <__pow5mult+0x66>
 8005da2:	f240 2171 	movw	r1, #625	; 0x271
 8005da6:	4630      	mov	r0, r6
 8005da8:	f7ff ff12 	bl	8005bd0 <__i2b>
 8005dac:	2300      	movs	r3, #0
 8005dae:	f8c8 0008 	str.w	r0, [r8, #8]
 8005db2:	4604      	mov	r4, r0
 8005db4:	6003      	str	r3, [r0, #0]
 8005db6:	f04f 0900 	mov.w	r9, #0
 8005dba:	07eb      	lsls	r3, r5, #31
 8005dbc:	d50a      	bpl.n	8005dd4 <__pow5mult+0x84>
 8005dbe:	4639      	mov	r1, r7
 8005dc0:	4622      	mov	r2, r4
 8005dc2:	4630      	mov	r0, r6
 8005dc4:	f7ff ff1a 	bl	8005bfc <__multiply>
 8005dc8:	4639      	mov	r1, r7
 8005dca:	4680      	mov	r8, r0
 8005dcc:	4630      	mov	r0, r6
 8005dce:	f7ff fe49 	bl	8005a64 <_Bfree>
 8005dd2:	4647      	mov	r7, r8
 8005dd4:	106d      	asrs	r5, r5, #1
 8005dd6:	d00b      	beq.n	8005df0 <__pow5mult+0xa0>
 8005dd8:	6820      	ldr	r0, [r4, #0]
 8005dda:	b938      	cbnz	r0, 8005dec <__pow5mult+0x9c>
 8005ddc:	4622      	mov	r2, r4
 8005dde:	4621      	mov	r1, r4
 8005de0:	4630      	mov	r0, r6
 8005de2:	f7ff ff0b 	bl	8005bfc <__multiply>
 8005de6:	6020      	str	r0, [r4, #0]
 8005de8:	f8c0 9000 	str.w	r9, [r0]
 8005dec:	4604      	mov	r4, r0
 8005dee:	e7e4      	b.n	8005dba <__pow5mult+0x6a>
 8005df0:	4638      	mov	r0, r7
 8005df2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005df6:	bf00      	nop
 8005df8:	08006ef0 	.word	0x08006ef0
 8005dfc:	08006d25 	.word	0x08006d25
 8005e00:	08006da5 	.word	0x08006da5

08005e04 <__lshift>:
 8005e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e08:	460c      	mov	r4, r1
 8005e0a:	6849      	ldr	r1, [r1, #4]
 8005e0c:	6923      	ldr	r3, [r4, #16]
 8005e0e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005e12:	68a3      	ldr	r3, [r4, #8]
 8005e14:	4607      	mov	r7, r0
 8005e16:	4691      	mov	r9, r2
 8005e18:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005e1c:	f108 0601 	add.w	r6, r8, #1
 8005e20:	42b3      	cmp	r3, r6
 8005e22:	db0b      	blt.n	8005e3c <__lshift+0x38>
 8005e24:	4638      	mov	r0, r7
 8005e26:	f7ff fddd 	bl	80059e4 <_Balloc>
 8005e2a:	4605      	mov	r5, r0
 8005e2c:	b948      	cbnz	r0, 8005e42 <__lshift+0x3e>
 8005e2e:	4602      	mov	r2, r0
 8005e30:	4b28      	ldr	r3, [pc, #160]	; (8005ed4 <__lshift+0xd0>)
 8005e32:	4829      	ldr	r0, [pc, #164]	; (8005ed8 <__lshift+0xd4>)
 8005e34:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8005e38:	f000 fb84 	bl	8006544 <__assert_func>
 8005e3c:	3101      	adds	r1, #1
 8005e3e:	005b      	lsls	r3, r3, #1
 8005e40:	e7ee      	b.n	8005e20 <__lshift+0x1c>
 8005e42:	2300      	movs	r3, #0
 8005e44:	f100 0114 	add.w	r1, r0, #20
 8005e48:	f100 0210 	add.w	r2, r0, #16
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	4553      	cmp	r3, sl
 8005e50:	db33      	blt.n	8005eba <__lshift+0xb6>
 8005e52:	6920      	ldr	r0, [r4, #16]
 8005e54:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005e58:	f104 0314 	add.w	r3, r4, #20
 8005e5c:	f019 091f 	ands.w	r9, r9, #31
 8005e60:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005e64:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005e68:	d02b      	beq.n	8005ec2 <__lshift+0xbe>
 8005e6a:	f1c9 0e20 	rsb	lr, r9, #32
 8005e6e:	468a      	mov	sl, r1
 8005e70:	2200      	movs	r2, #0
 8005e72:	6818      	ldr	r0, [r3, #0]
 8005e74:	fa00 f009 	lsl.w	r0, r0, r9
 8005e78:	4310      	orrs	r0, r2
 8005e7a:	f84a 0b04 	str.w	r0, [sl], #4
 8005e7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e82:	459c      	cmp	ip, r3
 8005e84:	fa22 f20e 	lsr.w	r2, r2, lr
 8005e88:	d8f3      	bhi.n	8005e72 <__lshift+0x6e>
 8005e8a:	ebac 0304 	sub.w	r3, ip, r4
 8005e8e:	3b15      	subs	r3, #21
 8005e90:	f023 0303 	bic.w	r3, r3, #3
 8005e94:	3304      	adds	r3, #4
 8005e96:	f104 0015 	add.w	r0, r4, #21
 8005e9a:	4584      	cmp	ip, r0
 8005e9c:	bf38      	it	cc
 8005e9e:	2304      	movcc	r3, #4
 8005ea0:	50ca      	str	r2, [r1, r3]
 8005ea2:	b10a      	cbz	r2, 8005ea8 <__lshift+0xa4>
 8005ea4:	f108 0602 	add.w	r6, r8, #2
 8005ea8:	3e01      	subs	r6, #1
 8005eaa:	4638      	mov	r0, r7
 8005eac:	612e      	str	r6, [r5, #16]
 8005eae:	4621      	mov	r1, r4
 8005eb0:	f7ff fdd8 	bl	8005a64 <_Bfree>
 8005eb4:	4628      	mov	r0, r5
 8005eb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005eba:	f842 0f04 	str.w	r0, [r2, #4]!
 8005ebe:	3301      	adds	r3, #1
 8005ec0:	e7c5      	b.n	8005e4e <__lshift+0x4a>
 8005ec2:	3904      	subs	r1, #4
 8005ec4:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ec8:	f841 2f04 	str.w	r2, [r1, #4]!
 8005ecc:	459c      	cmp	ip, r3
 8005ece:	d8f9      	bhi.n	8005ec4 <__lshift+0xc0>
 8005ed0:	e7ea      	b.n	8005ea8 <__lshift+0xa4>
 8005ed2:	bf00      	nop
 8005ed4:	08006d94 	.word	0x08006d94
 8005ed8:	08006da5 	.word	0x08006da5

08005edc <__mcmp>:
 8005edc:	690a      	ldr	r2, [r1, #16]
 8005ede:	4603      	mov	r3, r0
 8005ee0:	6900      	ldr	r0, [r0, #16]
 8005ee2:	1a80      	subs	r0, r0, r2
 8005ee4:	b530      	push	{r4, r5, lr}
 8005ee6:	d10d      	bne.n	8005f04 <__mcmp+0x28>
 8005ee8:	3314      	adds	r3, #20
 8005eea:	3114      	adds	r1, #20
 8005eec:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005ef0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005ef4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005ef8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005efc:	4295      	cmp	r5, r2
 8005efe:	d002      	beq.n	8005f06 <__mcmp+0x2a>
 8005f00:	d304      	bcc.n	8005f0c <__mcmp+0x30>
 8005f02:	2001      	movs	r0, #1
 8005f04:	bd30      	pop	{r4, r5, pc}
 8005f06:	42a3      	cmp	r3, r4
 8005f08:	d3f4      	bcc.n	8005ef4 <__mcmp+0x18>
 8005f0a:	e7fb      	b.n	8005f04 <__mcmp+0x28>
 8005f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f10:	e7f8      	b.n	8005f04 <__mcmp+0x28>
	...

08005f14 <__mdiff>:
 8005f14:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f18:	460d      	mov	r5, r1
 8005f1a:	4607      	mov	r7, r0
 8005f1c:	4611      	mov	r1, r2
 8005f1e:	4628      	mov	r0, r5
 8005f20:	4614      	mov	r4, r2
 8005f22:	f7ff ffdb 	bl	8005edc <__mcmp>
 8005f26:	1e06      	subs	r6, r0, #0
 8005f28:	d111      	bne.n	8005f4e <__mdiff+0x3a>
 8005f2a:	4631      	mov	r1, r6
 8005f2c:	4638      	mov	r0, r7
 8005f2e:	f7ff fd59 	bl	80059e4 <_Balloc>
 8005f32:	4602      	mov	r2, r0
 8005f34:	b928      	cbnz	r0, 8005f42 <__mdiff+0x2e>
 8005f36:	4b39      	ldr	r3, [pc, #228]	; (800601c <__mdiff+0x108>)
 8005f38:	f240 2137 	movw	r1, #567	; 0x237
 8005f3c:	4838      	ldr	r0, [pc, #224]	; (8006020 <__mdiff+0x10c>)
 8005f3e:	f000 fb01 	bl	8006544 <__assert_func>
 8005f42:	2301      	movs	r3, #1
 8005f44:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005f48:	4610      	mov	r0, r2
 8005f4a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f4e:	bfa4      	itt	ge
 8005f50:	4623      	movge	r3, r4
 8005f52:	462c      	movge	r4, r5
 8005f54:	4638      	mov	r0, r7
 8005f56:	6861      	ldr	r1, [r4, #4]
 8005f58:	bfa6      	itte	ge
 8005f5a:	461d      	movge	r5, r3
 8005f5c:	2600      	movge	r6, #0
 8005f5e:	2601      	movlt	r6, #1
 8005f60:	f7ff fd40 	bl	80059e4 <_Balloc>
 8005f64:	4602      	mov	r2, r0
 8005f66:	b918      	cbnz	r0, 8005f70 <__mdiff+0x5c>
 8005f68:	4b2c      	ldr	r3, [pc, #176]	; (800601c <__mdiff+0x108>)
 8005f6a:	f240 2145 	movw	r1, #581	; 0x245
 8005f6e:	e7e5      	b.n	8005f3c <__mdiff+0x28>
 8005f70:	6927      	ldr	r7, [r4, #16]
 8005f72:	60c6      	str	r6, [r0, #12]
 8005f74:	692e      	ldr	r6, [r5, #16]
 8005f76:	f104 0014 	add.w	r0, r4, #20
 8005f7a:	f105 0914 	add.w	r9, r5, #20
 8005f7e:	f102 0e14 	add.w	lr, r2, #20
 8005f82:	eb00 0c87 	add.w	ip, r0, r7, lsl #2
 8005f86:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005f8a:	3410      	adds	r4, #16
 8005f8c:	46f2      	mov	sl, lr
 8005f8e:	2100      	movs	r1, #0
 8005f90:	f859 3b04 	ldr.w	r3, [r9], #4
 8005f94:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8005f98:	fa11 f88b 	uxtah	r8, r1, fp
 8005f9c:	b299      	uxth	r1, r3
 8005f9e:	0c1b      	lsrs	r3, r3, #16
 8005fa0:	eba8 0801 	sub.w	r8, r8, r1
 8005fa4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005fa8:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005fac:	fa1f f888 	uxth.w	r8, r8
 8005fb0:	1419      	asrs	r1, r3, #16
 8005fb2:	454e      	cmp	r6, r9
 8005fb4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005fb8:	f84a 3b04 	str.w	r3, [sl], #4
 8005fbc:	d8e8      	bhi.n	8005f90 <__mdiff+0x7c>
 8005fbe:	1b73      	subs	r3, r6, r5
 8005fc0:	3b15      	subs	r3, #21
 8005fc2:	f023 0303 	bic.w	r3, r3, #3
 8005fc6:	3304      	adds	r3, #4
 8005fc8:	3515      	adds	r5, #21
 8005fca:	42ae      	cmp	r6, r5
 8005fcc:	bf38      	it	cc
 8005fce:	2304      	movcc	r3, #4
 8005fd0:	4418      	add	r0, r3
 8005fd2:	4473      	add	r3, lr
 8005fd4:	469e      	mov	lr, r3
 8005fd6:	4606      	mov	r6, r0
 8005fd8:	4566      	cmp	r6, ip
 8005fda:	d30e      	bcc.n	8005ffa <__mdiff+0xe6>
 8005fdc:	f10c 0103 	add.w	r1, ip, #3
 8005fe0:	1a09      	subs	r1, r1, r0
 8005fe2:	f021 0103 	bic.w	r1, r1, #3
 8005fe6:	3803      	subs	r0, #3
 8005fe8:	4584      	cmp	ip, r0
 8005fea:	bf38      	it	cc
 8005fec:	2100      	movcc	r1, #0
 8005fee:	440b      	add	r3, r1
 8005ff0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005ff4:	b179      	cbz	r1, 8006016 <__mdiff+0x102>
 8005ff6:	6117      	str	r7, [r2, #16]
 8005ff8:	e7a6      	b.n	8005f48 <__mdiff+0x34>
 8005ffa:	f856 8b04 	ldr.w	r8, [r6], #4
 8005ffe:	fa11 f488 	uxtah	r4, r1, r8
 8006002:	1425      	asrs	r5, r4, #16
 8006004:	eb05 4518 	add.w	r5, r5, r8, lsr #16
 8006008:	b2a4      	uxth	r4, r4
 800600a:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800600e:	f84e 4b04 	str.w	r4, [lr], #4
 8006012:	1429      	asrs	r1, r5, #16
 8006014:	e7e0      	b.n	8005fd8 <__mdiff+0xc4>
 8006016:	3f01      	subs	r7, #1
 8006018:	e7ea      	b.n	8005ff0 <__mdiff+0xdc>
 800601a:	bf00      	nop
 800601c:	08006d94 	.word	0x08006d94
 8006020:	08006da5 	.word	0x08006da5

08006024 <__d2b>:
 8006024:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006026:	2101      	movs	r1, #1
 8006028:	9e08      	ldr	r6, [sp, #32]
 800602a:	4617      	mov	r7, r2
 800602c:	461c      	mov	r4, r3
 800602e:	f7ff fcd9 	bl	80059e4 <_Balloc>
 8006032:	4605      	mov	r5, r0
 8006034:	b930      	cbnz	r0, 8006044 <__d2b+0x20>
 8006036:	4602      	mov	r2, r0
 8006038:	4b23      	ldr	r3, [pc, #140]	; (80060c8 <__d2b+0xa4>)
 800603a:	4824      	ldr	r0, [pc, #144]	; (80060cc <__d2b+0xa8>)
 800603c:	f240 310f 	movw	r1, #783	; 0x30f
 8006040:	f000 fa80 	bl	8006544 <__assert_func>
 8006044:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8006048:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800604c:	bb24      	cbnz	r4, 8006098 <__d2b+0x74>
 800604e:	2f00      	cmp	r7, #0
 8006050:	9301      	str	r3, [sp, #4]
 8006052:	d026      	beq.n	80060a2 <__d2b+0x7e>
 8006054:	4668      	mov	r0, sp
 8006056:	9700      	str	r7, [sp, #0]
 8006058:	f7ff fd8c 	bl	8005b74 <__lo0bits>
 800605c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006060:	b1e8      	cbz	r0, 800609e <__d2b+0x7a>
 8006062:	f1c0 0320 	rsb	r3, r0, #32
 8006066:	fa02 f303 	lsl.w	r3, r2, r3
 800606a:	430b      	orrs	r3, r1
 800606c:	40c2      	lsrs	r2, r0
 800606e:	616b      	str	r3, [r5, #20]
 8006070:	9201      	str	r2, [sp, #4]
 8006072:	9b01      	ldr	r3, [sp, #4]
 8006074:	61ab      	str	r3, [r5, #24]
 8006076:	2b00      	cmp	r3, #0
 8006078:	bf14      	ite	ne
 800607a:	2102      	movne	r1, #2
 800607c:	2101      	moveq	r1, #1
 800607e:	6129      	str	r1, [r5, #16]
 8006080:	b1bc      	cbz	r4, 80060b2 <__d2b+0x8e>
 8006082:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006086:	4404      	add	r4, r0
 8006088:	6034      	str	r4, [r6, #0]
 800608a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800608e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006090:	6018      	str	r0, [r3, #0]
 8006092:	4628      	mov	r0, r5
 8006094:	b003      	add	sp, #12
 8006096:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006098:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800609c:	e7d7      	b.n	800604e <__d2b+0x2a>
 800609e:	6169      	str	r1, [r5, #20]
 80060a0:	e7e7      	b.n	8006072 <__d2b+0x4e>
 80060a2:	a801      	add	r0, sp, #4
 80060a4:	f7ff fd66 	bl	8005b74 <__lo0bits>
 80060a8:	9b01      	ldr	r3, [sp, #4]
 80060aa:	616b      	str	r3, [r5, #20]
 80060ac:	3020      	adds	r0, #32
 80060ae:	2101      	movs	r1, #1
 80060b0:	e7e5      	b.n	800607e <__d2b+0x5a>
 80060b2:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 80060b6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80060ba:	6030      	str	r0, [r6, #0]
 80060bc:	6918      	ldr	r0, [r3, #16]
 80060be:	f7ff fd39 	bl	8005b34 <__hi0bits>
 80060c2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80060c6:	e7e2      	b.n	800608e <__d2b+0x6a>
 80060c8:	08006d94 	.word	0x08006d94
 80060cc:	08006da5 	.word	0x08006da5

080060d0 <__ssputs_r>:
 80060d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060d4:	688e      	ldr	r6, [r1, #8]
 80060d6:	461f      	mov	r7, r3
 80060d8:	42be      	cmp	r6, r7
 80060da:	680b      	ldr	r3, [r1, #0]
 80060dc:	4682      	mov	sl, r0
 80060de:	460c      	mov	r4, r1
 80060e0:	4690      	mov	r8, r2
 80060e2:	d82c      	bhi.n	800613e <__ssputs_r+0x6e>
 80060e4:	898a      	ldrh	r2, [r1, #12]
 80060e6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80060ea:	d026      	beq.n	800613a <__ssputs_r+0x6a>
 80060ec:	6965      	ldr	r5, [r4, #20]
 80060ee:	6909      	ldr	r1, [r1, #16]
 80060f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80060f4:	eba3 0901 	sub.w	r9, r3, r1
 80060f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80060fc:	1c7b      	adds	r3, r7, #1
 80060fe:	444b      	add	r3, r9
 8006100:	106d      	asrs	r5, r5, #1
 8006102:	429d      	cmp	r5, r3
 8006104:	bf38      	it	cc
 8006106:	461d      	movcc	r5, r3
 8006108:	0553      	lsls	r3, r2, #21
 800610a:	d527      	bpl.n	800615c <__ssputs_r+0x8c>
 800610c:	4629      	mov	r1, r5
 800610e:	f7ff fbdd 	bl	80058cc <_malloc_r>
 8006112:	4606      	mov	r6, r0
 8006114:	b360      	cbz	r0, 8006170 <__ssputs_r+0xa0>
 8006116:	6921      	ldr	r1, [r4, #16]
 8006118:	464a      	mov	r2, r9
 800611a:	f000 fa05 	bl	8006528 <memcpy>
 800611e:	89a3      	ldrh	r3, [r4, #12]
 8006120:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006124:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006128:	81a3      	strh	r3, [r4, #12]
 800612a:	6126      	str	r6, [r4, #16]
 800612c:	6165      	str	r5, [r4, #20]
 800612e:	444e      	add	r6, r9
 8006130:	eba5 0509 	sub.w	r5, r5, r9
 8006134:	6026      	str	r6, [r4, #0]
 8006136:	60a5      	str	r5, [r4, #8]
 8006138:	463e      	mov	r6, r7
 800613a:	42be      	cmp	r6, r7
 800613c:	d900      	bls.n	8006140 <__ssputs_r+0x70>
 800613e:	463e      	mov	r6, r7
 8006140:	6820      	ldr	r0, [r4, #0]
 8006142:	4632      	mov	r2, r6
 8006144:	4641      	mov	r1, r8
 8006146:	f000 f9c5 	bl	80064d4 <memmove>
 800614a:	68a3      	ldr	r3, [r4, #8]
 800614c:	1b9b      	subs	r3, r3, r6
 800614e:	60a3      	str	r3, [r4, #8]
 8006150:	6823      	ldr	r3, [r4, #0]
 8006152:	4433      	add	r3, r6
 8006154:	6023      	str	r3, [r4, #0]
 8006156:	2000      	movs	r0, #0
 8006158:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800615c:	462a      	mov	r2, r5
 800615e:	f000 fa35 	bl	80065cc <_realloc_r>
 8006162:	4606      	mov	r6, r0
 8006164:	2800      	cmp	r0, #0
 8006166:	d1e0      	bne.n	800612a <__ssputs_r+0x5a>
 8006168:	6921      	ldr	r1, [r4, #16]
 800616a:	4650      	mov	r0, sl
 800616c:	f7ff fb3c 	bl	80057e8 <_free_r>
 8006170:	230c      	movs	r3, #12
 8006172:	f8ca 3000 	str.w	r3, [sl]
 8006176:	89a3      	ldrh	r3, [r4, #12]
 8006178:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800617c:	81a3      	strh	r3, [r4, #12]
 800617e:	f04f 30ff 	mov.w	r0, #4294967295
 8006182:	e7e9      	b.n	8006158 <__ssputs_r+0x88>

08006184 <_svfiprintf_r>:
 8006184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006188:	4698      	mov	r8, r3
 800618a:	898b      	ldrh	r3, [r1, #12]
 800618c:	061b      	lsls	r3, r3, #24
 800618e:	b09d      	sub	sp, #116	; 0x74
 8006190:	4607      	mov	r7, r0
 8006192:	460d      	mov	r5, r1
 8006194:	4614      	mov	r4, r2
 8006196:	d50e      	bpl.n	80061b6 <_svfiprintf_r+0x32>
 8006198:	690b      	ldr	r3, [r1, #16]
 800619a:	b963      	cbnz	r3, 80061b6 <_svfiprintf_r+0x32>
 800619c:	2140      	movs	r1, #64	; 0x40
 800619e:	f7ff fb95 	bl	80058cc <_malloc_r>
 80061a2:	6028      	str	r0, [r5, #0]
 80061a4:	6128      	str	r0, [r5, #16]
 80061a6:	b920      	cbnz	r0, 80061b2 <_svfiprintf_r+0x2e>
 80061a8:	230c      	movs	r3, #12
 80061aa:	603b      	str	r3, [r7, #0]
 80061ac:	f04f 30ff 	mov.w	r0, #4294967295
 80061b0:	e0d0      	b.n	8006354 <_svfiprintf_r+0x1d0>
 80061b2:	2340      	movs	r3, #64	; 0x40
 80061b4:	616b      	str	r3, [r5, #20]
 80061b6:	2300      	movs	r3, #0
 80061b8:	9309      	str	r3, [sp, #36]	; 0x24
 80061ba:	2320      	movs	r3, #32
 80061bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80061c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80061c4:	2330      	movs	r3, #48	; 0x30
 80061c6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800636c <_svfiprintf_r+0x1e8>
 80061ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80061ce:	f04f 0901 	mov.w	r9, #1
 80061d2:	4623      	mov	r3, r4
 80061d4:	469a      	mov	sl, r3
 80061d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80061da:	b10a      	cbz	r2, 80061e0 <_svfiprintf_r+0x5c>
 80061dc:	2a25      	cmp	r2, #37	; 0x25
 80061de:	d1f9      	bne.n	80061d4 <_svfiprintf_r+0x50>
 80061e0:	ebba 0b04 	subs.w	fp, sl, r4
 80061e4:	d00b      	beq.n	80061fe <_svfiprintf_r+0x7a>
 80061e6:	465b      	mov	r3, fp
 80061e8:	4622      	mov	r2, r4
 80061ea:	4629      	mov	r1, r5
 80061ec:	4638      	mov	r0, r7
 80061ee:	f7ff ff6f 	bl	80060d0 <__ssputs_r>
 80061f2:	3001      	adds	r0, #1
 80061f4:	f000 80a9 	beq.w	800634a <_svfiprintf_r+0x1c6>
 80061f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80061fa:	445a      	add	r2, fp
 80061fc:	9209      	str	r2, [sp, #36]	; 0x24
 80061fe:	f89a 3000 	ldrb.w	r3, [sl]
 8006202:	2b00      	cmp	r3, #0
 8006204:	f000 80a1 	beq.w	800634a <_svfiprintf_r+0x1c6>
 8006208:	2300      	movs	r3, #0
 800620a:	f04f 32ff 	mov.w	r2, #4294967295
 800620e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006212:	f10a 0a01 	add.w	sl, sl, #1
 8006216:	9304      	str	r3, [sp, #16]
 8006218:	9307      	str	r3, [sp, #28]
 800621a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800621e:	931a      	str	r3, [sp, #104]	; 0x68
 8006220:	4654      	mov	r4, sl
 8006222:	2205      	movs	r2, #5
 8006224:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006228:	4850      	ldr	r0, [pc, #320]	; (800636c <_svfiprintf_r+0x1e8>)
 800622a:	f7f9 ffa9 	bl	8000180 <memchr>
 800622e:	9a04      	ldr	r2, [sp, #16]
 8006230:	b9d8      	cbnz	r0, 800626a <_svfiprintf_r+0xe6>
 8006232:	06d0      	lsls	r0, r2, #27
 8006234:	bf44      	itt	mi
 8006236:	2320      	movmi	r3, #32
 8006238:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800623c:	0711      	lsls	r1, r2, #28
 800623e:	bf44      	itt	mi
 8006240:	232b      	movmi	r3, #43	; 0x2b
 8006242:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006246:	f89a 3000 	ldrb.w	r3, [sl]
 800624a:	2b2a      	cmp	r3, #42	; 0x2a
 800624c:	d015      	beq.n	800627a <_svfiprintf_r+0xf6>
 800624e:	9a07      	ldr	r2, [sp, #28]
 8006250:	4654      	mov	r4, sl
 8006252:	2000      	movs	r0, #0
 8006254:	f04f 0c0a 	mov.w	ip, #10
 8006258:	4621      	mov	r1, r4
 800625a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800625e:	3b30      	subs	r3, #48	; 0x30
 8006260:	2b09      	cmp	r3, #9
 8006262:	d94d      	bls.n	8006300 <_svfiprintf_r+0x17c>
 8006264:	b1b0      	cbz	r0, 8006294 <_svfiprintf_r+0x110>
 8006266:	9207      	str	r2, [sp, #28]
 8006268:	e014      	b.n	8006294 <_svfiprintf_r+0x110>
 800626a:	eba0 0308 	sub.w	r3, r0, r8
 800626e:	fa09 f303 	lsl.w	r3, r9, r3
 8006272:	4313      	orrs	r3, r2
 8006274:	9304      	str	r3, [sp, #16]
 8006276:	46a2      	mov	sl, r4
 8006278:	e7d2      	b.n	8006220 <_svfiprintf_r+0x9c>
 800627a:	9b03      	ldr	r3, [sp, #12]
 800627c:	1d19      	adds	r1, r3, #4
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	9103      	str	r1, [sp, #12]
 8006282:	2b00      	cmp	r3, #0
 8006284:	bfbb      	ittet	lt
 8006286:	425b      	neglt	r3, r3
 8006288:	f042 0202 	orrlt.w	r2, r2, #2
 800628c:	9307      	strge	r3, [sp, #28]
 800628e:	9307      	strlt	r3, [sp, #28]
 8006290:	bfb8      	it	lt
 8006292:	9204      	strlt	r2, [sp, #16]
 8006294:	7823      	ldrb	r3, [r4, #0]
 8006296:	2b2e      	cmp	r3, #46	; 0x2e
 8006298:	d10c      	bne.n	80062b4 <_svfiprintf_r+0x130>
 800629a:	7863      	ldrb	r3, [r4, #1]
 800629c:	2b2a      	cmp	r3, #42	; 0x2a
 800629e:	d134      	bne.n	800630a <_svfiprintf_r+0x186>
 80062a0:	9b03      	ldr	r3, [sp, #12]
 80062a2:	1d1a      	adds	r2, r3, #4
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	9203      	str	r2, [sp, #12]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	bfb8      	it	lt
 80062ac:	f04f 33ff 	movlt.w	r3, #4294967295
 80062b0:	3402      	adds	r4, #2
 80062b2:	9305      	str	r3, [sp, #20]
 80062b4:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8006370 <_svfiprintf_r+0x1ec>
 80062b8:	7821      	ldrb	r1, [r4, #0]
 80062ba:	2203      	movs	r2, #3
 80062bc:	4650      	mov	r0, sl
 80062be:	f7f9 ff5f 	bl	8000180 <memchr>
 80062c2:	b138      	cbz	r0, 80062d4 <_svfiprintf_r+0x150>
 80062c4:	9b04      	ldr	r3, [sp, #16]
 80062c6:	eba0 000a 	sub.w	r0, r0, sl
 80062ca:	2240      	movs	r2, #64	; 0x40
 80062cc:	4082      	lsls	r2, r0
 80062ce:	4313      	orrs	r3, r2
 80062d0:	3401      	adds	r4, #1
 80062d2:	9304      	str	r3, [sp, #16]
 80062d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062d8:	4826      	ldr	r0, [pc, #152]	; (8006374 <_svfiprintf_r+0x1f0>)
 80062da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80062de:	2206      	movs	r2, #6
 80062e0:	f7f9 ff4e 	bl	8000180 <memchr>
 80062e4:	2800      	cmp	r0, #0
 80062e6:	d038      	beq.n	800635a <_svfiprintf_r+0x1d6>
 80062e8:	4b23      	ldr	r3, [pc, #140]	; (8006378 <_svfiprintf_r+0x1f4>)
 80062ea:	bb1b      	cbnz	r3, 8006334 <_svfiprintf_r+0x1b0>
 80062ec:	9b03      	ldr	r3, [sp, #12]
 80062ee:	3307      	adds	r3, #7
 80062f0:	f023 0307 	bic.w	r3, r3, #7
 80062f4:	3308      	adds	r3, #8
 80062f6:	9303      	str	r3, [sp, #12]
 80062f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062fa:	4433      	add	r3, r6
 80062fc:	9309      	str	r3, [sp, #36]	; 0x24
 80062fe:	e768      	b.n	80061d2 <_svfiprintf_r+0x4e>
 8006300:	fb0c 3202 	mla	r2, ip, r2, r3
 8006304:	460c      	mov	r4, r1
 8006306:	2001      	movs	r0, #1
 8006308:	e7a6      	b.n	8006258 <_svfiprintf_r+0xd4>
 800630a:	2300      	movs	r3, #0
 800630c:	3401      	adds	r4, #1
 800630e:	9305      	str	r3, [sp, #20]
 8006310:	4619      	mov	r1, r3
 8006312:	f04f 0c0a 	mov.w	ip, #10
 8006316:	4620      	mov	r0, r4
 8006318:	f810 2b01 	ldrb.w	r2, [r0], #1
 800631c:	3a30      	subs	r2, #48	; 0x30
 800631e:	2a09      	cmp	r2, #9
 8006320:	d903      	bls.n	800632a <_svfiprintf_r+0x1a6>
 8006322:	2b00      	cmp	r3, #0
 8006324:	d0c6      	beq.n	80062b4 <_svfiprintf_r+0x130>
 8006326:	9105      	str	r1, [sp, #20]
 8006328:	e7c4      	b.n	80062b4 <_svfiprintf_r+0x130>
 800632a:	fb0c 2101 	mla	r1, ip, r1, r2
 800632e:	4604      	mov	r4, r0
 8006330:	2301      	movs	r3, #1
 8006332:	e7f0      	b.n	8006316 <_svfiprintf_r+0x192>
 8006334:	ab03      	add	r3, sp, #12
 8006336:	9300      	str	r3, [sp, #0]
 8006338:	462a      	mov	r2, r5
 800633a:	4b10      	ldr	r3, [pc, #64]	; (800637c <_svfiprintf_r+0x1f8>)
 800633c:	a904      	add	r1, sp, #16
 800633e:	4638      	mov	r0, r7
 8006340:	f7fd fe9c 	bl	800407c <_printf_float>
 8006344:	1c42      	adds	r2, r0, #1
 8006346:	4606      	mov	r6, r0
 8006348:	d1d6      	bne.n	80062f8 <_svfiprintf_r+0x174>
 800634a:	89ab      	ldrh	r3, [r5, #12]
 800634c:	065b      	lsls	r3, r3, #25
 800634e:	f53f af2d 	bmi.w	80061ac <_svfiprintf_r+0x28>
 8006352:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006354:	b01d      	add	sp, #116	; 0x74
 8006356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800635a:	ab03      	add	r3, sp, #12
 800635c:	9300      	str	r3, [sp, #0]
 800635e:	462a      	mov	r2, r5
 8006360:	4b06      	ldr	r3, [pc, #24]	; (800637c <_svfiprintf_r+0x1f8>)
 8006362:	a904      	add	r1, sp, #16
 8006364:	4638      	mov	r0, r7
 8006366:	f7fe f923 	bl	80045b0 <_printf_i>
 800636a:	e7eb      	b.n	8006344 <_svfiprintf_r+0x1c0>
 800636c:	08006efc 	.word	0x08006efc
 8006370:	08006f02 	.word	0x08006f02
 8006374:	08006f06 	.word	0x08006f06
 8006378:	0800407d 	.word	0x0800407d
 800637c:	080060d1 	.word	0x080060d1

08006380 <__sflush_r>:
 8006380:	898a      	ldrh	r2, [r1, #12]
 8006382:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006384:	4605      	mov	r5, r0
 8006386:	0710      	lsls	r0, r2, #28
 8006388:	460c      	mov	r4, r1
 800638a:	d457      	bmi.n	800643c <__sflush_r+0xbc>
 800638c:	684b      	ldr	r3, [r1, #4]
 800638e:	2b00      	cmp	r3, #0
 8006390:	dc04      	bgt.n	800639c <__sflush_r+0x1c>
 8006392:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006394:	2b00      	cmp	r3, #0
 8006396:	dc01      	bgt.n	800639c <__sflush_r+0x1c>
 8006398:	2000      	movs	r0, #0
 800639a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800639c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800639e:	2e00      	cmp	r6, #0
 80063a0:	d0fa      	beq.n	8006398 <__sflush_r+0x18>
 80063a2:	2300      	movs	r3, #0
 80063a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80063a8:	682f      	ldr	r7, [r5, #0]
 80063aa:	6a21      	ldr	r1, [r4, #32]
 80063ac:	602b      	str	r3, [r5, #0]
 80063ae:	d032      	beq.n	8006416 <__sflush_r+0x96>
 80063b0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80063b2:	89a3      	ldrh	r3, [r4, #12]
 80063b4:	075a      	lsls	r2, r3, #29
 80063b6:	d505      	bpl.n	80063c4 <__sflush_r+0x44>
 80063b8:	6863      	ldr	r3, [r4, #4]
 80063ba:	1ac0      	subs	r0, r0, r3
 80063bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80063be:	b10b      	cbz	r3, 80063c4 <__sflush_r+0x44>
 80063c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80063c2:	1ac0      	subs	r0, r0, r3
 80063c4:	2300      	movs	r3, #0
 80063c6:	4602      	mov	r2, r0
 80063c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80063ca:	6a21      	ldr	r1, [r4, #32]
 80063cc:	4628      	mov	r0, r5
 80063ce:	47b0      	blx	r6
 80063d0:	1c43      	adds	r3, r0, #1
 80063d2:	89a3      	ldrh	r3, [r4, #12]
 80063d4:	d106      	bne.n	80063e4 <__sflush_r+0x64>
 80063d6:	6829      	ldr	r1, [r5, #0]
 80063d8:	291d      	cmp	r1, #29
 80063da:	d82b      	bhi.n	8006434 <__sflush_r+0xb4>
 80063dc:	4a28      	ldr	r2, [pc, #160]	; (8006480 <__sflush_r+0x100>)
 80063de:	410a      	asrs	r2, r1
 80063e0:	07d6      	lsls	r6, r2, #31
 80063e2:	d427      	bmi.n	8006434 <__sflush_r+0xb4>
 80063e4:	2200      	movs	r2, #0
 80063e6:	6062      	str	r2, [r4, #4]
 80063e8:	04d9      	lsls	r1, r3, #19
 80063ea:	6922      	ldr	r2, [r4, #16]
 80063ec:	6022      	str	r2, [r4, #0]
 80063ee:	d504      	bpl.n	80063fa <__sflush_r+0x7a>
 80063f0:	1c42      	adds	r2, r0, #1
 80063f2:	d101      	bne.n	80063f8 <__sflush_r+0x78>
 80063f4:	682b      	ldr	r3, [r5, #0]
 80063f6:	b903      	cbnz	r3, 80063fa <__sflush_r+0x7a>
 80063f8:	6560      	str	r0, [r4, #84]	; 0x54
 80063fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80063fc:	602f      	str	r7, [r5, #0]
 80063fe:	2900      	cmp	r1, #0
 8006400:	d0ca      	beq.n	8006398 <__sflush_r+0x18>
 8006402:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006406:	4299      	cmp	r1, r3
 8006408:	d002      	beq.n	8006410 <__sflush_r+0x90>
 800640a:	4628      	mov	r0, r5
 800640c:	f7ff f9ec 	bl	80057e8 <_free_r>
 8006410:	2000      	movs	r0, #0
 8006412:	6360      	str	r0, [r4, #52]	; 0x34
 8006414:	e7c1      	b.n	800639a <__sflush_r+0x1a>
 8006416:	2301      	movs	r3, #1
 8006418:	4628      	mov	r0, r5
 800641a:	47b0      	blx	r6
 800641c:	1c41      	adds	r1, r0, #1
 800641e:	d1c8      	bne.n	80063b2 <__sflush_r+0x32>
 8006420:	682b      	ldr	r3, [r5, #0]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d0c5      	beq.n	80063b2 <__sflush_r+0x32>
 8006426:	2b1d      	cmp	r3, #29
 8006428:	d001      	beq.n	800642e <__sflush_r+0xae>
 800642a:	2b16      	cmp	r3, #22
 800642c:	d101      	bne.n	8006432 <__sflush_r+0xb2>
 800642e:	602f      	str	r7, [r5, #0]
 8006430:	e7b2      	b.n	8006398 <__sflush_r+0x18>
 8006432:	89a3      	ldrh	r3, [r4, #12]
 8006434:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006438:	81a3      	strh	r3, [r4, #12]
 800643a:	e7ae      	b.n	800639a <__sflush_r+0x1a>
 800643c:	690f      	ldr	r7, [r1, #16]
 800643e:	2f00      	cmp	r7, #0
 8006440:	d0aa      	beq.n	8006398 <__sflush_r+0x18>
 8006442:	0793      	lsls	r3, r2, #30
 8006444:	680e      	ldr	r6, [r1, #0]
 8006446:	bf08      	it	eq
 8006448:	694b      	ldreq	r3, [r1, #20]
 800644a:	600f      	str	r7, [r1, #0]
 800644c:	bf18      	it	ne
 800644e:	2300      	movne	r3, #0
 8006450:	1bf6      	subs	r6, r6, r7
 8006452:	608b      	str	r3, [r1, #8]
 8006454:	2e00      	cmp	r6, #0
 8006456:	dd9f      	ble.n	8006398 <__sflush_r+0x18>
 8006458:	6a21      	ldr	r1, [r4, #32]
 800645a:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800645e:	4633      	mov	r3, r6
 8006460:	463a      	mov	r2, r7
 8006462:	4628      	mov	r0, r5
 8006464:	47e0      	blx	ip
 8006466:	2800      	cmp	r0, #0
 8006468:	dc06      	bgt.n	8006478 <__sflush_r+0xf8>
 800646a:	89a3      	ldrh	r3, [r4, #12]
 800646c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006470:	81a3      	strh	r3, [r4, #12]
 8006472:	f04f 30ff 	mov.w	r0, #4294967295
 8006476:	e790      	b.n	800639a <__sflush_r+0x1a>
 8006478:	4407      	add	r7, r0
 800647a:	1a36      	subs	r6, r6, r0
 800647c:	e7ea      	b.n	8006454 <__sflush_r+0xd4>
 800647e:	bf00      	nop
 8006480:	dfbffffe 	.word	0xdfbffffe

08006484 <_fflush_r>:
 8006484:	b538      	push	{r3, r4, r5, lr}
 8006486:	690b      	ldr	r3, [r1, #16]
 8006488:	4605      	mov	r5, r0
 800648a:	460c      	mov	r4, r1
 800648c:	b913      	cbnz	r3, 8006494 <_fflush_r+0x10>
 800648e:	2500      	movs	r5, #0
 8006490:	4628      	mov	r0, r5
 8006492:	bd38      	pop	{r3, r4, r5, pc}
 8006494:	b118      	cbz	r0, 800649e <_fflush_r+0x1a>
 8006496:	6a03      	ldr	r3, [r0, #32]
 8006498:	b90b      	cbnz	r3, 800649e <_fflush_r+0x1a>
 800649a:	f7fe fa25 	bl	80048e8 <__sinit>
 800649e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d0f3      	beq.n	800648e <_fflush_r+0xa>
 80064a6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80064a8:	07d0      	lsls	r0, r2, #31
 80064aa:	d404      	bmi.n	80064b6 <_fflush_r+0x32>
 80064ac:	0599      	lsls	r1, r3, #22
 80064ae:	d402      	bmi.n	80064b6 <_fflush_r+0x32>
 80064b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80064b2:	f7fe fb2f 	bl	8004b14 <__retarget_lock_acquire_recursive>
 80064b6:	4628      	mov	r0, r5
 80064b8:	4621      	mov	r1, r4
 80064ba:	f7ff ff61 	bl	8006380 <__sflush_r>
 80064be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80064c0:	07da      	lsls	r2, r3, #31
 80064c2:	4605      	mov	r5, r0
 80064c4:	d4e4      	bmi.n	8006490 <_fflush_r+0xc>
 80064c6:	89a3      	ldrh	r3, [r4, #12]
 80064c8:	059b      	lsls	r3, r3, #22
 80064ca:	d4e1      	bmi.n	8006490 <_fflush_r+0xc>
 80064cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80064ce:	f7fe fb22 	bl	8004b16 <__retarget_lock_release_recursive>
 80064d2:	e7dd      	b.n	8006490 <_fflush_r+0xc>

080064d4 <memmove>:
 80064d4:	4288      	cmp	r0, r1
 80064d6:	b510      	push	{r4, lr}
 80064d8:	eb01 0402 	add.w	r4, r1, r2
 80064dc:	d902      	bls.n	80064e4 <memmove+0x10>
 80064de:	4284      	cmp	r4, r0
 80064e0:	4623      	mov	r3, r4
 80064e2:	d807      	bhi.n	80064f4 <memmove+0x20>
 80064e4:	1e43      	subs	r3, r0, #1
 80064e6:	42a1      	cmp	r1, r4
 80064e8:	d008      	beq.n	80064fc <memmove+0x28>
 80064ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80064ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80064f2:	e7f8      	b.n	80064e6 <memmove+0x12>
 80064f4:	4402      	add	r2, r0
 80064f6:	4601      	mov	r1, r0
 80064f8:	428a      	cmp	r2, r1
 80064fa:	d100      	bne.n	80064fe <memmove+0x2a>
 80064fc:	bd10      	pop	{r4, pc}
 80064fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006502:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006506:	e7f7      	b.n	80064f8 <memmove+0x24>

08006508 <_sbrk_r>:
 8006508:	b538      	push	{r3, r4, r5, lr}
 800650a:	4d06      	ldr	r5, [pc, #24]	; (8006524 <_sbrk_r+0x1c>)
 800650c:	2300      	movs	r3, #0
 800650e:	4604      	mov	r4, r0
 8006510:	4608      	mov	r0, r1
 8006512:	602b      	str	r3, [r5, #0]
 8006514:	f7fb f898 	bl	8001648 <_sbrk>
 8006518:	1c43      	adds	r3, r0, #1
 800651a:	d102      	bne.n	8006522 <_sbrk_r+0x1a>
 800651c:	682b      	ldr	r3, [r5, #0]
 800651e:	b103      	cbz	r3, 8006522 <_sbrk_r+0x1a>
 8006520:	6023      	str	r3, [r4, #0]
 8006522:	bd38      	pop	{r3, r4, r5, pc}
 8006524:	200003c8 	.word	0x200003c8

08006528 <memcpy>:
 8006528:	440a      	add	r2, r1
 800652a:	4291      	cmp	r1, r2
 800652c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006530:	d100      	bne.n	8006534 <memcpy+0xc>
 8006532:	4770      	bx	lr
 8006534:	b510      	push	{r4, lr}
 8006536:	f811 4b01 	ldrb.w	r4, [r1], #1
 800653a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800653e:	4291      	cmp	r1, r2
 8006540:	d1f9      	bne.n	8006536 <memcpy+0xe>
 8006542:	bd10      	pop	{r4, pc}

08006544 <__assert_func>:
 8006544:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006546:	4614      	mov	r4, r2
 8006548:	461a      	mov	r2, r3
 800654a:	4b09      	ldr	r3, [pc, #36]	; (8006570 <__assert_func+0x2c>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4605      	mov	r5, r0
 8006550:	68d8      	ldr	r0, [r3, #12]
 8006552:	b14c      	cbz	r4, 8006568 <__assert_func+0x24>
 8006554:	4b07      	ldr	r3, [pc, #28]	; (8006574 <__assert_func+0x30>)
 8006556:	9100      	str	r1, [sp, #0]
 8006558:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800655c:	4906      	ldr	r1, [pc, #24]	; (8006578 <__assert_func+0x34>)
 800655e:	462b      	mov	r3, r5
 8006560:	f000 f870 	bl	8006644 <fiprintf>
 8006564:	f000 f880 	bl	8006668 <abort>
 8006568:	4b04      	ldr	r3, [pc, #16]	; (800657c <__assert_func+0x38>)
 800656a:	461c      	mov	r4, r3
 800656c:	e7f3      	b.n	8006556 <__assert_func+0x12>
 800656e:	bf00      	nop
 8006570:	20000064 	.word	0x20000064
 8006574:	08006f17 	.word	0x08006f17
 8006578:	08006f24 	.word	0x08006f24
 800657c:	08006f52 	.word	0x08006f52

08006580 <_calloc_r>:
 8006580:	b570      	push	{r4, r5, r6, lr}
 8006582:	fba1 5402 	umull	r5, r4, r1, r2
 8006586:	b934      	cbnz	r4, 8006596 <_calloc_r+0x16>
 8006588:	4629      	mov	r1, r5
 800658a:	f7ff f99f 	bl	80058cc <_malloc_r>
 800658e:	4606      	mov	r6, r0
 8006590:	b928      	cbnz	r0, 800659e <_calloc_r+0x1e>
 8006592:	4630      	mov	r0, r6
 8006594:	bd70      	pop	{r4, r5, r6, pc}
 8006596:	220c      	movs	r2, #12
 8006598:	6002      	str	r2, [r0, #0]
 800659a:	2600      	movs	r6, #0
 800659c:	e7f9      	b.n	8006592 <_calloc_r+0x12>
 800659e:	462a      	mov	r2, r5
 80065a0:	4621      	mov	r1, r4
 80065a2:	f7fe fa3a 	bl	8004a1a <memset>
 80065a6:	e7f4      	b.n	8006592 <_calloc_r+0x12>

080065a8 <__ascii_mbtowc>:
 80065a8:	b082      	sub	sp, #8
 80065aa:	b901      	cbnz	r1, 80065ae <__ascii_mbtowc+0x6>
 80065ac:	a901      	add	r1, sp, #4
 80065ae:	b142      	cbz	r2, 80065c2 <__ascii_mbtowc+0x1a>
 80065b0:	b14b      	cbz	r3, 80065c6 <__ascii_mbtowc+0x1e>
 80065b2:	7813      	ldrb	r3, [r2, #0]
 80065b4:	600b      	str	r3, [r1, #0]
 80065b6:	7812      	ldrb	r2, [r2, #0]
 80065b8:	1e10      	subs	r0, r2, #0
 80065ba:	bf18      	it	ne
 80065bc:	2001      	movne	r0, #1
 80065be:	b002      	add	sp, #8
 80065c0:	4770      	bx	lr
 80065c2:	4610      	mov	r0, r2
 80065c4:	e7fb      	b.n	80065be <__ascii_mbtowc+0x16>
 80065c6:	f06f 0001 	mvn.w	r0, #1
 80065ca:	e7f8      	b.n	80065be <__ascii_mbtowc+0x16>

080065cc <_realloc_r>:
 80065cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065d0:	4680      	mov	r8, r0
 80065d2:	4614      	mov	r4, r2
 80065d4:	460e      	mov	r6, r1
 80065d6:	b921      	cbnz	r1, 80065e2 <_realloc_r+0x16>
 80065d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80065dc:	4611      	mov	r1, r2
 80065de:	f7ff b975 	b.w	80058cc <_malloc_r>
 80065e2:	b92a      	cbnz	r2, 80065f0 <_realloc_r+0x24>
 80065e4:	f7ff f900 	bl	80057e8 <_free_r>
 80065e8:	4625      	mov	r5, r4
 80065ea:	4628      	mov	r0, r5
 80065ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065f0:	f000 f841 	bl	8006676 <_malloc_usable_size_r>
 80065f4:	4284      	cmp	r4, r0
 80065f6:	4607      	mov	r7, r0
 80065f8:	d802      	bhi.n	8006600 <_realloc_r+0x34>
 80065fa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80065fe:	d812      	bhi.n	8006626 <_realloc_r+0x5a>
 8006600:	4621      	mov	r1, r4
 8006602:	4640      	mov	r0, r8
 8006604:	f7ff f962 	bl	80058cc <_malloc_r>
 8006608:	4605      	mov	r5, r0
 800660a:	2800      	cmp	r0, #0
 800660c:	d0ed      	beq.n	80065ea <_realloc_r+0x1e>
 800660e:	42bc      	cmp	r4, r7
 8006610:	4622      	mov	r2, r4
 8006612:	4631      	mov	r1, r6
 8006614:	bf28      	it	cs
 8006616:	463a      	movcs	r2, r7
 8006618:	f7ff ff86 	bl	8006528 <memcpy>
 800661c:	4631      	mov	r1, r6
 800661e:	4640      	mov	r0, r8
 8006620:	f7ff f8e2 	bl	80057e8 <_free_r>
 8006624:	e7e1      	b.n	80065ea <_realloc_r+0x1e>
 8006626:	4635      	mov	r5, r6
 8006628:	e7df      	b.n	80065ea <_realloc_r+0x1e>

0800662a <__ascii_wctomb>:
 800662a:	4603      	mov	r3, r0
 800662c:	4608      	mov	r0, r1
 800662e:	b141      	cbz	r1, 8006642 <__ascii_wctomb+0x18>
 8006630:	2aff      	cmp	r2, #255	; 0xff
 8006632:	d904      	bls.n	800663e <__ascii_wctomb+0x14>
 8006634:	228a      	movs	r2, #138	; 0x8a
 8006636:	601a      	str	r2, [r3, #0]
 8006638:	f04f 30ff 	mov.w	r0, #4294967295
 800663c:	4770      	bx	lr
 800663e:	700a      	strb	r2, [r1, #0]
 8006640:	2001      	movs	r0, #1
 8006642:	4770      	bx	lr

08006644 <fiprintf>:
 8006644:	b40e      	push	{r1, r2, r3}
 8006646:	b503      	push	{r0, r1, lr}
 8006648:	4601      	mov	r1, r0
 800664a:	ab03      	add	r3, sp, #12
 800664c:	4805      	ldr	r0, [pc, #20]	; (8006664 <fiprintf+0x20>)
 800664e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006652:	6800      	ldr	r0, [r0, #0]
 8006654:	9301      	str	r3, [sp, #4]
 8006656:	f000 f83d 	bl	80066d4 <_vfiprintf_r>
 800665a:	b002      	add	sp, #8
 800665c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006660:	b003      	add	sp, #12
 8006662:	4770      	bx	lr
 8006664:	20000064 	.word	0x20000064

08006668 <abort>:
 8006668:	b508      	push	{r3, lr}
 800666a:	2006      	movs	r0, #6
 800666c:	f000 fa0a 	bl	8006a84 <raise>
 8006670:	2001      	movs	r0, #1
 8006672:	f7fa ff75 	bl	8001560 <_exit>

08006676 <_malloc_usable_size_r>:
 8006676:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800667a:	1f18      	subs	r0, r3, #4
 800667c:	2b00      	cmp	r3, #0
 800667e:	bfbc      	itt	lt
 8006680:	580b      	ldrlt	r3, [r1, r0]
 8006682:	18c0      	addlt	r0, r0, r3
 8006684:	4770      	bx	lr

08006686 <__sfputc_r>:
 8006686:	6893      	ldr	r3, [r2, #8]
 8006688:	3b01      	subs	r3, #1
 800668a:	2b00      	cmp	r3, #0
 800668c:	b410      	push	{r4}
 800668e:	6093      	str	r3, [r2, #8]
 8006690:	da07      	bge.n	80066a2 <__sfputc_r+0x1c>
 8006692:	6994      	ldr	r4, [r2, #24]
 8006694:	42a3      	cmp	r3, r4
 8006696:	db01      	blt.n	800669c <__sfputc_r+0x16>
 8006698:	290a      	cmp	r1, #10
 800669a:	d102      	bne.n	80066a2 <__sfputc_r+0x1c>
 800669c:	bc10      	pop	{r4}
 800669e:	f000 b933 	b.w	8006908 <__swbuf_r>
 80066a2:	6813      	ldr	r3, [r2, #0]
 80066a4:	1c58      	adds	r0, r3, #1
 80066a6:	6010      	str	r0, [r2, #0]
 80066a8:	7019      	strb	r1, [r3, #0]
 80066aa:	4608      	mov	r0, r1
 80066ac:	bc10      	pop	{r4}
 80066ae:	4770      	bx	lr

080066b0 <__sfputs_r>:
 80066b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066b2:	4606      	mov	r6, r0
 80066b4:	460f      	mov	r7, r1
 80066b6:	4614      	mov	r4, r2
 80066b8:	18d5      	adds	r5, r2, r3
 80066ba:	42ac      	cmp	r4, r5
 80066bc:	d101      	bne.n	80066c2 <__sfputs_r+0x12>
 80066be:	2000      	movs	r0, #0
 80066c0:	e007      	b.n	80066d2 <__sfputs_r+0x22>
 80066c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066c6:	463a      	mov	r2, r7
 80066c8:	4630      	mov	r0, r6
 80066ca:	f7ff ffdc 	bl	8006686 <__sfputc_r>
 80066ce:	1c43      	adds	r3, r0, #1
 80066d0:	d1f3      	bne.n	80066ba <__sfputs_r+0xa>
 80066d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080066d4 <_vfiprintf_r>:
 80066d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066d8:	460d      	mov	r5, r1
 80066da:	b09d      	sub	sp, #116	; 0x74
 80066dc:	4614      	mov	r4, r2
 80066de:	4698      	mov	r8, r3
 80066e0:	4606      	mov	r6, r0
 80066e2:	b118      	cbz	r0, 80066ec <_vfiprintf_r+0x18>
 80066e4:	6a03      	ldr	r3, [r0, #32]
 80066e6:	b90b      	cbnz	r3, 80066ec <_vfiprintf_r+0x18>
 80066e8:	f7fe f8fe 	bl	80048e8 <__sinit>
 80066ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80066ee:	07d9      	lsls	r1, r3, #31
 80066f0:	d405      	bmi.n	80066fe <_vfiprintf_r+0x2a>
 80066f2:	89ab      	ldrh	r3, [r5, #12]
 80066f4:	059a      	lsls	r2, r3, #22
 80066f6:	d402      	bmi.n	80066fe <_vfiprintf_r+0x2a>
 80066f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80066fa:	f7fe fa0b 	bl	8004b14 <__retarget_lock_acquire_recursive>
 80066fe:	89ab      	ldrh	r3, [r5, #12]
 8006700:	071b      	lsls	r3, r3, #28
 8006702:	d501      	bpl.n	8006708 <_vfiprintf_r+0x34>
 8006704:	692b      	ldr	r3, [r5, #16]
 8006706:	b99b      	cbnz	r3, 8006730 <_vfiprintf_r+0x5c>
 8006708:	4629      	mov	r1, r5
 800670a:	4630      	mov	r0, r6
 800670c:	f000 f93a 	bl	8006984 <__swsetup_r>
 8006710:	b170      	cbz	r0, 8006730 <_vfiprintf_r+0x5c>
 8006712:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006714:	07dc      	lsls	r4, r3, #31
 8006716:	d504      	bpl.n	8006722 <_vfiprintf_r+0x4e>
 8006718:	f04f 30ff 	mov.w	r0, #4294967295
 800671c:	b01d      	add	sp, #116	; 0x74
 800671e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006722:	89ab      	ldrh	r3, [r5, #12]
 8006724:	0598      	lsls	r0, r3, #22
 8006726:	d4f7      	bmi.n	8006718 <_vfiprintf_r+0x44>
 8006728:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800672a:	f7fe f9f4 	bl	8004b16 <__retarget_lock_release_recursive>
 800672e:	e7f3      	b.n	8006718 <_vfiprintf_r+0x44>
 8006730:	2300      	movs	r3, #0
 8006732:	9309      	str	r3, [sp, #36]	; 0x24
 8006734:	2320      	movs	r3, #32
 8006736:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800673a:	f8cd 800c 	str.w	r8, [sp, #12]
 800673e:	2330      	movs	r3, #48	; 0x30
 8006740:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80068f4 <_vfiprintf_r+0x220>
 8006744:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006748:	f04f 0901 	mov.w	r9, #1
 800674c:	4623      	mov	r3, r4
 800674e:	469a      	mov	sl, r3
 8006750:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006754:	b10a      	cbz	r2, 800675a <_vfiprintf_r+0x86>
 8006756:	2a25      	cmp	r2, #37	; 0x25
 8006758:	d1f9      	bne.n	800674e <_vfiprintf_r+0x7a>
 800675a:	ebba 0b04 	subs.w	fp, sl, r4
 800675e:	d00b      	beq.n	8006778 <_vfiprintf_r+0xa4>
 8006760:	465b      	mov	r3, fp
 8006762:	4622      	mov	r2, r4
 8006764:	4629      	mov	r1, r5
 8006766:	4630      	mov	r0, r6
 8006768:	f7ff ffa2 	bl	80066b0 <__sfputs_r>
 800676c:	3001      	adds	r0, #1
 800676e:	f000 80a9 	beq.w	80068c4 <_vfiprintf_r+0x1f0>
 8006772:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006774:	445a      	add	r2, fp
 8006776:	9209      	str	r2, [sp, #36]	; 0x24
 8006778:	f89a 3000 	ldrb.w	r3, [sl]
 800677c:	2b00      	cmp	r3, #0
 800677e:	f000 80a1 	beq.w	80068c4 <_vfiprintf_r+0x1f0>
 8006782:	2300      	movs	r3, #0
 8006784:	f04f 32ff 	mov.w	r2, #4294967295
 8006788:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800678c:	f10a 0a01 	add.w	sl, sl, #1
 8006790:	9304      	str	r3, [sp, #16]
 8006792:	9307      	str	r3, [sp, #28]
 8006794:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006798:	931a      	str	r3, [sp, #104]	; 0x68
 800679a:	4654      	mov	r4, sl
 800679c:	2205      	movs	r2, #5
 800679e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067a2:	4854      	ldr	r0, [pc, #336]	; (80068f4 <_vfiprintf_r+0x220>)
 80067a4:	f7f9 fcec 	bl	8000180 <memchr>
 80067a8:	9a04      	ldr	r2, [sp, #16]
 80067aa:	b9d8      	cbnz	r0, 80067e4 <_vfiprintf_r+0x110>
 80067ac:	06d1      	lsls	r1, r2, #27
 80067ae:	bf44      	itt	mi
 80067b0:	2320      	movmi	r3, #32
 80067b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80067b6:	0713      	lsls	r3, r2, #28
 80067b8:	bf44      	itt	mi
 80067ba:	232b      	movmi	r3, #43	; 0x2b
 80067bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80067c0:	f89a 3000 	ldrb.w	r3, [sl]
 80067c4:	2b2a      	cmp	r3, #42	; 0x2a
 80067c6:	d015      	beq.n	80067f4 <_vfiprintf_r+0x120>
 80067c8:	9a07      	ldr	r2, [sp, #28]
 80067ca:	4654      	mov	r4, sl
 80067cc:	2000      	movs	r0, #0
 80067ce:	f04f 0c0a 	mov.w	ip, #10
 80067d2:	4621      	mov	r1, r4
 80067d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80067d8:	3b30      	subs	r3, #48	; 0x30
 80067da:	2b09      	cmp	r3, #9
 80067dc:	d94d      	bls.n	800687a <_vfiprintf_r+0x1a6>
 80067de:	b1b0      	cbz	r0, 800680e <_vfiprintf_r+0x13a>
 80067e0:	9207      	str	r2, [sp, #28]
 80067e2:	e014      	b.n	800680e <_vfiprintf_r+0x13a>
 80067e4:	eba0 0308 	sub.w	r3, r0, r8
 80067e8:	fa09 f303 	lsl.w	r3, r9, r3
 80067ec:	4313      	orrs	r3, r2
 80067ee:	9304      	str	r3, [sp, #16]
 80067f0:	46a2      	mov	sl, r4
 80067f2:	e7d2      	b.n	800679a <_vfiprintf_r+0xc6>
 80067f4:	9b03      	ldr	r3, [sp, #12]
 80067f6:	1d19      	adds	r1, r3, #4
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	9103      	str	r1, [sp, #12]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	bfbb      	ittet	lt
 8006800:	425b      	neglt	r3, r3
 8006802:	f042 0202 	orrlt.w	r2, r2, #2
 8006806:	9307      	strge	r3, [sp, #28]
 8006808:	9307      	strlt	r3, [sp, #28]
 800680a:	bfb8      	it	lt
 800680c:	9204      	strlt	r2, [sp, #16]
 800680e:	7823      	ldrb	r3, [r4, #0]
 8006810:	2b2e      	cmp	r3, #46	; 0x2e
 8006812:	d10c      	bne.n	800682e <_vfiprintf_r+0x15a>
 8006814:	7863      	ldrb	r3, [r4, #1]
 8006816:	2b2a      	cmp	r3, #42	; 0x2a
 8006818:	d134      	bne.n	8006884 <_vfiprintf_r+0x1b0>
 800681a:	9b03      	ldr	r3, [sp, #12]
 800681c:	1d1a      	adds	r2, r3, #4
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	9203      	str	r2, [sp, #12]
 8006822:	2b00      	cmp	r3, #0
 8006824:	bfb8      	it	lt
 8006826:	f04f 33ff 	movlt.w	r3, #4294967295
 800682a:	3402      	adds	r4, #2
 800682c:	9305      	str	r3, [sp, #20]
 800682e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80068f8 <_vfiprintf_r+0x224>
 8006832:	7821      	ldrb	r1, [r4, #0]
 8006834:	2203      	movs	r2, #3
 8006836:	4650      	mov	r0, sl
 8006838:	f7f9 fca2 	bl	8000180 <memchr>
 800683c:	b138      	cbz	r0, 800684e <_vfiprintf_r+0x17a>
 800683e:	9b04      	ldr	r3, [sp, #16]
 8006840:	eba0 000a 	sub.w	r0, r0, sl
 8006844:	2240      	movs	r2, #64	; 0x40
 8006846:	4082      	lsls	r2, r0
 8006848:	4313      	orrs	r3, r2
 800684a:	3401      	adds	r4, #1
 800684c:	9304      	str	r3, [sp, #16]
 800684e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006852:	482a      	ldr	r0, [pc, #168]	; (80068fc <_vfiprintf_r+0x228>)
 8006854:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006858:	2206      	movs	r2, #6
 800685a:	f7f9 fc91 	bl	8000180 <memchr>
 800685e:	2800      	cmp	r0, #0
 8006860:	d03f      	beq.n	80068e2 <_vfiprintf_r+0x20e>
 8006862:	4b27      	ldr	r3, [pc, #156]	; (8006900 <_vfiprintf_r+0x22c>)
 8006864:	bb1b      	cbnz	r3, 80068ae <_vfiprintf_r+0x1da>
 8006866:	9b03      	ldr	r3, [sp, #12]
 8006868:	3307      	adds	r3, #7
 800686a:	f023 0307 	bic.w	r3, r3, #7
 800686e:	3308      	adds	r3, #8
 8006870:	9303      	str	r3, [sp, #12]
 8006872:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006874:	443b      	add	r3, r7
 8006876:	9309      	str	r3, [sp, #36]	; 0x24
 8006878:	e768      	b.n	800674c <_vfiprintf_r+0x78>
 800687a:	fb0c 3202 	mla	r2, ip, r2, r3
 800687e:	460c      	mov	r4, r1
 8006880:	2001      	movs	r0, #1
 8006882:	e7a6      	b.n	80067d2 <_vfiprintf_r+0xfe>
 8006884:	2300      	movs	r3, #0
 8006886:	3401      	adds	r4, #1
 8006888:	9305      	str	r3, [sp, #20]
 800688a:	4619      	mov	r1, r3
 800688c:	f04f 0c0a 	mov.w	ip, #10
 8006890:	4620      	mov	r0, r4
 8006892:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006896:	3a30      	subs	r2, #48	; 0x30
 8006898:	2a09      	cmp	r2, #9
 800689a:	d903      	bls.n	80068a4 <_vfiprintf_r+0x1d0>
 800689c:	2b00      	cmp	r3, #0
 800689e:	d0c6      	beq.n	800682e <_vfiprintf_r+0x15a>
 80068a0:	9105      	str	r1, [sp, #20]
 80068a2:	e7c4      	b.n	800682e <_vfiprintf_r+0x15a>
 80068a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80068a8:	4604      	mov	r4, r0
 80068aa:	2301      	movs	r3, #1
 80068ac:	e7f0      	b.n	8006890 <_vfiprintf_r+0x1bc>
 80068ae:	ab03      	add	r3, sp, #12
 80068b0:	9300      	str	r3, [sp, #0]
 80068b2:	462a      	mov	r2, r5
 80068b4:	4b13      	ldr	r3, [pc, #76]	; (8006904 <_vfiprintf_r+0x230>)
 80068b6:	a904      	add	r1, sp, #16
 80068b8:	4630      	mov	r0, r6
 80068ba:	f7fd fbdf 	bl	800407c <_printf_float>
 80068be:	4607      	mov	r7, r0
 80068c0:	1c78      	adds	r0, r7, #1
 80068c2:	d1d6      	bne.n	8006872 <_vfiprintf_r+0x19e>
 80068c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80068c6:	07d9      	lsls	r1, r3, #31
 80068c8:	d405      	bmi.n	80068d6 <_vfiprintf_r+0x202>
 80068ca:	89ab      	ldrh	r3, [r5, #12]
 80068cc:	059a      	lsls	r2, r3, #22
 80068ce:	d402      	bmi.n	80068d6 <_vfiprintf_r+0x202>
 80068d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80068d2:	f7fe f920 	bl	8004b16 <__retarget_lock_release_recursive>
 80068d6:	89ab      	ldrh	r3, [r5, #12]
 80068d8:	065b      	lsls	r3, r3, #25
 80068da:	f53f af1d 	bmi.w	8006718 <_vfiprintf_r+0x44>
 80068de:	9809      	ldr	r0, [sp, #36]	; 0x24
 80068e0:	e71c      	b.n	800671c <_vfiprintf_r+0x48>
 80068e2:	ab03      	add	r3, sp, #12
 80068e4:	9300      	str	r3, [sp, #0]
 80068e6:	462a      	mov	r2, r5
 80068e8:	4b06      	ldr	r3, [pc, #24]	; (8006904 <_vfiprintf_r+0x230>)
 80068ea:	a904      	add	r1, sp, #16
 80068ec:	4630      	mov	r0, r6
 80068ee:	f7fd fe5f 	bl	80045b0 <_printf_i>
 80068f2:	e7e4      	b.n	80068be <_vfiprintf_r+0x1ea>
 80068f4:	08006efc 	.word	0x08006efc
 80068f8:	08006f02 	.word	0x08006f02
 80068fc:	08006f06 	.word	0x08006f06
 8006900:	0800407d 	.word	0x0800407d
 8006904:	080066b1 	.word	0x080066b1

08006908 <__swbuf_r>:
 8006908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800690a:	460e      	mov	r6, r1
 800690c:	4614      	mov	r4, r2
 800690e:	4605      	mov	r5, r0
 8006910:	b118      	cbz	r0, 800691a <__swbuf_r+0x12>
 8006912:	6a03      	ldr	r3, [r0, #32]
 8006914:	b90b      	cbnz	r3, 800691a <__swbuf_r+0x12>
 8006916:	f7fd ffe7 	bl	80048e8 <__sinit>
 800691a:	69a3      	ldr	r3, [r4, #24]
 800691c:	60a3      	str	r3, [r4, #8]
 800691e:	89a3      	ldrh	r3, [r4, #12]
 8006920:	071a      	lsls	r2, r3, #28
 8006922:	d525      	bpl.n	8006970 <__swbuf_r+0x68>
 8006924:	6923      	ldr	r3, [r4, #16]
 8006926:	b31b      	cbz	r3, 8006970 <__swbuf_r+0x68>
 8006928:	6823      	ldr	r3, [r4, #0]
 800692a:	6922      	ldr	r2, [r4, #16]
 800692c:	1a98      	subs	r0, r3, r2
 800692e:	6963      	ldr	r3, [r4, #20]
 8006930:	b2f6      	uxtb	r6, r6
 8006932:	4283      	cmp	r3, r0
 8006934:	4637      	mov	r7, r6
 8006936:	dc04      	bgt.n	8006942 <__swbuf_r+0x3a>
 8006938:	4621      	mov	r1, r4
 800693a:	4628      	mov	r0, r5
 800693c:	f7ff fda2 	bl	8006484 <_fflush_r>
 8006940:	b9e0      	cbnz	r0, 800697c <__swbuf_r+0x74>
 8006942:	68a3      	ldr	r3, [r4, #8]
 8006944:	3b01      	subs	r3, #1
 8006946:	60a3      	str	r3, [r4, #8]
 8006948:	6823      	ldr	r3, [r4, #0]
 800694a:	1c5a      	adds	r2, r3, #1
 800694c:	6022      	str	r2, [r4, #0]
 800694e:	701e      	strb	r6, [r3, #0]
 8006950:	6962      	ldr	r2, [r4, #20]
 8006952:	1c43      	adds	r3, r0, #1
 8006954:	429a      	cmp	r2, r3
 8006956:	d004      	beq.n	8006962 <__swbuf_r+0x5a>
 8006958:	89a3      	ldrh	r3, [r4, #12]
 800695a:	07db      	lsls	r3, r3, #31
 800695c:	d506      	bpl.n	800696c <__swbuf_r+0x64>
 800695e:	2e0a      	cmp	r6, #10
 8006960:	d104      	bne.n	800696c <__swbuf_r+0x64>
 8006962:	4621      	mov	r1, r4
 8006964:	4628      	mov	r0, r5
 8006966:	f7ff fd8d 	bl	8006484 <_fflush_r>
 800696a:	b938      	cbnz	r0, 800697c <__swbuf_r+0x74>
 800696c:	4638      	mov	r0, r7
 800696e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006970:	4621      	mov	r1, r4
 8006972:	4628      	mov	r0, r5
 8006974:	f000 f806 	bl	8006984 <__swsetup_r>
 8006978:	2800      	cmp	r0, #0
 800697a:	d0d5      	beq.n	8006928 <__swbuf_r+0x20>
 800697c:	f04f 37ff 	mov.w	r7, #4294967295
 8006980:	e7f4      	b.n	800696c <__swbuf_r+0x64>
	...

08006984 <__swsetup_r>:
 8006984:	b538      	push	{r3, r4, r5, lr}
 8006986:	4b2a      	ldr	r3, [pc, #168]	; (8006a30 <__swsetup_r+0xac>)
 8006988:	4605      	mov	r5, r0
 800698a:	6818      	ldr	r0, [r3, #0]
 800698c:	460c      	mov	r4, r1
 800698e:	b118      	cbz	r0, 8006998 <__swsetup_r+0x14>
 8006990:	6a03      	ldr	r3, [r0, #32]
 8006992:	b90b      	cbnz	r3, 8006998 <__swsetup_r+0x14>
 8006994:	f7fd ffa8 	bl	80048e8 <__sinit>
 8006998:	89a3      	ldrh	r3, [r4, #12]
 800699a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800699e:	0718      	lsls	r0, r3, #28
 80069a0:	d422      	bmi.n	80069e8 <__swsetup_r+0x64>
 80069a2:	06d9      	lsls	r1, r3, #27
 80069a4:	d407      	bmi.n	80069b6 <__swsetup_r+0x32>
 80069a6:	2309      	movs	r3, #9
 80069a8:	602b      	str	r3, [r5, #0]
 80069aa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80069ae:	81a3      	strh	r3, [r4, #12]
 80069b0:	f04f 30ff 	mov.w	r0, #4294967295
 80069b4:	e034      	b.n	8006a20 <__swsetup_r+0x9c>
 80069b6:	0758      	lsls	r0, r3, #29
 80069b8:	d512      	bpl.n	80069e0 <__swsetup_r+0x5c>
 80069ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80069bc:	b141      	cbz	r1, 80069d0 <__swsetup_r+0x4c>
 80069be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80069c2:	4299      	cmp	r1, r3
 80069c4:	d002      	beq.n	80069cc <__swsetup_r+0x48>
 80069c6:	4628      	mov	r0, r5
 80069c8:	f7fe ff0e 	bl	80057e8 <_free_r>
 80069cc:	2300      	movs	r3, #0
 80069ce:	6363      	str	r3, [r4, #52]	; 0x34
 80069d0:	89a3      	ldrh	r3, [r4, #12]
 80069d2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80069d6:	81a3      	strh	r3, [r4, #12]
 80069d8:	2300      	movs	r3, #0
 80069da:	6063      	str	r3, [r4, #4]
 80069dc:	6923      	ldr	r3, [r4, #16]
 80069de:	6023      	str	r3, [r4, #0]
 80069e0:	89a3      	ldrh	r3, [r4, #12]
 80069e2:	f043 0308 	orr.w	r3, r3, #8
 80069e6:	81a3      	strh	r3, [r4, #12]
 80069e8:	6923      	ldr	r3, [r4, #16]
 80069ea:	b94b      	cbnz	r3, 8006a00 <__swsetup_r+0x7c>
 80069ec:	89a3      	ldrh	r3, [r4, #12]
 80069ee:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80069f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069f6:	d003      	beq.n	8006a00 <__swsetup_r+0x7c>
 80069f8:	4621      	mov	r1, r4
 80069fa:	4628      	mov	r0, r5
 80069fc:	f000 f884 	bl	8006b08 <__smakebuf_r>
 8006a00:	89a0      	ldrh	r0, [r4, #12]
 8006a02:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006a06:	f010 0301 	ands.w	r3, r0, #1
 8006a0a:	d00a      	beq.n	8006a22 <__swsetup_r+0x9e>
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	60a3      	str	r3, [r4, #8]
 8006a10:	6963      	ldr	r3, [r4, #20]
 8006a12:	425b      	negs	r3, r3
 8006a14:	61a3      	str	r3, [r4, #24]
 8006a16:	6923      	ldr	r3, [r4, #16]
 8006a18:	b943      	cbnz	r3, 8006a2c <__swsetup_r+0xa8>
 8006a1a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006a1e:	d1c4      	bne.n	80069aa <__swsetup_r+0x26>
 8006a20:	bd38      	pop	{r3, r4, r5, pc}
 8006a22:	0781      	lsls	r1, r0, #30
 8006a24:	bf58      	it	pl
 8006a26:	6963      	ldrpl	r3, [r4, #20]
 8006a28:	60a3      	str	r3, [r4, #8]
 8006a2a:	e7f4      	b.n	8006a16 <__swsetup_r+0x92>
 8006a2c:	2000      	movs	r0, #0
 8006a2e:	e7f7      	b.n	8006a20 <__swsetup_r+0x9c>
 8006a30:	20000064 	.word	0x20000064

08006a34 <_raise_r>:
 8006a34:	291f      	cmp	r1, #31
 8006a36:	b538      	push	{r3, r4, r5, lr}
 8006a38:	4604      	mov	r4, r0
 8006a3a:	460d      	mov	r5, r1
 8006a3c:	d904      	bls.n	8006a48 <_raise_r+0x14>
 8006a3e:	2316      	movs	r3, #22
 8006a40:	6003      	str	r3, [r0, #0]
 8006a42:	f04f 30ff 	mov.w	r0, #4294967295
 8006a46:	bd38      	pop	{r3, r4, r5, pc}
 8006a48:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8006a4a:	b112      	cbz	r2, 8006a52 <_raise_r+0x1e>
 8006a4c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006a50:	b94b      	cbnz	r3, 8006a66 <_raise_r+0x32>
 8006a52:	4620      	mov	r0, r4
 8006a54:	f000 f830 	bl	8006ab8 <_getpid_r>
 8006a58:	462a      	mov	r2, r5
 8006a5a:	4601      	mov	r1, r0
 8006a5c:	4620      	mov	r0, r4
 8006a5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a62:	f000 b817 	b.w	8006a94 <_kill_r>
 8006a66:	2b01      	cmp	r3, #1
 8006a68:	d00a      	beq.n	8006a80 <_raise_r+0x4c>
 8006a6a:	1c59      	adds	r1, r3, #1
 8006a6c:	d103      	bne.n	8006a76 <_raise_r+0x42>
 8006a6e:	2316      	movs	r3, #22
 8006a70:	6003      	str	r3, [r0, #0]
 8006a72:	2001      	movs	r0, #1
 8006a74:	e7e7      	b.n	8006a46 <_raise_r+0x12>
 8006a76:	2400      	movs	r4, #0
 8006a78:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006a7c:	4628      	mov	r0, r5
 8006a7e:	4798      	blx	r3
 8006a80:	2000      	movs	r0, #0
 8006a82:	e7e0      	b.n	8006a46 <_raise_r+0x12>

08006a84 <raise>:
 8006a84:	4b02      	ldr	r3, [pc, #8]	; (8006a90 <raise+0xc>)
 8006a86:	4601      	mov	r1, r0
 8006a88:	6818      	ldr	r0, [r3, #0]
 8006a8a:	f7ff bfd3 	b.w	8006a34 <_raise_r>
 8006a8e:	bf00      	nop
 8006a90:	20000064 	.word	0x20000064

08006a94 <_kill_r>:
 8006a94:	b538      	push	{r3, r4, r5, lr}
 8006a96:	4d07      	ldr	r5, [pc, #28]	; (8006ab4 <_kill_r+0x20>)
 8006a98:	2300      	movs	r3, #0
 8006a9a:	4604      	mov	r4, r0
 8006a9c:	4608      	mov	r0, r1
 8006a9e:	4611      	mov	r1, r2
 8006aa0:	602b      	str	r3, [r5, #0]
 8006aa2:	f7fa fd4d 	bl	8001540 <_kill>
 8006aa6:	1c43      	adds	r3, r0, #1
 8006aa8:	d102      	bne.n	8006ab0 <_kill_r+0x1c>
 8006aaa:	682b      	ldr	r3, [r5, #0]
 8006aac:	b103      	cbz	r3, 8006ab0 <_kill_r+0x1c>
 8006aae:	6023      	str	r3, [r4, #0]
 8006ab0:	bd38      	pop	{r3, r4, r5, pc}
 8006ab2:	bf00      	nop
 8006ab4:	200003c8 	.word	0x200003c8

08006ab8 <_getpid_r>:
 8006ab8:	f7fa bd3b 	b.w	8001532 <_getpid>

08006abc <__swhatbuf_r>:
 8006abc:	b570      	push	{r4, r5, r6, lr}
 8006abe:	460c      	mov	r4, r1
 8006ac0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ac4:	2900      	cmp	r1, #0
 8006ac6:	b096      	sub	sp, #88	; 0x58
 8006ac8:	4615      	mov	r5, r2
 8006aca:	461e      	mov	r6, r3
 8006acc:	da0d      	bge.n	8006aea <__swhatbuf_r+0x2e>
 8006ace:	89a3      	ldrh	r3, [r4, #12]
 8006ad0:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006ad4:	f04f 0100 	mov.w	r1, #0
 8006ad8:	bf0c      	ite	eq
 8006ada:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006ade:	2340      	movne	r3, #64	; 0x40
 8006ae0:	2000      	movs	r0, #0
 8006ae2:	6031      	str	r1, [r6, #0]
 8006ae4:	602b      	str	r3, [r5, #0]
 8006ae6:	b016      	add	sp, #88	; 0x58
 8006ae8:	bd70      	pop	{r4, r5, r6, pc}
 8006aea:	466a      	mov	r2, sp
 8006aec:	f000 f848 	bl	8006b80 <_fstat_r>
 8006af0:	2800      	cmp	r0, #0
 8006af2:	dbec      	blt.n	8006ace <__swhatbuf_r+0x12>
 8006af4:	9901      	ldr	r1, [sp, #4]
 8006af6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006afa:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006afe:	4259      	negs	r1, r3
 8006b00:	4159      	adcs	r1, r3
 8006b02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b06:	e7eb      	b.n	8006ae0 <__swhatbuf_r+0x24>

08006b08 <__smakebuf_r>:
 8006b08:	898b      	ldrh	r3, [r1, #12]
 8006b0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006b0c:	079d      	lsls	r5, r3, #30
 8006b0e:	4606      	mov	r6, r0
 8006b10:	460c      	mov	r4, r1
 8006b12:	d507      	bpl.n	8006b24 <__smakebuf_r+0x1c>
 8006b14:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006b18:	6023      	str	r3, [r4, #0]
 8006b1a:	6123      	str	r3, [r4, #16]
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	6163      	str	r3, [r4, #20]
 8006b20:	b002      	add	sp, #8
 8006b22:	bd70      	pop	{r4, r5, r6, pc}
 8006b24:	ab01      	add	r3, sp, #4
 8006b26:	466a      	mov	r2, sp
 8006b28:	f7ff ffc8 	bl	8006abc <__swhatbuf_r>
 8006b2c:	9900      	ldr	r1, [sp, #0]
 8006b2e:	4605      	mov	r5, r0
 8006b30:	4630      	mov	r0, r6
 8006b32:	f7fe fecb 	bl	80058cc <_malloc_r>
 8006b36:	b948      	cbnz	r0, 8006b4c <__smakebuf_r+0x44>
 8006b38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b3c:	059a      	lsls	r2, r3, #22
 8006b3e:	d4ef      	bmi.n	8006b20 <__smakebuf_r+0x18>
 8006b40:	f023 0303 	bic.w	r3, r3, #3
 8006b44:	f043 0302 	orr.w	r3, r3, #2
 8006b48:	81a3      	strh	r3, [r4, #12]
 8006b4a:	e7e3      	b.n	8006b14 <__smakebuf_r+0xc>
 8006b4c:	89a3      	ldrh	r3, [r4, #12]
 8006b4e:	6020      	str	r0, [r4, #0]
 8006b50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b54:	81a3      	strh	r3, [r4, #12]
 8006b56:	9b00      	ldr	r3, [sp, #0]
 8006b58:	6163      	str	r3, [r4, #20]
 8006b5a:	9b01      	ldr	r3, [sp, #4]
 8006b5c:	6120      	str	r0, [r4, #16]
 8006b5e:	b15b      	cbz	r3, 8006b78 <__smakebuf_r+0x70>
 8006b60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b64:	4630      	mov	r0, r6
 8006b66:	f000 f81d 	bl	8006ba4 <_isatty_r>
 8006b6a:	b128      	cbz	r0, 8006b78 <__smakebuf_r+0x70>
 8006b6c:	89a3      	ldrh	r3, [r4, #12]
 8006b6e:	f023 0303 	bic.w	r3, r3, #3
 8006b72:	f043 0301 	orr.w	r3, r3, #1
 8006b76:	81a3      	strh	r3, [r4, #12]
 8006b78:	89a3      	ldrh	r3, [r4, #12]
 8006b7a:	431d      	orrs	r5, r3
 8006b7c:	81a5      	strh	r5, [r4, #12]
 8006b7e:	e7cf      	b.n	8006b20 <__smakebuf_r+0x18>

08006b80 <_fstat_r>:
 8006b80:	b538      	push	{r3, r4, r5, lr}
 8006b82:	4d07      	ldr	r5, [pc, #28]	; (8006ba0 <_fstat_r+0x20>)
 8006b84:	2300      	movs	r3, #0
 8006b86:	4604      	mov	r4, r0
 8006b88:	4608      	mov	r0, r1
 8006b8a:	4611      	mov	r1, r2
 8006b8c:	602b      	str	r3, [r5, #0]
 8006b8e:	f7fa fd35 	bl	80015fc <_fstat>
 8006b92:	1c43      	adds	r3, r0, #1
 8006b94:	d102      	bne.n	8006b9c <_fstat_r+0x1c>
 8006b96:	682b      	ldr	r3, [r5, #0]
 8006b98:	b103      	cbz	r3, 8006b9c <_fstat_r+0x1c>
 8006b9a:	6023      	str	r3, [r4, #0]
 8006b9c:	bd38      	pop	{r3, r4, r5, pc}
 8006b9e:	bf00      	nop
 8006ba0:	200003c8 	.word	0x200003c8

08006ba4 <_isatty_r>:
 8006ba4:	b538      	push	{r3, r4, r5, lr}
 8006ba6:	4d06      	ldr	r5, [pc, #24]	; (8006bc0 <_isatty_r+0x1c>)
 8006ba8:	2300      	movs	r3, #0
 8006baa:	4604      	mov	r4, r0
 8006bac:	4608      	mov	r0, r1
 8006bae:	602b      	str	r3, [r5, #0]
 8006bb0:	f7fa fd33 	bl	800161a <_isatty>
 8006bb4:	1c43      	adds	r3, r0, #1
 8006bb6:	d102      	bne.n	8006bbe <_isatty_r+0x1a>
 8006bb8:	682b      	ldr	r3, [r5, #0]
 8006bba:	b103      	cbz	r3, 8006bbe <_isatty_r+0x1a>
 8006bbc:	6023      	str	r3, [r4, #0]
 8006bbe:	bd38      	pop	{r3, r4, r5, pc}
 8006bc0:	200003c8 	.word	0x200003c8

08006bc4 <_init>:
 8006bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bc6:	bf00      	nop
 8006bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bca:	bc08      	pop	{r3}
 8006bcc:	469e      	mov	lr, r3
 8006bce:	4770      	bx	lr

08006bd0 <_fini>:
 8006bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bd2:	bf00      	nop
 8006bd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bd6:	bc08      	pop	{r3}
 8006bd8:	469e      	mov	lr, r3
 8006bda:	4770      	bx	lr
