
LoRaWAN_End_Node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016d38  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001278  08016e78  08016e78  00026e78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080180f0  080180f0  000302a8  2**0
                  CONTENTS
  4 .ARM          00000008  080180f0  080180f0  000280f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080180f8  080180f8  000302a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080180f8  080180f8  000280f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080180fc  080180fc  000280fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002a8  20000000  08018100  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001878  200002a8  080183a8  000302a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001b20  080183a8  00031b20  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  000302a8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000302d2  2**0
                  CONTENTS, READONLY
 13 .debug_info   00056dc6  00000000  00000000  00030315  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000c6a7  00000000  00000000  000870db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 00017ef7  00000000  00000000  00093782  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002ea8  00000000  00000000  000ab680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002572  00000000  00000000  000ae528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00029d48  00000000  00000000  000b0a9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000546f2  00000000  00000000  000da7e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ceeb8  00000000  00000000  0012eed4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000097d8  00000000  00000000  001fdd8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000b8  00000000  00000000  00207564  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200002a8 	.word	0x200002a8
 800015c:	00000000 	.word	0x00000000
 8000160:	08016e60 	.word	0x08016e60

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200002ac 	.word	0x200002ac
 800017c:	08016e60 	.word	0x08016e60

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_frsub>:
 8000c38:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c3c:	e002      	b.n	8000c44 <__addsf3>
 8000c3e:	bf00      	nop

08000c40 <__aeabi_fsub>:
 8000c40:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c44 <__addsf3>:
 8000c44:	0042      	lsls	r2, r0, #1
 8000c46:	bf1f      	itttt	ne
 8000c48:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c4c:	ea92 0f03 	teqne	r2, r3
 8000c50:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c54:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c58:	d06a      	beq.n	8000d30 <__addsf3+0xec>
 8000c5a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c5e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c62:	bfc1      	itttt	gt
 8000c64:	18d2      	addgt	r2, r2, r3
 8000c66:	4041      	eorgt	r1, r0
 8000c68:	4048      	eorgt	r0, r1
 8000c6a:	4041      	eorgt	r1, r0
 8000c6c:	bfb8      	it	lt
 8000c6e:	425b      	neglt	r3, r3
 8000c70:	2b19      	cmp	r3, #25
 8000c72:	bf88      	it	hi
 8000c74:	4770      	bxhi	lr
 8000c76:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c7a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c7e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c82:	bf18      	it	ne
 8000c84:	4240      	negne	r0, r0
 8000c86:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c8a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c8e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c92:	bf18      	it	ne
 8000c94:	4249      	negne	r1, r1
 8000c96:	ea92 0f03 	teq	r2, r3
 8000c9a:	d03f      	beq.n	8000d1c <__addsf3+0xd8>
 8000c9c:	f1a2 0201 	sub.w	r2, r2, #1
 8000ca0:	fa41 fc03 	asr.w	ip, r1, r3
 8000ca4:	eb10 000c 	adds.w	r0, r0, ip
 8000ca8:	f1c3 0320 	rsb	r3, r3, #32
 8000cac:	fa01 f103 	lsl.w	r1, r1, r3
 8000cb0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cb4:	d502      	bpl.n	8000cbc <__addsf3+0x78>
 8000cb6:	4249      	negs	r1, r1
 8000cb8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cbc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000cc0:	d313      	bcc.n	8000cea <__addsf3+0xa6>
 8000cc2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000cc6:	d306      	bcc.n	8000cd6 <__addsf3+0x92>
 8000cc8:	0840      	lsrs	r0, r0, #1
 8000cca:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cce:	f102 0201 	add.w	r2, r2, #1
 8000cd2:	2afe      	cmp	r2, #254	; 0xfe
 8000cd4:	d251      	bcs.n	8000d7a <__addsf3+0x136>
 8000cd6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000cda:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cde:	bf08      	it	eq
 8000ce0:	f020 0001 	biceq.w	r0, r0, #1
 8000ce4:	ea40 0003 	orr.w	r0, r0, r3
 8000ce8:	4770      	bx	lr
 8000cea:	0049      	lsls	r1, r1, #1
 8000cec:	eb40 0000 	adc.w	r0, r0, r0
 8000cf0:	3a01      	subs	r2, #1
 8000cf2:	bf28      	it	cs
 8000cf4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000cf8:	d2ed      	bcs.n	8000cd6 <__addsf3+0x92>
 8000cfa:	fab0 fc80 	clz	ip, r0
 8000cfe:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d02:	ebb2 020c 	subs.w	r2, r2, ip
 8000d06:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d0a:	bfaa      	itet	ge
 8000d0c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d10:	4252      	neglt	r2, r2
 8000d12:	4318      	orrge	r0, r3
 8000d14:	bfbc      	itt	lt
 8000d16:	40d0      	lsrlt	r0, r2
 8000d18:	4318      	orrlt	r0, r3
 8000d1a:	4770      	bx	lr
 8000d1c:	f092 0f00 	teq	r2, #0
 8000d20:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d24:	bf06      	itte	eq
 8000d26:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d2a:	3201      	addeq	r2, #1
 8000d2c:	3b01      	subne	r3, #1
 8000d2e:	e7b5      	b.n	8000c9c <__addsf3+0x58>
 8000d30:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d34:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d38:	bf18      	it	ne
 8000d3a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d3e:	d021      	beq.n	8000d84 <__addsf3+0x140>
 8000d40:	ea92 0f03 	teq	r2, r3
 8000d44:	d004      	beq.n	8000d50 <__addsf3+0x10c>
 8000d46:	f092 0f00 	teq	r2, #0
 8000d4a:	bf08      	it	eq
 8000d4c:	4608      	moveq	r0, r1
 8000d4e:	4770      	bx	lr
 8000d50:	ea90 0f01 	teq	r0, r1
 8000d54:	bf1c      	itt	ne
 8000d56:	2000      	movne	r0, #0
 8000d58:	4770      	bxne	lr
 8000d5a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d5e:	d104      	bne.n	8000d6a <__addsf3+0x126>
 8000d60:	0040      	lsls	r0, r0, #1
 8000d62:	bf28      	it	cs
 8000d64:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d68:	4770      	bx	lr
 8000d6a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d6e:	bf3c      	itt	cc
 8000d70:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d74:	4770      	bxcc	lr
 8000d76:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d7a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d7e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d82:	4770      	bx	lr
 8000d84:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d88:	bf16      	itet	ne
 8000d8a:	4608      	movne	r0, r1
 8000d8c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d90:	4601      	movne	r1, r0
 8000d92:	0242      	lsls	r2, r0, #9
 8000d94:	bf06      	itte	eq
 8000d96:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d9a:	ea90 0f01 	teqeq	r0, r1
 8000d9e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000da2:	4770      	bx	lr

08000da4 <__aeabi_ui2f>:
 8000da4:	f04f 0300 	mov.w	r3, #0
 8000da8:	e004      	b.n	8000db4 <__aeabi_i2f+0x8>
 8000daa:	bf00      	nop

08000dac <__aeabi_i2f>:
 8000dac:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000db0:	bf48      	it	mi
 8000db2:	4240      	negmi	r0, r0
 8000db4:	ea5f 0c00 	movs.w	ip, r0
 8000db8:	bf08      	it	eq
 8000dba:	4770      	bxeq	lr
 8000dbc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000dc0:	4601      	mov	r1, r0
 8000dc2:	f04f 0000 	mov.w	r0, #0
 8000dc6:	e01c      	b.n	8000e02 <__aeabi_l2f+0x2a>

08000dc8 <__aeabi_ul2f>:
 8000dc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000dcc:	bf08      	it	eq
 8000dce:	4770      	bxeq	lr
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	e00a      	b.n	8000dec <__aeabi_l2f+0x14>
 8000dd6:	bf00      	nop

08000dd8 <__aeabi_l2f>:
 8000dd8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ddc:	bf08      	it	eq
 8000dde:	4770      	bxeq	lr
 8000de0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000de4:	d502      	bpl.n	8000dec <__aeabi_l2f+0x14>
 8000de6:	4240      	negs	r0, r0
 8000de8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dec:	ea5f 0c01 	movs.w	ip, r1
 8000df0:	bf02      	ittt	eq
 8000df2:	4684      	moveq	ip, r0
 8000df4:	4601      	moveq	r1, r0
 8000df6:	2000      	moveq	r0, #0
 8000df8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000dfc:	bf08      	it	eq
 8000dfe:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e02:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e06:	fabc f28c 	clz	r2, ip
 8000e0a:	3a08      	subs	r2, #8
 8000e0c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e10:	db10      	blt.n	8000e34 <__aeabi_l2f+0x5c>
 8000e12:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e16:	4463      	add	r3, ip
 8000e18:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e1c:	f1c2 0220 	rsb	r2, r2, #32
 8000e20:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e24:	fa20 f202 	lsr.w	r2, r0, r2
 8000e28:	eb43 0002 	adc.w	r0, r3, r2
 8000e2c:	bf08      	it	eq
 8000e2e:	f020 0001 	biceq.w	r0, r0, #1
 8000e32:	4770      	bx	lr
 8000e34:	f102 0220 	add.w	r2, r2, #32
 8000e38:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e3c:	f1c2 0220 	rsb	r2, r2, #32
 8000e40:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e44:	fa21 f202 	lsr.w	r2, r1, r2
 8000e48:	eb43 0002 	adc.w	r0, r3, r2
 8000e4c:	bf08      	it	eq
 8000e4e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e52:	4770      	bx	lr

08000e54 <__aeabi_fmul>:
 8000e54:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e58:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e5c:	bf1e      	ittt	ne
 8000e5e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e62:	ea92 0f0c 	teqne	r2, ip
 8000e66:	ea93 0f0c 	teqne	r3, ip
 8000e6a:	d06f      	beq.n	8000f4c <__aeabi_fmul+0xf8>
 8000e6c:	441a      	add	r2, r3
 8000e6e:	ea80 0c01 	eor.w	ip, r0, r1
 8000e72:	0240      	lsls	r0, r0, #9
 8000e74:	bf18      	it	ne
 8000e76:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e7a:	d01e      	beq.n	8000eba <__aeabi_fmul+0x66>
 8000e7c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e80:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e84:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e88:	fba0 3101 	umull	r3, r1, r0, r1
 8000e8c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e90:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e94:	bf3e      	ittt	cc
 8000e96:	0049      	lslcc	r1, r1, #1
 8000e98:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e9c:	005b      	lslcc	r3, r3, #1
 8000e9e:	ea40 0001 	orr.w	r0, r0, r1
 8000ea2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000ea6:	2afd      	cmp	r2, #253	; 0xfd
 8000ea8:	d81d      	bhi.n	8000ee6 <__aeabi_fmul+0x92>
 8000eaa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000eae:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eb2:	bf08      	it	eq
 8000eb4:	f020 0001 	biceq.w	r0, r0, #1
 8000eb8:	4770      	bx	lr
 8000eba:	f090 0f00 	teq	r0, #0
 8000ebe:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ec2:	bf08      	it	eq
 8000ec4:	0249      	lsleq	r1, r1, #9
 8000ec6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eca:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000ece:	3a7f      	subs	r2, #127	; 0x7f
 8000ed0:	bfc2      	ittt	gt
 8000ed2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ed6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eda:	4770      	bxgt	lr
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	f04f 0300 	mov.w	r3, #0
 8000ee4:	3a01      	subs	r2, #1
 8000ee6:	dc5d      	bgt.n	8000fa4 <__aeabi_fmul+0x150>
 8000ee8:	f112 0f19 	cmn.w	r2, #25
 8000eec:	bfdc      	itt	le
 8000eee:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000ef2:	4770      	bxle	lr
 8000ef4:	f1c2 0200 	rsb	r2, r2, #0
 8000ef8:	0041      	lsls	r1, r0, #1
 8000efa:	fa21 f102 	lsr.w	r1, r1, r2
 8000efe:	f1c2 0220 	rsb	r2, r2, #32
 8000f02:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f06:	ea5f 0031 	movs.w	r0, r1, rrx
 8000f0a:	f140 0000 	adc.w	r0, r0, #0
 8000f0e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000f12:	bf08      	it	eq
 8000f14:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000f18:	4770      	bx	lr
 8000f1a:	f092 0f00 	teq	r2, #0
 8000f1e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f22:	bf02      	ittt	eq
 8000f24:	0040      	lsleq	r0, r0, #1
 8000f26:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f2a:	3a01      	subeq	r2, #1
 8000f2c:	d0f9      	beq.n	8000f22 <__aeabi_fmul+0xce>
 8000f2e:	ea40 000c 	orr.w	r0, r0, ip
 8000f32:	f093 0f00 	teq	r3, #0
 8000f36:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f3a:	bf02      	ittt	eq
 8000f3c:	0049      	lsleq	r1, r1, #1
 8000f3e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f42:	3b01      	subeq	r3, #1
 8000f44:	d0f9      	beq.n	8000f3a <__aeabi_fmul+0xe6>
 8000f46:	ea41 010c 	orr.w	r1, r1, ip
 8000f4a:	e78f      	b.n	8000e6c <__aeabi_fmul+0x18>
 8000f4c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f50:	ea92 0f0c 	teq	r2, ip
 8000f54:	bf18      	it	ne
 8000f56:	ea93 0f0c 	teqne	r3, ip
 8000f5a:	d00a      	beq.n	8000f72 <__aeabi_fmul+0x11e>
 8000f5c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f60:	bf18      	it	ne
 8000f62:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f66:	d1d8      	bne.n	8000f1a <__aeabi_fmul+0xc6>
 8000f68:	ea80 0001 	eor.w	r0, r0, r1
 8000f6c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f70:	4770      	bx	lr
 8000f72:	f090 0f00 	teq	r0, #0
 8000f76:	bf17      	itett	ne
 8000f78:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f7c:	4608      	moveq	r0, r1
 8000f7e:	f091 0f00 	teqne	r1, #0
 8000f82:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f86:	d014      	beq.n	8000fb2 <__aeabi_fmul+0x15e>
 8000f88:	ea92 0f0c 	teq	r2, ip
 8000f8c:	d101      	bne.n	8000f92 <__aeabi_fmul+0x13e>
 8000f8e:	0242      	lsls	r2, r0, #9
 8000f90:	d10f      	bne.n	8000fb2 <__aeabi_fmul+0x15e>
 8000f92:	ea93 0f0c 	teq	r3, ip
 8000f96:	d103      	bne.n	8000fa0 <__aeabi_fmul+0x14c>
 8000f98:	024b      	lsls	r3, r1, #9
 8000f9a:	bf18      	it	ne
 8000f9c:	4608      	movne	r0, r1
 8000f9e:	d108      	bne.n	8000fb2 <__aeabi_fmul+0x15e>
 8000fa0:	ea80 0001 	eor.w	r0, r0, r1
 8000fa4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000fa8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fb0:	4770      	bx	lr
 8000fb2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fb6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000fba:	4770      	bx	lr

08000fbc <__aeabi_fdiv>:
 8000fbc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000fc0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000fc4:	bf1e      	ittt	ne
 8000fc6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000fca:	ea92 0f0c 	teqne	r2, ip
 8000fce:	ea93 0f0c 	teqne	r3, ip
 8000fd2:	d069      	beq.n	80010a8 <__aeabi_fdiv+0xec>
 8000fd4:	eba2 0203 	sub.w	r2, r2, r3
 8000fd8:	ea80 0c01 	eor.w	ip, r0, r1
 8000fdc:	0249      	lsls	r1, r1, #9
 8000fde:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000fe2:	d037      	beq.n	8001054 <__aeabi_fdiv+0x98>
 8000fe4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000fe8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000fec:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ff0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ff4:	428b      	cmp	r3, r1
 8000ff6:	bf38      	it	cc
 8000ff8:	005b      	lslcc	r3, r3, #1
 8000ffa:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ffe:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8001002:	428b      	cmp	r3, r1
 8001004:	bf24      	itt	cs
 8001006:	1a5b      	subcs	r3, r3, r1
 8001008:	ea40 000c 	orrcs.w	r0, r0, ip
 800100c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8001010:	bf24      	itt	cs
 8001012:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8001016:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800101a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800101e:	bf24      	itt	cs
 8001020:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8001024:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8001028:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 800102c:	bf24      	itt	cs
 800102e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8001032:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8001036:	011b      	lsls	r3, r3, #4
 8001038:	bf18      	it	ne
 800103a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800103e:	d1e0      	bne.n	8001002 <__aeabi_fdiv+0x46>
 8001040:	2afd      	cmp	r2, #253	; 0xfd
 8001042:	f63f af50 	bhi.w	8000ee6 <__aeabi_fmul+0x92>
 8001046:	428b      	cmp	r3, r1
 8001048:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800104c:	bf08      	it	eq
 800104e:	f020 0001 	biceq.w	r0, r0, #1
 8001052:	4770      	bx	lr
 8001054:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001058:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800105c:	327f      	adds	r2, #127	; 0x7f
 800105e:	bfc2      	ittt	gt
 8001060:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8001064:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001068:	4770      	bxgt	lr
 800106a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800106e:	f04f 0300 	mov.w	r3, #0
 8001072:	3a01      	subs	r2, #1
 8001074:	e737      	b.n	8000ee6 <__aeabi_fmul+0x92>
 8001076:	f092 0f00 	teq	r2, #0
 800107a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800107e:	bf02      	ittt	eq
 8001080:	0040      	lsleq	r0, r0, #1
 8001082:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8001086:	3a01      	subeq	r2, #1
 8001088:	d0f9      	beq.n	800107e <__aeabi_fdiv+0xc2>
 800108a:	ea40 000c 	orr.w	r0, r0, ip
 800108e:	f093 0f00 	teq	r3, #0
 8001092:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8001096:	bf02      	ittt	eq
 8001098:	0049      	lsleq	r1, r1, #1
 800109a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800109e:	3b01      	subeq	r3, #1
 80010a0:	d0f9      	beq.n	8001096 <__aeabi_fdiv+0xda>
 80010a2:	ea41 010c 	orr.w	r1, r1, ip
 80010a6:	e795      	b.n	8000fd4 <__aeabi_fdiv+0x18>
 80010a8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80010ac:	ea92 0f0c 	teq	r2, ip
 80010b0:	d108      	bne.n	80010c4 <__aeabi_fdiv+0x108>
 80010b2:	0242      	lsls	r2, r0, #9
 80010b4:	f47f af7d 	bne.w	8000fb2 <__aeabi_fmul+0x15e>
 80010b8:	ea93 0f0c 	teq	r3, ip
 80010bc:	f47f af70 	bne.w	8000fa0 <__aeabi_fmul+0x14c>
 80010c0:	4608      	mov	r0, r1
 80010c2:	e776      	b.n	8000fb2 <__aeabi_fmul+0x15e>
 80010c4:	ea93 0f0c 	teq	r3, ip
 80010c8:	d104      	bne.n	80010d4 <__aeabi_fdiv+0x118>
 80010ca:	024b      	lsls	r3, r1, #9
 80010cc:	f43f af4c 	beq.w	8000f68 <__aeabi_fmul+0x114>
 80010d0:	4608      	mov	r0, r1
 80010d2:	e76e      	b.n	8000fb2 <__aeabi_fmul+0x15e>
 80010d4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80010d8:	bf18      	it	ne
 80010da:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80010de:	d1ca      	bne.n	8001076 <__aeabi_fdiv+0xba>
 80010e0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80010e4:	f47f af5c 	bne.w	8000fa0 <__aeabi_fmul+0x14c>
 80010e8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80010ec:	f47f af3c 	bne.w	8000f68 <__aeabi_fmul+0x114>
 80010f0:	e75f      	b.n	8000fb2 <__aeabi_fmul+0x15e>
 80010f2:	bf00      	nop

080010f4 <__aeabi_f2uiz>:
 80010f4:	0042      	lsls	r2, r0, #1
 80010f6:	d20e      	bcs.n	8001116 <__aeabi_f2uiz+0x22>
 80010f8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010fc:	d30b      	bcc.n	8001116 <__aeabi_f2uiz+0x22>
 80010fe:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001102:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001106:	d409      	bmi.n	800111c <__aeabi_f2uiz+0x28>
 8001108:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800110c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001110:	fa23 f002 	lsr.w	r0, r3, r2
 8001114:	4770      	bx	lr
 8001116:	f04f 0000 	mov.w	r0, #0
 800111a:	4770      	bx	lr
 800111c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001120:	d101      	bne.n	8001126 <__aeabi_f2uiz+0x32>
 8001122:	0242      	lsls	r2, r0, #9
 8001124:	d102      	bne.n	800112c <__aeabi_f2uiz+0x38>
 8001126:	f04f 30ff 	mov.w	r0, #4294967295
 800112a:	4770      	bx	lr
 800112c:	f04f 0000 	mov.w	r0, #0
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop

08001134 <__aeabi_ldivmod>:
 8001134:	b97b      	cbnz	r3, 8001156 <__aeabi_ldivmod+0x22>
 8001136:	b972      	cbnz	r2, 8001156 <__aeabi_ldivmod+0x22>
 8001138:	2900      	cmp	r1, #0
 800113a:	bfbe      	ittt	lt
 800113c:	2000      	movlt	r0, #0
 800113e:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8001142:	e006      	blt.n	8001152 <__aeabi_ldivmod+0x1e>
 8001144:	bf08      	it	eq
 8001146:	2800      	cmpeq	r0, #0
 8001148:	bf1c      	itt	ne
 800114a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800114e:	f04f 30ff 	movne.w	r0, #4294967295
 8001152:	f000 b9f3 	b.w	800153c <__aeabi_idiv0>
 8001156:	f1ad 0c08 	sub.w	ip, sp, #8
 800115a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800115e:	2900      	cmp	r1, #0
 8001160:	db09      	blt.n	8001176 <__aeabi_ldivmod+0x42>
 8001162:	2b00      	cmp	r3, #0
 8001164:	db1a      	blt.n	800119c <__aeabi_ldivmod+0x68>
 8001166:	f000 f885 	bl	8001274 <__udivmoddi4>
 800116a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800116e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001172:	b004      	add	sp, #16
 8001174:	4770      	bx	lr
 8001176:	4240      	negs	r0, r0
 8001178:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800117c:	2b00      	cmp	r3, #0
 800117e:	db1b      	blt.n	80011b8 <__aeabi_ldivmod+0x84>
 8001180:	f000 f878 	bl	8001274 <__udivmoddi4>
 8001184:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001188:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800118c:	b004      	add	sp, #16
 800118e:	4240      	negs	r0, r0
 8001190:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001194:	4252      	negs	r2, r2
 8001196:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800119a:	4770      	bx	lr
 800119c:	4252      	negs	r2, r2
 800119e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80011a2:	f000 f867 	bl	8001274 <__udivmoddi4>
 80011a6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011ae:	b004      	add	sp, #16
 80011b0:	4240      	negs	r0, r0
 80011b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011b6:	4770      	bx	lr
 80011b8:	4252      	negs	r2, r2
 80011ba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80011be:	f000 f859 	bl	8001274 <__udivmoddi4>
 80011c2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011ca:	b004      	add	sp, #16
 80011cc:	4252      	negs	r2, r2
 80011ce:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80011d2:	4770      	bx	lr

080011d4 <__aeabi_uldivmod>:
 80011d4:	b953      	cbnz	r3, 80011ec <__aeabi_uldivmod+0x18>
 80011d6:	b94a      	cbnz	r2, 80011ec <__aeabi_uldivmod+0x18>
 80011d8:	2900      	cmp	r1, #0
 80011da:	bf08      	it	eq
 80011dc:	2800      	cmpeq	r0, #0
 80011de:	bf1c      	itt	ne
 80011e0:	f04f 31ff 	movne.w	r1, #4294967295
 80011e4:	f04f 30ff 	movne.w	r0, #4294967295
 80011e8:	f000 b9a8 	b.w	800153c <__aeabi_idiv0>
 80011ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80011f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80011f4:	f000 f83e 	bl	8001274 <__udivmoddi4>
 80011f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001200:	b004      	add	sp, #16
 8001202:	4770      	bx	lr

08001204 <__aeabi_d2lz>:
 8001204:	b538      	push	{r3, r4, r5, lr}
 8001206:	4605      	mov	r5, r0
 8001208:	460c      	mov	r4, r1
 800120a:	4628      	mov	r0, r5
 800120c:	4621      	mov	r1, r4
 800120e:	2200      	movs	r2, #0
 8001210:	2300      	movs	r3, #0
 8001212:	f7ff fc3b 	bl	8000a8c <__aeabi_dcmplt>
 8001216:	b928      	cbnz	r0, 8001224 <__aeabi_d2lz+0x20>
 8001218:	4628      	mov	r0, r5
 800121a:	4621      	mov	r1, r4
 800121c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001220:	f000 b80a 	b.w	8001238 <__aeabi_d2ulz>
 8001224:	4628      	mov	r0, r5
 8001226:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 800122a:	f000 f805 	bl	8001238 <__aeabi_d2ulz>
 800122e:	4240      	negs	r0, r0
 8001230:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001234:	bd38      	pop	{r3, r4, r5, pc}
 8001236:	bf00      	nop

08001238 <__aeabi_d2ulz>:
 8001238:	b5d0      	push	{r4, r6, r7, lr}
 800123a:	4b0c      	ldr	r3, [pc, #48]	; (800126c <__aeabi_d2ulz+0x34>)
 800123c:	2200      	movs	r2, #0
 800123e:	4606      	mov	r6, r0
 8001240:	460f      	mov	r7, r1
 8001242:	f7ff f9b1 	bl	80005a8 <__aeabi_dmul>
 8001246:	f7ff fc87 	bl	8000b58 <__aeabi_d2uiz>
 800124a:	4604      	mov	r4, r0
 800124c:	f7ff f932 	bl	80004b4 <__aeabi_ui2d>
 8001250:	4b07      	ldr	r3, [pc, #28]	; (8001270 <__aeabi_d2ulz+0x38>)
 8001252:	2200      	movs	r2, #0
 8001254:	f7ff f9a8 	bl	80005a8 <__aeabi_dmul>
 8001258:	4602      	mov	r2, r0
 800125a:	460b      	mov	r3, r1
 800125c:	4630      	mov	r0, r6
 800125e:	4639      	mov	r1, r7
 8001260:	f7fe ffea 	bl	8000238 <__aeabi_dsub>
 8001264:	f7ff fc78 	bl	8000b58 <__aeabi_d2uiz>
 8001268:	4621      	mov	r1, r4
 800126a:	bdd0      	pop	{r4, r6, r7, pc}
 800126c:	3df00000 	.word	0x3df00000
 8001270:	41f00000 	.word	0x41f00000

08001274 <__udivmoddi4>:
 8001274:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001278:	9e08      	ldr	r6, [sp, #32]
 800127a:	460d      	mov	r5, r1
 800127c:	4604      	mov	r4, r0
 800127e:	460f      	mov	r7, r1
 8001280:	2b00      	cmp	r3, #0
 8001282:	d14a      	bne.n	800131a <__udivmoddi4+0xa6>
 8001284:	428a      	cmp	r2, r1
 8001286:	4694      	mov	ip, r2
 8001288:	d965      	bls.n	8001356 <__udivmoddi4+0xe2>
 800128a:	fab2 f382 	clz	r3, r2
 800128e:	b143      	cbz	r3, 80012a2 <__udivmoddi4+0x2e>
 8001290:	fa02 fc03 	lsl.w	ip, r2, r3
 8001294:	f1c3 0220 	rsb	r2, r3, #32
 8001298:	409f      	lsls	r7, r3
 800129a:	fa20 f202 	lsr.w	r2, r0, r2
 800129e:	4317      	orrs	r7, r2
 80012a0:	409c      	lsls	r4, r3
 80012a2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80012a6:	fa1f f58c 	uxth.w	r5, ip
 80012aa:	fbb7 f1fe 	udiv	r1, r7, lr
 80012ae:	0c22      	lsrs	r2, r4, #16
 80012b0:	fb0e 7711 	mls	r7, lr, r1, r7
 80012b4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80012b8:	fb01 f005 	mul.w	r0, r1, r5
 80012bc:	4290      	cmp	r0, r2
 80012be:	d90a      	bls.n	80012d6 <__udivmoddi4+0x62>
 80012c0:	eb1c 0202 	adds.w	r2, ip, r2
 80012c4:	f101 37ff 	add.w	r7, r1, #4294967295
 80012c8:	f080 811b 	bcs.w	8001502 <__udivmoddi4+0x28e>
 80012cc:	4290      	cmp	r0, r2
 80012ce:	f240 8118 	bls.w	8001502 <__udivmoddi4+0x28e>
 80012d2:	3902      	subs	r1, #2
 80012d4:	4462      	add	r2, ip
 80012d6:	1a12      	subs	r2, r2, r0
 80012d8:	b2a4      	uxth	r4, r4
 80012da:	fbb2 f0fe 	udiv	r0, r2, lr
 80012de:	fb0e 2210 	mls	r2, lr, r0, r2
 80012e2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80012e6:	fb00 f505 	mul.w	r5, r0, r5
 80012ea:	42a5      	cmp	r5, r4
 80012ec:	d90a      	bls.n	8001304 <__udivmoddi4+0x90>
 80012ee:	eb1c 0404 	adds.w	r4, ip, r4
 80012f2:	f100 32ff 	add.w	r2, r0, #4294967295
 80012f6:	f080 8106 	bcs.w	8001506 <__udivmoddi4+0x292>
 80012fa:	42a5      	cmp	r5, r4
 80012fc:	f240 8103 	bls.w	8001506 <__udivmoddi4+0x292>
 8001300:	4464      	add	r4, ip
 8001302:	3802      	subs	r0, #2
 8001304:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8001308:	1b64      	subs	r4, r4, r5
 800130a:	2100      	movs	r1, #0
 800130c:	b11e      	cbz	r6, 8001316 <__udivmoddi4+0xa2>
 800130e:	40dc      	lsrs	r4, r3
 8001310:	2300      	movs	r3, #0
 8001312:	e9c6 4300 	strd	r4, r3, [r6]
 8001316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800131a:	428b      	cmp	r3, r1
 800131c:	d908      	bls.n	8001330 <__udivmoddi4+0xbc>
 800131e:	2e00      	cmp	r6, #0
 8001320:	f000 80ec 	beq.w	80014fc <__udivmoddi4+0x288>
 8001324:	2100      	movs	r1, #0
 8001326:	e9c6 0500 	strd	r0, r5, [r6]
 800132a:	4608      	mov	r0, r1
 800132c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001330:	fab3 f183 	clz	r1, r3
 8001334:	2900      	cmp	r1, #0
 8001336:	d149      	bne.n	80013cc <__udivmoddi4+0x158>
 8001338:	42ab      	cmp	r3, r5
 800133a:	d302      	bcc.n	8001342 <__udivmoddi4+0xce>
 800133c:	4282      	cmp	r2, r0
 800133e:	f200 80f7 	bhi.w	8001530 <__udivmoddi4+0x2bc>
 8001342:	1a84      	subs	r4, r0, r2
 8001344:	eb65 0203 	sbc.w	r2, r5, r3
 8001348:	2001      	movs	r0, #1
 800134a:	4617      	mov	r7, r2
 800134c:	2e00      	cmp	r6, #0
 800134e:	d0e2      	beq.n	8001316 <__udivmoddi4+0xa2>
 8001350:	e9c6 4700 	strd	r4, r7, [r6]
 8001354:	e7df      	b.n	8001316 <__udivmoddi4+0xa2>
 8001356:	b902      	cbnz	r2, 800135a <__udivmoddi4+0xe6>
 8001358:	deff      	udf	#255	; 0xff
 800135a:	fab2 f382 	clz	r3, r2
 800135e:	2b00      	cmp	r3, #0
 8001360:	f040 808f 	bne.w	8001482 <__udivmoddi4+0x20e>
 8001364:	1a8a      	subs	r2, r1, r2
 8001366:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800136a:	fa1f fe8c 	uxth.w	lr, ip
 800136e:	2101      	movs	r1, #1
 8001370:	fbb2 f5f7 	udiv	r5, r2, r7
 8001374:	fb07 2015 	mls	r0, r7, r5, r2
 8001378:	0c22      	lsrs	r2, r4, #16
 800137a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800137e:	fb0e f005 	mul.w	r0, lr, r5
 8001382:	4290      	cmp	r0, r2
 8001384:	d908      	bls.n	8001398 <__udivmoddi4+0x124>
 8001386:	eb1c 0202 	adds.w	r2, ip, r2
 800138a:	f105 38ff 	add.w	r8, r5, #4294967295
 800138e:	d202      	bcs.n	8001396 <__udivmoddi4+0x122>
 8001390:	4290      	cmp	r0, r2
 8001392:	f200 80ca 	bhi.w	800152a <__udivmoddi4+0x2b6>
 8001396:	4645      	mov	r5, r8
 8001398:	1a12      	subs	r2, r2, r0
 800139a:	b2a4      	uxth	r4, r4
 800139c:	fbb2 f0f7 	udiv	r0, r2, r7
 80013a0:	fb07 2210 	mls	r2, r7, r0, r2
 80013a4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80013a8:	fb0e fe00 	mul.w	lr, lr, r0
 80013ac:	45a6      	cmp	lr, r4
 80013ae:	d908      	bls.n	80013c2 <__udivmoddi4+0x14e>
 80013b0:	eb1c 0404 	adds.w	r4, ip, r4
 80013b4:	f100 32ff 	add.w	r2, r0, #4294967295
 80013b8:	d202      	bcs.n	80013c0 <__udivmoddi4+0x14c>
 80013ba:	45a6      	cmp	lr, r4
 80013bc:	f200 80ba 	bhi.w	8001534 <__udivmoddi4+0x2c0>
 80013c0:	4610      	mov	r0, r2
 80013c2:	eba4 040e 	sub.w	r4, r4, lr
 80013c6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80013ca:	e79f      	b.n	800130c <__udivmoddi4+0x98>
 80013cc:	f1c1 0720 	rsb	r7, r1, #32
 80013d0:	408b      	lsls	r3, r1
 80013d2:	fa22 fc07 	lsr.w	ip, r2, r7
 80013d6:	ea4c 0c03 	orr.w	ip, ip, r3
 80013da:	fa05 f401 	lsl.w	r4, r5, r1
 80013de:	fa20 f307 	lsr.w	r3, r0, r7
 80013e2:	40fd      	lsrs	r5, r7
 80013e4:	4323      	orrs	r3, r4
 80013e6:	fa00 f901 	lsl.w	r9, r0, r1
 80013ea:	ea4f 401c 	mov.w	r0, ip, lsr #16
 80013ee:	fa1f fe8c 	uxth.w	lr, ip
 80013f2:	fbb5 f8f0 	udiv	r8, r5, r0
 80013f6:	0c1c      	lsrs	r4, r3, #16
 80013f8:	fb00 5518 	mls	r5, r0, r8, r5
 80013fc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001400:	fb08 f50e 	mul.w	r5, r8, lr
 8001404:	42a5      	cmp	r5, r4
 8001406:	fa02 f201 	lsl.w	r2, r2, r1
 800140a:	d90b      	bls.n	8001424 <__udivmoddi4+0x1b0>
 800140c:	eb1c 0404 	adds.w	r4, ip, r4
 8001410:	f108 3aff 	add.w	sl, r8, #4294967295
 8001414:	f080 8087 	bcs.w	8001526 <__udivmoddi4+0x2b2>
 8001418:	42a5      	cmp	r5, r4
 800141a:	f240 8084 	bls.w	8001526 <__udivmoddi4+0x2b2>
 800141e:	f1a8 0802 	sub.w	r8, r8, #2
 8001422:	4464      	add	r4, ip
 8001424:	1b64      	subs	r4, r4, r5
 8001426:	b29d      	uxth	r5, r3
 8001428:	fbb4 f3f0 	udiv	r3, r4, r0
 800142c:	fb00 4413 	mls	r4, r0, r3, r4
 8001430:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8001434:	fb03 fe0e 	mul.w	lr, r3, lr
 8001438:	45a6      	cmp	lr, r4
 800143a:	d908      	bls.n	800144e <__udivmoddi4+0x1da>
 800143c:	eb1c 0404 	adds.w	r4, ip, r4
 8001440:	f103 30ff 	add.w	r0, r3, #4294967295
 8001444:	d26b      	bcs.n	800151e <__udivmoddi4+0x2aa>
 8001446:	45a6      	cmp	lr, r4
 8001448:	d969      	bls.n	800151e <__udivmoddi4+0x2aa>
 800144a:	3b02      	subs	r3, #2
 800144c:	4464      	add	r4, ip
 800144e:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8001452:	fba0 8302 	umull	r8, r3, r0, r2
 8001456:	eba4 040e 	sub.w	r4, r4, lr
 800145a:	429c      	cmp	r4, r3
 800145c:	46c6      	mov	lr, r8
 800145e:	461d      	mov	r5, r3
 8001460:	d355      	bcc.n	800150e <__udivmoddi4+0x29a>
 8001462:	d052      	beq.n	800150a <__udivmoddi4+0x296>
 8001464:	b156      	cbz	r6, 800147c <__udivmoddi4+0x208>
 8001466:	ebb9 030e 	subs.w	r3, r9, lr
 800146a:	eb64 0405 	sbc.w	r4, r4, r5
 800146e:	fa04 f707 	lsl.w	r7, r4, r7
 8001472:	40cb      	lsrs	r3, r1
 8001474:	40cc      	lsrs	r4, r1
 8001476:	431f      	orrs	r7, r3
 8001478:	e9c6 7400 	strd	r7, r4, [r6]
 800147c:	2100      	movs	r1, #0
 800147e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001482:	f1c3 0120 	rsb	r1, r3, #32
 8001486:	fa02 fc03 	lsl.w	ip, r2, r3
 800148a:	fa20 f201 	lsr.w	r2, r0, r1
 800148e:	fa25 f101 	lsr.w	r1, r5, r1
 8001492:	409d      	lsls	r5, r3
 8001494:	432a      	orrs	r2, r5
 8001496:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800149a:	fa1f fe8c 	uxth.w	lr, ip
 800149e:	fbb1 f0f7 	udiv	r0, r1, r7
 80014a2:	fb07 1510 	mls	r5, r7, r0, r1
 80014a6:	0c11      	lsrs	r1, r2, #16
 80014a8:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80014ac:	fb00 f50e 	mul.w	r5, r0, lr
 80014b0:	428d      	cmp	r5, r1
 80014b2:	fa04 f403 	lsl.w	r4, r4, r3
 80014b6:	d908      	bls.n	80014ca <__udivmoddi4+0x256>
 80014b8:	eb1c 0101 	adds.w	r1, ip, r1
 80014bc:	f100 38ff 	add.w	r8, r0, #4294967295
 80014c0:	d22f      	bcs.n	8001522 <__udivmoddi4+0x2ae>
 80014c2:	428d      	cmp	r5, r1
 80014c4:	d92d      	bls.n	8001522 <__udivmoddi4+0x2ae>
 80014c6:	3802      	subs	r0, #2
 80014c8:	4461      	add	r1, ip
 80014ca:	1b49      	subs	r1, r1, r5
 80014cc:	b292      	uxth	r2, r2
 80014ce:	fbb1 f5f7 	udiv	r5, r1, r7
 80014d2:	fb07 1115 	mls	r1, r7, r5, r1
 80014d6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80014da:	fb05 f10e 	mul.w	r1, r5, lr
 80014de:	4291      	cmp	r1, r2
 80014e0:	d908      	bls.n	80014f4 <__udivmoddi4+0x280>
 80014e2:	eb1c 0202 	adds.w	r2, ip, r2
 80014e6:	f105 38ff 	add.w	r8, r5, #4294967295
 80014ea:	d216      	bcs.n	800151a <__udivmoddi4+0x2a6>
 80014ec:	4291      	cmp	r1, r2
 80014ee:	d914      	bls.n	800151a <__udivmoddi4+0x2a6>
 80014f0:	3d02      	subs	r5, #2
 80014f2:	4462      	add	r2, ip
 80014f4:	1a52      	subs	r2, r2, r1
 80014f6:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80014fa:	e739      	b.n	8001370 <__udivmoddi4+0xfc>
 80014fc:	4631      	mov	r1, r6
 80014fe:	4630      	mov	r0, r6
 8001500:	e709      	b.n	8001316 <__udivmoddi4+0xa2>
 8001502:	4639      	mov	r1, r7
 8001504:	e6e7      	b.n	80012d6 <__udivmoddi4+0x62>
 8001506:	4610      	mov	r0, r2
 8001508:	e6fc      	b.n	8001304 <__udivmoddi4+0x90>
 800150a:	45c1      	cmp	r9, r8
 800150c:	d2aa      	bcs.n	8001464 <__udivmoddi4+0x1f0>
 800150e:	ebb8 0e02 	subs.w	lr, r8, r2
 8001512:	eb63 050c 	sbc.w	r5, r3, ip
 8001516:	3801      	subs	r0, #1
 8001518:	e7a4      	b.n	8001464 <__udivmoddi4+0x1f0>
 800151a:	4645      	mov	r5, r8
 800151c:	e7ea      	b.n	80014f4 <__udivmoddi4+0x280>
 800151e:	4603      	mov	r3, r0
 8001520:	e795      	b.n	800144e <__udivmoddi4+0x1da>
 8001522:	4640      	mov	r0, r8
 8001524:	e7d1      	b.n	80014ca <__udivmoddi4+0x256>
 8001526:	46d0      	mov	r8, sl
 8001528:	e77c      	b.n	8001424 <__udivmoddi4+0x1b0>
 800152a:	3d02      	subs	r5, #2
 800152c:	4462      	add	r2, ip
 800152e:	e733      	b.n	8001398 <__udivmoddi4+0x124>
 8001530:	4608      	mov	r0, r1
 8001532:	e70b      	b.n	800134c <__udivmoddi4+0xd8>
 8001534:	4464      	add	r4, ip
 8001536:	3802      	subs	r0, #2
 8001538:	e743      	b.n	80013c2 <__udivmoddi4+0x14e>
 800153a:	bf00      	nop

0800153c <__aeabi_idiv0>:
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop

08001540 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8001540:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 8001542:	4813      	ldr	r0, [pc, #76]	; (8001590 <MX_ADC_Init+0x50>)
 8001544:	4b13      	ldr	r3, [pc, #76]	; (8001594 <MX_ADC_Init+0x54>)
 8001546:	6003      	str	r3, [r0, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001548:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800154c:	6043      	str	r3, [r0, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800154e:	2300      	movs	r3, #0
 8001550:	6083      	str	r3, [r0, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001552:	60c3      	str	r3, [r0, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001554:	6103      	str	r3, [r0, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001556:	2204      	movs	r2, #4
 8001558:	6142      	str	r2, [r0, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800155a:	7603      	strb	r3, [r0, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800155c:	7643      	strb	r3, [r0, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 800155e:	7683      	strb	r3, [r0, #26]
  hadc.Init.NbrOfConversion = 1;
 8001560:	2201      	movs	r2, #1
 8001562:	61c2      	str	r2, [r0, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001564:	f880 3020 	strb.w	r3, [r0, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001568:	6243      	str	r3, [r0, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800156a:	6283      	str	r3, [r0, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 800156c:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001570:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001574:	6302      	str	r2, [r0, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8001576:	2207      	movs	r2, #7
 8001578:	6342      	str	r2, [r0, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 800157a:	6382      	str	r2, [r0, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 800157c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001580:	64c3      	str	r3, [r0, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001582:	f002 f969 	bl	8003858 <HAL_ADC_Init>
 8001586:	b900      	cbnz	r0, 800158a <MX_ADC_Init+0x4a>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001588:	bd08      	pop	{r3, pc}
    Error_Handler();
 800158a:	f000 f925 	bl	80017d8 <Error_Handler>
}
 800158e:	e7fb      	b.n	8001588 <MX_ADC_Init+0x48>
 8001590:	200002c4 	.word	0x200002c4
 8001594:	40012400 	.word	0x40012400

08001598 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{

  if(adcHandle->Instance==ADC)
 8001598:	6802      	ldr	r2, [r0, #0]
 800159a:	4b09      	ldr	r3, [pc, #36]	; (80015c0 <HAL_ADC_MspInit+0x28>)
 800159c:	429a      	cmp	r2, r3
 800159e:	d000      	beq.n	80015a2 <HAL_ADC_MspInit+0xa>
 80015a0:	4770      	bx	lr
{
 80015a2:	b082      	sub	sp, #8
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80015a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015a8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80015aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80015ae:	661a      	str	r2, [r3, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80015b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015b6:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80015b8:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_ADC_CLK_ENABLE();
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 80015ba:	b002      	add	sp, #8
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	40012400 	.word	0x40012400

080015c4 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{

  if(adcHandle->Instance==ADC)
 80015c4:	6802      	ldr	r2, [r0, #0]
 80015c6:	4b05      	ldr	r3, [pc, #20]	; (80015dc <HAL_ADC_MspDeInit+0x18>)
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d000      	beq.n	80015ce <HAL_ADC_MspDeInit+0xa>
    __HAL_RCC_ADC_CLK_DISABLE();
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 80015cc:	4770      	bx	lr
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 80015ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015d2:	6e13      	ldr	r3, [r2, #96]	; 0x60
 80015d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80015d8:	6613      	str	r3, [r2, #96]	; 0x60
 80015da:	e7f7      	b.n	80015cc <HAL_ADC_MspDeInit+0x8>
 80015dc:	40012400 	.word	0x40012400

080015e0 <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 80015e0:	b530      	push	{r4, r5, lr}
 80015e2:	b085      	sub	sp, #20
 80015e4:	4604      	mov	r4, r0
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
  ADC_ChannelConfTypeDef sConfig = {0};
 80015e6:	2300      	movs	r3, #0
 80015e8:	9301      	str	r3, [sp, #4]
 80015ea:	9302      	str	r3, [sp, #8]
 80015ec:	9303      	str	r3, [sp, #12]

  MX_ADC_Init();
 80015ee:	f7ff ffa7 	bl	8001540 <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 80015f2:	4816      	ldr	r0, [pc, #88]	; (800164c <ADC_ReadChannels+0x6c>)
 80015f4:	f002 fd84 	bl	8004100 <HAL_ADCEx_Calibration_Start>
 80015f8:	b9f8      	cbnz	r0, 800163a <ADC_ReadChannels+0x5a>
  {
    Error_Handler();
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 80015fa:	9401      	str	r4, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80015fc:	2300      	movs	r3, #0
 80015fe:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001600:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001602:	a901      	add	r1, sp, #4
 8001604:	4811      	ldr	r0, [pc, #68]	; (800164c <ADC_ReadChannels+0x6c>)
 8001606:	f002 fac7 	bl	8003b98 <HAL_ADC_ConfigChannel>
 800160a:	b9c8      	cbnz	r0, 8001640 <ADC_ReadChannels+0x60>
  {
    Error_Handler();
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 800160c:	480f      	ldr	r0, [pc, #60]	; (800164c <ADC_ReadChannels+0x6c>)
 800160e:	f002 fc85 	bl	8003f1c <HAL_ADC_Start>
 8001612:	b9c0      	cbnz	r0, 8001646 <ADC_ReadChannels+0x66>
  {
    /* Start Error */
    Error_Handler();
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8001614:	4c0d      	ldr	r4, [pc, #52]	; (800164c <ADC_ReadChannels+0x6c>)
 8001616:	f04f 31ff 	mov.w	r1, #4294967295
 800161a:	4620      	mov	r0, r4
 800161c:	f002 fa5a 	bl	8003ad4 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc) ;   /* it calls also ADC_Disable() */
 8001620:	4620      	mov	r0, r4
 8001622:	f002 fd4d 	bl	80040c0 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 8001626:	4620      	mov	r0, r4
 8001628:	f002 fab3 	bl	8003b92 <HAL_ADC_GetValue>
 800162c:	4605      	mov	r5, r0

  HAL_ADC_DeInit(&hadc);
 800162e:	4620      	mov	r0, r4
 8001630:	f002 fcf0 	bl	8004014 <HAL_ADC_DeInit>

  return ADCxConvertedValues;
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 8001634:	4628      	mov	r0, r5
 8001636:	b005      	add	sp, #20
 8001638:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 800163a:	f000 f8cd 	bl	80017d8 <Error_Handler>
 800163e:	e7dc      	b.n	80015fa <ADC_ReadChannels+0x1a>
    Error_Handler();
 8001640:	f000 f8ca 	bl	80017d8 <Error_Handler>
 8001644:	e7e2      	b.n	800160c <ADC_ReadChannels+0x2c>
    Error_Handler();
 8001646:	f000 f8c7 	bl	80017d8 <Error_Handler>
 800164a:	e7e3      	b.n	8001614 <ADC_ReadChannels+0x34>
 800164c:	200002c4 	.word	0x200002c4

08001650 <SYS_InitMeasurement>:
  hadc.Instance = ADC;
 8001650:	4b01      	ldr	r3, [pc, #4]	; (8001658 <SYS_InitMeasurement+0x8>)
 8001652:	4a02      	ldr	r2, [pc, #8]	; (800165c <SYS_InitMeasurement+0xc>)
 8001654:	601a      	str	r2, [r3, #0]
}
 8001656:	4770      	bx	lr
 8001658:	200002c4 	.word	0x200002c4
 800165c:	40012400 	.word	0x40012400

08001660 <SYS_GetBatteryLevel>:
{
 8001660:	b508      	push	{r3, lr}
  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 8001662:	480d      	ldr	r0, [pc, #52]	; (8001698 <SYS_GetBatteryLevel+0x38>)
 8001664:	f7ff ffbc 	bl	80015e0 <ADC_ReadChannels>
  if (measuredLevel == 0)
 8001668:	b1a0      	cbz	r0, 8001694 <SYS_GetBatteryLevel+0x34>
 800166a:	4603      	mov	r3, r0
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 800166c:	4a0b      	ldr	r2, [pc, #44]	; (800169c <SYS_GetBatteryLevel+0x3c>)
 800166e:	f8b2 00aa 	ldrh.w	r0, [r2, #170]	; 0xaa
 8001672:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001676:	4290      	cmp	r0, r2
 8001678:	d007      	beq.n	800168a <SYS_GetBatteryLevel+0x2a>
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 800167a:	f640 42e4 	movw	r2, #3300	; 0xce4
 800167e:	fb02 f000 	mul.w	r0, r2, r0
 8001682:	fbb0 f0f3 	udiv	r0, r0, r3
 8001686:	b280      	uxth	r0, r0
 8001688:	e005      	b.n	8001696 <SYS_GetBatteryLevel+0x36>
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 800168a:	4805      	ldr	r0, [pc, #20]	; (80016a0 <SYS_GetBatteryLevel+0x40>)
 800168c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001690:	b280      	uxth	r0, r0
 8001692:	e000      	b.n	8001696 <SYS_GetBatteryLevel+0x36>
    batteryLevelmV = 0;
 8001694:	2000      	movs	r0, #0
}
 8001696:	bd08      	pop	{r3, pc}
 8001698:	b4002000 	.word	0xb4002000
 800169c:	1fff7500 	.word	0x1fff7500
 80016a0:	004c08d8 	.word	0x004c08d8

080016a4 <SYS_GetTemperatureLevel>:
{
 80016a4:	b510      	push	{r4, lr}
 80016a6:	b082      	sub	sp, #8
  uint16_t batteryLevelmV = SYS_GetBatteryLevel();
 80016a8:	f7ff ffda 	bl	8001660 <SYS_GetBatteryLevel>
 80016ac:	4604      	mov	r4, r0
  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_TEMPSENSOR);
 80016ae:	481f      	ldr	r0, [pc, #124]	; (800172c <SYS_GetTemperatureLevel+0x88>)
 80016b0:	f7ff ff96 	bl	80015e0 <ADC_ReadChannels>
  if (((int32_t)*TEMPSENSOR_CAL2_ADDR - (int32_t)*TEMPSENSOR_CAL1_ADDR) != 0)
 80016b4:	4a1e      	ldr	r2, [pc, #120]	; (8001730 <SYS_GetTemperatureLevel+0x8c>)
 80016b6:	f8b2 30c8 	ldrh.w	r3, [r2, #200]	; 0xc8
 80016ba:	f8b2 20a8 	ldrh.w	r2, [r2, #168]	; 0xa8
 80016be:	4293      	cmp	r3, r2
 80016c0:	d01a      	beq.n	80016f8 <SYS_GetTemperatureLevel+0x54>
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE(batteryLevelmV,
 80016c2:	fb00 f404 	mul.w	r4, r0, r4
 80016c6:	08a4      	lsrs	r4, r4, #2
 80016c8:	491a      	ldr	r1, [pc, #104]	; (8001734 <SYS_GetTemperatureLevel+0x90>)
 80016ca:	fba1 1404 	umull	r1, r4, r1, r4
 80016ce:	ebc2 1454 	rsb	r4, r2, r4, lsr #5
 80016d2:	2164      	movs	r1, #100	; 0x64
 80016d4:	fb01 f404 	mul.w	r4, r1, r4
 80016d8:	1a9b      	subs	r3, r3, r2
 80016da:	fb94 f4f3 	sdiv	r4, r4, r3
 80016de:	341e      	adds	r4, #30
 80016e0:	b224      	sxth	r4, r4
  APP_LOG(TS_ON, VLEVEL_L, "temp= %d\n\r", temperatureDegreeC);
 80016e2:	9400      	str	r4, [sp, #0]
 80016e4:	4b14      	ldr	r3, [pc, #80]	; (8001738 <SYS_GetTemperatureLevel+0x94>)
 80016e6:	2201      	movs	r2, #1
 80016e8:	2100      	movs	r1, #0
 80016ea:	4610      	mov	r0, r2
 80016ec:	f010 f88e 	bl	801180c <UTIL_ADV_TRACE_COND_FSend>
  temperatureDegreeC <<= 8;
 80016f0:	0220      	lsls	r0, r4, #8
}
 80016f2:	b200      	sxth	r0, r0
 80016f4:	b002      	add	sp, #8
 80016f6:	bd10      	pop	{r4, pc}
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS(TEMPSENSOR_TYP_AVGSLOPE,
 80016f8:	fb04 f000 	mul.w	r0, r4, r0
 80016fc:	4b0f      	ldr	r3, [pc, #60]	; (800173c <SYS_GetTemperatureLevel+0x98>)
 80016fe:	fba3 2300 	umull	r2, r3, r3, r0
 8001702:	1ac4      	subs	r4, r0, r3
 8001704:	eb03 0354 	add.w	r3, r3, r4, lsr #1
 8001708:	0adb      	lsrs	r3, r3, #11
 800170a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800170e:	fb02 f303 	mul.w	r3, r2, r3
 8001712:	f5a3 2339 	sub.w	r3, r3, #757760	; 0xb9000
 8001716:	f5a3 630c 	sub.w	r3, r3, #2240	; 0x8c0
 800171a:	4a09      	ldr	r2, [pc, #36]	; (8001740 <SYS_GetTemperatureLevel+0x9c>)
 800171c:	fb82 1203 	smull	r1, r2, r2, r3
 8001720:	17db      	asrs	r3, r3, #31
 8001722:	ebc3 23a2 	rsb	r3, r3, r2, asr #10
 8001726:	331e      	adds	r3, #30
 8001728:	b21c      	sxth	r4, r3
 800172a:	e7da      	b.n	80016e2 <SYS_GetTemperatureLevel+0x3e>
 800172c:	b0001000 	.word	0xb0001000
 8001730:	1fff7500 	.word	0x1fff7500
 8001734:	09ee009f 	.word	0x09ee009f
 8001738:	08016efc 	.word	0x08016efc
 800173c:	00100101 	.word	0x00100101
 8001740:	68db8bad 	.word	0x68db8bad

08001744 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001744:	b500      	push	{lr}
 8001746:	b083      	sub	sp, #12
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001748:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800174c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800174e:	f042 0204 	orr.w	r2, r2, #4
 8001752:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001754:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001756:	f002 0204 	and.w	r2, r2, #4
 800175a:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 800175c:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800175e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001760:	f042 0201 	orr.w	r2, r2, #1
 8001764:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001766:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001768:	f003 0301 	and.w	r3, r3, #1
 800176c:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 800176e:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 2, 0);
 8001770:	2200      	movs	r2, #0
 8001772:	2102      	movs	r1, #2
 8001774:	200f      	movs	r0, #15
 8001776:	f002 fd25 	bl	80041c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800177a:	200f      	movs	r0, #15
 800177c:	f002 fd5a 	bl	8004234 <HAL_NVIC_EnableIRQ>

}
 8001780:	b003      	add	sp, #12
 8001782:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001788 <MX_GPIO_Init>:
    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
static void MX_GPIO_Init(void)
{
 8001788:	b530      	push	{r4, r5, lr}
 800178a:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800178c:	2400      	movs	r4, #0
 800178e:	9401      	str	r4, [sp, #4]
 8001790:	9402      	str	r4, [sp, #8]
 8001792:	9403      	str	r4, [sp, #12]
 8001794:	9404      	str	r4, [sp, #16]
 8001796:	9405      	str	r4, [sp, #20]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001798:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800179c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800179e:	f042 0202 	orr.w	r2, r2, #2
 80017a2:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80017a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017a6:	f003 0302 	and.w	r3, r3, #2
 80017aa:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80017ac:	9b00      	ldr	r3, [sp, #0]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DS18B20_PORT,DS18B20_PIN |GPIO_PIN_4 ,0);
 80017ae:	4d09      	ldr	r5, [pc, #36]	; (80017d4 <MX_GPIO_Init+0x4c>)
 80017b0:	4622      	mov	r2, r4
 80017b2:	2190      	movs	r1, #144	; 0x90
 80017b4:	4628      	mov	r0, r5
 80017b6:	f003 fa74 	bl	8004ca2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4 |GPIO_PIN_7;
 80017ba:	2390      	movs	r3, #144	; 0x90
 80017bc:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017be:	2301      	movs	r3, #1
 80017c0:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c2:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c4:	9404      	str	r4, [sp, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017c6:	a901      	add	r1, sp, #4
 80017c8:	4628      	mov	r0, r5
 80017ca:	f003 f913 	bl	80049f4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017ce:	b007      	add	sp, #28
 80017d0:	bd30      	pop	{r4, r5, pc}
 80017d2:	bf00      	nop
 80017d4:	48000400 	.word	0x48000400

080017d8 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017d8:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017da:	e7fe      	b.n	80017da <Error_Handler+0x2>

080017dc <MX_I2C3_Init>:
{
 80017dc:	b508      	push	{r3, lr}
  hi2c3.Instance = I2C3;
 80017de:	4811      	ldr	r0, [pc, #68]	; (8001824 <MX_I2C3_Init+0x48>)
 80017e0:	4b11      	ldr	r3, [pc, #68]	; (8001828 <MX_I2C3_Init+0x4c>)
 80017e2:	6003      	str	r3, [r0, #0]
  hi2c3.Init.Timing = 0x00000E14;
 80017e4:	f640 6314 	movw	r3, #3604	; 0xe14
 80017e8:	6043      	str	r3, [r0, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80017ea:	2300      	movs	r3, #0
 80017ec:	6083      	str	r3, [r0, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017ee:	2201      	movs	r2, #1
 80017f0:	60c2      	str	r2, [r0, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017f2:	6103      	str	r3, [r0, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80017f4:	6143      	str	r3, [r0, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80017f6:	6183      	str	r3, [r0, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017f8:	61c3      	str	r3, [r0, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017fa:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80017fc:	f003 fc1e 	bl	800503c <HAL_I2C_Init>
 8001800:	b950      	cbnz	r0, 8001818 <MX_I2C3_Init+0x3c>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001802:	2100      	movs	r1, #0
 8001804:	4807      	ldr	r0, [pc, #28]	; (8001824 <MX_I2C3_Init+0x48>)
 8001806:	f003 fe23 	bl	8005450 <HAL_I2CEx_ConfigAnalogFilter>
 800180a:	b938      	cbnz	r0, 800181c <MX_I2C3_Init+0x40>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800180c:	2100      	movs	r1, #0
 800180e:	4805      	ldr	r0, [pc, #20]	; (8001824 <MX_I2C3_Init+0x48>)
 8001810:	f003 fe4c 	bl	80054ac <HAL_I2CEx_ConfigDigitalFilter>
 8001814:	b920      	cbnz	r0, 8001820 <MX_I2C3_Init+0x44>
}
 8001816:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001818:	f7ff ffde 	bl	80017d8 <Error_Handler>
    Error_Handler();
 800181c:	f7ff ffdc 	bl	80017d8 <Error_Handler>
    Error_Handler();
 8001820:	f7ff ffda 	bl	80017d8 <Error_Handler>
 8001824:	20000328 	.word	0x20000328
 8001828:	40005c00 	.word	0x40005c00

0800182c <SystemClock_Config>:
{
 800182c:	b500      	push	{lr}
 800182e:	b09b      	sub	sp, #108	; 0x6c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001830:	2248      	movs	r2, #72	; 0x48
 8001832:	2100      	movs	r1, #0
 8001834:	a808      	add	r0, sp, #32
 8001836:	f011 fd2c 	bl	8013292 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800183a:	2300      	movs	r3, #0
 800183c:	9302      	str	r3, [sp, #8]
 800183e:	9303      	str	r3, [sp, #12]
 8001840:	9304      	str	r3, [sp, #16]
 8001842:	9305      	str	r3, [sp, #20]
 8001844:	9306      	str	r3, [sp, #24]
 8001846:	9307      	str	r3, [sp, #28]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001848:	4916      	ldr	r1, [pc, #88]	; (80018a4 <SystemClock_Config+0x78>)
 800184a:	680a      	ldr	r2, [r1, #0]
 800184c:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8001850:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001854:	600a      	str	r2, [r1, #0]
 8001856:	680a      	ldr	r2, [r1, #0]
 8001858:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
 800185c:	9201      	str	r2, [sp, #4]
 800185e:	9a01      	ldr	r2, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001860:	2224      	movs	r2, #36	; 0x24
 8001862:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001864:	2281      	movs	r2, #129	; 0x81
 8001866:	920b      	str	r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001868:	2201      	movs	r2, #1
 800186a:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800186c:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 800186e:	22b0      	movs	r2, #176	; 0xb0
 8001870:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001872:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001874:	a808      	add	r0, sp, #32
 8001876:	f003 ffdf 	bl	8005838 <HAL_RCC_OscConfig>
 800187a:	b978      	cbnz	r0, 800189c <SystemClock_Config+0x70>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 800187c:	234f      	movs	r3, #79	; 0x4f
 800187e:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001880:	2300      	movs	r3, #0
 8001882:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001884:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001886:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001888:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 800188a:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800188c:	2102      	movs	r1, #2
 800188e:	a802      	add	r0, sp, #8
 8001890:	f004 fb0e 	bl	8005eb0 <HAL_RCC_ClockConfig>
 8001894:	b920      	cbnz	r0, 80018a0 <SystemClock_Config+0x74>
}
 8001896:	b01b      	add	sp, #108	; 0x6c
 8001898:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800189c:	f7ff ff9c 	bl	80017d8 <Error_Handler>
    Error_Handler();
 80018a0:	f7ff ff9a 	bl	80017d8 <Error_Handler>
 80018a4:	58000400 	.word	0x58000400

080018a8 <main>:
{
 80018a8:	b508      	push	{r3, lr}
  HAL_Init();
 80018aa:	f001 ff7b 	bl	80037a4 <HAL_Init>
  SystemClock_Config();
 80018ae:	f7ff ffbd 	bl	800182c <SystemClock_Config>
  MX_GPIO_Init();
 80018b2:	f7ff ff69 	bl	8001788 <MX_GPIO_Init>
  MX_I2C3_Init();
 80018b6:	f7ff ff91 	bl	80017dc <MX_I2C3_Init>
  MX_LoRaWAN_Init();
 80018ba:	f001 fb9f 	bl	8002ffc <MX_LoRaWAN_Init>
  BME_280_Init();
 80018be:	f000 feb1 	bl	8002624 <BME_280_Init>
    MX_LoRaWAN_Process();
 80018c2:	f001 fba1 	bl	8003008 <MX_LoRaWAN_Process>
  while (1)
 80018c6:	e7fc      	b.n	80018c2 <main+0x1a>

080018c8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80018c8:	b500      	push	{lr}
 80018ca:	b08d      	sub	sp, #52	; 0x34

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 80018cc:	222c      	movs	r2, #44	; 0x2c
 80018ce:	2100      	movs	r1, #0
 80018d0:	a801      	add	r0, sp, #4
 80018d2:	f011 fcde 	bl	8013292 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80018d6:	4819      	ldr	r0, [pc, #100]	; (800193c <MX_RTC_Init+0x74>)
 80018d8:	4b19      	ldr	r3, [pc, #100]	; (8001940 <MX_RTC_Init+0x78>)
 80018da:	6003      	str	r3, [r0, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 80018dc:	231f      	movs	r3, #31
 80018de:	6083      	str	r3, [r0, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80018e0:	2300      	movs	r3, #0
 80018e2:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80018e4:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80018e6:	6183      	str	r3, [r0, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80018e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018ec:	61c2      	str	r2, [r0, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80018ee:	6203      	str	r3, [r0, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 80018f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018f4:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80018f6:	f004 fe1d 	bl	8006534 <HAL_RTC_Init>
 80018fa:	b9a8      	cbnz	r0, 8001928 <MX_RTC_Init+0x60>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 80018fc:	480f      	ldr	r0, [pc, #60]	; (800193c <MX_RTC_Init+0x74>)
 80018fe:	f004 ff53 	bl	80067a8 <HAL_RTCEx_SetSSRU_IT>
 8001902:	b9a0      	cbnz	r0, 800192e <MX_RTC_Init+0x66>
  {
    Error_Handler();
  }
  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001904:	2200      	movs	r2, #0
 8001906:	9208      	str	r2, [sp, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001908:	9202      	str	r2, [sp, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800190a:	9206      	str	r2, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 800190c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001910:	9307      	str	r3, [sp, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8001912:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001916:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8001918:	a901      	add	r1, sp, #4
 800191a:	4808      	ldr	r0, [pc, #32]	; (800193c <MX_RTC_Init+0x74>)
 800191c:	f004 fe68 	bl	80065f0 <HAL_RTC_SetAlarm_IT>
 8001920:	b940      	cbnz	r0, 8001934 <MX_RTC_Init+0x6c>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001922:	b00d      	add	sp, #52	; 0x34
 8001924:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001928:	f7ff ff56 	bl	80017d8 <Error_Handler>
 800192c:	e7e6      	b.n	80018fc <MX_RTC_Init+0x34>
    Error_Handler();
 800192e:	f7ff ff53 	bl	80017d8 <Error_Handler>
 8001932:	e7e7      	b.n	8001904 <MX_RTC_Init+0x3c>
    Error_Handler();
 8001934:	f7ff ff50 	bl	80017d8 <Error_Handler>
}
 8001938:	e7f3      	b.n	8001922 <MX_RTC_Init+0x5a>
 800193a:	bf00      	nop
 800193c:	2000037c 	.word	0x2000037c
 8001940:	40002800 	.word	0x40002800

08001944 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001944:	b510      	push	{r4, lr}
 8001946:	b090      	sub	sp, #64	; 0x40
 8001948:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800194a:	2238      	movs	r2, #56	; 0x38
 800194c:	2100      	movs	r1, #0
 800194e:	a802      	add	r0, sp, #8
 8001950:	f011 fc9f 	bl	8013292 <memset>
  if(rtcHandle->Instance==RTC)
 8001954:	6822      	ldr	r2, [r4, #0]
 8001956:	4b1a      	ldr	r3, [pc, #104]	; (80019c0 <HAL_RTC_MspInit+0x7c>)
 8001958:	429a      	cmp	r2, r3
 800195a:	d001      	beq.n	8001960 <HAL_RTC_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800195c:	b010      	add	sp, #64	; 0x40
 800195e:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001960:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001964:	9302      	str	r3, [sp, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001966:	f44f 7380 	mov.w	r3, #256	; 0x100
 800196a:	930f      	str	r3, [sp, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800196c:	a802      	add	r0, sp, #8
 800196e:	f004 fbd1 	bl	8006114 <HAL_RCCEx_PeriphCLKConfig>
 8001972:	bb08      	cbnz	r0, 80019b8 <HAL_RTC_MspInit+0x74>
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001974:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001978:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800197c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001980:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001984:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001986:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800198a:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800198c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800198e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001992:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001994:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 8001996:	2200      	movs	r2, #0
 8001998:	4611      	mov	r1, r2
 800199a:	2002      	movs	r0, #2
 800199c:	f002 fc12 	bl	80041c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 80019a0:	2002      	movs	r0, #2
 80019a2:	f002 fc47 	bl	8004234 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80019a6:	2200      	movs	r2, #0
 80019a8:	4611      	mov	r1, r2
 80019aa:	202a      	movs	r0, #42	; 0x2a
 80019ac:	f002 fc0a 	bl	80041c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80019b0:	202a      	movs	r0, #42	; 0x2a
 80019b2:	f002 fc3f 	bl	8004234 <HAL_NVIC_EnableIRQ>
}
 80019b6:	e7d1      	b.n	800195c <HAL_RTC_MspInit+0x18>
      Error_Handler();
 80019b8:	f7ff ff0e 	bl	80017d8 <Error_Handler>
 80019bc:	e7da      	b.n	8001974 <HAL_RTC_MspInit+0x30>
 80019be:	bf00      	nop
 80019c0:	40002800 	.word	0x40002800

080019c4 <PWR_EnterOffMode>:
void PWR_EnterOffMode(void)
{
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 80019c4:	4770      	bx	lr

080019c6 <PWR_ExitOffMode>:
void PWR_ExitOffMode(void)
{
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 80019c6:	4770      	bx	lr

080019c8 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 80019c8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 80019ca:	f001 ff0d 	bl	80037e8 <HAL_SuspendTick>
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 80019ce:	2001      	movs	r0, #1
 80019d0:	4b02      	ldr	r3, [pc, #8]	; (80019dc <PWR_EnterStopMode+0x14>)
 80019d2:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
  LL_PWR_ClearFlag_C1STOP_C1STB();

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 80019d6:	f003 fdf9 	bl	80055cc <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 80019da:	bd08      	pop	{r3, pc}
 80019dc:	58000400 	.word	0x58000400

080019e0 <PWR_ExitSleepMode>:

  /* USER CODE END EnterSleepMode_3 */
}

void PWR_ExitSleepMode(void)
{
 80019e0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Suspend sysTick */
  HAL_ResumeTick();
 80019e2:	f001 ff08 	bl	80037f6 <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 80019e6:	bd08      	pop	{r3, pc}

080019e8 <PWR_ExitStopMode>:
{
 80019e8:	b508      	push	{r3, lr}
  HAL_ResumeTick();
 80019ea:	f001 ff04 	bl	80037f6 <HAL_ResumeTick>
  vcom_Resume();
 80019ee:	f000 fc61 	bl	80022b4 <vcom_Resume>
}
 80019f2:	bd08      	pop	{r3, pc}

080019f4 <PWR_EnterSleepMode>:
{
 80019f4:	b508      	push	{r3, lr}
  HAL_SuspendTick();
 80019f6:	f001 fef7 	bl	80037e8 <HAL_SuspendTick>
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80019fa:	2101      	movs	r1, #1
 80019fc:	2000      	movs	r0, #0
 80019fe:	f003 fd89 	bl	8005514 <HAL_PWR_EnterSLEEPMode>
}
 8001a02:	bd08      	pop	{r3, pc}

08001a04 <HAL_I2C_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001a08:	b097      	sub	sp, #92	; 0x5c
 8001a0a:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	9111      	str	r1, [sp, #68]	; 0x44
 8001a10:	9112      	str	r1, [sp, #72]	; 0x48
 8001a12:	9113      	str	r1, [sp, #76]	; 0x4c
 8001a14:	9114      	str	r1, [sp, #80]	; 0x50
 8001a16:	9115      	str	r1, [sp, #84]	; 0x54
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a18:	2238      	movs	r2, #56	; 0x38
 8001a1a:	a803      	add	r0, sp, #12
 8001a1c:	f011 fc39 	bl	8013292 <memset>
  if(hi2c->Instance==I2C3)
 8001a20:	6822      	ldr	r2, [r4, #0]
 8001a22:	4b23      	ldr	r3, [pc, #140]	; (8001ab0 <HAL_I2C_MspInit+0xac>)
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d002      	beq.n	8001a2e <HAL_I2C_MspInit+0x2a>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001a28:	b017      	add	sp, #92	; 0x5c
 8001a2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001a2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a32:	9303      	str	r3, [sp, #12]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001a34:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8001a38:	930a      	str	r3, [sp, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a3a:	a803      	add	r0, sp, #12
 8001a3c:	f004 fb6a 	bl	8006114 <HAL_RCCEx_PeriphCLKConfig>
 8001a40:	2800      	cmp	r0, #0
 8001a42:	d132      	bne.n	8001aaa <HAL_I2C_MspInit+0xa6>
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001a44:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 8001a48:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001a4a:	f043 0304 	orr.w	r3, r3, #4
 8001a4e:	64e3      	str	r3, [r4, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001a50:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001a52:	f003 0304 	and.w	r3, r3, #4
 8001a56:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 8001a58:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	9311      	str	r3, [sp, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a5e:	f04f 0912 	mov.w	r9, #18
 8001a62:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a66:	2501      	movs	r5, #1
 8001a68:	9513      	str	r5, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a6a:	f04f 0800 	mov.w	r8, #0
 8001a6e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001a72:	2704      	movs	r7, #4
 8001a74:	9715      	str	r7, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a76:	4e0f      	ldr	r6, [pc, #60]	; (8001ab4 <HAL_I2C_MspInit+0xb0>)
 8001a78:	a911      	add	r1, sp, #68	; 0x44
 8001a7a:	4630      	mov	r0, r6
 8001a7c:	f002 ffba 	bl	80049f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a80:	9511      	str	r5, [sp, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a82:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a86:	9513      	str	r5, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a88:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001a8c:	9715      	str	r7, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a8e:	a911      	add	r1, sp, #68	; 0x44
 8001a90:	4630      	mov	r0, r6
 8001a92:	f002 ffaf 	bl	80049f4 <HAL_GPIO_Init>
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001a96:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001a98:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001a9c:	65a3      	str	r3, [r4, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001a9e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001aa0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001aa4:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001aa6:	9b01      	ldr	r3, [sp, #4]
}
 8001aa8:	e7be      	b.n	8001a28 <HAL_I2C_MspInit+0x24>
      Error_Handler();
 8001aaa:	f7ff fe95 	bl	80017d8 <Error_Handler>
 8001aae:	e7c9      	b.n	8001a44 <HAL_I2C_MspInit+0x40>
 8001ab0:	40005c00 	.word	0x40005c00
 8001ab4:	48000800 	.word	0x48000800

08001ab8 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001ab8:	4770      	bx	lr

08001aba <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001aba:	e7fe      	b.n	8001aba <HardFault_Handler>

08001abc <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001abc:	e7fe      	b.n	8001abc <MemManage_Handler>

08001abe <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001abe:	e7fe      	b.n	8001abe <BusFault_Handler>

08001ac0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ac0:	e7fe      	b.n	8001ac0 <UsageFault_Handler>

08001ac2 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ac2:	4770      	bx	lr

08001ac4 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ac4:	4770      	bx	lr

08001ac6 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ac6:	4770      	bx	lr

08001ac8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ac8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001aca:	f001 fe81 	bl	80037d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ace:	bd08      	pop	{r3, pc}

08001ad0 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8001ad0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8001ad2:	4802      	ldr	r0, [pc, #8]	; (8001adc <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0xc>)
 8001ad4:	f004 fe94 	bl	8006800 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8001ad8:	bd08      	pop	{r3, pc}
 8001ada:	bf00      	nop
 8001adc:	2000037c 	.word	0x2000037c

08001ae0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI Line 1 Interrupt.
  */
void EXTI15_10_IRQHandler(void)
{
 8001ae0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001ae2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001ae6:	f003 f8eb 	bl	8004cc0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001aea:	bd08      	pop	{r3, pc}

08001aec <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 5 Interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001aec:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001aee:	4802      	ldr	r0, [pc, #8]	; (8001af8 <DMA1_Channel5_IRQHandler+0xc>)
 8001af0:	f002 fdbe 	bl	8004670 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001af4:	bd08      	pop	{r3, pc}
 8001af6:	bf00      	nop
 8001af8:	200003cc 	.word	0x200003cc

08001afc <USART1_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8001afc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001afe:	4802      	ldr	r0, [pc, #8]	; (8001b08 <USART1_IRQHandler+0xc>)
 8001b00:	f005 fb38 	bl	8007174 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001b04:	bd08      	pop	{r3, pc}
 8001b06:	bf00      	nop
 8001b08:	2000042c 	.word	0x2000042c

08001b0c <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001b0c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001b0e:	4802      	ldr	r0, [pc, #8]	; (8001b18 <RTC_Alarm_IRQHandler+0xc>)
 8001b10:	f004 fc8a 	bl	8006428 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001b14:	bd08      	pop	{r3, pc}
 8001b16:	bf00      	nop
 8001b18:	2000037c 	.word	0x2000037c

08001b1c <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8001b1c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8001b1e:	4802      	ldr	r0, [pc, #8]	; (8001b28 <SUBGHZ_Radio_IRQHandler+0xc>)
 8001b20:	f005 f918 	bl	8006d54 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8001b24:	bd08      	pop	{r3, pc}
 8001b26:	bf00      	nop
 8001b28:	200003b4 	.word	0x200003b4

08001b2c <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8001b2c:	b508      	push	{r3, lr}
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8001b2e:	4805      	ldr	r0, [pc, #20]	; (8001b44 <MX_SUBGHZ_Init+0x18>)
 8001b30:	2308      	movs	r3, #8
 8001b32:	6003      	str	r3, [r0, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8001b34:	f004 fe9a 	bl	800686c <HAL_SUBGHZ_Init>
 8001b38:	b900      	cbnz	r0, 8001b3c <MX_SUBGHZ_Init+0x10>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8001b3a:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001b3c:	f7ff fe4c 	bl	80017d8 <Error_Handler>
}
 8001b40:	e7fb      	b.n	8001b3a <MX_SUBGHZ_Init+0xe>
 8001b42:	bf00      	nop
 8001b44:	200003b4 	.word	0x200003b4

08001b48 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8001b48:	b500      	push	{lr}
 8001b4a:	b083      	sub	sp, #12
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8001b4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b50:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001b52:	f042 0201 	orr.w	r2, r2, #1
 8001b56:	665a      	str	r2, [r3, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8001b58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001b5a:	f003 0301 	and.w	r3, r3, #1
 8001b5e:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001b60:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8001b62:	2200      	movs	r2, #0
 8001b64:	4611      	mov	r1, r2
 8001b66:	2032      	movs	r0, #50	; 0x32
 8001b68:	f002 fb2c 	bl	80041c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8001b6c:	2032      	movs	r0, #50	; 0x32
 8001b6e:	f002 fb61 	bl	8004234 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8001b72:	b003      	add	sp, #12
 8001b74:	f85d fb04 	ldr.w	pc, [sp], #4

08001b78 <tiny_snprintf_like>:

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8001b78:	b40c      	push	{r2, r3}
 8001b7a:	b500      	push	{lr}
 8001b7c:	b083      	sub	sp, #12
 8001b7e:	ab04      	add	r3, sp, #16
 8001b80:	f853 2b04 	ldr.w	r2, [r3], #4
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8001b84:	9301      	str	r3, [sp, #4]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8001b86:	f010 fb23 	bl	80121d0 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8001b8a:	b003      	add	sp, #12
 8001b8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8001b90:	b002      	add	sp, #8
 8001b92:	4770      	bx	lr

08001b94 <TimestampNow>:
{
 8001b94:	b530      	push	{r4, r5, lr}
 8001b96:	b085      	sub	sp, #20
 8001b98:	4604      	mov	r4, r0
 8001b9a:	460d      	mov	r5, r1
  SysTime_t curtime = SysTimeGet();
 8001b9c:	a802      	add	r0, sp, #8
 8001b9e:	f010 f88b 	bl	8011cb8 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8001ba2:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8001ba6:	9300      	str	r3, [sp, #0]
 8001ba8:	9b02      	ldr	r3, [sp, #8]
 8001baa:	4a05      	ldr	r2, [pc, #20]	; (8001bc0 <TimestampNow+0x2c>)
 8001bac:	2110      	movs	r1, #16
 8001bae:	4620      	mov	r0, r4
 8001bb0:	f7ff ffe2 	bl	8001b78 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8001bb4:	4620      	mov	r0, r4
 8001bb6:	f7fe fb33 	bl	8000220 <strlen>
 8001bba:	8028      	strh	r0, [r5, #0]
}
 8001bbc:	b005      	add	sp, #20
 8001bbe:	bd30      	pop	{r4, r5, pc}
 8001bc0:	08016f20 	.word	0x08016f20

08001bc4 <SystemApp_Init>:
{
 8001bc4:	b508      	push	{r3, lr}
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001bc6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bca:	6893      	ldr	r3, [r2, #8]
 8001bcc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001bd0:	6093      	str	r3, [r2, #8]
  UTIL_TIMER_Init();
 8001bd2:	f010 f8f5 	bl	8011dc0 <UTIL_TIMER_Init>
  DBG_Disable();
 8001bd6:	f000 f8bc 	bl	8001d52 <DBG_Disable>
  DBG_ProbesInit();
 8001bda:	f000 f8dc 	bl	8001d96 <DBG_ProbesInit>
  UTIL_ADV_TRACE_Init();
 8001bde:	f00f fda1 	bl	8011724 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8001be2:	4808      	ldr	r0, [pc, #32]	; (8001c04 <SystemApp_Init+0x40>)
 8001be4:	f00f fdb8 	bl	8011758 <UTIL_ADV_TRACE_RegisterTimeStampFunction>
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8001be8:	2002      	movs	r0, #2
 8001bea:	f00f fdbb 	bl	8011764 <UTIL_ADV_TRACE_SetVerboseLevel>
  SYS_InitMeasurement();
 8001bee:	f7ff fd2f 	bl	8001650 <SYS_InitMeasurement>
  EnvSensors_Init();
 8001bf2:	f000 f8d1 	bl	8001d98 <EnvSensors_Init>
  UTIL_LPM_Init();
 8001bf6:	f00f fec5 	bl	8011984 <UTIL_LPM_Init>
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8001bfa:	2101      	movs	r1, #1
 8001bfc:	4608      	mov	r0, r1
 8001bfe:	f00f fee1 	bl	80119c4 <UTIL_LPM_SetOffMode>
}
 8001c02:	bd08      	pop	{r3, pc}
 8001c04:	08001b95 	.word	0x08001b95

08001c08 <UTIL_SEQ_Idle>:
{
 8001c08:	b508      	push	{r3, lr}
  UTIL_LPM_EnterLowPower();
 8001c0a:	f00f fef1 	bl	80119f0 <UTIL_LPM_EnterLowPower>
}
 8001c0e:	bd08      	pop	{r3, pc}

08001c10 <GetBatteryLevel>:
{
 8001c10:	b510      	push	{r4, lr}
 8001c12:	b082      	sub	sp, #8
  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 8001c14:	f7ff fd24 	bl	8001660 <SYS_GetBatteryLevel>
  if (batteryLevelmV > VDD_BAT)
 8001c18:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001c1c:	4298      	cmp	r0, r3
 8001c1e:	d80d      	bhi.n	8001c3c <GetBatteryLevel+0x2c>
  else if (batteryLevelmV < VDD_MIN)
 8001c20:	f5b0 6fe1 	cmp.w	r0, #1800	; 0x708
 8001c24:	d315      	bcc.n	8001c52 <GetBatteryLevel+0x42>
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 8001c26:	f5a0 60e1 	sub.w	r0, r0, #1800	; 0x708
 8001c2a:	ebc0 10c0 	rsb	r0, r0, r0, lsl #7
 8001c2e:	0044      	lsls	r4, r0, #1
 8001c30:	4b09      	ldr	r3, [pc, #36]	; (8001c58 <GetBatteryLevel+0x48>)
 8001c32:	fba3 3404 	umull	r3, r4, r3, r4
 8001c36:	f3c4 14c7 	ubfx	r4, r4, #7, #8
 8001c3a:	e000      	b.n	8001c3e <GetBatteryLevel+0x2e>
    batteryLevel = LORAWAN_MAX_BAT;
 8001c3c:	24fe      	movs	r4, #254	; 0xfe
  APP_LOG(TS_ON, VLEVEL_M, "VDDA= %d\r\n", batteryLevel);
 8001c3e:	9400      	str	r4, [sp, #0]
 8001c40:	4b06      	ldr	r3, [pc, #24]	; (8001c5c <GetBatteryLevel+0x4c>)
 8001c42:	2201      	movs	r2, #1
 8001c44:	2100      	movs	r1, #0
 8001c46:	2002      	movs	r0, #2
 8001c48:	f00f fde0 	bl	801180c <UTIL_ADV_TRACE_COND_FSend>
}
 8001c4c:	4620      	mov	r0, r4
 8001c4e:	b002      	add	sp, #8
 8001c50:	bd10      	pop	{r4, pc}
    batteryLevel = 0;
 8001c52:	2400      	movs	r4, #0
 8001c54:	e7f3      	b.n	8001c3e <GetBatteryLevel+0x2e>
 8001c56:	bf00      	nop
 8001c58:	1b4e81b5 	.word	0x1b4e81b5
 8001c5c:	08016f2c 	.word	0x08016f2c

08001c60 <GetTemperatureLevel>:
{
 8001c60:	b508      	push	{r3, lr}
  temperatureLevel = (uint16_t)(SYS_GetTemperatureLevel() / 256);
 8001c62:	f7ff fd1f 	bl	80016a4 <SYS_GetTemperatureLevel>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2800      	cmp	r0, #0
 8001c6a:	db02      	blt.n	8001c72 <GetTemperatureLevel+0x12>
}
 8001c6c:	f3c3 200f 	ubfx	r0, r3, #8, #16
 8001c70:	bd08      	pop	{r3, pc}
  temperatureLevel = (uint16_t)(SYS_GetTemperatureLevel() / 256);
 8001c72:	f100 03ff 	add.w	r3, r0, #255	; 0xff
 8001c76:	e7f9      	b.n	8001c6c <GetTemperatureLevel+0xc>

08001c78 <GetUniqueId>:
{
 8001c78:	b538      	push	{r3, r4, r5, lr}
 8001c7a:	4604      	mov	r4, r0
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8001c7c:	4b18      	ldr	r3, [pc, #96]	; (8001ce0 <GetUniqueId+0x68>)
 8001c7e:	f8d3 3580 	ldr.w	r3, [r3, #1408]	; 0x580
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 8001c82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c86:	d013      	beq.n	8001cb0 <GetUniqueId+0x38>
    id[7] = val & 0xFF;
 8001c88:	71c3      	strb	r3, [r0, #7]
    id[6] = (val >> 8) & 0xFF;
 8001c8a:	0a1a      	lsrs	r2, r3, #8
 8001c8c:	7182      	strb	r2, [r0, #6]
    id[5] = (val >> 16) & 0xFF;
 8001c8e:	0c1a      	lsrs	r2, r3, #16
 8001c90:	7142      	strb	r2, [r0, #5]
    id[4] = (val >> 24) & 0xFF;
 8001c92:	0e1b      	lsrs	r3, r3, #24
 8001c94:	7103      	strb	r3, [r0, #4]
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8001c96:	4b12      	ldr	r3, [pc, #72]	; (8001ce0 <GetUniqueId+0x68>)
 8001c98:	f8d3 2584 	ldr.w	r2, [r3, #1412]	; 0x584
    id[3] = val & 0xFF;
 8001c9c:	70c2      	strb	r2, [r0, #3]
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8001c9e:	f8d3 3584 	ldr.w	r3, [r3, #1412]	; 0x584
 8001ca2:	0a1a      	lsrs	r2, r3, #8
    id[2] = val & 0xFF;
 8001ca4:	7082      	strb	r2, [r0, #2]
    id[1] = (val >> 8) & 0xFF;
 8001ca6:	0c1a      	lsrs	r2, r3, #16
 8001ca8:	7042      	strb	r2, [r0, #1]
    id[0] = (val >> 16) & 0xFF;
 8001caa:	0e1b      	lsrs	r3, r3, #24
 8001cac:	7003      	strb	r3, [r0, #0]
}
 8001cae:	bd38      	pop	{r3, r4, r5, pc}
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8001cb0:	f001 fda8 	bl	8003804 <HAL_GetUIDw0>
 8001cb4:	4605      	mov	r5, r0
 8001cb6:	f001 fdb1 	bl	800381c <HAL_GetUIDw2>
 8001cba:	4405      	add	r5, r0
    uint32_t ID_2_val = HAL_GetUIDw1();
 8001cbc:	f001 fda8 	bl	8003810 <HAL_GetUIDw1>
    id[7] = (ID_1_3_val) >> 24;
 8001cc0:	0e2b      	lsrs	r3, r5, #24
 8001cc2:	71e3      	strb	r3, [r4, #7]
    id[6] = (ID_1_3_val) >> 16;
 8001cc4:	0c2b      	lsrs	r3, r5, #16
 8001cc6:	71a3      	strb	r3, [r4, #6]
    id[5] = (ID_1_3_val) >> 8;
 8001cc8:	0a2b      	lsrs	r3, r5, #8
 8001cca:	7163      	strb	r3, [r4, #5]
    id[4] = (ID_1_3_val);
 8001ccc:	7125      	strb	r5, [r4, #4]
    id[3] = (ID_2_val) >> 24;
 8001cce:	0e03      	lsrs	r3, r0, #24
 8001cd0:	70e3      	strb	r3, [r4, #3]
    id[2] = (ID_2_val) >> 16;
 8001cd2:	0c03      	lsrs	r3, r0, #16
 8001cd4:	70a3      	strb	r3, [r4, #2]
    id[1] = (ID_2_val) >> 8;
 8001cd6:	0a03      	lsrs	r3, r0, #8
 8001cd8:	7063      	strb	r3, [r4, #1]
    id[0] = (ID_2_val);
 8001cda:	7020      	strb	r0, [r4, #0]
 8001cdc:	e7e7      	b.n	8001cae <GetUniqueId+0x36>
 8001cde:	bf00      	nop
 8001ce0:	1fff7000 	.word	0x1fff7000

08001ce4 <GetDevAddr>:
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8001ce4:	4b08      	ldr	r3, [pc, #32]	; (8001d08 <GetDevAddr+0x24>)
 8001ce6:	f8d3 0580 	ldr.w	r0, [r3, #1408]	; 0x580
  if (val == 0xFFFFFFFF)
 8001cea:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001cee:	d000      	beq.n	8001cf2 <GetDevAddr+0xe>
}
 8001cf0:	4770      	bx	lr
{
 8001cf2:	b510      	push	{r4, lr}
    val = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 8001cf4:	f001 fd86 	bl	8003804 <HAL_GetUIDw0>
 8001cf8:	4604      	mov	r4, r0
 8001cfa:	f001 fd89 	bl	8003810 <HAL_GetUIDw1>
 8001cfe:	4044      	eors	r4, r0
 8001d00:	f001 fd8c 	bl	800381c <HAL_GetUIDw2>
 8001d04:	4060      	eors	r0, r4
}
 8001d06:	bd10      	pop	{r4, pc}
 8001d08:	1fff7000 	.word	0x1fff7000

08001d0c <UTIL_ADV_TRACE_PreSendHook>:
{
 8001d0c:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8001d0e:	2101      	movs	r1, #1
 8001d10:	2002      	movs	r0, #2
 8001d12:	f00f fe41 	bl	8011998 <UTIL_LPM_SetStopMode>
}
 8001d16:	bd08      	pop	{r3, pc}

08001d18 <UTIL_ADV_TRACE_PostSendHook>:
{
 8001d18:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8001d1a:	2100      	movs	r1, #0
 8001d1c:	2002      	movs	r0, #2
 8001d1e:	f00f fe3b 	bl	8011998 <UTIL_LPM_SetStopMode>
}
 8001d22:	bd08      	pop	{r3, pc}

08001d24 <HAL_InitTick>:
  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8001d24:	2000      	movs	r0, #0
 8001d26:	4770      	bx	lr

08001d28 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8001d28:	b508      	push	{r3, lr}
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  return TIMER_IF_GetTimerValue();
 8001d2a:	f000 f8b1 	bl	8001e90 <TIMER_IF_GetTimerValue>
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
}
 8001d2e:	bd08      	pop	{r3, pc}

08001d30 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8001d30:	b500      	push	{lr}
 8001d32:	b083      	sub	sp, #12
 8001d34:	9001      	str	r0, [sp, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8001d36:	9801      	ldr	r0, [sp, #4]
 8001d38:	f000 f982 	bl	8002040 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8001d3c:	b003      	add	sp, #12
 8001d3e:	f85d fb04 	ldr.w	pc, [sp], #4

08001d42 <DBG_ConfigForLpm>:
/**
  * @brief Config debugger when working in Low Power Mode
  * @note  When in Dual Core DbgMcu pins should be better disable only after Cm0 is started
  */
void DBG_ConfigForLpm(uint8_t enableDbg)
{
 8001d42:	b508      	push	{r3, lr}
    HAL_DBGMCU_EnableDBGStopMode();
    HAL_DBGMCU_EnableDBGStandbyMode();
  }
  else
  {
    HAL_DBGMCU_DisableDBGSleepMode();
 8001d44:	f001 fd70 	bl	8003828 <HAL_DBGMCU_DisableDBGSleepMode>
    HAL_DBGMCU_DisableDBGStopMode();
 8001d48:	f001 fd76 	bl	8003838 <HAL_DBGMCU_DisableDBGStopMode>
    HAL_DBGMCU_DisableDBGStandbyMode();
 8001d4c:	f001 fd7c 	bl	8003848 <HAL_DBGMCU_DisableDBGStandbyMode>
  }

  /* USER CODE BEGIN DBG_ConfigForLpm_Last */

  /* USER CODE END DBG_ConfigForLpm_Last */
}
 8001d50:	bd08      	pop	{r3, pc}

08001d52 <DBG_Disable>:
{
 8001d52:	b510      	push	{r4, lr}
 8001d54:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d56:	2400      	movs	r4, #0
 8001d58:	9401      	str	r4, [sp, #4]
 8001d5a:	9402      	str	r4, [sp, #8]
 8001d5c:	9403      	str	r4, [sp, #12]
 8001d5e:	9404      	str	r4, [sp, #16]
 8001d60:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode   = GPIO_MODE_ANALOG;
 8001d62:	2303      	movs	r3, #3
 8001d64:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pin    = (GPIO_PIN_13 | GPIO_PIN_14);
 8001d66:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001d6a:	9301      	str	r3, [sp, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001d6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d70:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d72:	f042 0201 	orr.w	r2, r2, #1
 8001d76:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d7a:	f003 0301 	and.w	r3, r3, #1
 8001d7e:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8001d80:	9b00      	ldr	r3, [sp, #0]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d82:	a901      	add	r1, sp, #4
 8001d84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d88:	f002 fe34 	bl	80049f4 <HAL_GPIO_Init>
  DBG_ConfigForLpm(0);
 8001d8c:	4620      	mov	r0, r4
 8001d8e:	f7ff ffd8 	bl	8001d42 <DBG_ConfigForLpm>
}
 8001d92:	b006      	add	sp, #24
 8001d94:	bd10      	pop	{r4, pc}

08001d96 <DBG_ProbesInit>:
#endif /* CORE_CM4 */

  /* USER CODE BEGIN DBG_ProbesInit_Last */

  /* USER CODE END DBG_ProbesInit_Last */
}
 8001d96:	4770      	bx	lr

08001d98 <EnvSensors_Init>:
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  return 0;
  /* USER CODE END EnvSensors_Init */
}
 8001d98:	2000      	movs	r0, #0
 8001d9a:	4770      	bx	lr

08001d9c <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001d9c:	2001      	movs	r0, #1
 8001d9e:	4770      	bx	lr

08001da0 <_kill>:

int _kill(int pid, int sig)
{
 8001da0:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001da2:	f011 fac9 	bl	8013338 <__errno>
 8001da6:	2316      	movs	r3, #22
 8001da8:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001daa:	f04f 30ff 	mov.w	r0, #4294967295
 8001dae:	bd08      	pop	{r3, pc}

08001db0 <_exit>:

void _exit (int status)
{
 8001db0:	b508      	push	{r3, lr}
	_kill(status, -1);
 8001db2:	f04f 31ff 	mov.w	r1, #4294967295
 8001db6:	f7ff fff3 	bl	8001da0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001dba:	e7fe      	b.n	8001dba <_exit+0xa>

08001dbc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001dbc:	b570      	push	{r4, r5, r6, lr}
 8001dbe:	460c      	mov	r4, r1
 8001dc0:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dc2:	2500      	movs	r5, #0
 8001dc4:	e006      	b.n	8001dd4 <_read+0x18>
	{
		*ptr++ = __io_getchar();
 8001dc6:	f3af 8000 	nop.w
 8001dca:	4621      	mov	r1, r4
 8001dcc:	f801 0b01 	strb.w	r0, [r1], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dd0:	3501      	adds	r5, #1
		*ptr++ = __io_getchar();
 8001dd2:	460c      	mov	r4, r1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dd4:	42b5      	cmp	r5, r6
 8001dd6:	dbf6      	blt.n	8001dc6 <_read+0xa>
	}

return len;
}
 8001dd8:	4630      	mov	r0, r6
 8001dda:	bd70      	pop	{r4, r5, r6, pc}

08001ddc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ddc:	b570      	push	{r4, r5, r6, lr}
 8001dde:	460c      	mov	r4, r1
 8001de0:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001de2:	2500      	movs	r5, #0
 8001de4:	e004      	b.n	8001df0 <_write+0x14>
	{
		__io_putchar(*ptr++);
 8001de6:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001dea:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dee:	3501      	adds	r5, #1
 8001df0:	42b5      	cmp	r5, r6
 8001df2:	dbf8      	blt.n	8001de6 <_write+0xa>
	}
	return len;
}
 8001df4:	4630      	mov	r0, r6
 8001df6:	bd70      	pop	{r4, r5, r6, pc}

08001df8 <_close>:

int _close(int file)
{
	return -1;
}
 8001df8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dfc:	4770      	bx	lr

08001dfe <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001dfe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e02:	604b      	str	r3, [r1, #4]
	return 0;
}
 8001e04:	2000      	movs	r0, #0
 8001e06:	4770      	bx	lr

08001e08 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001e08:	2001      	movs	r0, #1
 8001e0a:	4770      	bx	lr

08001e0c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001e0c:	2000      	movs	r0, #0
 8001e0e:	4770      	bx	lr

08001e10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e10:	b510      	push	{r4, lr}
 8001e12:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e14:	4a0c      	ldr	r2, [pc, #48]	; (8001e48 <_sbrk+0x38>)
 8001e16:	490d      	ldr	r1, [pc, #52]	; (8001e4c <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e18:	480d      	ldr	r0, [pc, #52]	; (8001e50 <_sbrk+0x40>)
 8001e1a:	6800      	ldr	r0, [r0, #0]
 8001e1c:	b140      	cbz	r0, 8001e30 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e1e:	480c      	ldr	r0, [pc, #48]	; (8001e50 <_sbrk+0x40>)
 8001e20:	6800      	ldr	r0, [r0, #0]
 8001e22:	4403      	add	r3, r0
 8001e24:	1a52      	subs	r2, r2, r1
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d806      	bhi.n	8001e38 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001e2a:	4a09      	ldr	r2, [pc, #36]	; (8001e50 <_sbrk+0x40>)
 8001e2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8001e2e:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8001e30:	4807      	ldr	r0, [pc, #28]	; (8001e50 <_sbrk+0x40>)
 8001e32:	4c08      	ldr	r4, [pc, #32]	; (8001e54 <_sbrk+0x44>)
 8001e34:	6004      	str	r4, [r0, #0]
 8001e36:	e7f2      	b.n	8001e1e <_sbrk+0xe>
    errno = ENOMEM;
 8001e38:	f011 fa7e 	bl	8013338 <__errno>
 8001e3c:	230c      	movs	r3, #12
 8001e3e:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001e40:	f04f 30ff 	mov.w	r0, #4294967295
 8001e44:	e7f3      	b.n	8001e2e <_sbrk+0x1e>
 8001e46:	bf00      	nop
 8001e48:	20008000 	.word	0x20008000
 8001e4c:	00000400 	.word	0x00000400
 8001e50:	200003c0 	.word	0x200003c0
 8001e54:	20001b20 	.word	0x20001b20

08001e58 <TIMER_IF_SetTimerContext>:
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8001e58:	4b02      	ldr	r3, [pc, #8]	; (8001e64 <TIMER_IF_SetTimerContext+0xc>)
 8001e5a:	6898      	ldr	r0, [r3, #8]
static inline uint32_t GetTimerTicks(void)
{
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  return (UINT32_MAX - LL_RTC_TIME_GetSubSecond(RTC));
 8001e5c:	43c0      	mvns	r0, r0
  RtcTimerContext = GetTimerTicks();
 8001e5e:	4b02      	ldr	r3, [pc, #8]	; (8001e68 <TIMER_IF_SetTimerContext+0x10>)
 8001e60:	6018      	str	r0, [r3, #0]
}
 8001e62:	4770      	bx	lr
 8001e64:	40002800 	.word	0x40002800
 8001e68:	200003c8 	.word	0x200003c8

08001e6c <TIMER_IF_GetTimerContext>:
}
 8001e6c:	4b01      	ldr	r3, [pc, #4]	; (8001e74 <TIMER_IF_GetTimerContext+0x8>)
 8001e6e:	6818      	ldr	r0, [r3, #0]
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	200003c8 	.word	0x200003c8

08001e78 <TIMER_IF_GetTimerElapsedTime>:
 8001e78:	4b03      	ldr	r3, [pc, #12]	; (8001e88 <TIMER_IF_GetTimerElapsedTime+0x10>)
 8001e7a:	689b      	ldr	r3, [r3, #8]
  return (UINT32_MAX - LL_RTC_TIME_GetSubSecond(RTC));
 8001e7c:	43db      	mvns	r3, r3
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8001e7e:	4a03      	ldr	r2, [pc, #12]	; (8001e8c <TIMER_IF_GetTimerElapsedTime+0x14>)
 8001e80:	6810      	ldr	r0, [r2, #0]
}
 8001e82:	1a18      	subs	r0, r3, r0
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	40002800 	.word	0x40002800
 8001e8c:	200003c8 	.word	0x200003c8

08001e90 <TIMER_IF_GetTimerValue>:
  if (RTC_Initialized == true)
 8001e90:	4b04      	ldr	r3, [pc, #16]	; (8001ea4 <TIMER_IF_GetTimerValue+0x14>)
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	b11b      	cbz	r3, 8001e9e <TIMER_IF_GetTimerValue+0xe>
 8001e96:	4b04      	ldr	r3, [pc, #16]	; (8001ea8 <TIMER_IF_GetTimerValue+0x18>)
 8001e98:	6898      	ldr	r0, [r3, #8]
  return (UINT32_MAX - LL_RTC_TIME_GetSubSecond(RTC));
 8001e9a:	43c0      	mvns	r0, r0
 8001e9c:	4770      	bx	lr
  uint32_t ret = 0;
 8001e9e:	2000      	movs	r0, #0
}
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	200003c4 	.word	0x200003c4
 8001ea8:	40002800 	.word	0x40002800

08001eac <TIMER_IF_GetMinimumTimeout>:
}
 8001eac:	2003      	movs	r0, #3
 8001eae:	4770      	bx	lr

08001eb0 <TIMER_IF_Convert_ms2Tick>:
{
 8001eb0:	b508      	push	{r3, lr}
 8001eb2:	4601      	mov	r1, r0
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8001eb4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001eb8:	2300      	movs	r3, #0
 8001eba:	0280      	lsls	r0, r0, #10
 8001ebc:	0d89      	lsrs	r1, r1, #22
 8001ebe:	f7ff f989 	bl	80011d4 <__aeabi_uldivmod>
}
 8001ec2:	bd08      	pop	{r3, pc}

08001ec4 <TIMER_IF_Convert_Tick2ms>:
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8001ec4:	0ec2      	lsrs	r2, r0, #27
 8001ec6:	0143      	lsls	r3, r0, #5
 8001ec8:	1a1b      	subs	r3, r3, r0
 8001eca:	f162 0200 	sbc.w	r2, r2, #0
 8001ece:	0092      	lsls	r2, r2, #2
 8001ed0:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	181b      	adds	r3, r3, r0
 8001ed8:	f142 0000 	adc.w	r0, r2, #0
 8001edc:	00c0      	lsls	r0, r0, #3
 8001ede:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8001ee2:	f3c3 13d5 	ubfx	r3, r3, #7, #22
}
 8001ee6:	ea43 5080 	orr.w	r0, r3, r0, lsl #22
 8001eea:	4770      	bx	lr

08001eec <TIMER_IF_StopTimer>:
{
 8001eec:	b510      	push	{r4, lr}
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8001eee:	4b07      	ldr	r3, [pc, #28]	; (8001f0c <TIMER_IF_StopTimer+0x20>)
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	65da      	str	r2, [r3, #92]	; 0x5c
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001ef4:	4c06      	ldr	r4, [pc, #24]	; (8001f10 <TIMER_IF_StopTimer+0x24>)
 8001ef6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001efa:	4620      	mov	r0, r4
 8001efc:	f004 fa54 	bl	80063a8 <HAL_RTC_DeactivateAlarm>
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001f00:	f04f 33ff 	mov.w	r3, #4294967295
 8001f04:	6323      	str	r3, [r4, #48]	; 0x30
}
 8001f06:	2000      	movs	r0, #0
 8001f08:	bd10      	pop	{r4, pc}
 8001f0a:	bf00      	nop
 8001f0c:	40002800 	.word	0x40002800
 8001f10:	2000037c 	.word	0x2000037c

08001f14 <TIMER_IF_BkUp_Write_MSBticks>:
{
 8001f14:	b508      	push	{r3, lr}
 8001f16:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8001f18:	2102      	movs	r1, #2
 8001f1a:	4802      	ldr	r0, [pc, #8]	; (8001f24 <TIMER_IF_BkUp_Write_MSBticks+0x10>)
 8001f1c:	f004 fc85 	bl	800682a <HAL_RTCEx_BKUPWrite>
}
 8001f20:	bd08      	pop	{r3, pc}
 8001f22:	bf00      	nop
 8001f24:	2000037c 	.word	0x2000037c

08001f28 <TIMER_IF_Init>:
{
 8001f28:	b538      	push	{r3, r4, r5, lr}
  if (RTC_Initialized == false)
 8001f2a:	4b0f      	ldr	r3, [pc, #60]	; (8001f68 <TIMER_IF_Init+0x40>)
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	b10b      	cbz	r3, 8001f34 <TIMER_IF_Init+0xc>
}
 8001f30:	2000      	movs	r0, #0
 8001f32:	bd38      	pop	{r3, r4, r5, pc}
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001f34:	4c0d      	ldr	r4, [pc, #52]	; (8001f6c <TIMER_IF_Init+0x44>)
 8001f36:	f04f 35ff 	mov.w	r5, #4294967295
 8001f3a:	6325      	str	r5, [r4, #48]	; 0x30
    MX_RTC_Init();
 8001f3c:	f7ff fcc4 	bl	80018c8 <MX_RTC_Init>
    TIMER_IF_StopTimer();
 8001f40:	f7ff ffd4 	bl	8001eec <TIMER_IF_StopTimer>
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001f44:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f48:	4620      	mov	r0, r4
 8001f4a:	f004 fa2d 	bl	80063a8 <HAL_RTC_DeactivateAlarm>
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001f4e:	6325      	str	r5, [r4, #48]	; 0x30
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8001f50:	4620      	mov	r0, r4
 8001f52:	f004 fc09 	bl	8006768 <HAL_RTCEx_EnableBypassShadow>
    TIMER_IF_BkUp_Write_MSBticks(0);
 8001f56:	2000      	movs	r0, #0
 8001f58:	f7ff ffdc 	bl	8001f14 <TIMER_IF_BkUp_Write_MSBticks>
    TIMER_IF_SetTimerContext();
 8001f5c:	f7ff ff7c 	bl	8001e58 <TIMER_IF_SetTimerContext>
    RTC_Initialized = true;
 8001f60:	4b01      	ldr	r3, [pc, #4]	; (8001f68 <TIMER_IF_Init+0x40>)
 8001f62:	2201      	movs	r2, #1
 8001f64:	701a      	strb	r2, [r3, #0]
 8001f66:	e7e3      	b.n	8001f30 <TIMER_IF_Init+0x8>
 8001f68:	200003c4 	.word	0x200003c4
 8001f6c:	2000037c 	.word	0x2000037c

08001f70 <TIMER_IF_BkUp_Write_Seconds>:
{
 8001f70:	b508      	push	{r3, lr}
 8001f72:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8001f74:	2100      	movs	r1, #0
 8001f76:	4802      	ldr	r0, [pc, #8]	; (8001f80 <TIMER_IF_BkUp_Write_Seconds+0x10>)
 8001f78:	f004 fc57 	bl	800682a <HAL_RTCEx_BKUPWrite>
}
 8001f7c:	bd08      	pop	{r3, pc}
 8001f7e:	bf00      	nop
 8001f80:	2000037c 	.word	0x2000037c

08001f84 <TIMER_IF_BkUp_Write_SubSeconds>:
{
 8001f84:	b508      	push	{r3, lr}
 8001f86:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8001f88:	2101      	movs	r1, #1
 8001f8a:	4802      	ldr	r0, [pc, #8]	; (8001f94 <TIMER_IF_BkUp_Write_SubSeconds+0x10>)
 8001f8c:	f004 fc4d 	bl	800682a <HAL_RTCEx_BKUPWrite>
}
 8001f90:	bd08      	pop	{r3, pc}
 8001f92:	bf00      	nop
 8001f94:	2000037c 	.word	0x2000037c

08001f98 <TIMER_IF_StartTimer>:
{
 8001f98:	b510      	push	{r4, lr}
 8001f9a:	b08c      	sub	sp, #48	; 0x30
 8001f9c:	4604      	mov	r4, r0
  RTC_AlarmTypeDef sAlarm = {0};
 8001f9e:	222c      	movs	r2, #44	; 0x2c
 8001fa0:	2100      	movs	r1, #0
 8001fa2:	a801      	add	r0, sp, #4
 8001fa4:	f011 f975 	bl	8013292 <memset>
  TIMER_IF_StopTimer();
 8001fa8:	f7ff ffa0 	bl	8001eec <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8001fac:	4b0c      	ldr	r3, [pc, #48]	; (8001fe0 <TIMER_IF_StartTimer+0x48>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	441c      	add	r4, r3
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	9308      	str	r3, [sp, #32]
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8001fb6:	43e4      	mvns	r4, r4
 8001fb8:	9402      	str	r4, [sp, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001fba:	9306      	str	r3, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001fbc:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001fc0:	9307      	str	r3, [sp, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8001fc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fc6:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001fc8:	2201      	movs	r2, #1
 8001fca:	a901      	add	r1, sp, #4
 8001fcc:	4805      	ldr	r0, [pc, #20]	; (8001fe4 <TIMER_IF_StartTimer+0x4c>)
 8001fce:	f004 fb0f 	bl	80065f0 <HAL_RTC_SetAlarm_IT>
 8001fd2:	b910      	cbnz	r0, 8001fda <TIMER_IF_StartTimer+0x42>
}
 8001fd4:	2000      	movs	r0, #0
 8001fd6:	b00c      	add	sp, #48	; 0x30
 8001fd8:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001fda:	f7ff fbfd 	bl	80017d8 <Error_Handler>
 8001fde:	e7f9      	b.n	8001fd4 <TIMER_IF_StartTimer+0x3c>
 8001fe0:	200003c8 	.word	0x200003c8
 8001fe4:	2000037c 	.word	0x2000037c

08001fe8 <TIMER_IF_BkUp_Read_MSBticks>:
{
 8001fe8:	b508      	push	{r3, lr}
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 8001fea:	2102      	movs	r1, #2
 8001fec:	4801      	ldr	r0, [pc, #4]	; (8001ff4 <TIMER_IF_BkUp_Read_MSBticks+0xc>)
 8001fee:	f004 fc23 	bl	8006838 <HAL_RTCEx_BKUPRead>
}
 8001ff2:	bd08      	pop	{r3, pc}
 8001ff4:	2000037c 	.word	0x2000037c

08001ff8 <TIMER_IF_GetTime>:
{
 8001ff8:	b538      	push	{r3, r4, r5, lr}
 8001ffa:	4605      	mov	r5, r0
 8001ffc:	4b07      	ldr	r3, [pc, #28]	; (800201c <TIMER_IF_GetTime+0x24>)
 8001ffe:	689c      	ldr	r4, [r3, #8]
  return (UINT32_MAX - LL_RTC_TIME_GetSubSecond(RTC));
 8002000:	43e4      	mvns	r4, r4
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8002002:	f7ff fff1 	bl	8001fe8 <TIMER_IF_BkUp_Read_MSBticks>
  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8002006:	4623      	mov	r3, r4
  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8002008:	0aa4      	lsrs	r4, r4, #10
 800200a:	ea44 5480 	orr.w	r4, r4, r0, lsl #22
  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 800200e:	f3c3 0009 	ubfx	r0, r3, #0, #10
 8002012:	f7ff ff57 	bl	8001ec4 <TIMER_IF_Convert_Tick2ms>
 8002016:	8028      	strh	r0, [r5, #0]
}
 8002018:	4620      	mov	r0, r4
 800201a:	bd38      	pop	{r3, r4, r5, pc}
 800201c:	40002800 	.word	0x40002800

08002020 <TIMER_IF_BkUp_Read_Seconds>:
{
 8002020:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8002022:	2100      	movs	r1, #0
 8002024:	4801      	ldr	r0, [pc, #4]	; (800202c <TIMER_IF_BkUp_Read_Seconds+0xc>)
 8002026:	f004 fc07 	bl	8006838 <HAL_RTCEx_BKUPRead>
}
 800202a:	bd08      	pop	{r3, pc}
 800202c:	2000037c 	.word	0x2000037c

08002030 <TIMER_IF_BkUp_Read_SubSeconds>:
{
 8002030:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8002032:	2101      	movs	r1, #1
 8002034:	4801      	ldr	r0, [pc, #4]	; (800203c <TIMER_IF_BkUp_Read_SubSeconds+0xc>)
 8002036:	f004 fbff 	bl	8006838 <HAL_RTCEx_BKUPRead>
}
 800203a:	bd08      	pop	{r3, pc}
 800203c:	2000037c 	.word	0x2000037c

08002040 <TIMER_IF_DelayMs>:
{
 8002040:	b508      	push	{r3, lr}
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8002042:	f7ff ff35 	bl	8001eb0 <TIMER_IF_Convert_ms2Tick>
 8002046:	4b06      	ldr	r3, [pc, #24]	; (8002060 <TIMER_IF_DelayMs+0x20>)
 8002048:	689a      	ldr	r2, [r3, #8]
  return (UINT32_MAX - LL_RTC_TIME_GetSubSecond(RTC));
 800204a:	43d2      	mvns	r2, r2
  while (((GetTimerTicks() - timeout)) < delayTicks)
 800204c:	e000      	b.n	8002050 <TIMER_IF_DelayMs+0x10>
    __NOP();
 800204e:	bf00      	nop
 8002050:	4b03      	ldr	r3, [pc, #12]	; (8002060 <TIMER_IF_DelayMs+0x20>)
 8002052:	689b      	ldr	r3, [r3, #8]
  return (UINT32_MAX - LL_RTC_TIME_GetSubSecond(RTC));
 8002054:	43db      	mvns	r3, r3
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002056:	1a9b      	subs	r3, r3, r2
 8002058:	4283      	cmp	r3, r0
 800205a:	d3f8      	bcc.n	800204e <TIMER_IF_DelayMs+0xe>
}
 800205c:	bd08      	pop	{r3, pc}
 800205e:	bf00      	nop
 8002060:	40002800 	.word	0x40002800

08002064 <HAL_RTC_AlarmAEventCallback>:
{
 8002064:	b508      	push	{r3, lr}
  UTIL_TIMER_IRQ_MAP_PROCESS();
 8002066:	f00f ffcf 	bl	8012008 <UTIL_TIMER_IRQ_Handler>
}
 800206a:	bd08      	pop	{r3, pc}

0800206c <HAL_RTCEx_SSRUEventCallback>:
{
 800206c:	b508      	push	{r3, lr}
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 800206e:	f7ff ffbb 	bl	8001fe8 <TIMER_IF_BkUp_Read_MSBticks>
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8002072:	3001      	adds	r0, #1
 8002074:	f7ff ff4e 	bl	8001f14 <TIMER_IF_BkUp_Write_MSBticks>
}
 8002078:	bd08      	pop	{r3, pc}
	...

0800207c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800207c:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 800207e:	4817      	ldr	r0, [pc, #92]	; (80020dc <MX_USART1_UART_Init+0x60>)
 8002080:	4b17      	ldr	r3, [pc, #92]	; (80020e0 <MX_USART1_UART_Init+0x64>)
 8002082:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = USART_BAUDRATE;
 8002084:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002088:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800208a:	2300      	movs	r3, #0
 800208c:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800208e:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002090:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002092:	220c      	movs	r2, #12
 8002094:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002096:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002098:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800209a:	6203      	str	r3, [r0, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800209c:	6243      	str	r3, [r0, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800209e:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80020a0:	f005 fec5 	bl	8007e2e <HAL_UART_Init>
 80020a4:	b970      	cbnz	r0, 80020c4 <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80020a6:	2100      	movs	r1, #0
 80020a8:	480c      	ldr	r0, [pc, #48]	; (80020dc <MX_USART1_UART_Init+0x60>)
 80020aa:	f006 f872 	bl	8008192 <HAL_UARTEx_SetTxFifoThreshold>
 80020ae:	b960      	cbnz	r0, 80020ca <MX_USART1_UART_Init+0x4e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80020b0:	2100      	movs	r1, #0
 80020b2:	480a      	ldr	r0, [pc, #40]	; (80020dc <MX_USART1_UART_Init+0x60>)
 80020b4:	f006 f892 	bl	80081dc <HAL_UARTEx_SetRxFifoThreshold>
 80020b8:	b950      	cbnz	r0, 80020d0 <MX_USART1_UART_Init+0x54>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 80020ba:	4808      	ldr	r0, [pc, #32]	; (80020dc <MX_USART1_UART_Init+0x60>)
 80020bc:	f006 f845 	bl	800814a <HAL_UARTEx_EnableFifoMode>
 80020c0:	b948      	cbnz	r0, 80020d6 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
  }

}
 80020c2:	bd08      	pop	{r3, pc}
    Error_Handler();
 80020c4:	f7ff fb88 	bl	80017d8 <Error_Handler>
 80020c8:	e7ed      	b.n	80020a6 <MX_USART1_UART_Init+0x2a>
    Error_Handler();
 80020ca:	f7ff fb85 	bl	80017d8 <Error_Handler>
 80020ce:	e7ef      	b.n	80020b0 <MX_USART1_UART_Init+0x34>
    Error_Handler();
 80020d0:	f7ff fb82 	bl	80017d8 <Error_Handler>
 80020d4:	e7f1      	b.n	80020ba <MX_USART1_UART_Init+0x3e>
    Error_Handler();
 80020d6:	f7ff fb7f 	bl	80017d8 <Error_Handler>
}
 80020da:	e7f2      	b.n	80020c2 <MX_USART1_UART_Init+0x46>
 80020dc:	2000042c 	.word	0x2000042c
 80020e0:	40013800 	.word	0x40013800

080020e4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80020e4:	b530      	push	{r4, r5, lr}
 80020e6:	b097      	sub	sp, #92	; 0x5c
 80020e8:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020ea:	2100      	movs	r1, #0
 80020ec:	9111      	str	r1, [sp, #68]	; 0x44
 80020ee:	9112      	str	r1, [sp, #72]	; 0x48
 80020f0:	9113      	str	r1, [sp, #76]	; 0x4c
 80020f2:	9114      	str	r1, [sp, #80]	; 0x50
 80020f4:	9115      	str	r1, [sp, #84]	; 0x54
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020f6:	2238      	movs	r2, #56	; 0x38
 80020f8:	a803      	add	r0, sp, #12
 80020fa:	f011 f8ca 	bl	8013292 <memset>
  if(uartHandle->Instance==USART1)
 80020fe:	6822      	ldr	r2, [r4, #0]
 8002100:	4b29      	ldr	r3, [pc, #164]	; (80021a8 <HAL_UART_MspInit+0xc4>)
 8002102:	429a      	cmp	r2, r3
 8002104:	d001      	beq.n	800210a <HAL_UART_MspInit+0x26>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002106:	b017      	add	sp, #92	; 0x5c
 8002108:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800210a:	2301      	movs	r3, #1
 800210c:	9303      	str	r3, [sp, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 800210e:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8002112:	9304      	str	r3, [sp, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002114:	a803      	add	r0, sp, #12
 8002116:	f003 fffd 	bl	8006114 <HAL_RCCEx_PeriphCLKConfig>
 800211a:	2800      	cmp	r0, #0
 800211c:	d13e      	bne.n	800219c <HAL_UART_MspInit+0xb8>
  SET_BIT(RCC->APB2ENR, Periphs);
 800211e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002122:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002124:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002128:	661a      	str	r2, [r3, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800212a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800212c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002130:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8002132:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002134:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002136:	f042 0202 	orr.w	r2, r2, #2
 800213a:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800213c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800213e:	f003 0302 	and.w	r3, r3, #2
 8002142:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8002144:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 8002146:	23c0      	movs	r3, #192	; 0xc0
 8002148:	9311      	str	r3, [sp, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800214a:	2302      	movs	r3, #2
 800214c:	9312      	str	r3, [sp, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214e:	2500      	movs	r5, #0
 8002150:	9513      	str	r5, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002152:	2303      	movs	r3, #3
 8002154:	9314      	str	r3, [sp, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002156:	2307      	movs	r3, #7
 8002158:	9315      	str	r3, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800215a:	a911      	add	r1, sp, #68	; 0x44
 800215c:	4813      	ldr	r0, [pc, #76]	; (80021ac <HAL_UART_MspInit+0xc8>)
 800215e:	f002 fc49 	bl	80049f4 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA1_Channel5;
 8002162:	4813      	ldr	r0, [pc, #76]	; (80021b0 <HAL_UART_MspInit+0xcc>)
 8002164:	4b13      	ldr	r3, [pc, #76]	; (80021b4 <HAL_UART_MspInit+0xd0>)
 8002166:	6003      	str	r3, [r0, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002168:	2312      	movs	r3, #18
 800216a:	6043      	str	r3, [r0, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800216c:	2310      	movs	r3, #16
 800216e:	6083      	str	r3, [r0, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002170:	60c5      	str	r5, [r0, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002172:	2380      	movs	r3, #128	; 0x80
 8002174:	6103      	str	r3, [r0, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002176:	6145      	str	r5, [r0, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002178:	6185      	str	r5, [r0, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800217a:	61c5      	str	r5, [r0, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800217c:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800217e:	f002 f8e9 	bl	8004354 <HAL_DMA_Init>
 8002182:	b970      	cbnz	r0, 80021a2 <HAL_UART_MspInit+0xbe>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002184:	4b0a      	ldr	r3, [pc, #40]	; (80021b0 <HAL_UART_MspInit+0xcc>)
 8002186:	67a3      	str	r3, [r4, #120]	; 0x78
 8002188:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 800218a:	2200      	movs	r2, #0
 800218c:	2102      	movs	r1, #2
 800218e:	2024      	movs	r0, #36	; 0x24
 8002190:	f002 f818 	bl	80041c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002194:	2024      	movs	r0, #36	; 0x24
 8002196:	f002 f84d 	bl	8004234 <HAL_NVIC_EnableIRQ>
}
 800219a:	e7b4      	b.n	8002106 <HAL_UART_MspInit+0x22>
      Error_Handler();
 800219c:	f7ff fb1c 	bl	80017d8 <Error_Handler>
 80021a0:	e7bd      	b.n	800211e <HAL_UART_MspInit+0x3a>
      Error_Handler();
 80021a2:	f7ff fb19 	bl	80017d8 <Error_Handler>
 80021a6:	e7ed      	b.n	8002184 <HAL_UART_MspInit+0xa0>
 80021a8:	40013800 	.word	0x40013800
 80021ac:	48000400 	.word	0x48000400
 80021b0:	200003cc 	.word	0x200003cc
 80021b4:	40020058 	.word	0x40020058

080021b8 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{

  if(uartHandle->Instance==USART1)
 80021b8:	6802      	ldr	r2, [r0, #0]
 80021ba:	4b0b      	ldr	r3, [pc, #44]	; (80021e8 <HAL_UART_MspDeInit+0x30>)
 80021bc:	429a      	cmp	r2, r3
 80021be:	d000      	beq.n	80021c2 <HAL_UART_MspDeInit+0xa>
 80021c0:	4770      	bx	lr
{
 80021c2:	b510      	push	{r4, lr}
 80021c4:	4604      	mov	r4, r0
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 80021c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021ca:	6e13      	ldr	r3, [r2, #96]	; 0x60
 80021cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80021d0:	6613      	str	r3, [r2, #96]	; 0x60

    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOB, USARTx_RX_Pin|USARTx_TX_Pin);
 80021d2:	21c0      	movs	r1, #192	; 0xc0
 80021d4:	4805      	ldr	r0, [pc, #20]	; (80021ec <HAL_UART_MspDeInit+0x34>)
 80021d6:	f002 fcdf 	bl	8004b98 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 80021da:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 80021dc:	f002 f92c 	bl	8004438 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 80021e0:	2024      	movs	r0, #36	; 0x24
 80021e2:	f002 f835 	bl	8004250 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 80021e6:	bd10      	pop	{r4, pc}
 80021e8:	40013800 	.word	0x40013800
 80021ec:	48000400 	.word	0x48000400

080021f0 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 80021f0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 80021f2:	4b07      	ldr	r3, [pc, #28]	; (8002210 <vcom_Init+0x20>)
 80021f4:	6018      	str	r0, [r3, #0]
  MX_DMA_Init();
 80021f6:	f7ff faa5 	bl	8001744 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80021fa:	f7ff ff3f 	bl	800207c <MX_USART1_UART_Init>
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR1, ExtiLine);
 80021fe:	4a05      	ldr	r2, [pc, #20]	; (8002214 <vcom_Init+0x24>)
 8002200:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8002204:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002208:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_27);
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 800220c:	2000      	movs	r0, #0
 800220e:	bd08      	pop	{r3, pc}
 8002210:	200004c0 	.word	0x200004c0
 8002214:	58000800 	.word	0x58000800

08002218 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8002218:	b508      	push	{r3, lr}
  SET_BIT(RCC->APB2RSTR, Periphs);
 800221a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800221e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002220:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002224:	641a      	str	r2, [r3, #64]	; 0x40
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 8002226:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002228:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800222c:	641a      	str	r2, [r3, #64]	; 0x40
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART1_FORCE_RESET();
  __HAL_RCC_USART1_RELEASE_RESET();

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart1);
 800222e:	4804      	ldr	r0, [pc, #16]	; (8002240 <vcom_DeInit+0x28>)
 8002230:	f7ff ffc2 	bl	80021b8 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* temporary while waiting CR 50840: MX implementation of  MX_DMA_DeInit() */
  /* For the time being user should change manually the channel according to the MX settings */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 8002234:	200f      	movs	r0, #15
 8002236:	f002 f80b 	bl	8004250 <HAL_NVIC_DisableIRQ>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 800223a:	2000      	movs	r0, #0
 800223c:	bd08      	pop	{r3, pc}
 800223e:	bf00      	nop
 8002240:	2000042c 	.word	0x2000042c

08002244 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8002244:	b508      	push	{r3, lr}
 8002246:	460a      	mov	r2, r1
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8002248:	4601      	mov	r1, r0
 800224a:	4802      	ldr	r0, [pc, #8]	; (8002254 <vcom_Trace_DMA+0x10>)
 800224c:	f004 fec0 	bl	8006fd0 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8002250:	2000      	movs	r0, #0
 8002252:	bd08      	pop	{r3, pc}
 8002254:	2000042c 	.word	0x2000042c

08002258 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8002258:	b510      	push	{r4, lr}
 800225a:	b082      	sub	sp, #8

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 800225c:	4b12      	ldr	r3, [pc, #72]	; (80022a8 <vcom_ReceiveInit+0x50>)
 800225e:	6018      	str	r0, [r3, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8002260:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002264:	9300      	str	r3, [sp, #0]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection);
 8002266:	ab02      	add	r3, sp, #8
 8002268:	e913 0006 	ldmdb	r3, {r1, r2}
 800226c:	480f      	ldr	r0, [pc, #60]	; (80022ac <vcom_ReceiveInit+0x54>)
 800226e:	f005 ff14 	bl	800809a <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 8002272:	4b0e      	ldr	r3, [pc, #56]	; (80022ac <vcom_ReceiveInit+0x54>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	69da      	ldr	r2, [r3, #28]
 8002278:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 800227c:	d1f9      	bne.n	8002272 <vcom_ReceiveInit+0x1a>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 800227e:	69da      	ldr	r2, [r3, #28]
 8002280:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 8002284:	d0fb      	beq.n	800227e <vcom_ReceiveInit+0x26>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8002286:	689a      	ldr	r2, [r3, #8]
 8002288:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800228c:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart1);
 800228e:	4c07      	ldr	r4, [pc, #28]	; (80022ac <vcom_ReceiveInit+0x54>)
 8002290:	4620      	mov	r0, r4
 8002292:	f005 ff43 	bl	800811c <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart1, &charRx, 1);
 8002296:	2201      	movs	r2, #1
 8002298:	4905      	ldr	r1, [pc, #20]	; (80022b0 <vcom_ReceiveInit+0x58>)
 800229a:	4620      	mov	r0, r4
 800229c:	f005 fe8e 	bl	8007fbc <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 80022a0:	2000      	movs	r0, #0
 80022a2:	b002      	add	sp, #8
 80022a4:	bd10      	pop	{r4, pc}
 80022a6:	bf00      	nop
 80022a8:	200004bc 	.word	0x200004bc
 80022ac:	2000042c 	.word	0x2000042c
 80022b0:	200004c4 	.word	0x200004c4

080022b4 <vcom_Resume>:

void vcom_Resume(void)
{
 80022b4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80022b6:	4807      	ldr	r0, [pc, #28]	; (80022d4 <vcom_Resume+0x20>)
 80022b8:	f005 fdb9 	bl	8007e2e <HAL_UART_Init>
 80022bc:	b920      	cbnz	r0, 80022c8 <vcom_Resume+0x14>
  {
    Error_Handler();
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80022be:	4806      	ldr	r0, [pc, #24]	; (80022d8 <vcom_Resume+0x24>)
 80022c0:	f002 f848 	bl	8004354 <HAL_DMA_Init>
 80022c4:	b918      	cbnz	r0, 80022ce <vcom_Resume+0x1a>
    Error_Handler();
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 80022c6:	bd08      	pop	{r3, pc}
    Error_Handler();
 80022c8:	f7ff fa86 	bl	80017d8 <Error_Handler>
 80022cc:	e7f7      	b.n	80022be <vcom_Resume+0xa>
    Error_Handler();
 80022ce:	f7ff fa83 	bl	80017d8 <Error_Handler>
}
 80022d2:	e7f8      	b.n	80022c6 <vcom_Resume+0x12>
 80022d4:	2000042c 	.word	0x2000042c
 80022d8:	200003cc 	.word	0x200003cc

080022dc <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart1)
{
 80022dc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  TxCpltCallback(NULL);
 80022de:	4b02      	ldr	r3, [pc, #8]	; (80022e8 <HAL_UART_TxCpltCallback+0xc>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	2000      	movs	r0, #0
 80022e4:	4798      	blx	r3
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 80022e6:	bd08      	pop	{r3, pc}
 80022e8:	200004c0 	.word	0x200004c0

080022ec <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart1)
{
 80022ec:	b510      	push	{r4, lr}
 80022ee:	4604      	mov	r4, r0
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart1->ErrorCode))
 80022f0:	4b07      	ldr	r3, [pc, #28]	; (8002310 <HAL_UART_RxCpltCallback+0x24>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	b12b      	cbz	r3, 8002302 <HAL_UART_RxCpltCallback+0x16>
 80022f6:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 80022fa:	b912      	cbnz	r2, 8002302 <HAL_UART_RxCpltCallback+0x16>
  {
    RxCpltCallback(&charRx, 1, 0);
 80022fc:	2101      	movs	r1, #1
 80022fe:	4805      	ldr	r0, [pc, #20]	; (8002314 <HAL_UART_RxCpltCallback+0x28>)
 8002300:	4798      	blx	r3
  }
  HAL_UART_Receive_IT(huart1, &charRx, 1);
 8002302:	2201      	movs	r2, #1
 8002304:	4903      	ldr	r1, [pc, #12]	; (8002314 <HAL_UART_RxCpltCallback+0x28>)
 8002306:	4620      	mov	r0, r4
 8002308:	f005 fe58 	bl	8007fbc <HAL_UART_Receive_IT>
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 800230c:	bd10      	pop	{r4, pc}
 800230e:	bf00      	nop
 8002310:	200004bc 	.word	0x200004bc
 8002314:	200004c4 	.word	0x200004c4

08002318 <TrimRead>:
  //  APP_LOG(TS_ON, VLEVEL_L, "@@@@@@@ return val  : ~%d\r\n",ret );
}


void TrimRead(void)
{
 8002318:	b530      	push	{r4, r5, lr}
 800231a:	b08d      	sub	sp, #52	; 0x34
	uint8_t trimdata[32];
	// Read NVM from 0x88 to 0xA1
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0x88, 1, trimdata, 25, HAL_MAX_DELAY);
 800231c:	4c4f      	ldr	r4, [pc, #316]	; (800245c <TrimRead+0x144>)
 800231e:	f04f 35ff 	mov.w	r5, #4294967295
 8002322:	9502      	str	r5, [sp, #8]
 8002324:	2319      	movs	r3, #25
 8002326:	9301      	str	r3, [sp, #4]
 8002328:	ab04      	add	r3, sp, #16
 800232a:	9300      	str	r3, [sp, #0]
 800232c:	2301      	movs	r3, #1
 800232e:	2288      	movs	r2, #136	; 0x88
 8002330:	21ec      	movs	r1, #236	; 0xec
 8002332:	4620      	mov	r0, r4
 8002334:	f002 ffb4 	bl	80052a0 <HAL_I2C_Mem_Read>

	// Read NVM from 0xE1 to 0xE7
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0xE1, 1, (uint8_t *)trimdata+25, 7, HAL_MAX_DELAY);
 8002338:	9502      	str	r5, [sp, #8]
 800233a:	2307      	movs	r3, #7
 800233c:	9301      	str	r3, [sp, #4]
 800233e:	f10d 0329 	add.w	r3, sp, #41	; 0x29
 8002342:	9300      	str	r3, [sp, #0]
 8002344:	2301      	movs	r3, #1
 8002346:	22e1      	movs	r2, #225	; 0xe1
 8002348:	21ec      	movs	r1, #236	; 0xec
 800234a:	4620      	mov	r0, r4
 800234c:	f002 ffa8 	bl	80052a0 <HAL_I2C_Mem_Read>

	// Arrange the data as per the datasheet (page no. 24)
	dig_T1 = (trimdata[1]<<8) | trimdata[0];
 8002350:	f89d 2011 	ldrb.w	r2, [sp, #17]
 8002354:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8002358:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800235c:	4a40      	ldr	r2, [pc, #256]	; (8002460 <TrimRead+0x148>)
 800235e:	8013      	strh	r3, [r2, #0]
	dig_T2 = (trimdata[3]<<8) | trimdata[2];
 8002360:	f89d 2013 	ldrb.w	r2, [sp, #19]
 8002364:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8002368:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800236c:	4a3d      	ldr	r2, [pc, #244]	; (8002464 <TrimRead+0x14c>)
 800236e:	8013      	strh	r3, [r2, #0]
	dig_T3 = (trimdata[5]<<8) | trimdata[4];
 8002370:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8002374:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8002378:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 800237c:	493a      	ldr	r1, [pc, #232]	; (8002468 <TrimRead+0x150>)
 800237e:	800a      	strh	r2, [r1, #0]
	dig_P1 = (trimdata[7]<<8) | trimdata[5];
 8002380:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8002384:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002388:	4a38      	ldr	r2, [pc, #224]	; (800246c <TrimRead+0x154>)
 800238a:	8013      	strh	r3, [r2, #0]
	dig_P2 = (trimdata[9]<<8) | trimdata[6];
 800238c:	f89d 2019 	ldrb.w	r2, [sp, #25]
 8002390:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8002394:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002398:	4a35      	ldr	r2, [pc, #212]	; (8002470 <TrimRead+0x158>)
 800239a:	8013      	strh	r3, [r2, #0]
	dig_P3 = (trimdata[11]<<8) | trimdata[10];
 800239c:	f89d 201b 	ldrb.w	r2, [sp, #27]
 80023a0:	f89d 301a 	ldrb.w	r3, [sp, #26]
 80023a4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80023a8:	4a32      	ldr	r2, [pc, #200]	; (8002474 <TrimRead+0x15c>)
 80023aa:	8013      	strh	r3, [r2, #0]
	dig_P4 = (trimdata[13]<<8) | trimdata[12];
 80023ac:	f89d 201d 	ldrb.w	r2, [sp, #29]
 80023b0:	f89d 301c 	ldrb.w	r3, [sp, #28]
 80023b4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80023b8:	4a2f      	ldr	r2, [pc, #188]	; (8002478 <TrimRead+0x160>)
 80023ba:	8013      	strh	r3, [r2, #0]
	dig_P5 = (trimdata[15]<<8) | trimdata[14];
 80023bc:	f89d 201f 	ldrb.w	r2, [sp, #31]
 80023c0:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80023c4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80023c8:	4a2c      	ldr	r2, [pc, #176]	; (800247c <TrimRead+0x164>)
 80023ca:	8013      	strh	r3, [r2, #0]
	dig_P6 = (trimdata[17]<<8) | trimdata[16];
 80023cc:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
 80023d0:	f89d 3020 	ldrb.w	r3, [sp, #32]
 80023d4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80023d8:	4a29      	ldr	r2, [pc, #164]	; (8002480 <TrimRead+0x168>)
 80023da:	8013      	strh	r3, [r2, #0]
	dig_P7 = (trimdata[19]<<8) | trimdata[18];
 80023dc:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
 80023e0:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
 80023e4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80023e8:	4a26      	ldr	r2, [pc, #152]	; (8002484 <TrimRead+0x16c>)
 80023ea:	8013      	strh	r3, [r2, #0]
	dig_P8 = (trimdata[21]<<8) | trimdata[20];
 80023ec:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
 80023f0:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 80023f4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80023f8:	4a23      	ldr	r2, [pc, #140]	; (8002488 <TrimRead+0x170>)
 80023fa:	8013      	strh	r3, [r2, #0]
	dig_P9 = (trimdata[23]<<8) | trimdata[22];
 80023fc:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
 8002400:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
 8002404:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002408:	4a20      	ldr	r2, [pc, #128]	; (800248c <TrimRead+0x174>)
 800240a:	8013      	strh	r3, [r2, #0]
	dig_H1 = trimdata[24];
 800240c:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
 8002410:	4b1f      	ldr	r3, [pc, #124]	; (8002490 <TrimRead+0x178>)
 8002412:	801a      	strh	r2, [r3, #0]
	dig_H2 = (trimdata[26]<<8) | trimdata[25];
 8002414:	f89d 202a 	ldrb.w	r2, [sp, #42]	; 0x2a
 8002418:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
 800241c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002420:	4a1c      	ldr	r2, [pc, #112]	; (8002494 <TrimRead+0x17c>)
 8002422:	8013      	strh	r3, [r2, #0]
	dig_H3 = (trimdata[27]);
 8002424:	f89d 202b 	ldrb.w	r2, [sp, #43]	; 0x2b
 8002428:	4b1b      	ldr	r3, [pc, #108]	; (8002498 <TrimRead+0x180>)
 800242a:	801a      	strh	r2, [r3, #0]
	dig_H4 = (trimdata[28]<<4) | (trimdata[29] & 0x0f);
 800242c:	f89d 102c 	ldrb.w	r1, [sp, #44]	; 0x2c
 8002430:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 8002434:	f003 020f 	and.w	r2, r3, #15
 8002438:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 800243c:	4917      	ldr	r1, [pc, #92]	; (800249c <TrimRead+0x184>)
 800243e:	800a      	strh	r2, [r1, #0]
	dig_H5 = (trimdata[30]<<4) | (trimdata[29]>>4);
 8002440:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
 8002444:	091b      	lsrs	r3, r3, #4
 8002446:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800244a:	4a15      	ldr	r2, [pc, #84]	; (80024a0 <TrimRead+0x188>)
 800244c:	8013      	strh	r3, [r2, #0]
	dig_H6 = (trimdata[31]);
 800244e:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 8002452:	4b14      	ldr	r3, [pc, #80]	; (80024a4 <TrimRead+0x18c>)
 8002454:	801a      	strh	r2, [r3, #0]
}
 8002456:	b00d      	add	sp, #52	; 0x34
 8002458:	bd30      	pop	{r4, r5, pc}
 800245a:	bf00      	nop
 800245c:	20000328 	.word	0x20000328
 8002460:	200004e4 	.word	0x200004e4
 8002464:	200004e6 	.word	0x200004e6
 8002468:	200004e8 	.word	0x200004e8
 800246c:	200004d2 	.word	0x200004d2
 8002470:	200004d4 	.word	0x200004d4
 8002474:	200004d6 	.word	0x200004d6
 8002478:	200004d8 	.word	0x200004d8
 800247c:	200004da 	.word	0x200004da
 8002480:	200004dc 	.word	0x200004dc
 8002484:	200004de 	.word	0x200004de
 8002488:	200004e0 	.word	0x200004e0
 800248c:	200004e2 	.word	0x200004e2
 8002490:	200004c6 	.word	0x200004c6
 8002494:	200004c8 	.word	0x200004c8
 8002498:	200004ca 	.word	0x200004ca
 800249c:	200004cc 	.word	0x200004cc
 80024a0:	200004ce 	.word	0x200004ce
 80024a4:	200004d0 	.word	0x200004d0

080024a8 <BME280_Config>:
 *         IIR is used to avoid the short term fluctuations
 *         Check datasheet page no 18 and page no 30
 */

int BME280_Config (uint8_t osrs_t, uint8_t osrs_p, uint8_t osrs_h, uint8_t mode, uint8_t t_sb, uint8_t filter)
{
 80024a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024aa:	b087      	sub	sp, #28
 80024ac:	4607      	mov	r7, r0
 80024ae:	460c      	mov	r4, r1
 80024b0:	4616      	mov	r6, r2
 80024b2:	461d      	mov	r5, r3
	// Read the Trimming parameters
	TrimRead();
 80024b4:	f7ff ff30 	bl	8002318 <TrimRead>


	uint8_t datatowrite = 0;
 80024b8:	2300      	movs	r3, #0
 80024ba:	f88d 3017 	strb.w	r3, [sp, #23]
	uint8_t datacheck = 0;
 80024be:	f88d 3016 	strb.w	r3, [sp, #22]

	// Reset the device
	datatowrite = 0xB6;  // reset sequence
 80024c2:	23b6      	movs	r3, #182	; 0xb6
 80024c4:	f88d 3017 	strb.w	r3, [sp, #23]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, RESET_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80024c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024cc:	9302      	str	r3, [sp, #8]
 80024ce:	2301      	movs	r3, #1
 80024d0:	9301      	str	r3, [sp, #4]
 80024d2:	f10d 0217 	add.w	r2, sp, #23
 80024d6:	9200      	str	r2, [sp, #0]
 80024d8:	22e0      	movs	r2, #224	; 0xe0
 80024da:	21ec      	movs	r1, #236	; 0xec
 80024dc:	4850      	ldr	r0, [pc, #320]	; (8002620 <BME280_Config+0x178>)
 80024de:	f002 fe0b 	bl	80050f8 <HAL_I2C_Mem_Write>
 80024e2:	2800      	cmp	r0, #0
 80024e4:	f040 8086 	bne.w	80025f4 <BME280_Config+0x14c>
	{
		  //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
		return -1;
	}

	HAL_Delay (100);
 80024e8:	2064      	movs	r0, #100	; 0x64
 80024ea:	f7ff fc21 	bl	8001d30 <HAL_Delay>


	// write the humidity oversampling to 0xF2
	datatowrite = osrs_h;
 80024ee:	f88d 6017 	strb.w	r6, [sp, #23]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80024f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024f6:	9302      	str	r3, [sp, #8]
 80024f8:	2301      	movs	r3, #1
 80024fa:	9301      	str	r3, [sp, #4]
 80024fc:	f10d 0217 	add.w	r2, sp, #23
 8002500:	9200      	str	r2, [sp, #0]
 8002502:	22f2      	movs	r2, #242	; 0xf2
 8002504:	21ec      	movs	r1, #236	; 0xec
 8002506:	4846      	ldr	r0, [pc, #280]	; (8002620 <BME280_Config+0x178>)
 8002508:	f002 fdf6 	bl	80050f8 <HAL_I2C_Mem_Write>
 800250c:	2800      	cmp	r0, #0
 800250e:	d174      	bne.n	80025fa <BME280_Config+0x152>
	{
		return -1;
	}
	HAL_Delay (100);
 8002510:	2064      	movs	r0, #100	; 0x64
 8002512:	f7ff fc0d 	bl	8001d30 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datacheck, 1, 1000);
 8002516:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800251a:	9302      	str	r3, [sp, #8]
 800251c:	2301      	movs	r3, #1
 800251e:	9301      	str	r3, [sp, #4]
 8002520:	f10d 0216 	add.w	r2, sp, #22
 8002524:	9200      	str	r2, [sp, #0]
 8002526:	22f2      	movs	r2, #242	; 0xf2
 8002528:	21ec      	movs	r1, #236	; 0xec
 800252a:	483d      	ldr	r0, [pc, #244]	; (8002620 <BME280_Config+0x178>)
 800252c:	f002 feb8 	bl	80052a0 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 8002530:	f89d 2016 	ldrb.w	r2, [sp, #22]
 8002534:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8002538:	429a      	cmp	r2, r3
 800253a:	d161      	bne.n	8002600 <BME280_Config+0x158>
		return -1;
	}


	// write the standby time and IIR filter coeff to 0xF5
	datatowrite = (t_sb <<5) |(filter << 2);
 800253c:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 8002546:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 800254a:	f88d 3017 	strb.w	r3, [sp, #23]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 800254e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002552:	9302      	str	r3, [sp, #8]
 8002554:	2301      	movs	r3, #1
 8002556:	9301      	str	r3, [sp, #4]
 8002558:	f10d 0217 	add.w	r2, sp, #23
 800255c:	9200      	str	r2, [sp, #0]
 800255e:	22f5      	movs	r2, #245	; 0xf5
 8002560:	21ec      	movs	r1, #236	; 0xec
 8002562:	482f      	ldr	r0, [pc, #188]	; (8002620 <BME280_Config+0x178>)
 8002564:	f002 fdc8 	bl	80050f8 <HAL_I2C_Mem_Write>
 8002568:	2800      	cmp	r0, #0
 800256a:	d14c      	bne.n	8002606 <BME280_Config+0x15e>
	{
		return -1;
	}
	HAL_Delay (100);
 800256c:	2064      	movs	r0, #100	; 0x64
 800256e:	f7ff fbdf 	bl	8001d30 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datacheck, 1, 1000);
 8002572:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002576:	9302      	str	r3, [sp, #8]
 8002578:	2301      	movs	r3, #1
 800257a:	9301      	str	r3, [sp, #4]
 800257c:	f10d 0216 	add.w	r2, sp, #22
 8002580:	9200      	str	r2, [sp, #0]
 8002582:	22f5      	movs	r2, #245	; 0xf5
 8002584:	21ec      	movs	r1, #236	; 0xec
 8002586:	4826      	ldr	r0, [pc, #152]	; (8002620 <BME280_Config+0x178>)
 8002588:	f002 fe8a 	bl	80052a0 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 800258c:	f89d 2016 	ldrb.w	r2, [sp, #22]
 8002590:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8002594:	429a      	cmp	r2, r3
 8002596:	d139      	bne.n	800260c <BME280_Config+0x164>
		return -1;
	}


	// write the pressure and temp oversampling along with mode to 0xF4
	datatowrite = (osrs_t <<5) |(osrs_p << 2) | mode;
 8002598:	00a4      	lsls	r4, r4, #2
 800259a:	ea44 1447 	orr.w	r4, r4, r7, lsl #5
 800259e:	b264      	sxtb	r4, r4
 80025a0:	4325      	orrs	r5, r4
 80025a2:	f88d 5017 	strb.w	r5, [sp, #23]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80025a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025aa:	9302      	str	r3, [sp, #8]
 80025ac:	2301      	movs	r3, #1
 80025ae:	9301      	str	r3, [sp, #4]
 80025b0:	f10d 0217 	add.w	r2, sp, #23
 80025b4:	9200      	str	r2, [sp, #0]
 80025b6:	22f4      	movs	r2, #244	; 0xf4
 80025b8:	21ec      	movs	r1, #236	; 0xec
 80025ba:	4819      	ldr	r0, [pc, #100]	; (8002620 <BME280_Config+0x178>)
 80025bc:	f002 fd9c 	bl	80050f8 <HAL_I2C_Mem_Write>
 80025c0:	bb38      	cbnz	r0, 8002612 <BME280_Config+0x16a>
	{
		return -1;
	}
	HAL_Delay (100);
 80025c2:	2064      	movs	r0, #100	; 0x64
 80025c4:	f7ff fbb4 	bl	8001d30 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datacheck, 1, 1000);
 80025c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025cc:	9302      	str	r3, [sp, #8]
 80025ce:	2301      	movs	r3, #1
 80025d0:	9301      	str	r3, [sp, #4]
 80025d2:	f10d 0216 	add.w	r2, sp, #22
 80025d6:	9200      	str	r2, [sp, #0]
 80025d8:	22f4      	movs	r2, #244	; 0xf4
 80025da:	21ec      	movs	r1, #236	; 0xec
 80025dc:	4810      	ldr	r0, [pc, #64]	; (8002620 <BME280_Config+0x178>)
 80025de:	f002 fe5f 	bl	80052a0 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 80025e2:	f89d 2016 	ldrb.w	r2, [sp, #22]
 80025e6:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d114      	bne.n	8002618 <BME280_Config+0x170>
	{
		return -1;
	}

	return 0;
 80025ee:	2000      	movs	r0, #0
}
 80025f0:	b007      	add	sp, #28
 80025f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
 80025f4:	f04f 30ff 	mov.w	r0, #4294967295
 80025f8:	e7fa      	b.n	80025f0 <BME280_Config+0x148>
		return -1;
 80025fa:	f04f 30ff 	mov.w	r0, #4294967295
 80025fe:	e7f7      	b.n	80025f0 <BME280_Config+0x148>
		return -1;
 8002600:	f04f 30ff 	mov.w	r0, #4294967295
 8002604:	e7f4      	b.n	80025f0 <BME280_Config+0x148>
		return -1;
 8002606:	f04f 30ff 	mov.w	r0, #4294967295
 800260a:	e7f1      	b.n	80025f0 <BME280_Config+0x148>
		return -1;
 800260c:	f04f 30ff 	mov.w	r0, #4294967295
 8002610:	e7ee      	b.n	80025f0 <BME280_Config+0x148>
		return -1;
 8002612:	f04f 30ff 	mov.w	r0, #4294967295
 8002616:	e7eb      	b.n	80025f0 <BME280_Config+0x148>
		return -1;
 8002618:	f04f 30ff 	mov.w	r0, #4294967295
 800261c:	e7e8      	b.n	80025f0 <BME280_Config+0x148>
 800261e:	bf00      	nop
 8002620:	20000328 	.word	0x20000328

08002624 <BME_280_Init>:
{
 8002624:	b500      	push	{lr}
 8002626:	b083      	sub	sp, #12
	ret= BME280_Config(OSRS_2, OSRS_16, OSRS_1, MODE_NORMAL, T_SB_0p5, IIR_16);
 8002628:	2304      	movs	r3, #4
 800262a:	9301      	str	r3, [sp, #4]
 800262c:	2300      	movs	r3, #0
 800262e:	9300      	str	r3, [sp, #0]
 8002630:	2303      	movs	r3, #3
 8002632:	2201      	movs	r2, #1
 8002634:	2105      	movs	r1, #5
 8002636:	2002      	movs	r0, #2
 8002638:	f7ff ff36 	bl	80024a8 <BME280_Config>
}
 800263c:	b003      	add	sp, #12
 800263e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08002644 <BMEReadRaw>:


int BMEReadRaw(void)
{
 8002644:	b510      	push	{r4, lr}
 8002646:	b086      	sub	sp, #24
	uint8_t RawData[8];

	// Check the chip ID before reading
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, ID_REG, 1, &chipID, 1, 1000);
 8002648:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800264c:	9302      	str	r3, [sp, #8]
 800264e:	2301      	movs	r3, #1
 8002650:	9301      	str	r3, [sp, #4]
 8002652:	4c1f      	ldr	r4, [pc, #124]	; (80026d0 <BMEReadRaw+0x8c>)
 8002654:	9400      	str	r4, [sp, #0]
 8002656:	22d0      	movs	r2, #208	; 0xd0
 8002658:	21ec      	movs	r1, #236	; 0xec
 800265a:	481e      	ldr	r0, [pc, #120]	; (80026d4 <BMEReadRaw+0x90>)
 800265c:	f002 fe20 	bl	80052a0 <HAL_I2C_Mem_Read>

	if (chipID == 0x60)
 8002660:	7823      	ldrb	r3, [r4, #0]
 8002662:	2b60      	cmp	r3, #96	; 0x60
 8002664:	d131      	bne.n	80026ca <BMEReadRaw+0x86>
	{
		// Read the Registers 0xF7 to 0xFE
		HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, PRESS_MSB_REG, 1, RawData, 8, HAL_MAX_DELAY);
 8002666:	f04f 33ff 	mov.w	r3, #4294967295
 800266a:	9302      	str	r3, [sp, #8]
 800266c:	2308      	movs	r3, #8
 800266e:	9301      	str	r3, [sp, #4]
 8002670:	ab04      	add	r3, sp, #16
 8002672:	9300      	str	r3, [sp, #0]
 8002674:	2301      	movs	r3, #1
 8002676:	22f7      	movs	r2, #247	; 0xf7
 8002678:	21ec      	movs	r1, #236	; 0xec
 800267a:	4816      	ldr	r0, [pc, #88]	; (80026d4 <BMEReadRaw+0x90>)
 800267c:	f002 fe10 	bl	80052a0 <HAL_I2C_Mem_Read>

		/* Calculate the Raw data for the parameters
		 * Here the Pressure and Temperature are in 20 bit format and humidity in 16 bit format
		 */
		pRaw = (RawData[0]<<12)|(RawData[1]<<4)|(RawData[2]>>4);
 8002680:	f89d 2010 	ldrb.w	r2, [sp, #16]
 8002684:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8002688:	011b      	lsls	r3, r3, #4
 800268a:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800268e:	f89d 2012 	ldrb.w	r2, [sp, #18]
 8002692:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
 8002696:	4a10      	ldr	r2, [pc, #64]	; (80026d8 <BMEReadRaw+0x94>)
 8002698:	6013      	str	r3, [r2, #0]
		tRaw = (RawData[3]<<12)|(RawData[4]<<4)|(RawData[5]>>4);
 800269a:	f89d 2013 	ldrb.w	r2, [sp, #19]
 800269e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80026a2:	011b      	lsls	r3, r3, #4
 80026a4:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 80026a8:	f89d 2015 	ldrb.w	r2, [sp, #21]
 80026ac:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
 80026b0:	4a0a      	ldr	r2, [pc, #40]	; (80026dc <BMEReadRaw+0x98>)
 80026b2:	6013      	str	r3, [r2, #0]
		hRaw = (RawData[6]<<8)|(RawData[7]);
 80026b4:	f89d 2016 	ldrb.w	r2, [sp, #22]
 80026b8:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80026bc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80026c0:	4a07      	ldr	r2, [pc, #28]	; (80026e0 <BMEReadRaw+0x9c>)
 80026c2:	6013      	str	r3, [r2, #0]

		return 0;
 80026c4:	2000      	movs	r0, #0
	}

	else
		return -1;
}
 80026c6:	b006      	add	sp, #24
 80026c8:	bd10      	pop	{r4, pc}
		return -1;
 80026ca:	f04f 30ff 	mov.w	r0, #4294967295
 80026ce:	e7fa      	b.n	80026c6 <BMEReadRaw+0x82>
 80026d0:	200004c5 	.word	0x200004c5
 80026d4:	20000328 	.word	0x20000328
 80026d8:	200004f0 	.word	0x200004f0
 80026dc:	200004f4 	.word	0x200004f4
 80026e0:	200004ec 	.word	0x200004ec

080026e4 <BME280_compensate_T_int32>:
*/
int32_t t_fine;
int32_t BME280_compensate_T_int32(int32_t adc_T)
{
	int32_t var1, var2, T;
	var1 = ((((adc_T>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 80026e4:	4b0e      	ldr	r3, [pc, #56]	; (8002720 <BME280_compensate_T_int32+0x3c>)
 80026e6:	881b      	ldrh	r3, [r3, #0]
 80026e8:	005a      	lsls	r2, r3, #1
 80026ea:	ebc2 02e0 	rsb	r2, r2, r0, asr #3
 80026ee:	490d      	ldr	r1, [pc, #52]	; (8002724 <BME280_compensate_T_int32+0x40>)
 80026f0:	f9b1 1000 	ldrsh.w	r1, [r1]
 80026f4:	fb01 f202 	mul.w	r2, r1, r2
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1)))>> 12) *((int32_t)dig_T3)) >> 14;
 80026f8:	ebc3 1020 	rsb	r0, r3, r0, asr #4
 80026fc:	fb00 f000 	mul.w	r0, r0, r0
 8002700:	1300      	asrs	r0, r0, #12
 8002702:	4b09      	ldr	r3, [pc, #36]	; (8002728 <BME280_compensate_T_int32+0x44>)
 8002704:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002708:	fb03 f000 	mul.w	r0, r3, r0
 800270c:	1380      	asrs	r0, r0, #14
	t_fine = var1 + var2;
 800270e:	eb00 20e2 	add.w	r0, r0, r2, asr #11
 8002712:	4b06      	ldr	r3, [pc, #24]	; (800272c <BME280_compensate_T_int32+0x48>)
 8002714:	6018      	str	r0, [r3, #0]
	T = (t_fine * 5 + 128) >> 8;
 8002716:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800271a:	3080      	adds	r0, #128	; 0x80
	return T;
}
 800271c:	1200      	asrs	r0, r0, #8
 800271e:	4770      	bx	lr
 8002720:	200004e4 	.word	0x200004e4
 8002724:	200004e6 	.word	0x200004e6
 8002728:	200004e8 	.word	0x200004e8
 800272c:	200004f8 	.word	0x200004f8

08002730 <BME280_compensate_P_int64>:
#if SUPPORT_64BIT
/* Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
   Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa
*/
uint32_t BME280_compensate_P_int64(int32_t adc_P)
{
 8002730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 8002732:	4b66      	ldr	r3, [pc, #408]	; (80028cc <BME280_compensate_P_int64+0x19c>)
 8002734:	6819      	ldr	r1, [r3, #0]
 8002736:	17cb      	asrs	r3, r1, #31
 8002738:	f5b1 31fa 	subs.w	r1, r1, #128000	; 0x1f400
 800273c:	f143 33ff 	adc.w	r3, r3, #4294967295
	var2 = var1 * var1 * (int64_t)dig_P6;
 8002740:	fb01 f403 	mul.w	r4, r1, r3
 8002744:	fba1 2601 	umull	r2, r6, r1, r1
 8002748:	eb06 0644 	add.w	r6, r6, r4, lsl #1
 800274c:	4c60      	ldr	r4, [pc, #384]	; (80028d0 <BME280_compensate_P_int64+0x1a0>)
 800274e:	f9b4 5000 	ldrsh.w	r5, [r4]
 8002752:	17ec      	asrs	r4, r5, #31
 8002754:	fb02 f404 	mul.w	r4, r2, r4
 8002758:	fb05 4406 	mla	r4, r5, r6, r4
 800275c:	fba2 7505 	umull	r7, r5, r2, r5
 8002760:	442c      	add	r4, r5
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 8002762:	4d5c      	ldr	r5, [pc, #368]	; (80028d4 <BME280_compensate_P_int64+0x1a4>)
 8002764:	f9b5 c000 	ldrsh.w	ip, [r5]
 8002768:	ea4f 75ec 	mov.w	r5, ip, asr #31
 800276c:	fb0c fe03 	mul.w	lr, ip, r3
 8002770:	fb01 ee05 	mla	lr, r1, r5, lr
 8002774:	fbac c501 	umull	ip, r5, ip, r1
 8002778:	44ae      	add	lr, r5
 800277a:	ea4f 4e4e 	mov.w	lr, lr, lsl #17
 800277e:	ea4e 3edc 	orr.w	lr, lr, ip, lsr #15
 8002782:	ea4f 4c4c 	mov.w	ip, ip, lsl #17
 8002786:	eb1c 0c07 	adds.w	ip, ip, r7
 800278a:	eb44 040e 	adc.w	r4, r4, lr
	var2 = var2 + (((int64_t)dig_P4)<<35);
 800278e:	4d52      	ldr	r5, [pc, #328]	; (80028d8 <BME280_compensate_P_int64+0x1a8>)
 8002790:	f9b5 5000 	ldrsh.w	r5, [r5]
 8002794:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 8002798:	4d50      	ldr	r5, [pc, #320]	; (80028dc <BME280_compensate_P_int64+0x1ac>)
 800279a:	f9b5 e000 	ldrsh.w	lr, [r5]
 800279e:	ea4f 75ee 	mov.w	r5, lr, asr #31
 80027a2:	fb02 f505 	mul.w	r5, r2, r5
 80027a6:	fb0e 5506 	mla	r5, lr, r6, r5
 80027aa:	fba2 2e0e 	umull	r2, lr, r2, lr
 80027ae:	4475      	add	r5, lr
 80027b0:	0a12      	lsrs	r2, r2, #8
 80027b2:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
 80027b6:	4e4a      	ldr	r6, [pc, #296]	; (80028e0 <BME280_compensate_P_int64+0x1b0>)
 80027b8:	f9b6 e000 	ldrsh.w	lr, [r6]
 80027bc:	ea4f 76ee 	mov.w	r6, lr, asr #31
 80027c0:	fb0e f303 	mul.w	r3, lr, r3
 80027c4:	fb01 3306 	mla	r3, r1, r6, r3
 80027c8:	fbae e101 	umull	lr, r1, lr, r1
 80027cc:	440b      	add	r3, r1
 80027ce:	031b      	lsls	r3, r3, #12
 80027d0:	ea43 531e 	orr.w	r3, r3, lr, lsr #20
 80027d4:	ea4f 3e0e 	mov.w	lr, lr, lsl #12
 80027d8:	eb12 020e 	adds.w	r2, r2, lr
 80027dc:	eb43 2325 	adc.w	r3, r3, r5, asr #8
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 80027e0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80027e4:	493f      	ldr	r1, [pc, #252]	; (80028e4 <BME280_compensate_P_int64+0x1b4>)
 80027e6:	880d      	ldrh	r5, [r1, #0]
 80027e8:	fba2 2105 	umull	r2, r1, r2, r5
 80027ec:	fb05 1103 	mla	r1, r5, r3, r1
 80027f0:	104a      	asrs	r2, r1, #1
 80027f2:	17cb      	asrs	r3, r1, #31
	if (var1 == 0)
 80027f4:	ea53 0161 	orrs.w	r1, r3, r1, asr #1
 80027f8:	d065      	beq.n	80028c6 <BME280_compensate_P_int64+0x196>
	{
		return 0; // avoid exception caused by division by zero
	}
	p = 1048576-adc_P;
 80027fa:	f5c0 1e80 	rsb	lr, r0, #1048576	; 0x100000
	p = (((p<<31)-var2)*3125)/var1;
 80027fe:	ea4f 016e 	mov.w	r1, lr, asr #1
 8002802:	ea4f 7ece 	mov.w	lr, lr, lsl #31
 8002806:	ebbe 0e0c 	subs.w	lr, lr, ip
 800280a:	eb61 0404 	sbc.w	r4, r1, r4
 800280e:	eb1e 0c0e 	adds.w	ip, lr, lr
 8002812:	eb44 0104 	adc.w	r1, r4, r4
 8002816:	eb1c 0c0e 	adds.w	ip, ip, lr
 800281a:	eb44 0101 	adc.w	r1, r4, r1
 800281e:	0188      	lsls	r0, r1, #6
 8002820:	ea40 609c 	orr.w	r0, r0, ip, lsr #26
 8002824:	ea4f 158c 	mov.w	r5, ip, lsl #6
 8002828:	eb1c 0c05 	adds.w	ip, ip, r5
 800282c:	eb41 0100 	adc.w	r1, r1, r0
 8002830:	0089      	lsls	r1, r1, #2
 8002832:	ea41 719c 	orr.w	r1, r1, ip, lsr #30
 8002836:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800283a:	eb1c 0c0e 	adds.w	ip, ip, lr
 800283e:	eb44 0101 	adc.w	r1, r4, r1
 8002842:	0089      	lsls	r1, r1, #2
 8002844:	ea41 719c 	orr.w	r1, r1, ip, lsr #30
 8002848:	ea4f 008c 	mov.w	r0, ip, lsl #2
 800284c:	eb10 000e 	adds.w	r0, r0, lr
 8002850:	eb44 0101 	adc.w	r1, r4, r1
 8002854:	f7fe fc6e 	bl	8001134 <__aeabi_ldivmod>
 8002858:	4603      	mov	r3, r0
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 800285a:	4a23      	ldr	r2, [pc, #140]	; (80028e8 <BME280_compensate_P_int64+0x1b8>)
 800285c:	f9b2 5000 	ldrsh.w	r5, [r2]
 8002860:	17ef      	asrs	r7, r5, #31
 8002862:	0b42      	lsrs	r2, r0, #13
 8002864:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8002868:	134e      	asrs	r6, r1, #13
 800286a:	fb05 f406 	mul.w	r4, r5, r6
 800286e:	fb02 4407 	mla	r4, r2, r7, r4
 8002872:	fba5 5702 	umull	r5, r7, r5, r2
 8002876:	443c      	add	r4, r7
 8002878:	fb02 f404 	mul.w	r4, r2, r4
 800287c:	fb05 4406 	mla	r4, r5, r6, r4
 8002880:	fba2 2505 	umull	r2, r5, r2, r5
 8002884:	442c      	add	r4, r5
 8002886:	0e52      	lsrs	r2, r2, #25
 8002888:	ea42 12c4 	orr.w	r2, r2, r4, lsl #7
	var2 = (((int64_t)dig_P8) * p) >> 19;
 800288c:	4d17      	ldr	r5, [pc, #92]	; (80028ec <BME280_compensate_P_int64+0x1bc>)
 800288e:	f9b5 5000 	ldrsh.w	r5, [r5]
 8002892:	17ef      	asrs	r7, r5, #31
 8002894:	fb05 f601 	mul.w	r6, r5, r1
 8002898:	fb07 6000 	mla	r0, r7, r0, r6
 800289c:	fba5 5603 	umull	r5, r6, r5, r3
 80028a0:	4430      	add	r0, r6
 80028a2:	0ced      	lsrs	r5, r5, #19
 80028a4:	ea45 3540 	orr.w	r5, r5, r0, lsl #13
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 80028a8:	189b      	adds	r3, r3, r2
 80028aa:	eb41 6164 	adc.w	r1, r1, r4, asr #25
 80028ae:	195b      	adds	r3, r3, r5
 80028b0:	eb41 41e0 	adc.w	r1, r1, r0, asr #19
 80028b4:	0a18      	lsrs	r0, r3, #8
 80028b6:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
 80028ba:	4b0d      	ldr	r3, [pc, #52]	; (80028f0 <BME280_compensate_P_int64+0x1c0>)
 80028bc:	f9b3 3000 	ldrsh.w	r3, [r3]
	return (uint32_t)p;
 80028c0:	eb00 1003 	add.w	r0, r0, r3, lsl #4
}
 80028c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 0; // avoid exception caused by division by zero
 80028c6:	2000      	movs	r0, #0
 80028c8:	e7fc      	b.n	80028c4 <BME280_compensate_P_int64+0x194>
 80028ca:	bf00      	nop
 80028cc:	200004f8 	.word	0x200004f8
 80028d0:	200004dc 	.word	0x200004dc
 80028d4:	200004da 	.word	0x200004da
 80028d8:	200004d8 	.word	0x200004d8
 80028dc:	200004d6 	.word	0x200004d6
 80028e0:	200004d4 	.word	0x200004d4
 80028e4:	200004d2 	.word	0x200004d2
 80028e8:	200004e2 	.word	0x200004e2
 80028ec:	200004e0 	.word	0x200004e0
 80028f0:	200004de 	.word	0x200004de

080028f4 <bme280_compensate_H_int32>:
   Output value of “47445” represents 47445/1024 = 46.333 %RH
*/
uint32_t bme280_compensate_H_int32(int32_t adc_H)
{
	int32_t v_x1_u32r;
	v_x1_u32r = (t_fine - ((int32_t)76800));
 80028f4:	4b20      	ldr	r3, [pc, #128]	; (8002978 <bme280_compensate_H_int32+0x84>)
 80028f6:	6819      	ldr	r1, [r3, #0]
 80028f8:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 80028fc:	4b1f      	ldr	r3, [pc, #124]	; (800297c <bme280_compensate_H_int32+0x88>)
 80028fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002902:	051b      	lsls	r3, r3, #20
 8002904:	ebc3 3080 	rsb	r0, r3, r0, lsl #14
 8002908:	4b1d      	ldr	r3, [pc, #116]	; (8002980 <bme280_compensate_H_int32+0x8c>)
 800290a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800290e:	fb01 0013 	mls	r0, r1, r3, r0
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 8002912:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
 8002916:	13c0      	asrs	r0, r0, #15
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 8002918:	4b1a      	ldr	r3, [pc, #104]	; (8002984 <bme280_compensate_H_int32+0x90>)
 800291a:	f9b3 3000 	ldrsh.w	r3, [r3]
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 800291e:	fb01 f303 	mul.w	r3, r1, r3
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 8002922:	129b      	asrs	r3, r3, #10
 8002924:	4a18      	ldr	r2, [pc, #96]	; (8002988 <bme280_compensate_H_int32+0x94>)
 8002926:	8812      	ldrh	r2, [r2, #0]
 8002928:	fb01 f202 	mul.w	r2, r1, r2
 800292c:	12d2      	asrs	r2, r2, #11
 800292e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8002932:	fb02 f303 	mul.w	r3, r2, r3
							((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)dig_H2) +\
 8002936:	129b      	asrs	r3, r3, #10
 8002938:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800293c:	4a13      	ldr	r2, [pc, #76]	; (800298c <bme280_compensate_H_int32+0x98>)
 800293e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002942:	fb02 f303 	mul.w	r3, r2, r3
 8002946:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
					8192) >> 14));
 800294a:	139b      	asrs	r3, r3, #14
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 800294c:	fb03 f000 	mul.w	r0, r3, r0
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8002950:	13c3      	asrs	r3, r0, #15
 8002952:	fb03 f303 	mul.w	r3, r3, r3
 8002956:	11db      	asrs	r3, r3, #7
			((int32_t)dig_H1)) >> 4));
 8002958:	4a0d      	ldr	r2, [pc, #52]	; (8002990 <bme280_compensate_H_int32+0x9c>)
 800295a:	8812      	ldrh	r2, [r2, #0]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 800295c:	fb02 f303 	mul.w	r3, r2, r3
 8002960:	eba0 1023 	sub.w	r0, r0, r3, asr #4
	v_x1_u32r = (v_x1_u32r < 0 ? 0 : v_x1_u32r);
 8002964:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
	v_x1_u32r = (v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r);
 8002968:	f1b0 5fc8 	cmp.w	r0, #419430400	; 0x19000000
 800296c:	bfa8      	it	ge
 800296e:	f04f 50c8 	movge.w	r0, #419430400	; 0x19000000
	return (uint32_t)(v_x1_u32r>>12);
}
 8002972:	1300      	asrs	r0, r0, #12
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	200004f8 	.word	0x200004f8
 800297c:	200004cc 	.word	0x200004cc
 8002980:	200004ce 	.word	0x200004ce
 8002984:	200004d0 	.word	0x200004d0
 8002988:	200004ca 	.word	0x200004ca
 800298c:	200004c8 	.word	0x200004c8
 8002990:	200004c6 	.word	0x200004c6

08002994 <BME280_Measure>:

/* measure the temp, pressure and humidity
 * the values will be stored in the parameters passed to the function
 */
int BME280_Measure (void)
{
 8002994:	b508      	push	{r3, lr}
	if (BMEReadRaw() == 0)
 8002996:	f7ff fe55 	bl	8002644 <BMEReadRaw>
 800299a:	2800      	cmp	r0, #0
 800299c:	d138      	bne.n	8002a10 <BME280_Measure+0x7c>
	{
		  if (tRaw == 0x800000) Temp = 0; // value in case temp measurement was disabled
 800299e:	4b21      	ldr	r3, [pc, #132]	; (8002a24 <BME280_Measure+0x90>)
 80029a0:	6818      	ldr	r0, [r3, #0]
 80029a2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80029a6:	d121      	bne.n	80029ec <BME280_Measure+0x58>
 80029a8:	4b1f      	ldr	r3, [pc, #124]	; (8002a28 <BME280_Measure+0x94>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	601a      	str	r2, [r3, #0]
		  else
		  {
			  Temp = (float)(BME280_compensate_T_int32 (tRaw))/100.0;  // as per datasheet, the temp is x100
		  }

		  if (pRaw == 0x800000) Press = 0; // value in case temp measurement was disabled
 80029ae:	4b1f      	ldr	r3, [pc, #124]	; (8002a2c <BME280_Measure+0x98>)
 80029b0:	6818      	ldr	r0, [r3, #0]
 80029b2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80029b6:	d023      	beq.n	8002a00 <BME280_Measure+0x6c>
		  else
		  {
#if SUPPORT_64BIT
			  Press =(float) (BME280_compensate_P_int64 (pRaw))/256.0;  // as per datasheet, the pressure is x256
 80029b8:	f7ff feba 	bl	8002730 <BME280_compensate_P_int64>
 80029bc:	f7fe f9f2 	bl	8000da4 <__aeabi_ui2f>
 80029c0:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 80029c4:	f7fe fa46 	bl	8000e54 <__aeabi_fmul>
 80029c8:	4b19      	ldr	r3, [pc, #100]	; (8002a30 <BME280_Measure+0x9c>)
 80029ca:	6018      	str	r0, [r3, #0]
			  Press = (BME280_compensate_P_int32 (pRaw));  // as per datasheet, the pressure is Pa

#endif
		  }

		  if (hRaw == 0x8000) Hum = 0; // value in case temp measurement was disabled
 80029cc:	4b19      	ldr	r3, [pc, #100]	; (8002a34 <BME280_Measure+0xa0>)
 80029ce:	6818      	ldr	r0, [r3, #0]
 80029d0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80029d4:	d018      	beq.n	8002a08 <BME280_Measure+0x74>
		  else
		  {
			  Hum = (float)(bme280_compensate_H_int32 (hRaw))/1024.0;  // as per datasheet, the temp is x1024
 80029d6:	f7ff ff8d 	bl	80028f4 <bme280_compensate_H_int32>
 80029da:	f7fe f9e3 	bl	8000da4 <__aeabi_ui2f>
 80029de:	f04f 516a 	mov.w	r1, #981467136	; 0x3a800000
 80029e2:	f7fe fa37 	bl	8000e54 <__aeabi_fmul>
 80029e6:	4b14      	ldr	r3, [pc, #80]	; (8002a38 <BME280_Measure+0xa4>)
 80029e8:	6018      	str	r0, [r3, #0]
 80029ea:	e018      	b.n	8002a1e <BME280_Measure+0x8a>
			  Temp = (float)(BME280_compensate_T_int32 (tRaw))/100.0;  // as per datasheet, the temp is x100
 80029ec:	f7ff fe7a 	bl	80026e4 <BME280_compensate_T_int32>
 80029f0:	f7fe f9dc 	bl	8000dac <__aeabi_i2f>
 80029f4:	4911      	ldr	r1, [pc, #68]	; (8002a3c <BME280_Measure+0xa8>)
 80029f6:	f7fe fae1 	bl	8000fbc <__aeabi_fdiv>
 80029fa:	4b0b      	ldr	r3, [pc, #44]	; (8002a28 <BME280_Measure+0x94>)
 80029fc:	6018      	str	r0, [r3, #0]
 80029fe:	e7d6      	b.n	80029ae <BME280_Measure+0x1a>
		  if (pRaw == 0x800000) Press = 0; // value in case temp measurement was disabled
 8002a00:	4b0b      	ldr	r3, [pc, #44]	; (8002a30 <BME280_Measure+0x9c>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	601a      	str	r2, [r3, #0]
 8002a06:	e7e1      	b.n	80029cc <BME280_Measure+0x38>
		  if (hRaw == 0x8000) Hum = 0; // value in case temp measurement was disabled
 8002a08:	4b0b      	ldr	r3, [pc, #44]	; (8002a38 <BME280_Measure+0xa4>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	601a      	str	r2, [r3, #0]
 8002a0e:	e006      	b.n	8002a1e <BME280_Measure+0x8a>


	// if the device is detached
	else
	{
		Temp = Press = Hum = 0;
 8002a10:	2300      	movs	r3, #0
 8002a12:	4a09      	ldr	r2, [pc, #36]	; (8002a38 <BME280_Measure+0xa4>)
 8002a14:	6013      	str	r3, [r2, #0]
 8002a16:	4a06      	ldr	r2, [pc, #24]	; (8002a30 <BME280_Measure+0x9c>)
 8002a18:	6013      	str	r3, [r2, #0]
 8002a1a:	4a03      	ldr	r2, [pc, #12]	; (8002a28 <BME280_Measure+0x94>)
 8002a1c:	6013      	str	r3, [r2, #0]
	}
	return 0;
}
 8002a1e:	2000      	movs	r0, #0
 8002a20:	bd08      	pop	{r3, pc}
 8002a22:	bf00      	nop
 8002a24:	200004f4 	.word	0x200004f4
 8002a28:	20000538 	.word	0x20000538
 8002a2c:	200004f0 	.word	0x200004f0
 8002a30:	20000530 	.word	0x20000530
 8002a34:	200004ec 	.word	0x200004ec
 8002a38:	20000528 	.word	0x20000528
 8002a3c:	42c80000 	.word	0x42c80000

08002a40 <delay>:
 */
#include "sensors.h"
#include "stm32wlxx_hal.h"
/*********************************** DHT11 FUNCTIONS ********************************************/
void delay(uint32_t us)
{
 8002a40:	b082      	sub	sp, #8
	volatile int i = 0;
 8002a42:	2300      	movs	r3, #0
 8002a44:	9301      	str	r3, [sp, #4]
	for(i= 0;i < (4*us);i++);
 8002a46:	9301      	str	r3, [sp, #4]
 8002a48:	e002      	b.n	8002a50 <delay+0x10>
 8002a4a:	9b01      	ldr	r3, [sp, #4]
 8002a4c:	3301      	adds	r3, #1
 8002a4e:	9301      	str	r3, [sp, #4]
 8002a50:	9b01      	ldr	r3, [sp, #4]
 8002a52:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
 8002a56:	d3f8      	bcc.n	8002a4a <delay+0xa>
}
 8002a58:	b002      	add	sp, #8
 8002a5a:	4770      	bx	lr

08002a5c <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002a5c:	b500      	push	{lr}
 8002a5e:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a60:	2300      	movs	r3, #0
 8002a62:	9301      	str	r3, [sp, #4]
 8002a64:	9302      	str	r3, [sp, #8]
 8002a66:	9303      	str	r3, [sp, #12]
 8002a68:	9304      	str	r3, [sp, #16]
 8002a6a:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8002a6c:	9101      	str	r1, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8002a72:	a901      	add	r1, sp, #4
 8002a74:	f001 ffbe 	bl	80049f4 <HAL_GPIO_Init>
}
 8002a78:	b007      	add	sp, #28
 8002a7a:	f85d fb04 	ldr.w	pc, [sp], #4

08002a7e <Set_Pin_Input>:


void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002a7e:	b500      	push	{lr}
 8002a80:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a82:	2300      	movs	r3, #0
 8002a84:	9301      	str	r3, [sp, #4]
 8002a86:	9302      	str	r3, [sp, #8]
 8002a88:	9303      	str	r3, [sp, #12]
 8002a8a:	9304      	str	r3, [sp, #16]
 8002a8c:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8002a8e:	9101      	str	r1, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a90:	2301      	movs	r3, #1
 8002a92:	9303      	str	r3, [sp, #12]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8002a94:	a901      	add	r1, sp, #4
 8002a96:	f001 ffad 	bl	80049f4 <HAL_GPIO_Init>
}
 8002a9a:	b007      	add	sp, #28
 8002a9c:	f85d fb04 	ldr.w	pc, [sp], #4

08002aa0 <DHT11_Start>:


void DHT11_Start (void)
{
 8002aa0:	b510      	push	{r4, lr}
	Set_Pin_Output (DHT11_PORT, DHT11_PIN);  // set the pin as output
 8002aa2:	4c0d      	ldr	r4, [pc, #52]	; (8002ad8 <DHT11_Start+0x38>)
 8002aa4:	2110      	movs	r1, #16
 8002aa6:	4620      	mov	r0, r4
 8002aa8:	f7ff ffd8 	bl	8002a5c <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 8002aac:	2200      	movs	r2, #0
 8002aae:	2110      	movs	r1, #16
 8002ab0:	4620      	mov	r0, r4
 8002ab2:	f002 f8f6 	bl	8004ca2 <HAL_GPIO_WritePin>
	delay (18000);   // wait for 18ms
 8002ab6:	f244 6050 	movw	r0, #18000	; 0x4650
 8002aba:	f7ff ffc1 	bl	8002a40 <delay>
    HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 8002abe:	2201      	movs	r2, #1
 8002ac0:	2110      	movs	r1, #16
 8002ac2:	4620      	mov	r0, r4
 8002ac4:	f002 f8ed 	bl	8004ca2 <HAL_GPIO_WritePin>
	delay (20);   // wait for 20us
 8002ac8:	2014      	movs	r0, #20
 8002aca:	f7ff ffb9 	bl	8002a40 <delay>
    Set_Pin_Input(DHT11_PORT, DHT11_PIN);    // set as input
 8002ace:	2110      	movs	r1, #16
 8002ad0:	4620      	mov	r0, r4
 8002ad2:	f7ff ffd4 	bl	8002a7e <Set_Pin_Input>
}
 8002ad6:	bd10      	pop	{r4, pc}
 8002ad8:	48000400 	.word	0x48000400

08002adc <DHT11_Check_Response>:

uint8_t DHT11_Check_Response (void)
{
 8002adc:	b510      	push	{r4, lr}
	uint8_t Response = 0;
	delay (40);
 8002ade:	2028      	movs	r0, #40	; 0x28
 8002ae0:	f7ff ffae 	bl	8002a40 <delay>
	if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 8002ae4:	2110      	movs	r1, #16
 8002ae6:	480c      	ldr	r0, [pc, #48]	; (8002b18 <DHT11_Check_Response+0x3c>)
 8002ae8:	f002 f8d4 	bl	8004c94 <HAL_GPIO_ReadPin>
 8002aec:	b140      	cbz	r0, 8002b00 <DHT11_Check_Response+0x24>
	uint8_t Response = 0;
 8002aee:	2400      	movs	r4, #0
	{
		delay (80);
		if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) Response = 1;
		else Response = -1; // 255
	}
	while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   // wait for the pin to go low
 8002af0:	2110      	movs	r1, #16
 8002af2:	4809      	ldr	r0, [pc, #36]	; (8002b18 <DHT11_Check_Response+0x3c>)
 8002af4:	f002 f8ce 	bl	8004c94 <HAL_GPIO_ReadPin>
 8002af8:	2800      	cmp	r0, #0
 8002afa:	d1f9      	bne.n	8002af0 <DHT11_Check_Response+0x14>
	return Response;
}
 8002afc:	4620      	mov	r0, r4
 8002afe:	bd10      	pop	{r4, pc}
		delay (80);
 8002b00:	2050      	movs	r0, #80	; 0x50
 8002b02:	f7ff ff9d 	bl	8002a40 <delay>
		if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) Response = 1;
 8002b06:	2110      	movs	r1, #16
 8002b08:	4803      	ldr	r0, [pc, #12]	; (8002b18 <DHT11_Check_Response+0x3c>)
 8002b0a:	f002 f8c3 	bl	8004c94 <HAL_GPIO_ReadPin>
 8002b0e:	b108      	cbz	r0, 8002b14 <DHT11_Check_Response+0x38>
 8002b10:	2401      	movs	r4, #1
 8002b12:	e7ed      	b.n	8002af0 <DHT11_Check_Response+0x14>
		else Response = -1; // 255
 8002b14:	24ff      	movs	r4, #255	; 0xff
 8002b16:	e7eb      	b.n	8002af0 <DHT11_Check_Response+0x14>
 8002b18:	48000400 	.word	0x48000400

08002b1c <DHT11_Read>:

uint8_t DHT11_Read (void)
{
 8002b1c:	b538      	push	{r3, r4, r5, lr}
	uint8_t i=0,j=0;
	for (j=0;j<8;j++)
 8002b1e:	2400      	movs	r4, #0
	uint8_t i=0,j=0;
 8002b20:	4625      	mov	r5, r4
	for (j=0;j<8;j++)
 8002b22:	e00d      	b.n	8002b40 <DHT11_Read+0x24>
		delay (40);   // wait for 40 us
		if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   // if the pin is low
		{
			i&= ~(1<<(7-j));   // write 0
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 8002b24:	f1c4 0207 	rsb	r2, r4, #7
 8002b28:	2301      	movs	r3, #1
 8002b2a:	4093      	lsls	r3, r2
 8002b2c:	432b      	orrs	r3, r5
 8002b2e:	b2dd      	uxtb	r5, r3
		while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));  // wait for the pin to go low
 8002b30:	2110      	movs	r1, #16
 8002b32:	4811      	ldr	r0, [pc, #68]	; (8002b78 <DHT11_Read+0x5c>)
 8002b34:	f002 f8ae 	bl	8004c94 <HAL_GPIO_ReadPin>
 8002b38:	2800      	cmp	r0, #0
 8002b3a:	d1f9      	bne.n	8002b30 <DHT11_Read+0x14>
	for (j=0;j<8;j++)
 8002b3c:	3401      	adds	r4, #1
 8002b3e:	b2e4      	uxtb	r4, r4
 8002b40:	2c07      	cmp	r4, #7
 8002b42:	d816      	bhi.n	8002b72 <DHT11_Read+0x56>
		while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   // wait for the pin to go high
 8002b44:	2110      	movs	r1, #16
 8002b46:	480c      	ldr	r0, [pc, #48]	; (8002b78 <DHT11_Read+0x5c>)
 8002b48:	f002 f8a4 	bl	8004c94 <HAL_GPIO_ReadPin>
 8002b4c:	2800      	cmp	r0, #0
 8002b4e:	d0f9      	beq.n	8002b44 <DHT11_Read+0x28>
		delay (40);   // wait for 40 us
 8002b50:	2028      	movs	r0, #40	; 0x28
 8002b52:	f7ff ff75 	bl	8002a40 <delay>
		if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   // if the pin is low
 8002b56:	2110      	movs	r1, #16
 8002b58:	4807      	ldr	r0, [pc, #28]	; (8002b78 <DHT11_Read+0x5c>)
 8002b5a:	f002 f89b 	bl	8004c94 <HAL_GPIO_ReadPin>
 8002b5e:	2800      	cmp	r0, #0
 8002b60:	d1e0      	bne.n	8002b24 <DHT11_Read+0x8>
			i&= ~(1<<(7-j));   // write 0
 8002b62:	f1c4 0207 	rsb	r2, r4, #7
 8002b66:	2301      	movs	r3, #1
 8002b68:	4093      	lsls	r3, r2
 8002b6a:	43db      	mvns	r3, r3
 8002b6c:	b25b      	sxtb	r3, r3
 8002b6e:	401d      	ands	r5, r3
 8002b70:	e7de      	b.n	8002b30 <DHT11_Read+0x14>
	}
	return i;
}
 8002b72:	4628      	mov	r0, r5
 8002b74:	bd38      	pop	{r3, r4, r5, pc}
 8002b76:	bf00      	nop
 8002b78:	48000400 	.word	0x48000400

08002b7c <DS18B20_Start>:
	 APP_LOG(TS_ON, VLEVEL_M, "DS18B20 Temperature ~%s\n\r", dsb_sen);
	  return temperature1;
}

uint8_t DS18B20_Start(void)
{
 8002b7c:	b510      	push	{r4, lr}
	uint8_t Response = 0;
	Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);		//set pin as o/p
 8002b7e:	4c11      	ldr	r4, [pc, #68]	; (8002bc4 <DS18B20_Start+0x48>)
 8002b80:	2180      	movs	r1, #128	; 0x80
 8002b82:	4620      	mov	r0, r4
 8002b84:	f7ff ff6a 	bl	8002a5c <Set_Pin_Output>
	HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, 0);		//pin pulled to low
 8002b88:	2200      	movs	r2, #0
 8002b8a:	2180      	movs	r1, #128	; 0x80
 8002b8c:	4620      	mov	r0, r4
 8002b8e:	f002 f888 	bl	8004ca2 <HAL_GPIO_WritePin>
	delay(480);		//acc to datasheet
 8002b92:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8002b96:	f7ff ff53 	bl	8002a40 <delay>

	Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);		//set pin as i/p
 8002b9a:	2180      	movs	r1, #128	; 0x80
 8002b9c:	4620      	mov	r0, r4
 8002b9e:	f7ff ff6e 	bl	8002a7e <Set_Pin_Input>
	delay(80);
 8002ba2:	2050      	movs	r0, #80	; 0x50
 8002ba4:	f7ff ff4c 	bl	8002a40 <delay>

	if(!(HAL_GPIO_ReadPin(DS18B20_PORT, DS18B20_PIN)))
 8002ba8:	2180      	movs	r1, #128	; 0x80
 8002baa:	4620      	mov	r0, r4
 8002bac:	f002 f872 	bl	8004c94 <HAL_GPIO_ReadPin>
 8002bb0:	b930      	cbnz	r0, 8002bc0 <DS18B20_Start+0x44>
		Response = 1;		//pin is low==presence pulse detected
 8002bb2:	2401      	movs	r4, #1
	else
		Response =-1;

	delay(400);		//480us total
 8002bb4:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002bb8:	f7ff ff42 	bl	8002a40 <delay>

	return Response;
}
 8002bbc:	4620      	mov	r0, r4
 8002bbe:	bd10      	pop	{r4, pc}
		Response =-1;
 8002bc0:	24ff      	movs	r4, #255	; 0xff
 8002bc2:	e7f7      	b.n	8002bb4 <DS18B20_Start+0x38>
 8002bc4:	48000400 	.word	0x48000400

08002bc8 <DS18B20_Write>:

void DS18B20_Write(uint8_t data)
{
 8002bc8:	b570      	push	{r4, r5, r6, lr}
 8002bca:	4606      	mov	r6, r0
	Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);		//set pin as o/p
 8002bcc:	2180      	movs	r1, #128	; 0x80
 8002bce:	481a      	ldr	r0, [pc, #104]	; (8002c38 <DS18B20_Write+0x70>)
 8002bd0:	f7ff ff44 	bl	8002a5c <Set_Pin_Output>
	for(int i=0;i<8;i++)
 8002bd4:	2400      	movs	r4, #0
 8002bd6:	e011      	b.n	8002bfc <DS18B20_Write+0x34>
			delay(50);		//wait for 60 us
		}
		else		//if bit low
		{
			//write 0
			Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);		//set pin as i/p
 8002bd8:	4d17      	ldr	r5, [pc, #92]	; (8002c38 <DS18B20_Write+0x70>)
 8002bda:	2180      	movs	r1, #128	; 0x80
 8002bdc:	4628      	mov	r0, r5
 8002bde:	f7ff ff3d 	bl	8002a5c <Set_Pin_Output>
			HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, 0);		//pull pin low
 8002be2:	2200      	movs	r2, #0
 8002be4:	2180      	movs	r1, #128	; 0x80
 8002be6:	4628      	mov	r0, r5
 8002be8:	f002 f85b 	bl	8004ca2 <HAL_GPIO_WritePin>
			delay(50);		//wait for 60 us
 8002bec:	2032      	movs	r0, #50	; 0x32
 8002bee:	f7ff ff27 	bl	8002a40 <delay>

			Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);		//set pin as i/p
 8002bf2:	2180      	movs	r1, #128	; 0x80
 8002bf4:	4628      	mov	r0, r5
 8002bf6:	f7ff ff42 	bl	8002a7e <Set_Pin_Input>
	for(int i=0;i<8;i++)
 8002bfa:	3401      	adds	r4, #1
 8002bfc:	2c07      	cmp	r4, #7
 8002bfe:	dc19      	bgt.n	8002c34 <DS18B20_Write+0x6c>
		if((data&(1<<i))!=0)		//if bit high
 8002c00:	fa46 f304 	asr.w	r3, r6, r4
 8002c04:	f013 0f01 	tst.w	r3, #1
 8002c08:	d0e6      	beq.n	8002bd8 <DS18B20_Write+0x10>
			Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);		//set pin as o/p
 8002c0a:	4d0b      	ldr	r5, [pc, #44]	; (8002c38 <DS18B20_Write+0x70>)
 8002c0c:	2180      	movs	r1, #128	; 0x80
 8002c0e:	4628      	mov	r0, r5
 8002c10:	f7ff ff24 	bl	8002a5c <Set_Pin_Output>
			HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, 0);		//pull pin low
 8002c14:	2200      	movs	r2, #0
 8002c16:	2180      	movs	r1, #128	; 0x80
 8002c18:	4628      	mov	r0, r5
 8002c1a:	f002 f842 	bl	8004ca2 <HAL_GPIO_WritePin>
			delay(1);
 8002c1e:	2001      	movs	r0, #1
 8002c20:	f7ff ff0e 	bl	8002a40 <delay>
			Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);		//set pin as i/p
 8002c24:	2180      	movs	r1, #128	; 0x80
 8002c26:	4628      	mov	r0, r5
 8002c28:	f7ff ff29 	bl	8002a7e <Set_Pin_Input>
			delay(50);		//wait for 60 us
 8002c2c:	2032      	movs	r0, #50	; 0x32
 8002c2e:	f7ff ff07 	bl	8002a40 <delay>
 8002c32:	e7e2      	b.n	8002bfa <DS18B20_Write+0x32>
		}
	}
}
 8002c34:	bd70      	pop	{r4, r5, r6, pc}
 8002c36:	bf00      	nop
 8002c38:	48000400 	.word	0x48000400

08002c3c <DS18B20_Read>:

uint8_t DS18B20_Read(void)
{
 8002c3c:	b570      	push	{r4, r5, r6, lr}
	uint8_t Value = 0;
	Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);		//set pin as i/p
 8002c3e:	2180      	movs	r1, #128	; 0x80
 8002c40:	4814      	ldr	r0, [pc, #80]	; (8002c94 <DS18B20_Read+0x58>)
 8002c42:	f7ff ff1c 	bl	8002a7e <Set_Pin_Input>
	for(int i=0;i<8;i++)
 8002c46:	2500      	movs	r5, #0
	uint8_t Value = 0;
 8002c48:	462e      	mov	r6, r5
	for(int i=0;i<8;i++)
 8002c4a:	e003      	b.n	8002c54 <DS18B20_Read+0x18>
		Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);		//set pin as i/p
		if(HAL_GPIO_ReadPin(DS18B20_PORT, DS18B20_PIN))		//if pin high
		{
			Value |= 1<<i;		//read =1
		}
		delay(60);		//wait 60us
 8002c4c:	203c      	movs	r0, #60	; 0x3c
 8002c4e:	f7ff fef7 	bl	8002a40 <delay>
	for(int i=0;i<8;i++)
 8002c52:	3501      	adds	r5, #1
 8002c54:	2d07      	cmp	r5, #7
 8002c56:	dc1b      	bgt.n	8002c90 <DS18B20_Read+0x54>
		Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);		//set pin as o/p
 8002c58:	4c0e      	ldr	r4, [pc, #56]	; (8002c94 <DS18B20_Read+0x58>)
 8002c5a:	2180      	movs	r1, #128	; 0x80
 8002c5c:	4620      	mov	r0, r4
 8002c5e:	f7ff fefd 	bl	8002a5c <Set_Pin_Output>
		HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, 0);		//pull data pin low
 8002c62:	2200      	movs	r2, #0
 8002c64:	2180      	movs	r1, #128	; 0x80
 8002c66:	4620      	mov	r0, r4
 8002c68:	f002 f81b 	bl	8004ca2 <HAL_GPIO_WritePin>
		delay(2);		//2us delay
 8002c6c:	2002      	movs	r0, #2
 8002c6e:	f7ff fee7 	bl	8002a40 <delay>
		Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);		//set pin as i/p
 8002c72:	2180      	movs	r1, #128	; 0x80
 8002c74:	4620      	mov	r0, r4
 8002c76:	f7ff ff02 	bl	8002a7e <Set_Pin_Input>
		if(HAL_GPIO_ReadPin(DS18B20_PORT, DS18B20_PIN))		//if pin high
 8002c7a:	2180      	movs	r1, #128	; 0x80
 8002c7c:	4620      	mov	r0, r4
 8002c7e:	f002 f809 	bl	8004c94 <HAL_GPIO_ReadPin>
 8002c82:	2800      	cmp	r0, #0
 8002c84:	d0e2      	beq.n	8002c4c <DS18B20_Read+0x10>
			Value |= 1<<i;		//read =1
 8002c86:	2301      	movs	r3, #1
 8002c88:	40ab      	lsls	r3, r5
 8002c8a:	431e      	orrs	r6, r3
 8002c8c:	b2f6      	uxtb	r6, r6
 8002c8e:	e7dd      	b.n	8002c4c <DS18B20_Read+0x10>
	}
	return Value;
}
 8002c90:	4630      	mov	r0, r6
 8002c92:	bd70      	pop	{r4, r5, r6, pc}
 8002c94:	48000400 	.word	0x48000400

08002c98 <DS18B20_Get_Value>:
{
 8002c98:	b530      	push	{r4, r5, lr}
 8002c9a:	b083      	sub	sp, #12
	  Presence1 = DS18B20_Start ();
 8002c9c:	f7ff ff6e 	bl	8002b7c <DS18B20_Start>
 8002ca0:	4c25      	ldr	r4, [pc, #148]	; (8002d38 <DS18B20_Get_Value+0xa0>)
 8002ca2:	7020      	strb	r0, [r4, #0]
	  HAL_Delay (1);
 8002ca4:	2001      	movs	r0, #1
 8002ca6:	f7ff f843 	bl	8001d30 <HAL_Delay>
	  DS18B20_Write (0xCC);  // skip ROM
 8002caa:	20cc      	movs	r0, #204	; 0xcc
 8002cac:	f7ff ff8c 	bl	8002bc8 <DS18B20_Write>
	  DS18B20_Write (0x44);  // convert t
 8002cb0:	2044      	movs	r0, #68	; 0x44
 8002cb2:	f7ff ff89 	bl	8002bc8 <DS18B20_Write>
	  HAL_Delay (800);
 8002cb6:	f44f 7048 	mov.w	r0, #800	; 0x320
 8002cba:	f7ff f839 	bl	8001d30 <HAL_Delay>
	  Presence1 = DS18B20_Start ();
 8002cbe:	f7ff ff5d 	bl	8002b7c <DS18B20_Start>
 8002cc2:	7020      	strb	r0, [r4, #0]
	  HAL_Delay(1);
 8002cc4:	2001      	movs	r0, #1
 8002cc6:	f7ff f833 	bl	8001d30 <HAL_Delay>
	  DS18B20_Write (0xCC);  // skip ROM
 8002cca:	20cc      	movs	r0, #204	; 0xcc
 8002ccc:	f7ff ff7c 	bl	8002bc8 <DS18B20_Write>
	  DS18B20_Write (0xBE);  // Read Scratch-pad
 8002cd0:	20be      	movs	r0, #190	; 0xbe
 8002cd2:	f7ff ff79 	bl	8002bc8 <DS18B20_Write>
	  Temp_byte11 = DS18B20_Read();
 8002cd6:	f7ff ffb1 	bl	8002c3c <DS18B20_Read>
 8002cda:	4c18      	ldr	r4, [pc, #96]	; (8002d3c <DS18B20_Get_Value+0xa4>)
 8002cdc:	7020      	strb	r0, [r4, #0]
	  Temp_byte22 = DS18B20_Read();
 8002cde:	f7ff ffad 	bl	8002c3c <DS18B20_Read>
 8002ce2:	4b17      	ldr	r3, [pc, #92]	; (8002d40 <DS18B20_Get_Value+0xa8>)
 8002ce4:	7018      	strb	r0, [r3, #0]
	  temp_data = (float)(((Temp_byte22<<8)|(Temp_byte11))*RESOLUTION_FACTOR_FOR_12_BIT);
 8002ce6:	7823      	ldrb	r3, [r4, #0]
 8002ce8:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 8002cec:	f7fd fbf2 	bl	80004d4 <__aeabi_i2d>
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	4b14      	ldr	r3, [pc, #80]	; (8002d44 <DS18B20_Get_Value+0xac>)
 8002cf4:	f7fd fc58 	bl	80005a8 <__aeabi_dmul>
 8002cf8:	f7fd ff4e 	bl	8000b98 <__aeabi_d2f>
 8002cfc:	4604      	mov	r4, r0
 8002cfe:	4b12      	ldr	r3, [pc, #72]	; (8002d48 <DS18B20_Get_Value+0xb0>)
 8002d00:	6018      	str	r0, [r3, #0]
	  temperature1 = temp_data  * 100;
 8002d02:	4912      	ldr	r1, [pc, #72]	; (8002d4c <DS18B20_Get_Value+0xb4>)
 8002d04:	f7fe f8a6 	bl	8000e54 <__aeabi_fmul>
 8002d08:	f7fe f9f4 	bl	80010f4 <__aeabi_f2uiz>
 8002d0c:	b285      	uxth	r5, r0
	  sprintf(dsb_sen,"%0.2f", temp_data);
 8002d0e:	4620      	mov	r0, r4
 8002d10:	f7fd fbf2 	bl	80004f8 <__aeabi_f2d>
 8002d14:	4602      	mov	r2, r0
 8002d16:	460b      	mov	r3, r1
 8002d18:	4c0d      	ldr	r4, [pc, #52]	; (8002d50 <DS18B20_Get_Value+0xb8>)
 8002d1a:	490e      	ldr	r1, [pc, #56]	; (8002d54 <DS18B20_Get_Value+0xbc>)
 8002d1c:	4620      	mov	r0, r4
 8002d1e:	f010 fa55 	bl	80131cc <siprintf>
	 APP_LOG(TS_ON, VLEVEL_M, "DS18B20 Temperature ~%s\n\r", dsb_sen);
 8002d22:	9400      	str	r4, [sp, #0]
 8002d24:	4b0c      	ldr	r3, [pc, #48]	; (8002d58 <DS18B20_Get_Value+0xc0>)
 8002d26:	2201      	movs	r2, #1
 8002d28:	2100      	movs	r1, #0
 8002d2a:	2002      	movs	r0, #2
 8002d2c:	f00e fd6e 	bl	801180c <UTIL_ADV_TRACE_COND_FSend>
}
 8002d30:	4628      	mov	r0, r5
 8002d32:	b003      	add	sp, #12
 8002d34:	bd30      	pop	{r4, r5, pc}
 8002d36:	bf00      	nop
 8002d38:	200004fc 	.word	0x200004fc
 8002d3c:	200004fd 	.word	0x200004fd
 8002d40:	200004fe 	.word	0x200004fe
 8002d44:	3fb00000 	.word	0x3fb00000
 8002d48:	2000050c 	.word	0x2000050c
 8002d4c:	42c80000 	.word	0x42c80000
 8002d50:	20000500 	.word	0x20000500
 8002d54:	08016f88 	.word	0x08016f88
 8002d58:	08016f90 	.word	0x08016f90

08002d5c <My_ADC_ReadChannels>:
	// APP_LOG(TS_OFF, VLEVEL_L, "MQ6 sensor_in PPM = %d\n\r", ppm);
	return ppm;
}

uint16_t My_ADC_ReadChannels(uint32_t channel)
{
 8002d5c:	b530      	push	{r4, r5, lr}
 8002d5e:	b085      	sub	sp, #20
 8002d60:	4604      	mov	r4, r0
 8002d62:	2500      	movs	r5, #0
	int16_t max_ppm=10000;
	int16_t min_ppm=300;
	uint16_t adc_val;

	int i;
	 ADC_ChannelConfTypeDef sConfig = {0};
 8002d64:	9501      	str	r5, [sp, #4]
 8002d66:	9502      	str	r5, [sp, #8]
 8002d68:	9503      	str	r5, [sp, #12]
	  MX_ADC_Init();
 8002d6a:	f7fe fbe9 	bl	8001540 <MX_ADC_Init>
	  /* Start Calibration */
	  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 8002d6e:	4821      	ldr	r0, [pc, #132]	; (8002df4 <My_ADC_ReadChannels+0x98>)
 8002d70:	f001 f9c6 	bl	8004100 <HAL_ADCEx_Calibration_Start>
 8002d74:	b998      	cbnz	r0, 8002d9e <My_ADC_ReadChannels+0x42>
	  {
	    Error_Handler();
	  }
	  /* Configure Regular Channel */
	  sConfig.Channel = channel;
 8002d76:	9401      	str	r4, [sp, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	9302      	str	r3, [sp, #8]
	  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8002d7c:	9303      	str	r3, [sp, #12]
	  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002d7e:	a901      	add	r1, sp, #4
 8002d80:	481c      	ldr	r0, [pc, #112]	; (8002df4 <My_ADC_ReadChannels+0x98>)
 8002d82:	f000 ff09 	bl	8003b98 <HAL_ADC_ConfigChannel>
 8002d86:	b968      	cbnz	r0, 8002da4 <My_ADC_ReadChannels+0x48>
	  {
	    Error_Handler();
	  }
	  if (HAL_ADC_Start(&hadc) != HAL_OK)
 8002d88:	481a      	ldr	r0, [pc, #104]	; (8002df4 <My_ADC_ReadChannels+0x98>)
 8002d8a:	f001 f8c7 	bl	8003f1c <HAL_ADC_Start>
 8002d8e:	b960      	cbnz	r0, 8002daa <My_ADC_ReadChannels+0x4e>
	  {
	    /* Start Error */
	    Error_Handler();
	  }
	  /** Wait for end of conversion */
     HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8002d90:	f04f 31ff 	mov.w	r1, #4294967295
 8002d94:	4817      	ldr	r0, [pc, #92]	; (8002df4 <My_ADC_ReadChannels+0x98>)
 8002d96:	f000 fe9d 	bl	8003ad4 <HAL_ADC_PollForConversion>
	 for(i=0;i<100;i++)
 8002d9a:	2400      	movs	r4, #0
 8002d9c:	e00e      	b.n	8002dbc <My_ADC_ReadChannels+0x60>
	    Error_Handler();
 8002d9e:	f7fe fd1b 	bl	80017d8 <Error_Handler>
 8002da2:	e7e8      	b.n	8002d76 <My_ADC_ReadChannels+0x1a>
	    Error_Handler();
 8002da4:	f7fe fd18 	bl	80017d8 <Error_Handler>
 8002da8:	e7ee      	b.n	8002d88 <My_ADC_ReadChannels+0x2c>
	    Error_Handler();
 8002daa:	f7fe fd15 	bl	80017d8 <Error_Handler>
 8002dae:	e7ef      	b.n	8002d90 <My_ADC_ReadChannels+0x34>
	 {
		 adc_val+= HAL_ADC_GetValue(&hadc);
 8002db0:	4810      	ldr	r0, [pc, #64]	; (8002df4 <My_ADC_ReadChannels+0x98>)
 8002db2:	f000 feee 	bl	8003b92 <HAL_ADC_GetValue>
 8002db6:	4428      	add	r0, r5
 8002db8:	b285      	uxth	r5, r0
	 for(i=0;i<100;i++)
 8002dba:	3401      	adds	r4, #1
 8002dbc:	2c63      	cmp	r4, #99	; 0x63
 8002dbe:	ddf7      	ble.n	8002db0 <My_ADC_ReadChannels+0x54>
	 }
	 adc_val=adc_val/100;
 8002dc0:	4b0d      	ldr	r3, [pc, #52]	; (8002df8 <My_ADC_ReadChannels+0x9c>)
 8002dc2:	fba3 3005 	umull	r3, r0, r3, r5
	 adc_val = ( ((float)adc_val/4095) * (max_ppm-min_ppm) + min_ppm);
 8002dc6:	f3c0 104f 	ubfx	r0, r0, #5, #16
 8002dca:	f7fd ffeb 	bl	8000da4 <__aeabi_ui2f>
 8002dce:	490b      	ldr	r1, [pc, #44]	; (8002dfc <My_ADC_ReadChannels+0xa0>)
 8002dd0:	f7fe f8f4 	bl	8000fbc <__aeabi_fdiv>
 8002dd4:	490a      	ldr	r1, [pc, #40]	; (8002e00 <My_ADC_ReadChannels+0xa4>)
 8002dd6:	f7fe f83d 	bl	8000e54 <__aeabi_fmul>
 8002dda:	490a      	ldr	r1, [pc, #40]	; (8002e04 <My_ADC_ReadChannels+0xa8>)
 8002ddc:	f7fd ff32 	bl	8000c44 <__addsf3>
 8002de0:	f7fe f988 	bl	80010f4 <__aeabi_f2uiz>
 8002de4:	b284      	uxth	r4, r0
	  HAL_ADC_Stop(&hadc);
 8002de6:	4803      	ldr	r0, [pc, #12]	; (8002df4 <My_ADC_ReadChannels+0x98>)
 8002de8:	f001 f96a 	bl	80040c0 <HAL_ADC_Stop>
	  return adc_val;
}
 8002dec:	4620      	mov	r0, r4
 8002dee:	b005      	add	sp, #20
 8002df0:	bd30      	pop	{r4, r5, pc}
 8002df2:	bf00      	nop
 8002df4:	200002c4 	.word	0x200002c4
 8002df8:	51eb851f 	.word	0x51eb851f
 8002dfc:	457ff000 	.word	0x457ff000
 8002e00:	46179000 	.word	0x46179000
 8002e04:	43960000 	.word	0x43960000

08002e08 <MQ6_sensor>:
{
 8002e08:	b508      	push	{r3, lr}
	 ppm = My_ADC_ReadChannels(ADC_CHANNEL_0);
 8002e0a:	2001      	movs	r0, #1
 8002e0c:	f7ff ffa6 	bl	8002d5c <My_ADC_ReadChannels>
}
 8002e10:	b200      	sxth	r0, r0
 8002e12:	bd08      	pop	{r3, pc}

08002e14 <Get_sensor_value>:
uint8_t Presence = 0;

extern uint16_t mode;

void Get_sensor_value(SensorDataTypedef *SensorData,uint16_t value)
{
 8002e14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e16:	b089      	sub	sp, #36	; 0x24
 8002e18:	4604      	mov	r4, r0
	switch(value)
 8002e1a:	2940      	cmp	r1, #64	; 0x40
 8002e1c:	d068      	beq.n	8002ef0 <Get_sensor_value+0xdc>
 8002e1e:	d80b      	bhi.n	8002e38 <Get_sensor_value+0x24>
 8002e20:	2910      	cmp	r1, #16
 8002e22:	d019      	beq.n	8002e58 <Get_sensor_value+0x44>
 8002e24:	2920      	cmp	r1, #32
 8002e26:	d161      	bne.n	8002eec <Get_sensor_value+0xd8>

		 break;


	 case ACTIVATE_DS18B20 :
	 		SensorData->Sens_Humidity=65535;
 8002e28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e2c:	8043      	strh	r3, [r0, #2]
	 		SensorData->Sens_Pressure=65535;
 8002e2e:	8083      	strh	r3, [r0, #4]
	 		SensorData->Sens_Temperature =DS18B20_Get_Value();
 8002e30:	f7ff ff32 	bl	8002c98 <DS18B20_Get_Value>
 8002e34:	8020      	strh	r0, [r4, #0]
	 	  break;
 8002e36:	e059      	b.n	8002eec <Get_sensor_value+0xd8>
	switch(value)
 8002e38:	2980      	cmp	r1, #128	; 0x80
 8002e3a:	d157      	bne.n	8002eec <Get_sensor_value+0xd8>
	                 SensorData->Sens_Temperature = DHT_Temperature * 100;
	                 SensorData->Sens_Humidity = DHT_Humidity * 100;
	            break;

	 case ACTIVATE_MQ6:
	 		 mode=0;
 8002e3c:	2400      	movs	r4, #0
 8002e3e:	4b57      	ldr	r3, [pc, #348]	; (8002f9c <Get_sensor_value+0x188>)
 8002e40:	801c      	strh	r4, [r3, #0]
	          uint16_t MQ6_value = MQ6_sensor();
 8002e42:	f7ff ffe1 	bl	8002e08 <MQ6_sensor>
 8002e46:	b280      	uxth	r0, r0
	          APP_LOG(TS_OFF, VLEVEL_L, "MQ6 sensor_in PPM = %d\n\r", MQ6_value);
 8002e48:	9000      	str	r0, [sp, #0]
 8002e4a:	4b55      	ldr	r3, [pc, #340]	; (8002fa0 <Get_sensor_value+0x18c>)
 8002e4c:	4622      	mov	r2, r4
 8002e4e:	4621      	mov	r1, r4
 8002e50:	2001      	movs	r0, #1
 8002e52:	f00e fcdb 	bl	801180c <UTIL_ADV_TRACE_COND_FSend>
	         break;
	 }
}
 8002e56:	e049      	b.n	8002eec <Get_sensor_value+0xd8>
		 BME280_Measure();
 8002e58:	f7ff fd9c 	bl	8002994 <BME280_Measure>
		 SensorData->Sens_Temperature=Temp*100;
 8002e5c:	4f51      	ldr	r7, [pc, #324]	; (8002fa4 <Get_sensor_value+0x190>)
 8002e5e:	4952      	ldr	r1, [pc, #328]	; (8002fa8 <Get_sensor_value+0x194>)
 8002e60:	6838      	ldr	r0, [r7, #0]
 8002e62:	f7fd fff7 	bl	8000e54 <__aeabi_fmul>
 8002e66:	f7fe f945 	bl	80010f4 <__aeabi_f2uiz>
 8002e6a:	8020      	strh	r0, [r4, #0]
		 SensorData->Sens_Humidity = Hum *100;
 8002e6c:	4d4f      	ldr	r5, [pc, #316]	; (8002fac <Get_sensor_value+0x198>)
 8002e6e:	494e      	ldr	r1, [pc, #312]	; (8002fa8 <Get_sensor_value+0x194>)
 8002e70:	6828      	ldr	r0, [r5, #0]
 8002e72:	f7fd ffef 	bl	8000e54 <__aeabi_fmul>
 8002e76:	f7fe f93d 	bl	80010f4 <__aeabi_f2uiz>
 8002e7a:	8060      	strh	r0, [r4, #2]
		 SensorData->Sens_Pressure = (Press / 1000) *100;//pressure in pascal converted to kilo pascal
 8002e7c:	4e4c      	ldr	r6, [pc, #304]	; (8002fb0 <Get_sensor_value+0x19c>)
 8002e7e:	494d      	ldr	r1, [pc, #308]	; (8002fb4 <Get_sensor_value+0x1a0>)
 8002e80:	6830      	ldr	r0, [r6, #0]
 8002e82:	f7fe f89b 	bl	8000fbc <__aeabi_fdiv>
 8002e86:	4948      	ldr	r1, [pc, #288]	; (8002fa8 <Get_sensor_value+0x194>)
 8002e88:	f7fd ffe4 	bl	8000e54 <__aeabi_fmul>
 8002e8c:	f7fe f932 	bl	80010f4 <__aeabi_f2uiz>
 8002e90:	80a0      	strh	r0, [r4, #4]
		 gcvt(Temp,7,temp_val);
 8002e92:	ac02      	add	r4, sp, #8
 8002e94:	6838      	ldr	r0, [r7, #0]
 8002e96:	f7fd fb2f 	bl	80004f8 <__aeabi_f2d>
 8002e9a:	4623      	mov	r3, r4
 8002e9c:	2207      	movs	r2, #7
 8002e9e:	f00f fa5b 	bl	8012358 <gcvt>
		 APP_LOG(TS_ON, VLEVEL_L, "BME280 sens_Temp  : ~%s\n\r",temp_val);
 8002ea2:	9400      	str	r4, [sp, #0]
 8002ea4:	4b44      	ldr	r3, [pc, #272]	; (8002fb8 <Get_sensor_value+0x1a4>)
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	2100      	movs	r1, #0
 8002eaa:	4610      	mov	r0, r2
 8002eac:	f00e fcae 	bl	801180c <UTIL_ADV_TRACE_COND_FSend>
		 gcvt(Press,7,press_val);
 8002eb0:	ac04      	add	r4, sp, #16
 8002eb2:	6830      	ldr	r0, [r6, #0]
 8002eb4:	f7fd fb20 	bl	80004f8 <__aeabi_f2d>
 8002eb8:	4623      	mov	r3, r4
 8002eba:	2207      	movs	r2, #7
 8002ebc:	f00f fa4c 	bl	8012358 <gcvt>
		 APP_LOG(TS_ON, VLEVEL_L, "BME280 sens_Press  : ~%s\n\r",press_val );
 8002ec0:	9400      	str	r4, [sp, #0]
 8002ec2:	4b3e      	ldr	r3, [pc, #248]	; (8002fbc <Get_sensor_value+0x1a8>)
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	2100      	movs	r1, #0
 8002ec8:	4610      	mov	r0, r2
 8002eca:	f00e fc9f 	bl	801180c <UTIL_ADV_TRACE_COND_FSend>
		 gcvt(Hum,7,Hum_val);
 8002ece:	ac06      	add	r4, sp, #24
 8002ed0:	6828      	ldr	r0, [r5, #0]
 8002ed2:	f7fd fb11 	bl	80004f8 <__aeabi_f2d>
 8002ed6:	4623      	mov	r3, r4
 8002ed8:	2207      	movs	r2, #7
 8002eda:	f00f fa3d 	bl	8012358 <gcvt>
		 APP_LOG(TS_ON, VLEVEL_L, "BME280 sens_Hum  : ~%s\n\r",Hum_val );
 8002ede:	9400      	str	r4, [sp, #0]
 8002ee0:	4b37      	ldr	r3, [pc, #220]	; (8002fc0 <Get_sensor_value+0x1ac>)
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	2100      	movs	r1, #0
 8002ee6:	4610      	mov	r0, r2
 8002ee8:	f00e fc90 	bl	801180c <UTIL_ADV_TRACE_COND_FSend>
}
 8002eec:	b009      	add	sp, #36	; 0x24
 8002eee:	bdf0      	pop	{r4, r5, r6, r7, pc}
	                 DHT11_Start();
 8002ef0:	f7ff fdd6 	bl	8002aa0 <DHT11_Start>
	                 Presence = DHT11_Check_Response();
 8002ef4:	f7ff fdf2 	bl	8002adc <DHT11_Check_Response>
 8002ef8:	4b32      	ldr	r3, [pc, #200]	; (8002fc4 <Get_sensor_value+0x1b0>)
 8002efa:	7018      	strb	r0, [r3, #0]
	                 Dht_Rh_byte1 = DHT11_Read ();
 8002efc:	f7ff fe0e 	bl	8002b1c <DHT11_Read>
 8002f00:	4d31      	ldr	r5, [pc, #196]	; (8002fc8 <Get_sensor_value+0x1b4>)
 8002f02:	7028      	strb	r0, [r5, #0]
	                 Dht_Rh_byte2 = DHT11_Read ();
 8002f04:	f7ff fe0a 	bl	8002b1c <DHT11_Read>
 8002f08:	4b30      	ldr	r3, [pc, #192]	; (8002fcc <Get_sensor_value+0x1b8>)
 8002f0a:	7018      	strb	r0, [r3, #0]
	                 Dht_Temp_byte1 = DHT11_Read ();
 8002f0c:	f7ff fe06 	bl	8002b1c <DHT11_Read>
 8002f10:	4e2f      	ldr	r6, [pc, #188]	; (8002fd0 <Get_sensor_value+0x1bc>)
 8002f12:	7030      	strb	r0, [r6, #0]
	                 Dht_Temp_byte2 = DHT11_Read ();
 8002f14:	f7ff fe02 	bl	8002b1c <DHT11_Read>
 8002f18:	4b2e      	ldr	r3, [pc, #184]	; (8002fd4 <Get_sensor_value+0x1c0>)
 8002f1a:	7018      	strb	r0, [r3, #0]
	                 SUM = DHT11_Read();
 8002f1c:	f7ff fdfe 	bl	8002b1c <DHT11_Read>
 8002f20:	4b2d      	ldr	r3, [pc, #180]	; (8002fd8 <Get_sensor_value+0x1c4>)
 8002f22:	8018      	strh	r0, [r3, #0]
	                 DHT_TEMP = Dht_Temp_byte1;
 8002f24:	7830      	ldrb	r0, [r6, #0]
 8002f26:	4b2d      	ldr	r3, [pc, #180]	; (8002fdc <Get_sensor_value+0x1c8>)
 8002f28:	8018      	strh	r0, [r3, #0]
	                 DHT_RH = Dht_Rh_byte1;
 8002f2a:	782e      	ldrb	r6, [r5, #0]
 8002f2c:	4b2c      	ldr	r3, [pc, #176]	; (8002fe0 <Get_sensor_value+0x1cc>)
 8002f2e:	801e      	strh	r6, [r3, #0]
	                 DHT_Temperature = (float) DHT_TEMP;
 8002f30:	f7fd ff38 	bl	8000da4 <__aeabi_ui2f>
 8002f34:	4d2b      	ldr	r5, [pc, #172]	; (8002fe4 <Get_sensor_value+0x1d0>)
 8002f36:	6028      	str	r0, [r5, #0]
	                 DHT_Humidity = (float) DHT_RH;
 8002f38:	4630      	mov	r0, r6
 8002f3a:	f7fd ff33 	bl	8000da4 <__aeabi_ui2f>
 8002f3e:	4e2a      	ldr	r6, [pc, #168]	; (8002fe8 <Get_sensor_value+0x1d4>)
 8002f40:	6030      	str	r0, [r6, #0]
	                 gcvt(DHT_Humidity,7,Hmsg);
 8002f42:	4f2a      	ldr	r7, [pc, #168]	; (8002fec <Get_sensor_value+0x1d8>)
 8002f44:	f7fd fad8 	bl	80004f8 <__aeabi_f2d>
 8002f48:	463b      	mov	r3, r7
 8002f4a:	2207      	movs	r2, #7
 8002f4c:	f00f fa04 	bl	8012358 <gcvt>
	                 APP_LOG(TS_ON, VLEVEL_M, "DHT11 Humidity : %s\n\r",Hmsg);
 8002f50:	9700      	str	r7, [sp, #0]
 8002f52:	4b27      	ldr	r3, [pc, #156]	; (8002ff0 <Get_sensor_value+0x1dc>)
 8002f54:	2201      	movs	r2, #1
 8002f56:	2100      	movs	r1, #0
 8002f58:	2002      	movs	r0, #2
 8002f5a:	f00e fc57 	bl	801180c <UTIL_ADV_TRACE_COND_FSend>
	                 gcvt(DHT_Temperature,7,Tmsg);
 8002f5e:	4f25      	ldr	r7, [pc, #148]	; (8002ff4 <Get_sensor_value+0x1e0>)
 8002f60:	6828      	ldr	r0, [r5, #0]
 8002f62:	f7fd fac9 	bl	80004f8 <__aeabi_f2d>
 8002f66:	463b      	mov	r3, r7
 8002f68:	2207      	movs	r2, #7
 8002f6a:	f00f f9f5 	bl	8012358 <gcvt>
	                 APP_LOG(TS_ON, VLEVEL_M, "DHT11 Temperature  : %s\n\r",Tmsg);
 8002f6e:	9700      	str	r7, [sp, #0]
 8002f70:	4b21      	ldr	r3, [pc, #132]	; (8002ff8 <Get_sensor_value+0x1e4>)
 8002f72:	2201      	movs	r2, #1
 8002f74:	2100      	movs	r1, #0
 8002f76:	2002      	movs	r0, #2
 8002f78:	f00e fc48 	bl	801180c <UTIL_ADV_TRACE_COND_FSend>
	                 SensorData->Sens_Temperature = DHT_Temperature * 100;
 8002f7c:	490a      	ldr	r1, [pc, #40]	; (8002fa8 <Get_sensor_value+0x194>)
 8002f7e:	6828      	ldr	r0, [r5, #0]
 8002f80:	f7fd ff68 	bl	8000e54 <__aeabi_fmul>
 8002f84:	f7fe f8b6 	bl	80010f4 <__aeabi_f2uiz>
 8002f88:	8020      	strh	r0, [r4, #0]
	                 SensorData->Sens_Humidity = DHT_Humidity * 100;
 8002f8a:	4907      	ldr	r1, [pc, #28]	; (8002fa8 <Get_sensor_value+0x194>)
 8002f8c:	6830      	ldr	r0, [r6, #0]
 8002f8e:	f7fd ff61 	bl	8000e54 <__aeabi_fmul>
 8002f92:	f7fe f8af 	bl	80010f4 <__aeabi_f2uiz>
 8002f96:	8060      	strh	r0, [r4, #2]
	            break;
 8002f98:	e7a8      	b.n	8002eec <Get_sensor_value+0xd8>
 8002f9a:	bf00      	nop
 8002f9c:	2000004e 	.word	0x2000004e
 8002fa0:	08017034 	.word	0x08017034
 8002fa4:	20000538 	.word	0x20000538
 8002fa8:	42c80000 	.word	0x42c80000
 8002fac:	20000528 	.word	0x20000528
 8002fb0:	20000530 	.word	0x20000530
 8002fb4:	447a0000 	.word	0x447a0000
 8002fb8:	08016fac 	.word	0x08016fac
 8002fbc:	08016fc8 	.word	0x08016fc8
 8002fc0:	08016fe4 	.word	0x08016fe4
 8002fc4:	2000052c 	.word	0x2000052c
 8002fc8:	2000051c 	.word	0x2000051c
 8002fcc:	2000051d 	.word	0x2000051d
 8002fd0:	2000051e 	.word	0x2000051e
 8002fd4:	2000051f 	.word	0x2000051f
 8002fd8:	20000534 	.word	0x20000534
 8002fdc:	20000516 	.word	0x20000516
 8002fe0:	20000514 	.word	0x20000514
 8002fe4:	20000518 	.word	0x20000518
 8002fe8:	20000510 	.word	0x20000510
 8002fec:	20000520 	.word	0x20000520
 8002ff0:	08017000 	.word	0x08017000
 8002ff4:	2000053c 	.word	0x2000053c
 8002ff8:	08017018 	.word	0x08017018

08002ffc <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 8002ffc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 8002ffe:	f7fe fde1 	bl	8001bc4 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 8003002:	f000 f997 	bl	8003334 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 8003006:	bd08      	pop	{r3, pc}

08003008 <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 8003008:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800300a:	f04f 30ff 	mov.w	r0, #4294967295
 800300e:	f00e fd5b 	bl	8011ac8 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 8003012:	bd08      	pop	{r3, pc}

08003014 <OnTxTimerLedEvent>:

/* USER CODE BEGIN PrFD_LedEvents */
static void OnTxTimerLedEvent(void *context)
{

}
 8003014:	4770      	bx	lr

08003016 <OnRxTimerLedEvent>:

static void OnRxTimerLedEvent(void *context)
{

}
 8003016:	4770      	bx	lr

08003018 <OnTxData>:
/* USER CODE END PrFD_LedEvents */

static void OnTxData(LmHandlerTxParams_t *params)
{
  /* USER CODE BEGIN OnTxData_1 */
  if ((params != NULL))
 8003018:	2800      	cmp	r0, #0
 800301a:	d03c      	beq.n	8003096 <OnTxData+0x7e>
{
 800301c:	b510      	push	{r4, lr}
 800301e:	b084      	sub	sp, #16
 8003020:	4604      	mov	r4, r0
  {
    /* Process Tx event only if its a mcps response to prevent some internal events (mlme) */
    if (params->IsMcpsConfirm != 0)
 8003022:	7803      	ldrb	r3, [r0, #0]
 8003024:	b90b      	cbnz	r3, 800302a <OnTxData+0x12>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
      }
    }
  }
  /* USER CODE END OnTxData_1 */
}
 8003026:	b004      	add	sp, #16
 8003028:	bd10      	pop	{r4, pc}
      UTIL_TIMER_Start(&TxLedTimer);
 800302a:	481b      	ldr	r0, [pc, #108]	; (8003098 <OnTxData+0x80>)
 800302c:	f00e ff8c 	bl	8011f48 <UTIL_TIMER_Start>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 8003030:	4b1a      	ldr	r3, [pc, #104]	; (800309c <OnTxData+0x84>)
 8003032:	2200      	movs	r2, #0
 8003034:	4611      	mov	r1, r2
 8003036:	2002      	movs	r0, #2
 8003038:	f00e fbe8 	bl	801180c <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 800303c:	7b23      	ldrb	r3, [r4, #12]
 800303e:	f994 2004 	ldrsb.w	r2, [r4, #4]
 8003042:	f994 1014 	ldrsb.w	r1, [r4, #20]
 8003046:	9103      	str	r1, [sp, #12]
 8003048:	9202      	str	r2, [sp, #8]
 800304a:	9301      	str	r3, [sp, #4]
 800304c:	68a3      	ldr	r3, [r4, #8]
 800304e:	9300      	str	r3, [sp, #0]
 8003050:	4b13      	ldr	r3, [pc, #76]	; (80030a0 <OnTxData+0x88>)
 8003052:	2200      	movs	r2, #0
 8003054:	4611      	mov	r1, r2
 8003056:	2003      	movs	r0, #3
 8003058:	f00e fbd8 	bl	801180c <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 800305c:	4b11      	ldr	r3, [pc, #68]	; (80030a4 <OnTxData+0x8c>)
 800305e:	2200      	movs	r2, #0
 8003060:	4611      	mov	r1, r2
 8003062:	2003      	movs	r0, #3
 8003064:	f00e fbd2 	bl	801180c <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 8003068:	78a3      	ldrb	r3, [r4, #2]
 800306a:	2b01      	cmp	r3, #1
 800306c:	d10c      	bne.n	8003088 <OnTxData+0x70>
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 800306e:	78e3      	ldrb	r3, [r4, #3]
 8003070:	b143      	cbz	r3, 8003084 <OnTxData+0x6c>
 8003072:	4b0d      	ldr	r3, [pc, #52]	; (80030a8 <OnTxData+0x90>)
 8003074:	9300      	str	r3, [sp, #0]
 8003076:	4b0d      	ldr	r3, [pc, #52]	; (80030ac <OnTxData+0x94>)
 8003078:	2200      	movs	r2, #0
 800307a:	4611      	mov	r1, r2
 800307c:	2003      	movs	r0, #3
 800307e:	f00e fbc5 	bl	801180c <UTIL_ADV_TRACE_COND_FSend>
 8003082:	e7d0      	b.n	8003026 <OnTxData+0xe>
 8003084:	4b0a      	ldr	r3, [pc, #40]	; (80030b0 <OnTxData+0x98>)
 8003086:	e7f5      	b.n	8003074 <OnTxData+0x5c>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 8003088:	4b0a      	ldr	r3, [pc, #40]	; (80030b4 <OnTxData+0x9c>)
 800308a:	2200      	movs	r2, #0
 800308c:	4611      	mov	r1, r2
 800308e:	2003      	movs	r0, #3
 8003090:	f00e fbbc 	bl	801180c <UTIL_ADV_TRACE_COND_FSend>
}
 8003094:	e7c7      	b.n	8003026 <OnTxData+0xe>
 8003096:	4770      	bx	lr
 8003098:	2000066c 	.word	0x2000066c
 800309c:	0801705c 	.word	0x0801705c
 80030a0:	08017090 	.word	0x08017090
 80030a4:	080170c4 	.word	0x080170c4
 80030a8:	08017050 	.word	0x08017050
 80030ac:	080170d4 	.word	0x080170d4
 80030b0:	08017054 	.word	0x08017054
 80030b4:	080170e8 	.word	0x080170e8

080030b8 <OnTxTimerEvent>:
{
 80030b8:	b508      	push	{r3, lr}
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 80030ba:	2100      	movs	r1, #0
 80030bc:	2002      	movs	r0, #2
 80030be:	f00e fccf 	bl	8011a60 <UTIL_SEQ_SetTask>
  UTIL_TIMER_Start(&TxTimer);
 80030c2:	4802      	ldr	r0, [pc, #8]	; (80030cc <OnTxTimerEvent+0x14>)
 80030c4:	f00e ff40 	bl	8011f48 <UTIL_TIMER_Start>
}
 80030c8:	bd08      	pop	{r3, pc}
 80030ca:	bf00      	nop
 80030cc:	20000684 	.word	0x20000684

080030d0 <OnMacProcessNotify>:
  }
  /* USER CODE END OnJoinRequest_1 */
}

static void OnMacProcessNotify(void)
{
 80030d0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 80030d2:	2100      	movs	r1, #0
 80030d4:	2001      	movs	r0, #1
 80030d6:	f00e fcc3 	bl	8011a60 <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 80030da:	bd08      	pop	{r3, pc}

080030dc <OnJoinRequest>:
  if (joinParams != NULL)
 80030dc:	b340      	cbz	r0, 8003130 <OnJoinRequest+0x54>
{
 80030de:	b510      	push	{r4, lr}
 80030e0:	4604      	mov	r4, r0
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 80030e2:	f990 3001 	ldrsb.w	r3, [r0, #1]
 80030e6:	b9e3      	cbnz	r3, 8003122 <OnJoinRequest+0x46>
      UTIL_TIMER_Stop(&JoinLedTimer);
 80030e8:	4812      	ldr	r0, [pc, #72]	; (8003134 <OnJoinRequest+0x58>)
 80030ea:	f00e fed3 	bl	8011e94 <UTIL_TIMER_Stop>
      BSP_LED_Off(LED_RED) ;
 80030ee:	2000      	movs	r0, #0
 80030f0:	f000 facc 	bl	800368c <BSP_LED_Off>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 80030f4:	4b10      	ldr	r3, [pc, #64]	; (8003138 <OnJoinRequest+0x5c>)
 80030f6:	2200      	movs	r2, #0
 80030f8:	4611      	mov	r1, r2
 80030fa:	2002      	movs	r0, #2
 80030fc:	f00e fb86 	bl	801180c <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 8003100:	78a3      	ldrb	r3, [r4, #2]
 8003102:	2b01      	cmp	r3, #1
 8003104:	d006      	beq.n	8003114 <OnJoinRequest+0x38>
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 8003106:	4b0d      	ldr	r3, [pc, #52]	; (800313c <OnJoinRequest+0x60>)
 8003108:	2200      	movs	r2, #0
 800310a:	4611      	mov	r1, r2
 800310c:	2002      	movs	r0, #2
 800310e:	f00e fb7d 	bl	801180c <UTIL_ADV_TRACE_COND_FSend>
 8003112:	e00c      	b.n	800312e <OnJoinRequest+0x52>
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 8003114:	4b0a      	ldr	r3, [pc, #40]	; (8003140 <OnJoinRequest+0x64>)
 8003116:	2200      	movs	r2, #0
 8003118:	4611      	mov	r1, r2
 800311a:	2002      	movs	r0, #2
 800311c:	f00e fb76 	bl	801180c <UTIL_ADV_TRACE_COND_FSend>
 8003120:	e005      	b.n	800312e <OnJoinRequest+0x52>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 8003122:	4b08      	ldr	r3, [pc, #32]	; (8003144 <OnJoinRequest+0x68>)
 8003124:	2200      	movs	r2, #0
 8003126:	4611      	mov	r1, r2
 8003128:	2002      	movs	r0, #2
 800312a:	f00e fb6f 	bl	801180c <UTIL_ADV_TRACE_COND_FSend>
}
 800312e:	bd10      	pop	{r4, pc}
 8003130:	4770      	bx	lr
 8003132:	bf00      	nop
 8003134:	20000638 	.word	0x20000638
 8003138:	080170f8 	.word	0x080170f8
 800313c:	08017130 	.word	0x08017130
 8003140:	08017110 	.word	0x08017110
 8003144:	08017150 	.word	0x08017150

08003148 <OnJoinTimerLedEvent>:
{
 8003148:	b508      	push	{r3, lr}
  BSP_LED_Toggle(LED_RED) ;
 800314a:	2000      	movs	r0, #0
 800314c:	f000 faa8 	bl	80036a0 <BSP_LED_Toggle>
}
 8003150:	bd08      	pop	{r3, pc}
	...

08003154 <Flash_Write_Data>:
void Flash_Write_Data(uint32_t address, uint32_t data) {
 8003154:	b530      	push	{r4, r5, lr}
 8003156:	b085      	sub	sp, #20
 8003158:	4604      	mov	r4, r0
 800315a:	460d      	mov	r5, r1
    HAL_FLASH_Unlock();
 800315c:	f001 fb26 	bl	80047ac <HAL_FLASH_Unlock>
    eraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 8003160:	2302      	movs	r3, #2
 8003162:	9301      	str	r3, [sp, #4]
    eraseInit.Page = (address - FLASH_BASE) / FLASH_PAGE_SIZE;
 8003164:	f104 4378 	add.w	r3, r4, #4160749568	; 0xf8000000
 8003168:	0adb      	lsrs	r3, r3, #11
 800316a:	9302      	str	r3, [sp, #8]
    eraseInit.NbPages = 1;
 800316c:	2301      	movs	r3, #1
 800316e:	9303      	str	r3, [sp, #12]
    if(HAL_FLASHEx_Erase(&eraseInit, &error)==HAL_OK)
 8003170:	4669      	mov	r1, sp
 8003172:	a801      	add	r0, sp, #4
 8003174:	f001 fbfe 	bl	8004974 <HAL_FLASHEx_Erase>
 8003178:	b118      	cbz	r0, 8003182 <Flash_Write_Data+0x2e>
    HAL_FLASH_Lock();
 800317a:	f001 fb2f 	bl	80047dc <HAL_FLASH_Lock>
}
 800317e:	b005      	add	sp, #20
 8003180:	bd30      	pop	{r4, r5, pc}
    if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address, data)==HAL_OK)
 8003182:	462a      	mov	r2, r5
 8003184:	2300      	movs	r3, #0
 8003186:	4621      	mov	r1, r4
 8003188:	2001      	movs	r0, #1
 800318a:	f001 fb6b 	bl	8004864 <HAL_FLASH_Program>
 800318e:	2800      	cmp	r0, #0
 8003190:	d1f3      	bne.n	800317a <Flash_Write_Data+0x26>
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
 8003192:	2201      	movs	r2, #1
 8003194:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003198:	4801      	ldr	r0, [pc, #4]	; (80031a0 <Flash_Write_Data+0x4c>)
 800319a:	f001 fd82 	bl	8004ca2 <HAL_GPIO_WritePin>
 800319e:	e7ec      	b.n	800317a <Flash_Write_Data+0x26>
 80031a0:	48000400 	.word	0x48000400

080031a4 <Flash_Read_Data>:
      return *(__IO uint8_t*)address;
 80031a4:	7800      	ldrb	r0, [r0, #0]
}
 80031a6:	4770      	bx	lr

080031a8 <OnRxData>:
{
 80031a8:	b570      	push	{r4, r5, r6, lr}
 80031aa:	b086      	sub	sp, #24
 80031ac:	460c      	mov	r4, r1
  if ((appData != NULL) || (params != NULL))
 80031ae:	4605      	mov	r5, r0
 80031b0:	2800      	cmp	r0, #0
 80031b2:	d063      	beq.n	800327c <OnRxData+0xd4>
	UTIL_TIMER_SetPeriod(&RxLedTimer, 2000);
 80031b4:	4e50      	ldr	r6, [pc, #320]	; (80032f8 <OnRxData+0x150>)
 80031b6:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80031ba:	4630      	mov	r0, r6
 80031bc:	f00e ff0a 	bl	8011fd4 <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&RxLedTimer);
 80031c0:	4630      	mov	r0, r6
 80031c2:	f00e fec1 	bl	8011f48 <UTIL_TIMER_Start>
    APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Indication ==========\r\n");
 80031c6:	4b4d      	ldr	r3, [pc, #308]	; (80032fc <OnRxData+0x154>)
 80031c8:	2200      	movs	r2, #0
 80031ca:	4611      	mov	r1, r2
 80031cc:	2002      	movs	r0, #2
 80031ce:	f00e fb1d 	bl	801180c <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "###### D/L FRAME:%04d | SLOT:%s | PORT:%d | DR:%d | RSSI:%d | SNR:%d\r\n",
 80031d2:	f994 200c 	ldrsb.w	r2, [r4, #12]
 80031d6:	782b      	ldrb	r3, [r5, #0]
 80031d8:	f994 1002 	ldrsb.w	r1, [r4, #2]
 80031dc:	f994 0003 	ldrsb.w	r0, [r4, #3]
 80031e0:	f994 6004 	ldrsb.w	r6, [r4, #4]
 80031e4:	9605      	str	r6, [sp, #20]
 80031e6:	9004      	str	r0, [sp, #16]
 80031e8:	9103      	str	r1, [sp, #12]
 80031ea:	9302      	str	r3, [sp, #8]
 80031ec:	4b44      	ldr	r3, [pc, #272]	; (8003300 <OnRxData+0x158>)
 80031ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031f2:	9301      	str	r3, [sp, #4]
 80031f4:	68a3      	ldr	r3, [r4, #8]
 80031f6:	9300      	str	r3, [sp, #0]
 80031f8:	4b42      	ldr	r3, [pc, #264]	; (8003304 <OnRxData+0x15c>)
 80031fa:	2200      	movs	r2, #0
 80031fc:	4611      	mov	r1, r2
 80031fe:	2002      	movs	r0, #2
 8003200:	f00e fb04 	bl	801180c <UTIL_ADV_TRACE_COND_FSend>
    data=appData->Buffer[0];
 8003204:	686b      	ldr	r3, [r5, #4]
 8003206:	7819      	ldrb	r1, [r3, #0]
 8003208:	4b3f      	ldr	r3, [pc, #252]	; (8003308 <OnRxData+0x160>)
 800320a:	7019      	strb	r1, [r3, #0]
    if(data == ACTIVATE_BME || data == ACTIVATE_DHT11 || data == ACTIVATE_DS18B20 || data == ACTIVATE_MQ6 )
 800320c:	2910      	cmp	r1, #16
 800320e:	d005      	beq.n	800321c <OnRxData+0x74>
 8003210:	2940      	cmp	r1, #64	; 0x40
 8003212:	d003      	beq.n	800321c <OnRxData+0x74>
 8003214:	2920      	cmp	r1, #32
 8003216:	d001      	beq.n	800321c <OnRxData+0x74>
 8003218:	2980      	cmp	r1, #128	; 0x80
 800321a:	d102      	bne.n	8003222 <OnRxData+0x7a>
        Flash_Write_Data(0x0803F800, data);
 800321c:	483b      	ldr	r0, [pc, #236]	; (800330c <OnRxData+0x164>)
 800321e:	f7ff ff99 	bl	8003154 <Flash_Write_Data>
    rx_data = Flash_Read_Data(0x0803F800);
 8003222:	483a      	ldr	r0, [pc, #232]	; (800330c <OnRxData+0x164>)
 8003224:	f7ff ffbe 	bl	80031a4 <Flash_Read_Data>
 8003228:	4b39      	ldr	r3, [pc, #228]	; (8003310 <OnRxData+0x168>)
 800322a:	7018      	strb	r0, [r3, #0]
    APP_LOG(TS_OFF, VLEVEL_M,"MEMORY_DATA : %X\n\r",  rx_data);
 800322c:	9000      	str	r0, [sp, #0]
 800322e:	4b39      	ldr	r3, [pc, #228]	; (8003314 <OnRxData+0x16c>)
 8003230:	2200      	movs	r2, #0
 8003232:	4611      	mov	r1, r2
 8003234:	2002      	movs	r0, #2
 8003236:	f00e fae9 	bl	801180c <UTIL_ADV_TRACE_COND_FSend>
    switch (appData->Port)
 800323a:	782b      	ldrb	r3, [r5, #0]
 800323c:	2b02      	cmp	r3, #2
 800323e:	d042      	beq.n	80032c6 <OnRxData+0x11e>
 8003240:	2b03      	cmp	r3, #3
 8003242:	d157      	bne.n	80032f4 <OnRxData+0x14c>
        if (appData->BufferSize == 1)
 8003244:	786b      	ldrb	r3, [r5, #1]
 8003246:	2b01      	cmp	r3, #1
 8003248:	d154      	bne.n	80032f4 <OnRxData+0x14c>
          switch (appData->Buffer[0])
 800324a:	686b      	ldr	r3, [r5, #4]
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	2b01      	cmp	r3, #1
 8003250:	d017      	beq.n	8003282 <OnRxData+0xda>
 8003252:	2b02      	cmp	r3, #2
 8003254:	d026      	beq.n	80032a4 <OnRxData+0xfc>
 8003256:	2b00      	cmp	r3, #0
 8003258:	d14c      	bne.n	80032f4 <OnRxData+0x14c>
              APP_LOG(TS_OFF, VLEVEL_M,"#####CLASS_A######\n\r");
 800325a:	4b2f      	ldr	r3, [pc, #188]	; (8003318 <OnRxData+0x170>)
 800325c:	2200      	movs	r2, #0
 800325e:	4611      	mov	r1, r2
 8003260:	2002      	movs	r0, #2
 8003262:	f00e fad3 	bl	801180c <UTIL_ADV_TRACE_COND_FSend>
              Flash_Write_Data(0x0803F000,CLASS_A);
 8003266:	2100      	movs	r1, #0
 8003268:	482c      	ldr	r0, [pc, #176]	; (800331c <OnRxData+0x174>)
 800326a:	f7ff ff73 	bl	8003154 <Flash_Write_Data>
              LmHandlerRequestClass(CLASS_A);
 800326e:	2000      	movs	r0, #0
 8003270:	f005 f988 	bl	8008584 <LmHandlerRequestClass>
              LmHandlerParams.DefaultClass = CLASS_A;
 8003274:	4b2a      	ldr	r3, [pc, #168]	; (8003320 <OnRxData+0x178>)
 8003276:	2200      	movs	r2, #0
 8003278:	705a      	strb	r2, [r3, #1]
              break;
 800327a:	e03b      	b.n	80032f4 <OnRxData+0x14c>
  if ((appData != NULL) || (params != NULL))
 800327c:	2900      	cmp	r1, #0
 800327e:	d199      	bne.n	80031b4 <OnRxData+0xc>
 8003280:	e038      	b.n	80032f4 <OnRxData+0x14c>
              APP_LOG(TS_OFF, VLEVEL_M,"#####CLASS_B######\n\r");
 8003282:	4b28      	ldr	r3, [pc, #160]	; (8003324 <OnRxData+0x17c>)
 8003284:	2200      	movs	r2, #0
 8003286:	4611      	mov	r1, r2
 8003288:	2002      	movs	r0, #2
 800328a:	f00e fabf 	bl	801180c <UTIL_ADV_TRACE_COND_FSend>
              Flash_Write_Data(0x0803F000,CLASS_B);
 800328e:	2101      	movs	r1, #1
 8003290:	4822      	ldr	r0, [pc, #136]	; (800331c <OnRxData+0x174>)
 8003292:	f7ff ff5f 	bl	8003154 <Flash_Write_Data>
              LmHandlerRequestClass(CLASS_B);
 8003296:	2001      	movs	r0, #1
 8003298:	f005 f974 	bl	8008584 <LmHandlerRequestClass>
              LmHandlerParams.DefaultClass = CLASS_B;
 800329c:	4b20      	ldr	r3, [pc, #128]	; (8003320 <OnRxData+0x178>)
 800329e:	2201      	movs	r2, #1
 80032a0:	705a      	strb	r2, [r3, #1]
              break;
 80032a2:	e027      	b.n	80032f4 <OnRxData+0x14c>
              APP_LOG(TS_OFF, VLEVEL_M,"#####CLASS_C######\n\r");
 80032a4:	4b20      	ldr	r3, [pc, #128]	; (8003328 <OnRxData+0x180>)
 80032a6:	2200      	movs	r2, #0
 80032a8:	4611      	mov	r1, r2
 80032aa:	2002      	movs	r0, #2
 80032ac:	f00e faae 	bl	801180c <UTIL_ADV_TRACE_COND_FSend>
              Flash_Write_Data(0x0803F000,CLASS_C);
 80032b0:	2102      	movs	r1, #2
 80032b2:	481a      	ldr	r0, [pc, #104]	; (800331c <OnRxData+0x174>)
 80032b4:	f7ff ff4e 	bl	8003154 <Flash_Write_Data>
              LmHandlerRequestClass(CLASS_C);
 80032b8:	2002      	movs	r0, #2
 80032ba:	f005 f963 	bl	8008584 <LmHandlerRequestClass>
              LmHandlerParams.DefaultClass = CLASS_C;
 80032be:	4b18      	ldr	r3, [pc, #96]	; (8003320 <OnRxData+0x178>)
 80032c0:	2202      	movs	r2, #2
 80032c2:	705a      	strb	r2, [r3, #1]
              break;
 80032c4:	e016      	b.n	80032f4 <OnRxData+0x14c>
    	  APP_LOG(TS_OFF, VLEVEL_M,"Port = : %d\n\r",appData->Port);
 80032c6:	9300      	str	r3, [sp, #0]
 80032c8:	4b18      	ldr	r3, [pc, #96]	; (800332c <OnRxData+0x184>)
 80032ca:	2200      	movs	r2, #0
 80032cc:	4611      	mov	r1, r2
 80032ce:	2002      	movs	r0, #2
 80032d0:	f00e fa9c 	bl	801180c <UTIL_ADV_TRACE_COND_FSend>
    	   for(i=0;i<appData->BufferSize;i++)
 80032d4:	2400      	movs	r4, #0
 80032d6:	e00a      	b.n	80032ee <OnRxData+0x146>
    	       APP_LOG(TS_OFF, VLEVEL_M,"Received_Data[%d] : %X\n\r",i,  appData->Buffer[i]);
 80032d8:	686b      	ldr	r3, [r5, #4]
 80032da:	5d1b      	ldrb	r3, [r3, r4]
 80032dc:	9301      	str	r3, [sp, #4]
 80032de:	9400      	str	r4, [sp, #0]
 80032e0:	4b13      	ldr	r3, [pc, #76]	; (8003330 <OnRxData+0x188>)
 80032e2:	2200      	movs	r2, #0
 80032e4:	4611      	mov	r1, r2
 80032e6:	2002      	movs	r0, #2
 80032e8:	f00e fa90 	bl	801180c <UTIL_ADV_TRACE_COND_FSend>
    	   for(i=0;i<appData->BufferSize;i++)
 80032ec:	3401      	adds	r4, #1
 80032ee:	786b      	ldrb	r3, [r5, #1]
 80032f0:	42a3      	cmp	r3, r4
 80032f2:	dcf1      	bgt.n	80032d8 <OnRxData+0x130>
}
 80032f4:	b006      	add	sp, #24
 80032f6:	bd70      	pop	{r4, r5, r6, pc}
 80032f8:	20000654 	.word	0x20000654
 80032fc:	0801716c 	.word	0x0801716c
 8003300:	08017354 	.word	0x08017354
 8003304:	080171a0 	.word	0x080171a0
 8003308:	2000069c 	.word	0x2000069c
 800330c:	0803f800 	.word	0x0803f800
 8003310:	2000069d 	.word	0x2000069d
 8003314:	080171e8 	.word	0x080171e8
 8003318:	080171fc 	.word	0x080171fc
 800331c:	0803f000 	.word	0x0803f000
 8003320:	2000003c 	.word	0x2000003c
 8003324:	08017214 	.word	0x08017214
 8003328:	0801722c 	.word	0x0801722c
 800332c:	08017244 	.word	0x08017244
 8003330:	08017254 	.word	0x08017254

08003334 <LoRaWAN_Init>:
{
 8003334:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003338:	b085      	sub	sp, #20
  BSP_LED_Init(LED_RED);
 800333a:	2000      	movs	r0, #0
 800333c:	f000 f97e 	bl	800363c <BSP_LED_Init>
  APP_LOG(TS_OFF, VLEVEL_M, "APP_VERSION:        V%X.%X.%X\r\n",
 8003340:	2400      	movs	r4, #0
 8003342:	9402      	str	r4, [sp, #8]
 8003344:	2501      	movs	r5, #1
 8003346:	9501      	str	r5, [sp, #4]
 8003348:	9500      	str	r5, [sp, #0]
 800334a:	4b3e      	ldr	r3, [pc, #248]	; (8003444 <LoRaWAN_Init+0x110>)
 800334c:	4622      	mov	r2, r4
 800334e:	4621      	mov	r1, r4
 8003350:	2002      	movs	r0, #2
 8003352:	f00e fa5b 	bl	801180c <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION: V%X.%X.%X\r\n",
 8003356:	9402      	str	r4, [sp, #8]
 8003358:	2303      	movs	r3, #3
 800335a:	9301      	str	r3, [sp, #4]
 800335c:	2602      	movs	r6, #2
 800335e:	9600      	str	r6, [sp, #0]
 8003360:	4b39      	ldr	r3, [pc, #228]	; (8003448 <LoRaWAN_Init+0x114>)
 8003362:	4622      	mov	r2, r4
 8003364:	4621      	mov	r1, r4
 8003366:	4630      	mov	r0, r6
 8003368:	f00e fa50 	bl	801180c <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:   V%X.%X.%X\r\n",
 800336c:	9402      	str	r4, [sp, #8]
 800336e:	9501      	str	r5, [sp, #4]
 8003370:	9500      	str	r5, [sp, #0]
 8003372:	4b36      	ldr	r3, [pc, #216]	; (800344c <LoRaWAN_Init+0x118>)
 8003374:	4622      	mov	r2, r4
 8003376:	4621      	mov	r1, r4
 8003378:	4630      	mov	r0, r6
 800337a:	f00e fa47 	bl	801180c <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Create(&TxLedTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 800337e:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 8003450 <LoRaWAN_Init+0x11c>
 8003382:	9400      	str	r4, [sp, #0]
 8003384:	4b33      	ldr	r3, [pc, #204]	; (8003454 <LoRaWAN_Init+0x120>)
 8003386:	4622      	mov	r2, r4
 8003388:	f04f 31ff 	mov.w	r1, #4294967295
 800338c:	4648      	mov	r0, r9
 800338e:	f00e fd23 	bl	8011dd8 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 8003392:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 8003458 <LoRaWAN_Init+0x124>
 8003396:	9400      	str	r4, [sp, #0]
 8003398:	4b30      	ldr	r3, [pc, #192]	; (800345c <LoRaWAN_Init+0x128>)
 800339a:	4622      	mov	r2, r4
 800339c:	f04f 31ff 	mov.w	r1, #4294967295
 80033a0:	4640      	mov	r0, r8
 80033a2:	f00e fd19 	bl	8011dd8 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, 0xFFFFFFFFU, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 80033a6:	4f2e      	ldr	r7, [pc, #184]	; (8003460 <LoRaWAN_Init+0x12c>)
 80033a8:	9400      	str	r4, [sp, #0]
 80033aa:	4b2e      	ldr	r3, [pc, #184]	; (8003464 <LoRaWAN_Init+0x130>)
 80033ac:	462a      	mov	r2, r5
 80033ae:	f04f 31ff 	mov.w	r1, #4294967295
 80033b2:	4638      	mov	r0, r7
 80033b4:	f00e fd10 	bl	8011dd8 <UTIL_TIMER_Create>
  UTIL_TIMER_SetPeriod(&TxLedTimer, 500);
 80033b8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80033bc:	4648      	mov	r0, r9
 80033be:	f00e fe09 	bl	8011fd4 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_SetPeriod(&RxLedTimer, 500);
 80033c2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80033c6:	4640      	mov	r0, r8
 80033c8:	f00e fe04 	bl	8011fd4 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_SetPeriod(&JoinLedTimer, 500);
 80033cc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80033d0:	4638      	mov	r0, r7
 80033d2:	f00e fdff 	bl	8011fd4 <UTIL_TIMER_SetPeriod>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 80033d6:	4a24      	ldr	r2, [pc, #144]	; (8003468 <LoRaWAN_Init+0x134>)
 80033d8:	4621      	mov	r1, r4
 80033da:	4628      	mov	r0, r5
 80033dc:	f00e fbfc 	bl	8011bd8 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 80033e0:	4a22      	ldr	r2, [pc, #136]	; (800346c <LoRaWAN_Init+0x138>)
 80033e2:	4621      	mov	r1, r4
 80033e4:	4630      	mov	r0, r6
 80033e6:	f00e fbf7 	bl	8011bd8 <UTIL_SEQ_RegTask>
  LoraInfo_Init();
 80033ea:	f000 f8d7 	bl	800359c <LoraInfo_Init>
  LmHandlerInit(&LmHandlerCallbacks);
 80033ee:	4820      	ldr	r0, [pc, #128]	; (8003470 <LoRaWAN_Init+0x13c>)
 80033f0:	f005 fb2e 	bl	8008a50 <LmHandlerInit>
  Read_class = Flash_Read_Data(0x0803F000);
 80033f4:	481f      	ldr	r0, [pc, #124]	; (8003474 <LoRaWAN_Init+0x140>)
 80033f6:	f7ff fed5 	bl	80031a4 <Flash_Read_Data>
 80033fa:	4b1f      	ldr	r3, [pc, #124]	; (8003478 <LoRaWAN_Init+0x144>)
 80033fc:	7018      	strb	r0, [r3, #0]
  if((Read_class != LORAWAN_DEFAULT_CLASS) && (Read_class != 0xFF))
 80033fe:	42b0      	cmp	r0, r6
 8003400:	d003      	beq.n	800340a <LoRaWAN_Init+0xd6>
 8003402:	28ff      	cmp	r0, #255	; 0xff
 8003404:	d001      	beq.n	800340a <LoRaWAN_Init+0xd6>
	  LmHandlerParams.DefaultClass = Read_class;
 8003406:	4b1d      	ldr	r3, [pc, #116]	; (800347c <LoRaWAN_Init+0x148>)
 8003408:	7058      	strb	r0, [r3, #1]
  LmHandlerConfigure(&LmHandlerParams);
 800340a:	481c      	ldr	r0, [pc, #112]	; (800347c <LoRaWAN_Init+0x148>)
 800340c:	f004 ffc2 	bl	8008394 <LmHandlerConfigure>
  UTIL_TIMER_Start(&JoinLedTimer);
 8003410:	4813      	ldr	r0, [pc, #76]	; (8003460 <LoRaWAN_Init+0x12c>)
 8003412:	f00e fd99 	bl	8011f48 <UTIL_TIMER_Start>
  LmHandlerJoin(ActivationType);
 8003416:	2002      	movs	r0, #2
 8003418:	f005 f916 	bl	8008648 <LmHandlerJoin>
    UTIL_TIMER_Create(&TxTimer,  0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 800341c:	4c18      	ldr	r4, [pc, #96]	; (8003480 <LoRaWAN_Init+0x14c>)
 800341e:	2200      	movs	r2, #0
 8003420:	9200      	str	r2, [sp, #0]
 8003422:	4b18      	ldr	r3, [pc, #96]	; (8003484 <LoRaWAN_Init+0x150>)
 8003424:	f04f 31ff 	mov.w	r1, #4294967295
 8003428:	4620      	mov	r0, r4
 800342a:	f00e fcd5 	bl	8011dd8 <UTIL_TIMER_Create>
    UTIL_TIMER_SetPeriod(&TxTimer,  APP_TX_DUTYCYCLE);
 800342e:	f242 7110 	movw	r1, #10000	; 0x2710
 8003432:	4620      	mov	r0, r4
 8003434:	f00e fdce 	bl	8011fd4 <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 8003438:	4620      	mov	r0, r4
 800343a:	f00e fd85 	bl	8011f48 <UTIL_TIMER_Start>
}
 800343e:	b005      	add	sp, #20
 8003440:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003444:	08017270 	.word	0x08017270
 8003448:	08017290 	.word	0x08017290
 800344c:	080172b0 	.word	0x080172b0
 8003450:	2000066c 	.word	0x2000066c
 8003454:	08003015 	.word	0x08003015
 8003458:	20000654 	.word	0x20000654
 800345c:	08003017 	.word	0x08003017
 8003460:	20000638 	.word	0x20000638
 8003464:	08003149 	.word	0x08003149
 8003468:	08008551 	.word	0x08008551
 800346c:	080034b1 	.word	0x080034b1
 8003470:	20000008 	.word	0x20000008
 8003474:	0803f000 	.word	0x0803f000
 8003478:	20000650 	.word	0x20000650
 800347c:	2000003c 	.word	0x2000003c
 8003480:	20000684 	.word	0x20000684
 8003484:	080030b9 	.word	0x080030b9

08003488 <HAL_GPIO_EXTI_Callback>:
  switch (GPIO_Pin)
 8003488:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 800348c:	d000      	beq.n	8003490 <HAL_GPIO_EXTI_Callback+0x8>
 800348e:	4770      	bx	lr
{
 8003490:	b508      	push	{r3, lr}
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 8003492:	2100      	movs	r1, #0
 8003494:	2002      	movs	r0, #2
 8003496:	f00e fae3 	bl	8011a60 <UTIL_SEQ_SetTask>
}
 800349a:	bd08      	pop	{r3, pc}

0800349c <Get_class>:

DeviceClass_t Get_class(void)
{
	if(LmHandlerParams.DefaultClass == 0x00)
 800349c:	4b03      	ldr	r3, [pc, #12]	; (80034ac <Get_class+0x10>)
 800349e:	7858      	ldrb	r0, [r3, #1]
 80034a0:	b110      	cbz	r0, 80034a8 <Get_class+0xc>
	{
		return CLASS_A;
	}
	else if(LmHandlerParams.DefaultClass == 0x01)
 80034a2:	2801      	cmp	r0, #1
 80034a4:	d000      	beq.n	80034a8 <Get_class+0xc>
	{
		return CLASS_B;
	}
	else if(LmHandlerParams.DefaultClass == 0x02)
 80034a6:	2802      	cmp	r0, #2
	{
		return CLASS_C;
	}
}
 80034a8:	4770      	bx	lr
 80034aa:	bf00      	nop
 80034ac:	2000003c 	.word	0x2000003c

080034b0 <SendTxData>:
{
 80034b0:	b510      	push	{r4, lr}
 80034b2:	b086      	sub	sp, #24
  UTIL_TIMER_Time_t nextTxIn = 0;
 80034b4:	2400      	movs	r4, #0
 80034b6:	9403      	str	r4, [sp, #12]
  Get_sensor_value(&SensorData,rx_data);
 80034b8:	4b2f      	ldr	r3, [pc, #188]	; (8003578 <SendTxData+0xc8>)
 80034ba:	7819      	ldrb	r1, [r3, #0]
 80034bc:	a804      	add	r0, sp, #16
 80034be:	f7ff fca9 	bl	8002e14 <Get_sensor_value>
  Present_class =  Get_class();
 80034c2:	f7ff ffeb 	bl	800349c <Get_class>
  APP_LOG(TS_OFF, VLEVEL_M,"PRESENT CLASS : %X\n\r",  Present_class);
 80034c6:	9000      	str	r0, [sp, #0]
 80034c8:	4b2c      	ldr	r3, [pc, #176]	; (800357c <SendTxData+0xcc>)
 80034ca:	4622      	mov	r2, r4
 80034cc:	4621      	mov	r1, r4
 80034ce:	2002      	movs	r0, #2
 80034d0:	f00e f99c 	bl	801180c <UTIL_ADV_TRACE_COND_FSend>
  AppData.Port = LORAWAN_USER_APP_PORT;
 80034d4:	4b2a      	ldr	r3, [pc, #168]	; (8003580 <SendTxData+0xd0>)
 80034d6:	2202      	movs	r2, #2
 80034d8:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = mode;
 80034da:	685a      	ldr	r2, [r3, #4]
 80034dc:	4929      	ldr	r1, [pc, #164]	; (8003584 <SendTxData+0xd4>)
 80034de:	8809      	ldrh	r1, [r1, #0]
 80034e0:	7011      	strb	r1, [r2, #0]
  AppData.Buffer[i++] = (uint8_t)((battery >> 8) & 0xFF);
 80034e2:	6858      	ldr	r0, [r3, #4]
 80034e4:	4928      	ldr	r1, [pc, #160]	; (8003588 <SendTxData+0xd8>)
 80034e6:	880a      	ldrh	r2, [r1, #0]
 80034e8:	0a12      	lsrs	r2, r2, #8
 80034ea:	7042      	strb	r2, [r0, #1]
  AppData.Buffer[i++] = (uint8_t)(battery & 0xFF);
 80034ec:	685a      	ldr	r2, [r3, #4]
 80034ee:	7809      	ldrb	r1, [r1, #0]
 80034f0:	7091      	strb	r1, [r2, #2]
  AppData.Buffer[i++] = (uint8_t)((SensorData.Sens_Temperature >> 8) & 0xFF);
 80034f2:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80034f6:	6859      	ldr	r1, [r3, #4]
 80034f8:	0a10      	lsrs	r0, r2, #8
 80034fa:	70c8      	strb	r0, [r1, #3]
  AppData.Buffer[i++] = (uint8_t)(SensorData.Sens_Temperature & 0xFF);
 80034fc:	6859      	ldr	r1, [r3, #4]
 80034fe:	710a      	strb	r2, [r1, #4]
  AppData.Buffer[i++] = (uint8_t)((SensorData.Sens_Humidity >> 8) & 0xFF);
 8003500:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8003504:	6859      	ldr	r1, [r3, #4]
 8003506:	0a10      	lsrs	r0, r2, #8
 8003508:	7148      	strb	r0, [r1, #5]
  AppData.Buffer[i++] = (uint8_t)(SensorData.Sens_Humidity & 0xFF);
 800350a:	6859      	ldr	r1, [r3, #4]
 800350c:	718a      	strb	r2, [r1, #6]
  AppData.Buffer[i++] = (uint8_t)((SensorData.Sens_Pressure >> 8) & 0xFF);
 800350e:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8003512:	6859      	ldr	r1, [r3, #4]
 8003514:	0a10      	lsrs	r0, r2, #8
 8003516:	71c8      	strb	r0, [r1, #7]
  AppData.Buffer[i++] = (uint8_t)(SensorData.Sens_Pressure & 0xFF);
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	721a      	strb	r2, [r3, #8]
  if ((LmHandlerParams.ActiveRegion == LORAMAC_REGION_US915) || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AU915)
 800351c:	4a1b      	ldr	r2, [pc, #108]	; (800358c <SendTxData+0xdc>)
 800351e:	7812      	ldrb	r2, [r2, #0]
 8003520:	2a08      	cmp	r2, #8
 8003522:	d002      	beq.n	800352a <SendTxData+0x7a>
 8003524:	2a01      	cmp	r2, #1
 8003526:	d000      	beq.n	800352a <SendTxData+0x7a>
      || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AS923))
 8003528:	b98a      	cbnz	r2, 800354e <SendTxData+0x9e>
    AppData.Buffer[i++] = 0;
 800352a:	2200      	movs	r2, #0
 800352c:	725a      	strb	r2, [r3, #9]
    AppData.Buffer[i++] = 0;
 800352e:	729a      	strb	r2, [r3, #10]
    AppData.Buffer[i++] = 0;
 8003530:	72da      	strb	r2, [r3, #11]
    AppData.Buffer[i++] = 0;
 8003532:	731a      	strb	r2, [r3, #12]
 8003534:	230d      	movs	r3, #13
  AppData.BufferSize = i;
 8003536:	4812      	ldr	r0, [pc, #72]	; (8003580 <SendTxData+0xd0>)
 8003538:	7043      	strb	r3, [r0, #1]
  if (LORAMAC_HANDLER_SUCCESS == LmHandlerSend(&AppData, LORAWAN_DEFAULT_CONFIRMED_MSG_STATE, &nextTxIn, false))
 800353a:	2300      	movs	r3, #0
 800353c:	aa03      	add	r2, sp, #12
 800353e:	4619      	mov	r1, r3
 8003540:	f005 f8cc 	bl	80086dc <LmHandlerSend>
 8003544:	b128      	cbz	r0, 8003552 <SendTxData+0xa2>
  else if (nextTxIn > 0)
 8003546:	9b03      	ldr	r3, [sp, #12]
 8003548:	b953      	cbnz	r3, 8003560 <SendTxData+0xb0>
}
 800354a:	b006      	add	sp, #24
 800354c:	bd10      	pop	{r4, pc}
  AppData.Buffer[i++] = (uint8_t)(SensorData.Sens_Pressure & 0xFF);
 800354e:	2309      	movs	r3, #9
 8003550:	e7f1      	b.n	8003536 <SendTxData+0x86>
    APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 8003552:	4b0f      	ldr	r3, [pc, #60]	; (8003590 <SendTxData+0xe0>)
 8003554:	2201      	movs	r2, #1
 8003556:	2100      	movs	r1, #0
 8003558:	4610      	mov	r0, r2
 800355a:	f00e f957 	bl	801180c <UTIL_ADV_TRACE_COND_FSend>
 800355e:	e7f4      	b.n	800354a <SendTxData+0x9a>
    APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 8003560:	4a0c      	ldr	r2, [pc, #48]	; (8003594 <SendTxData+0xe4>)
 8003562:	fba2 2303 	umull	r2, r3, r2, r3
 8003566:	099b      	lsrs	r3, r3, #6
 8003568:	9300      	str	r3, [sp, #0]
 800356a:	4b0b      	ldr	r3, [pc, #44]	; (8003598 <SendTxData+0xe8>)
 800356c:	2201      	movs	r2, #1
 800356e:	2100      	movs	r1, #0
 8003570:	4610      	mov	r0, r2
 8003572:	f00e f94b 	bl	801180c <UTIL_ADV_TRACE_COND_FSend>
}
 8003576:	e7e8      	b.n	800354a <SendTxData+0x9a>
 8003578:	2000069d 	.word	0x2000069d
 800357c:	080172d0 	.word	0x080172d0
 8003580:	20000000 	.word	0x20000000
 8003584:	2000004e 	.word	0x2000004e
 8003588:	2000004c 	.word	0x2000004c
 800358c:	2000003c 	.word	0x2000003c
 8003590:	080172e8 	.word	0x080172e8
 8003594:	10624dd3 	.word	0x10624dd3
 8003598:	080172f8 	.word	0x080172f8

0800359c <LoraInfo_Init>:
/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
  loraInfo.ActivationMode = 0;
 800359c:	4b05      	ldr	r3, [pc, #20]	; (80035b4 <LoraInfo_Init+0x18>)
 800359e:	2200      	movs	r2, #0
 80035a0:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 80035a2:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 80035a4:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 80035a6:	60da      	str	r2, [r3, #12]
#endif /* REGION_EU868 */
#ifdef  REGION_KR920
  loraInfo.Region |= (1 << LORAMAC_REGION_KR920) ;
#endif /* REGION_KR920 */
#ifdef  REGION_IN865
  loraInfo.Region |= (1 << LORAMAC_REGION_IN865) ;
 80035a8:	2280      	movs	r2, #128	; 0x80
 80035aa:	605a      	str	r2, [r3, #4]
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
  loraInfo.ActivationMode = 3;
 80035ac:	2203      	movs	r2, #3
 80035ae:	601a      	str	r2, [r3, #0]
  loraInfo.ActivationMode = ACTIVATION_BY_PERSONALIZATION + (OVER_THE_AIR_ACTIVATION << 1);
#endif /* LORAWAN_KMS */
  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 80035b0:	4770      	bx	lr
 80035b2:	bf00      	nop
 80035b4:	200006a0 	.word	0x200006a0

080035b8 <LoraInfo_GetPtr>:
{
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
}
 80035b8:	4800      	ldr	r0, [pc, #0]	; (80035bc <LoraInfo_GetPtr+0x4>)
 80035ba:	4770      	bx	lr
 80035bc:	200006a0 	.word	0x200006a0

080035c0 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 80035c0:	b508      	push	{r3, lr}
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_Init();
 80035c2:	f000 f877 	bl	80036b4 <BSP_RADIO_Init>
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 80035c6:	bd08      	pop	{r3, pc}

080035c8 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 80035c8:	b508      	push	{r3, lr}
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 80035ca:	f000 f8a7 	bl	800371c <BSP_RADIO_ConfigRFSwitch>
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 80035ce:	bd08      	pop	{r3, pc}

080035d0 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 80035d0:	b508      	push	{r3, lr}
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_GetTxConfig();
 80035d2:	f000 f8df 	bl	8003794 <BSP_RADIO_GetTxConfig>
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 80035d6:	bd08      	pop	{r3, pc}

080035d8 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 80035d8:	b508      	push	{r3, lr}
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_IsTCXO();
 80035da:	f000 f8dd 	bl	8003798 <BSP_RADIO_IsTCXO>
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 80035de:	bd08      	pop	{r3, pc}

080035e0 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 80035e0:	b508      	push	{r3, lr}
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_IsDCDC();
 80035e2:	f000 f8db 	bl	800379c <BSP_RADIO_IsDCDC>
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 80035e6:	bd08      	pop	{r3, pc}

080035e8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80035e8:	480d      	ldr	r0, [pc, #52]	; (8003620 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80035ea:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80035ec:	f000 f8d8 	bl	80037a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80035f0:	480c      	ldr	r0, [pc, #48]	; (8003624 <LoopForever+0x6>)
  ldr r1, =_edata
 80035f2:	490d      	ldr	r1, [pc, #52]	; (8003628 <LoopForever+0xa>)
  ldr r2, =_sidata
 80035f4:	4a0d      	ldr	r2, [pc, #52]	; (800362c <LoopForever+0xe>)
  movs r3, #0
 80035f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80035f8:	e002      	b.n	8003600 <LoopCopyDataInit>

080035fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80035fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80035fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80035fe:	3304      	adds	r3, #4

08003600 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003600:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003602:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003604:	d3f9      	bcc.n	80035fa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003606:	4a0a      	ldr	r2, [pc, #40]	; (8003630 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003608:	4c0a      	ldr	r4, [pc, #40]	; (8003634 <LoopForever+0x16>)
  movs r3, #0
 800360a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800360c:	e001      	b.n	8003612 <LoopFillZerobss>

0800360e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800360e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003610:	3204      	adds	r2, #4

08003612 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003612:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003614:	d3fb      	bcc.n	800360e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003616:	f00f fe95 	bl	8013344 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800361a:	f7fe f945 	bl	80018a8 <main>

0800361e <LoopForever>:

LoopForever:
    b LoopForever
 800361e:	e7fe      	b.n	800361e <LoopForever>
  ldr   r0, =_estack
 8003620:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8003624:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003628:	200002a8 	.word	0x200002a8
  ldr r2, =_sidata
 800362c:	08018100 	.word	0x08018100
  ldr r2, =_sbss
 8003630:	200002a8 	.word	0x200002a8
  ldr r4, =_ebss
 8003634:	20001b20 	.word	0x20001b20

08003638 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003638:	e7fe      	b.n	8003638 <ADC_IRQHandler>
	...

0800363c <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 800363c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800363e:	b087      	sub	sp, #28
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8003640:	2400      	movs	r4, #0
 8003642:	9401      	str	r4, [sp, #4]
 8003644:	9402      	str	r4, [sp, #8]
 8003646:	9403      	str	r4, [sp, #12]
 8003648:	9404      	str	r4, [sp, #16]
 800364a:	9405      	str	r4, [sp, #20]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800364c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003650:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003652:	f042 0202 	orr.w	r2, r2, #2
 8003656:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800365a:	f003 0302 	and.w	r3, r3, #2
 800365e:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8003660:	9b00      	ldr	r3, [sp, #0]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin = LED_PIN[Led];
 8003662:	2620      	movs	r6, #32
 8003664:	9601      	str	r6, [sp, #4]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8003666:	2701      	movs	r7, #1
 8003668:	9702      	str	r7, [sp, #8]
  gpio_init_structure.Pull = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800366a:	2302      	movs	r3, #2
 800366c:	9304      	str	r3, [sp, #16]
  
  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 800366e:	4d06      	ldr	r5, [pc, #24]	; (8003688 <BSP_LED_Init+0x4c>)
 8003670:	a901      	add	r1, sp, #4
 8003672:	4628      	mov	r0, r5
 8003674:	f001 f9be 	bl	80049f4 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8003678:	463a      	mov	r2, r7
 800367a:	4631      	mov	r1, r6
 800367c:	4628      	mov	r0, r5
 800367e:	f001 fb10 	bl	8004ca2 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
}
 8003682:	4620      	mov	r0, r4
 8003684:	b007      	add	sp, #28
 8003686:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003688:	48000400 	.word	0x48000400

0800368c <BSP_LED_Off>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 800368c:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET); 
 800368e:	2201      	movs	r2, #1
 8003690:	2120      	movs	r1, #32
 8003692:	4802      	ldr	r0, [pc, #8]	; (800369c <BSP_LED_Off+0x10>)
 8003694:	f001 fb05 	bl	8004ca2 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
}
 8003698:	2000      	movs	r0, #0
 800369a:	bd08      	pop	{r3, pc}
 800369c:	48000400 	.word	0x48000400

080036a0 <BSP_LED_Toggle>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 80036a0:	b508      	push	{r3, lr}
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 80036a2:	2120      	movs	r1, #32
 80036a4:	4802      	ldr	r0, [pc, #8]	; (80036b0 <BSP_LED_Toggle+0x10>)
 80036a6:	f001 fb01 	bl	8004cac <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
}
 80036aa:	2000      	movs	r0, #0
 80036ac:	bd08      	pop	{r3, pc}
 80036ae:	bf00      	nop
 80036b0:	48000400 	.word	0x48000400

080036b4 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 80036b4:	b570      	push	{r4, r5, r6, lr}
 80036b6:	b086      	sub	sp, #24
  GPIO_InitTypeDef  gpio_init_structure = {0};
 80036b8:	2400      	movs	r4, #0
 80036ba:	9401      	str	r4, [sp, #4]
 80036bc:	9402      	str	r4, [sp, #8]
 80036be:	9403      	str	r4, [sp, #12]
 80036c0:	9404      	str	r4, [sp, #16]
 80036c2:	9405      	str	r4, [sp, #20]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80036c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036c8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80036ca:	f042 0201 	orr.w	r2, r2, #1
 80036ce:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80036d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036d2:	f003 0301 	and.w	r3, r3, #1
 80036d6:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80036d8:	9b00      	ldr	r3, [sp, #0]
  
  /* Enable the Radio Switch Clock */
  RF_SW_CTRL1_GPIO_CLK_ENABLE();
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 80036da:	2510      	movs	r5, #16
 80036dc:	9501      	str	r5, [sp, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80036de:	2301      	movs	r3, #1
 80036e0:	9302      	str	r3, [sp, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036e2:	2303      	movs	r3, #3
 80036e4:	9304      	str	r3, [sp, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 80036e6:	a901      	add	r1, sp, #4
 80036e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80036ec:	f001 f982 	bl	80049f4 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 80036f0:	2620      	movs	r6, #32
 80036f2:	9601      	str	r6, [sp, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 80036f4:	a901      	add	r1, sp, #4
 80036f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80036fa:	f001 f97b 	bl	80049f4 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 80036fe:	4622      	mov	r2, r4
 8003700:	4631      	mov	r1, r6
 8003702:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003706:	f001 facc 	bl	8004ca2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 800370a:	4622      	mov	r2, r4
 800370c:	4629      	mov	r1, r5
 800370e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003712:	f001 fac6 	bl	8004ca2 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
}
 8003716:	4620      	mov	r0, r4
 8003718:	b006      	add	sp, #24
 800371a:	bd70      	pop	{r4, r5, r6, pc}

0800371c <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 800371c:	b508      	push	{r3, lr}
  switch (Config)
 800371e:	2803      	cmp	r0, #3
 8003720:	d80f      	bhi.n	8003742 <BSP_RADIO_ConfigRFSwitch+0x26>
 8003722:	e8df f000 	tbb	[pc, r0]
 8003726:	1002      	.short	0x1002
 8003728:	2a1d      	.short	0x2a1d
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 800372a:	2200      	movs	r2, #0
 800372c:	2110      	movs	r1, #16
 800372e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003732:	f001 fab6 	bl	8004ca2 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8003736:	2200      	movs	r2, #0
 8003738:	2120      	movs	r1, #32
 800373a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800373e:	f001 fab0 	bl	8004ca2 <HAL_GPIO_WritePin>
    default:
      break;    
  }  

  return BSP_ERROR_NONE;
}
 8003742:	2000      	movs	r0, #0
 8003744:	bd08      	pop	{r3, pc}
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8003746:	2201      	movs	r2, #1
 8003748:	2110      	movs	r1, #16
 800374a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800374e:	f001 faa8 	bl	8004ca2 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8003752:	2200      	movs	r2, #0
 8003754:	2120      	movs	r1, #32
 8003756:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800375a:	f001 faa2 	bl	8004ca2 <HAL_GPIO_WritePin>
      break;
 800375e:	e7f0      	b.n	8003742 <BSP_RADIO_ConfigRFSwitch+0x26>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8003760:	2201      	movs	r2, #1
 8003762:	2110      	movs	r1, #16
 8003764:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003768:	f001 fa9b 	bl	8004ca2 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 800376c:	2201      	movs	r2, #1
 800376e:	2120      	movs	r1, #32
 8003770:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003774:	f001 fa95 	bl	8004ca2 <HAL_GPIO_WritePin>
      break;
 8003778:	e7e3      	b.n	8003742 <BSP_RADIO_ConfigRFSwitch+0x26>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 800377a:	2200      	movs	r2, #0
 800377c:	2110      	movs	r1, #16
 800377e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003782:	f001 fa8e 	bl	8004ca2 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8003786:	2201      	movs	r2, #1
 8003788:	2120      	movs	r1, #32
 800378a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800378e:	f001 fa88 	bl	8004ca2 <HAL_GPIO_WritePin>
      break;
 8003792:	e7d6      	b.n	8003742 <BSP_RADIO_ConfigRFSwitch+0x26>

08003794 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
  return RADIO_CONF_RFO_HP;
}
 8003794:	2002      	movs	r0, #2
 8003796:	4770      	bx	lr

08003798 <BSP_RADIO_IsTCXO>:
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
  return RADIO_CONF_TCXO_SUPPORTED;
}
 8003798:	2001      	movs	r0, #1
 800379a:	4770      	bx	lr

0800379c <BSP_RADIO_IsDCDC>:
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
  return RADIO_CONF_DCDC_SUPPORTED;
}
 800379c:	2001      	movs	r0, #1
 800379e:	4770      	bx	lr

080037a0 <SystemInit>:

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 80037a0:	4770      	bx	lr

080037a2 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80037a2:	4770      	bx	lr

080037a4 <HAL_Init>:
{
 80037a4:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037a6:	2003      	movs	r0, #3
 80037a8:	f000 fcfa 	bl	80041a0 <HAL_NVIC_SetPriorityGrouping>
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80037ac:	f002 f834 	bl	8005818 <HAL_RCC_GetHCLKFreq>
 80037b0:	4b06      	ldr	r3, [pc, #24]	; (80037cc <HAL_Init+0x28>)
 80037b2:	6018      	str	r0, [r3, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80037b4:	200f      	movs	r0, #15
 80037b6:	f7fe fab5 	bl	8001d24 <HAL_InitTick>
 80037ba:	b110      	cbz	r0, 80037c2 <HAL_Init+0x1e>
    status = HAL_ERROR;
 80037bc:	2401      	movs	r4, #1
}
 80037be:	4620      	mov	r0, r4
 80037c0:	bd10      	pop	{r4, pc}
 80037c2:	4604      	mov	r4, r0
    HAL_MspInit();
 80037c4:	f7ff ffed 	bl	80037a2 <HAL_MspInit>
 80037c8:	e7f9      	b.n	80037be <HAL_Init+0x1a>
 80037ca:	bf00      	nop
 80037cc:	20000050 	.word	0x20000050

080037d0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80037d0:	4b03      	ldr	r3, [pc, #12]	; (80037e0 <HAL_IncTick+0x10>)
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	4a03      	ldr	r2, [pc, #12]	; (80037e4 <HAL_IncTick+0x14>)
 80037d6:	6811      	ldr	r1, [r2, #0]
 80037d8:	440b      	add	r3, r1
 80037da:	6013      	str	r3, [r2, #0]
}
 80037dc:	4770      	bx	lr
 80037de:	bf00      	nop
 80037e0:	20000054 	.word	0x20000054
 80037e4:	200006b0 	.word	0x200006b0

080037e8 <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80037e8:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 80037ec:	6913      	ldr	r3, [r2, #16]
 80037ee:	f023 0302 	bic.w	r3, r3, #2
 80037f2:	6113      	str	r3, [r2, #16]
}
 80037f4:	4770      	bx	lr

080037f6 <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80037f6:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 80037fa:	6913      	ldr	r3, [r2, #16]
 80037fc:	f043 0302 	orr.w	r3, r3, #2
 8003800:	6113      	str	r3, [r2, #16]
}
 8003802:	4770      	bx	lr

08003804 <HAL_GetUIDw0>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
  return (READ_REG(*((uint32_t *)UID_BASE)));
}
 8003804:	4b01      	ldr	r3, [pc, #4]	; (800380c <HAL_GetUIDw0+0x8>)
 8003806:	f8d3 0590 	ldr.w	r0, [r3, #1424]	; 0x590
 800380a:	4770      	bx	lr
 800380c:	1fff7000 	.word	0x1fff7000

08003810 <HAL_GetUIDw1>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
}
 8003810:	4b01      	ldr	r3, [pc, #4]	; (8003818 <HAL_GetUIDw1+0x8>)
 8003812:	f8d3 0594 	ldr.w	r0, [r3, #1428]	; 0x594
 8003816:	4770      	bx	lr
 8003818:	1fff7000 	.word	0x1fff7000

0800381c <HAL_GetUIDw2>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
}
 800381c:	4b01      	ldr	r3, [pc, #4]	; (8003824 <HAL_GetUIDw2+0x8>)
 800381e:	f8d3 0598 	ldr.w	r0, [r3, #1432]	; 0x598
 8003822:	4770      	bx	lr
 8003824:	1fff7000 	.word	0x1fff7000

08003828 <HAL_DBGMCU_DisableDBGSleepMode>:
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8003828:	4a02      	ldr	r2, [pc, #8]	; (8003834 <HAL_DBGMCU_DisableDBGSleepMode+0xc>)
 800382a:	6853      	ldr	r3, [r2, #4]
 800382c:	f023 0301 	bic.w	r3, r3, #1
 8003830:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
  LL_DBGMCU_DisableDBGSleepMode();
}
 8003832:	4770      	bx	lr
 8003834:	e0042000 	.word	0xe0042000

08003838 <HAL_DBGMCU_DisableDBGStopMode>:
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8003838:	4a02      	ldr	r2, [pc, #8]	; (8003844 <HAL_DBGMCU_DisableDBGStopMode+0xc>)
 800383a:	6853      	ldr	r3, [r2, #4]
 800383c:	f023 0302 	bic.w	r3, r3, #2
 8003840:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
  LL_DBGMCU_DisableDBGStopMode();
}
 8003842:	4770      	bx	lr
 8003844:	e0042000 	.word	0xe0042000

08003848 <HAL_DBGMCU_DisableDBGStandbyMode>:
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8003848:	4a02      	ldr	r2, [pc, #8]	; (8003854 <HAL_DBGMCU_DisableDBGStandbyMode+0xc>)
 800384a:	6853      	ldr	r3, [r2, #4]
 800384c:	f023 0304 	bic.w	r3, r3, #4
 8003850:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
  LL_DBGMCU_DisableDBGStandbyMode();
}
 8003852:	4770      	bx	lr
 8003854:	e0042000 	.word	0xe0042000

08003858 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003858:	b570      	push	{r4, r5, r6, lr}
 800385a:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0UL;
  uint32_t tmpCFGR2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800385c:	2300      	movs	r3, #0
 800385e:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8003860:	2800      	cmp	r0, #0
 8003862:	f000 8128 	beq.w	8003ab6 <HAL_ADC_Init+0x25e>
 8003866:	4604      	mov	r4, r0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003868:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800386a:	b1bb      	cbz	r3, 800389c <HAL_ADC_Init+0x44>

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800386c:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800386e:	6893      	ldr	r3, [r2, #8]
 8003870:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003874:	d11f      	bne.n	80038b6 <HAL_ADC_Init+0x5e>
  MODIFY_REG(ADCx->CR,
 8003876:	6893      	ldr	r3, [r2, #8]
 8003878:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800387c:	f023 0317 	bic.w	r3, r3, #23
 8003880:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003884:	6093      	str	r3, [r2, #8]
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003886:	4b8d      	ldr	r3, [pc, #564]	; (8003abc <HAL_ADC_Init+0x264>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	099b      	lsrs	r3, r3, #6
 800388c:	4a8c      	ldr	r2, [pc, #560]	; (8003ac0 <HAL_ADC_Init+0x268>)
 800388e:	fba2 2303 	umull	r2, r3, r2, r3
 8003892:	099b      	lsrs	r3, r3, #6
 8003894:	3301      	adds	r3, #1
 8003896:	005b      	lsls	r3, r3, #1
 8003898:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800389a:	e009      	b.n	80038b0 <HAL_ADC_Init+0x58>
    HAL_ADC_MspInit(hadc);
 800389c:	f7fd fe7c 	bl	8001598 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80038a0:	2300      	movs	r3, #0
 80038a2:	65e3      	str	r3, [r4, #92]	; 0x5c
    hadc->Lock = HAL_UNLOCKED;
 80038a4:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 80038a8:	e7e0      	b.n	800386c <HAL_ADC_Init+0x14>
    {
      wait_loop_index--;
 80038aa:	9b01      	ldr	r3, [sp, #4]
 80038ac:	3b01      	subs	r3, #1
 80038ae:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80038b0:	9b01      	ldr	r3, [sp, #4]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d1f9      	bne.n	80038aa <HAL_ADC_Init+0x52>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80038b6:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80038b8:	6893      	ldr	r3, [r2, #8]
 80038ba:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80038be:	d14b      	bne.n	8003958 <HAL_ADC_Init+0x100>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038c0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80038c2:	f043 0310 	orr.w	r3, r3, #16
 80038c6:	65a3      	str	r3, [r4, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038c8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80038ca:	f043 0301 	orr.w	r3, r3, #1
 80038ce:	65e3      	str	r3, [r4, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80038d0:	2001      	movs	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80038d2:	6893      	ldr	r3, [r2, #8]
 80038d4:	f013 0304 	ands.w	r3, r3, #4
 80038d8:	d000      	beq.n	80038dc <HAL_ADC_Init+0x84>
 80038da:	2301      	movs	r3, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80038dc:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80038de:	f011 0f10 	tst.w	r1, #16
 80038e2:	f040 80e1 	bne.w	8003aa8 <HAL_ADC_Init+0x250>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	f040 80de 	bne.w	8003aa8 <HAL_ADC_Init+0x250>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80038ec:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80038ee:	f421 7181 	bic.w	r1, r1, #258	; 0x102
 80038f2:	f041 0102 	orr.w	r1, r1, #2
 80038f6:	65a1      	str	r1, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80038f8:	6891      	ldr	r1, [r2, #8]
 80038fa:	f011 0f01 	tst.w	r1, #1
 80038fe:	d138      	bne.n	8003972 <HAL_ADC_Init+0x11a>
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003900:	68d1      	ldr	r1, [r2, #12]
 8003902:	f021 0118 	bic.w	r1, r1, #24
 8003906:	68a5      	ldr	r5, [r4, #8]
 8003908:	4329      	orrs	r1, r5
 800390a:	60d1      	str	r1, [r2, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800390c:	6862      	ldr	r2, [r4, #4]
 800390e:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8003912:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003914:	ea42 0c01 	orr.w	ip, r2, r1
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8003918:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
 800391c:	2901      	cmp	r1, #1
 800391e:	d01d      	beq.n	800395c <HAL_ADC_Init+0x104>
                     hadc->Init.Oversampling.RightBitShift |
                     hadc->Init.Oversampling.TriggeredMode
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8003920:	6821      	ldr	r1, [r4, #0]
 8003922:	690d      	ldr	r5, [r1, #16]
 8003924:	4a67      	ldr	r2, [pc, #412]	; (8003ac4 <HAL_ADC_Init+0x26c>)
 8003926:	402a      	ands	r2, r5
 8003928:	ea42 020c 	orr.w	r2, r2, ip
 800392c:	610a      	str	r2, [r1, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800392e:	6862      	ldr	r2, [r4, #4]
 8003930:	f1b2 4f40 	cmp.w	r2, #3221225472	; 0xc0000000
 8003934:	d01e      	beq.n	8003974 <HAL_ADC_Init+0x11c>
 8003936:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800393a:	d01b      	beq.n	8003974 <HAL_ADC_Init+0x11c>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800393c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8003940:	d018      	beq.n	8003974 <HAL_ADC_Init+0x11c>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8003942:	4d61      	ldr	r5, [pc, #388]	; (8003ac8 <HAL_ADC_Init+0x270>)
 8003944:	f8d5 1708 	ldr.w	r1, [r5, #1800]	; 0x708
 8003948:	f421 1170 	bic.w	r1, r1, #3932160	; 0x3c0000
 800394c:	f402 1270 	and.w	r2, r2, #3932160	; 0x3c0000
 8003950:	430a      	orrs	r2, r1
 8003952:	f8c5 2708 	str.w	r2, [r5, #1800]	; 0x708
 8003956:	e00d      	b.n	8003974 <HAL_ADC_Init+0x11c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003958:	2000      	movs	r0, #0
 800395a:	e7ba      	b.n	80038d2 <HAL_ADC_Init+0x7a>
                     hadc->Init.Oversampling.Ratio         |
 800395c:	6c21      	ldr	r1, [r4, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800395e:	430a      	orrs	r2, r1
                     hadc->Init.Oversampling.RightBitShift |
 8003960:	6c61      	ldr	r1, [r4, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8003962:	430a      	orrs	r2, r1
                     hadc->Init.Oversampling.TriggeredMode
 8003964:	6ca1      	ldr	r1, [r4, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8003966:	430a      	orrs	r2, r1
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8003968:	ea4c 0202 	orr.w	r2, ip, r2
 800396c:	f042 0c01 	orr.w	ip, r2, #1
 8003970:	e7d6      	b.n	8003920 <HAL_ADC_Init+0xc8>
  uint32_t tmpCFGR2 = 0UL;
 8003972:	469c      	mov	ip, r3
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003974:	7e21      	ldrb	r1, [r4, #24]
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003976:	7e62      	ldrb	r2, [r4, #25]
 8003978:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800397a:	ea42 3281 	orr.w	r2, r2, r1, lsl #14
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800397e:	7ea5      	ldrb	r5, [r4, #26]
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003980:	ea42 3245 	orr.w	r2, r2, r5, lsl #13
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003984:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003986:	b109      	cbz	r1, 800398c <HAL_ADC_Init+0x134>
 8003988:	f44f 5180 	mov.w	r1, #4096	; 0x1000
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800398c:	430a      	orrs	r2, r1
                 hadc->Init.DataAlign                                           |
 800398e:	68e1      	ldr	r1, [r4, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003990:	430a      	orrs	r2, r1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003992:	6921      	ldr	r1, [r4, #16]
 8003994:	2900      	cmp	r1, #0
 8003996:	db49      	blt.n	8003a2c <HAL_ADC_Init+0x1d4>
 8003998:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
                 hadc->Init.DataAlign                                           |
 800399c:	430a      	orrs	r2, r1
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800399e:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80039a2:	ea42 0241 	orr.w	r2, r2, r1, lsl #1

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80039a6:	f894 1020 	ldrb.w	r1, [r4, #32]
 80039aa:	2901      	cmp	r1, #1
 80039ac:	d041      	beq.n	8003a32 <HAL_ADC_Init+0x1da>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80039ae:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80039b0:	b121      	cbz	r1, 80039bc <HAL_ADC_Init+0x164>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80039b2:	f401 71e0 	and.w	r1, r1, #448	; 0x1c0
                   hadc->Init.ExternalTrigConvEdge);
 80039b6:	6aa5      	ldr	r5, [r4, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80039b8:	4329      	orrs	r1, r5
 80039ba:	430a      	orrs	r2, r1
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 80039bc:	6825      	ldr	r5, [r4, #0]
 80039be:	68e9      	ldr	r1, [r5, #12]
 80039c0:	f421 31fe 	bic.w	r1, r1, #130048	; 0x1fc00
 80039c4:	f421 71f3 	bic.w	r1, r1, #486	; 0x1e6
 80039c8:	4311      	orrs	r1, r2
 80039ca:	60e9      	str	r1, [r5, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 80039cc:	6825      	ldr	r5, [r4, #0]
 80039ce:	692e      	ldr	r6, [r5, #16]
 80039d0:	493e      	ldr	r1, [pc, #248]	; (8003acc <HAL_ADC_Init+0x274>)
 80039d2:	4031      	ands	r1, r6
 80039d4:	ea41 010c 	orr.w	r1, r1, ip
 80039d8:	6129      	str	r1, [r5, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80039da:	6826      	ldr	r6, [r4, #0]
 80039dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
  MODIFY_REG(ADCx->SMPR,
 80039de:	6975      	ldr	r5, [r6, #20]
 80039e0:	f025 0c07 	bic.w	ip, r5, #7
 80039e4:	ea41 010c 	orr.w	r1, r1, ip
 80039e8:	6171      	str	r1, [r6, #20]
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80039ea:	6825      	ldr	r5, [r4, #0]
 80039ec:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80039ee:	6969      	ldr	r1, [r5, #20]
 80039f0:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 80039f4:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
 80039f8:	6169      	str	r1, [r5, #20]
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80039fa:	6921      	ldr	r1, [r4, #16]
 80039fc:	bb31      	cbnz	r1, 8003a4c <HAL_ADC_Init+0x1f4>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80039fe:	6821      	ldr	r1, [r4, #0]
 8003a00:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8003a02:	f063 030f 	orn	r3, r3, #15
 8003a06:	628b      	str	r3, [r1, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8003a08:	6823      	ldr	r3, [r4, #0]
 8003a0a:	68d9      	ldr	r1, [r3, #12]
 8003a0c:	4b30      	ldr	r3, [pc, #192]	; (8003ad0 <HAL_ADC_Init+0x278>)
 8003a0e:	400b      	ands	r3, r1
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d040      	beq.n	8003a96 <HAL_ADC_Init+0x23e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003a14:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003a16:	f023 0312 	bic.w	r3, r3, #18
 8003a1a:	f043 0310 	orr.w	r3, r3, #16
 8003a1e:	65a3      	str	r3, [r4, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a20:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003a22:	f043 0301 	orr.w	r3, r3, #1
 8003a26:	65e3      	str	r3, [r4, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8003a28:	2001      	movs	r0, #1
 8003a2a:	e042      	b.n	8003ab2 <HAL_ADC_Init+0x25a>
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003a2c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8003a30:	e7b4      	b.n	800399c <HAL_ADC_Init+0x144>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003a32:	b915      	cbnz	r5, 8003a3a <HAL_ADC_Init+0x1e2>
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003a34:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003a38:	e7b9      	b.n	80039ae <HAL_ADC_Init+0x156>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a3a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8003a3c:	f041 0120 	orr.w	r1, r1, #32
 8003a40:	65a1      	str	r1, [r4, #88]	; 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a42:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8003a44:	f041 0101 	orr.w	r1, r1, #1
 8003a48:	65e1      	str	r1, [r4, #92]	; 0x5c
 8003a4a:	e7b0      	b.n	80039ae <HAL_ADC_Init+0x156>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003a4c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8003a50:	d1da      	bne.n	8003a08 <HAL_ADC_Init+0x1b0>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8003a52:	2b07      	cmp	r3, #7
 8003a54:	d808      	bhi.n	8003a68 <HAL_ADC_Init+0x210>
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8003a56:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8003a58:	009d      	lsls	r5, r3, #2
 8003a5a:	40e9      	lsrs	r1, r5
 8003a5c:	f001 010f 	and.w	r1, r1, #15
 8003a60:	290f      	cmp	r1, #15
 8003a62:	d001      	beq.n	8003a68 <HAL_ADC_Init+0x210>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8003a64:	3301      	adds	r3, #1
 8003a66:	e7f4      	b.n	8003a52 <HAL_ADC_Init+0x1fa>
      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d00e      	beq.n	8003a8a <HAL_ADC_Init+0x232>
        MODIFY_REG(hadc->Instance->CHSELR,
 8003a6c:	6825      	ldr	r5, [r4, #0]
 8003a6e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003a70:	69e3      	ldr	r3, [r4, #28]
 8003a72:	3b01      	subs	r3, #1
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	f003 031c 	and.w	r3, r3, #28
 8003a7a:	f06f 010f 	mvn.w	r1, #15
 8003a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a82:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8003a84:	430b      	orrs	r3, r1
 8003a86:	62ab      	str	r3, [r5, #40]	; 0x28
 8003a88:	e7be      	b.n	8003a08 <HAL_ADC_Init+0x1b0>
        SET_BIT(hadc->Instance->CHSELR,
 8003a8a:	6821      	ldr	r1, [r4, #0]
 8003a8c:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8003a8e:	f063 030f 	orn	r3, r3, #15
 8003a92:	628b      	str	r3, [r1, #40]	; 0x28
 8003a94:	e7b8      	b.n	8003a08 <HAL_ADC_Init+0x1b0>
      ADC_CLEAR_ERRORCODE(hadc);
 8003a96:	2300      	movs	r3, #0
 8003a98:	65e3      	str	r3, [r4, #92]	; 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 8003a9a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003a9c:	f023 0303 	bic.w	r3, r3, #3
 8003aa0:	f043 0301 	orr.w	r3, r3, #1
 8003aa4:	65a3      	str	r3, [r4, #88]	; 0x58
 8003aa6:	e004      	b.n	8003ab2 <HAL_ADC_Init+0x25a>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003aa8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003aaa:	f043 0310 	orr.w	r3, r3, #16
 8003aae:	65a3      	str	r3, [r4, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003ab0:	2001      	movs	r0, #1
  }

  return tmp_hal_status;
}
 8003ab2:	b002      	add	sp, #8
 8003ab4:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8003ab6:	2001      	movs	r0, #1
 8003ab8:	e7fb      	b.n	8003ab2 <HAL_ADC_Init+0x25a>
 8003aba:	bf00      	nop
 8003abc:	20000050 	.word	0x20000050
 8003ac0:	053e2d63 	.word	0x053e2d63
 8003ac4:	1ffffc02 	.word	0x1ffffc02
 8003ac8:	40012000 	.word	0x40012000
 8003acc:	dffffc02 	.word	0xdffffc02
 8003ad0:	833fffe7 	.word	0x833fffe7

08003ad4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ad6:	4604      	mov	r4, r0
 8003ad8:	460d      	mov	r5, r1

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003ada:	6946      	ldr	r6, [r0, #20]
 8003adc:	2e08      	cmp	r6, #8
 8003ade:	d005      	beq.n	8003aec <HAL_ADC_PollForConversion+0x18>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8003ae0:	6803      	ldr	r3, [r0, #0]
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	f013 0f01 	tst.w	r3, #1
 8003ae8:	d11e      	bne.n	8003b28 <HAL_ADC_PollForConversion+0x54>

      return HAL_ERROR;
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8003aea:	2604      	movs	r6, #4
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003aec:	f7fe f91c 	bl	8001d28 <HAL_GetTick>
 8003af0:	4607      	mov	r7, r0

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003af2:	6823      	ldr	r3, [r4, #0]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	4232      	tst	r2, r6
 8003af8:	d11c      	bne.n	8003b34 <HAL_ADC_PollForConversion+0x60>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003afa:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003afe:	d0f8      	beq.n	8003af2 <HAL_ADC_PollForConversion+0x1e>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003b00:	f7fe f912 	bl	8001d28 <HAL_GetTick>
 8003b04:	1bc3      	subs	r3, r0, r7
 8003b06:	42ab      	cmp	r3, r5
 8003b08:	d801      	bhi.n	8003b0e <HAL_ADC_PollForConversion+0x3a>
 8003b0a:	2d00      	cmp	r5, #0
 8003b0c:	d1f1      	bne.n	8003af2 <HAL_ADC_PollForConversion+0x1e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003b0e:	6823      	ldr	r3, [r4, #0]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4233      	tst	r3, r6
 8003b14:	d1ed      	bne.n	8003af2 <HAL_ADC_PollForConversion+0x1e>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003b16:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003b18:	f043 0304 	orr.w	r3, r3, #4
 8003b1c:	65a3      	str	r3, [r4, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 8003b1e:	2300      	movs	r3, #0
 8003b20:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54

          return HAL_TIMEOUT;
 8003b24:	2003      	movs	r0, #3
 8003b26:	e028      	b.n	8003b7a <HAL_ADC_PollForConversion+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b28:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8003b2a:	f043 0320 	orr.w	r3, r3, #32
 8003b2e:	6583      	str	r3, [r0, #88]	; 0x58
      return HAL_ERROR;
 8003b30:	2001      	movs	r0, #1
 8003b32:	e022      	b.n	8003b7a <HAL_ADC_PollForConversion+0xa6>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003b34:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8003b36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b3a:	65a2      	str	r2, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8003b3c:	68da      	ldr	r2, [r3, #12]
 8003b3e:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8003b42:	d115      	bne.n	8003b70 <HAL_ADC_PollForConversion+0x9c>

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003b44:	7ea2      	ldrb	r2, [r4, #26]
 8003b46:	b99a      	cbnz	r2, 8003b70 <HAL_ADC_PollForConversion+0x9c>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	f012 0f08 	tst.w	r2, #8
 8003b4e:	d00f      	beq.n	8003b70 <HAL_ADC_PollForConversion+0x9c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003b50:	689a      	ldr	r2, [r3, #8]
 8003b52:	f012 0f04 	tst.w	r2, #4
 8003b56:	d111      	bne.n	8003b7c <HAL_ADC_PollForConversion+0xa8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003b58:	685a      	ldr	r2, [r3, #4]
 8003b5a:	f022 020c 	bic.w	r2, r2, #12
 8003b5e:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8003b60:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003b62:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b66:	f023 0301 	bic.w	r3, r3, #1
 8003b6a:	f043 0301 	orr.w	r3, r3, #1
 8003b6e:	65a3      	str	r3, [r4, #88]	; 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8003b70:	7e20      	ldrb	r0, [r4, #24]
 8003b72:	b960      	cbnz	r0, 8003b8e <HAL_ADC_PollForConversion+0xba>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003b74:	6823      	ldr	r3, [r4, #0]
 8003b76:	220c      	movs	r2, #12
 8003b78:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 8003b7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b7c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003b7e:	f043 0320 	orr.w	r3, r3, #32
 8003b82:	65a3      	str	r3, [r4, #88]	; 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b84:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003b86:	f043 0301 	orr.w	r3, r3, #1
 8003b8a:	65e3      	str	r3, [r4, #92]	; 0x5c
 8003b8c:	e7f0      	b.n	8003b70 <HAL_ADC_PollForConversion+0x9c>
  return HAL_OK;
 8003b8e:	2000      	movs	r0, #0
 8003b90:	e7f3      	b.n	8003b7a <HAL_ADC_PollForConversion+0xa6>

08003b92 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003b92:	6803      	ldr	r3, [r0, #0]
 8003b94:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8003b96:	4770      	bx	lr

08003b98 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8003b98:	b470      	push	{r4, r5, r6}
 8003b9a:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	9201      	str	r2, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003ba0:	6904      	ldr	r4, [r0, #16]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8003ba2:	f890 2054 	ldrb.w	r2, [r0, #84]	; 0x54
 8003ba6:	2a01      	cmp	r2, #1
 8003ba8:	f000 8103 	beq.w	8003db2 <HAL_ADC_ConfigChannel+0x21a>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003bb4:	6802      	ldr	r2, [r0, #0]
 8003bb6:	6890      	ldr	r0, [r2, #8]
 8003bb8:	f010 0f04 	tst.w	r0, #4
 8003bbc:	d00a      	beq.n	8003bd4 <HAL_ADC_ConfigChannel+0x3c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003bbe:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003bc0:	f042 0220 	orr.w	r2, r2, #32
 8003bc4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003bc6:	2001      	movs	r0, #1
  }

  __HAL_UNLOCK(hadc);
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
}
 8003bce:	b003      	add	sp, #12
 8003bd0:	bc70      	pop	{r4, r5, r6}
 8003bd2:	4770      	bx	lr
    if (pConfig->Rank != ADC_RANK_NONE)
 8003bd4:	6848      	ldr	r0, [r1, #4]
 8003bd6:	2802      	cmp	r0, #2
 8003bd8:	f000 809c 	beq.w	8003d14 <HAL_ADC_ConfigChannel+0x17c>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003bdc:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 8003be0:	d027      	beq.n	8003c32 <HAL_ADC_ConfigChannel+0x9a>
 8003be2:	4d75      	ldr	r5, [pc, #468]	; (8003db8 <HAL_ADC_ConfigChannel+0x220>)
 8003be4:	42ac      	cmp	r4, r5
 8003be6:	d024      	beq.n	8003c32 <HAL_ADC_ConfigChannel+0x9a>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003be8:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8003bea:	f000 001f 	and.w	r0, r0, #31
 8003bee:	250f      	movs	r5, #15
 8003bf0:	4085      	lsls	r5, r0
 8003bf2:	ea24 0505 	bic.w	r5, r4, r5
 8003bf6:	680c      	ldr	r4, [r1, #0]
 8003bf8:	f3c4 0611 	ubfx	r6, r4, #0, #18
 8003bfc:	2e00      	cmp	r6, #0
 8003bfe:	d131      	bne.n	8003c64 <HAL_ADC_ConfigChannel+0xcc>
 8003c00:	f3c4 6484 	ubfx	r4, r4, #26, #5
 8003c04:	4084      	lsls	r4, r0
 8003c06:	432c      	orrs	r4, r5
 8003c08:	661c      	str	r4, [r3, #96]	; 0x60
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003c0a:	684c      	ldr	r4, [r1, #4]
 8003c0c:	08a0      	lsrs	r0, r4, #2
 8003c0e:	3001      	adds	r0, #1
 8003c10:	69dd      	ldr	r5, [r3, #28]
 8003c12:	42a8      	cmp	r0, r5
 8003c14:	d813      	bhi.n	8003c3e <HAL_ADC_ConfigChannel+0xa6>
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003c16:	680d      	ldr	r5, [r1, #0]
  MODIFY_REG(ADCx->CHSELR,
 8003c18:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8003c1a:	f004 041f 	and.w	r4, r4, #31
 8003c1e:	260f      	movs	r6, #15
 8003c20:	40a6      	lsls	r6, r4
 8003c22:	ea20 0006 	bic.w	r0, r0, r6
 8003c26:	f3c5 6583 	ubfx	r5, r5, #26, #4
 8003c2a:	40a5      	lsls	r5, r4
 8003c2c:	4328      	orrs	r0, r5
 8003c2e:	6290      	str	r0, [r2, #40]	; 0x28
}
 8003c30:	e005      	b.n	8003c3e <HAL_ADC_ConfigChannel+0xa6>
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8003c32:	680c      	ldr	r4, [r1, #0]
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003c34:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8003c36:	f3c4 0411 	ubfx	r4, r4, #0, #18
 8003c3a:	4320      	orrs	r0, r4
 8003c3c:	6290      	str	r0, [r2, #40]	; 0x28
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003c3e:	681c      	ldr	r4, [r3, #0]
 8003c40:	680d      	ldr	r5, [r1, #0]
 8003c42:	688a      	ldr	r2, [r1, #8]
  MODIFY_REG(ADCx->SMPR,
 8003c44:	6960      	ldr	r0, [r4, #20]
 8003c46:	ea20 2005 	bic.w	r0, r0, r5, lsl #8
 8003c4a:	ea02 2205 	and.w	r2, r2, r5, lsl #8
 8003c4e:	f022 427c 	bic.w	r2, r2, #4227858432	; 0xfc000000
 8003c52:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003c56:	4302      	orrs	r2, r0
 8003c58:	6162      	str	r2, [r4, #20]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003c5a:	680a      	ldr	r2, [r1, #0]
 8003c5c:	2a00      	cmp	r2, #0
 8003c5e:	db09      	blt.n	8003c74 <HAL_ADC_ConfigChannel+0xdc>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c60:	2000      	movs	r0, #0
 8003c62:	e7b1      	b.n	8003bc8 <HAL_ADC_ConfigChannel+0x30>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c64:	fa94 f4a4 	rbit	r4, r4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003c68:	b114      	cbz	r4, 8003c70 <HAL_ADC_ConfigChannel+0xd8>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8003c6a:	fab4 f484 	clz	r4, r4
 8003c6e:	e7c9      	b.n	8003c04 <HAL_ADC_ConfigChannel+0x6c>
    return 32U;
 8003c70:	2420      	movs	r4, #32
 8003c72:	e7c7      	b.n	8003c04 <HAL_ADC_ConfigChannel+0x6c>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003c74:	4951      	ldr	r1, [pc, #324]	; (8003dbc <HAL_ADC_ConfigChannel+0x224>)
 8003c76:	f8d1 0708 	ldr.w	r0, [r1, #1800]	; 0x708
 8003c7a:	f000 71e0 	and.w	r1, r0, #29360128	; 0x1c00000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003c7e:	4c50      	ldr	r4, [pc, #320]	; (8003dc0 <HAL_ADC_ConfigChannel+0x228>)
 8003c80:	42a2      	cmp	r2, r4
 8003c82:	d007      	beq.n	8003c94 <HAL_ADC_ConfigChannel+0xfc>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003c84:	4c4f      	ldr	r4, [pc, #316]	; (8003dc4 <HAL_ADC_ConfigChannel+0x22c>)
 8003c86:	42a2      	cmp	r2, r4
 8003c88:	d026      	beq.n	8003cd8 <HAL_ADC_ConfigChannel+0x140>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003c8a:	4c4f      	ldr	r4, [pc, #316]	; (8003dc8 <HAL_ADC_ConfigChannel+0x230>)
 8003c8c:	42a2      	cmp	r2, r4
 8003c8e:	d032      	beq.n	8003cf6 <HAL_ADC_ConfigChannel+0x15e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c90:	2000      	movs	r0, #0
 8003c92:	e799      	b.n	8003bc8 <HAL_ADC_ConfigChannel+0x30>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003c94:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8003c98:	d1f4      	bne.n	8003c84 <HAL_ADC_ConfigChannel+0xec>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c9a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003c9e:	4847      	ldr	r0, [pc, #284]	; (8003dbc <HAL_ADC_ConfigChannel+0x224>)
 8003ca0:	f8d0 2708 	ldr.w	r2, [r0, #1800]	; 0x708
 8003ca4:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8003ca8:	4311      	orrs	r1, r2
 8003caa:	f8c0 1708 	str.w	r1, [r0, #1800]	; 0x708
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003cae:	4a47      	ldr	r2, [pc, #284]	; (8003dcc <HAL_ADC_ConfigChannel+0x234>)
 8003cb0:	6812      	ldr	r2, [r2, #0]
 8003cb2:	0992      	lsrs	r2, r2, #6
 8003cb4:	4946      	ldr	r1, [pc, #280]	; (8003dd0 <HAL_ADC_ConfigChannel+0x238>)
 8003cb6:	fba1 1202 	umull	r1, r2, r1, r2
 8003cba:	0992      	lsrs	r2, r2, #6
 8003cbc:	3201      	adds	r2, #1
 8003cbe:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003cc2:	0092      	lsls	r2, r2, #2
 8003cc4:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8003cc6:	e002      	b.n	8003cce <HAL_ADC_ConfigChannel+0x136>
            wait_loop_index--;
 8003cc8:	9a01      	ldr	r2, [sp, #4]
 8003cca:	3a01      	subs	r2, #1
 8003ccc:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8003cce:	9a01      	ldr	r2, [sp, #4]
 8003cd0:	2a00      	cmp	r2, #0
 8003cd2:	d1f9      	bne.n	8003cc8 <HAL_ADC_ConfigChannel+0x130>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003cd4:	2000      	movs	r0, #0
 8003cd6:	e777      	b.n	8003bc8 <HAL_ADC_ConfigChannel+0x30>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003cd8:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 8003cdc:	d1d5      	bne.n	8003c8a <HAL_ADC_ConfigChannel+0xf2>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003cde:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 8003ce2:	4836      	ldr	r0, [pc, #216]	; (8003dbc <HAL_ADC_ConfigChannel+0x224>)
 8003ce4:	f8d0 2708 	ldr.w	r2, [r0, #1800]	; 0x708
 8003ce8:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8003cec:	4311      	orrs	r1, r2
 8003cee:	f8c0 1708 	str.w	r1, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003cf2:	2000      	movs	r0, #0
}
 8003cf4:	e768      	b.n	8003bc8 <HAL_ADC_ConfigChannel+0x30>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003cf6:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 8003cfa:	d158      	bne.n	8003dae <HAL_ADC_ConfigChannel+0x216>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003cfc:	f441 0280 	orr.w	r2, r1, #4194304	; 0x400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003d00:	482e      	ldr	r0, [pc, #184]	; (8003dbc <HAL_ADC_ConfigChannel+0x224>)
 8003d02:	f8d0 1708 	ldr.w	r1, [r0, #1800]	; 0x708
 8003d06:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8003d0a:	430a      	orrs	r2, r1
 8003d0c:	f8c0 2708 	str.w	r2, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d10:	2000      	movs	r0, #0
}
 8003d12:	e759      	b.n	8003bc8 <HAL_ADC_ConfigChannel+0x30>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003d14:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 8003d18:	d002      	beq.n	8003d20 <HAL_ADC_ConfigChannel+0x188>
 8003d1a:	4827      	ldr	r0, [pc, #156]	; (8003db8 <HAL_ADC_ConfigChannel+0x220>)
 8003d1c:	4284      	cmp	r4, r0
 8003d1e:	d106      	bne.n	8003d2e <HAL_ADC_ConfigChannel+0x196>
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8003d20:	680c      	ldr	r4, [r1, #0]
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003d22:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8003d24:	f3c4 0411 	ubfx	r4, r4, #0, #18
 8003d28:	ea20 0004 	bic.w	r0, r0, r4
 8003d2c:	6290      	str	r0, [r2, #40]	; 0x28
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003d2e:	680a      	ldr	r2, [r1, #0]
 8003d30:	2a00      	cmp	r2, #0
 8003d32:	db01      	blt.n	8003d38 <HAL_ADC_ConfigChannel+0x1a0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d34:	2000      	movs	r0, #0
 8003d36:	e747      	b.n	8003bc8 <HAL_ADC_ConfigChannel+0x30>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003d38:	4920      	ldr	r1, [pc, #128]	; (8003dbc <HAL_ADC_ConfigChannel+0x224>)
 8003d3a:	f8d1 1708 	ldr.w	r1, [r1, #1800]	; 0x708
        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003d3e:	4820      	ldr	r0, [pc, #128]	; (8003dc0 <HAL_ADC_ConfigChannel+0x228>)
 8003d40:	4282      	cmp	r2, r0
 8003d42:	d007      	beq.n	8003d54 <HAL_ADC_ConfigChannel+0x1bc>
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8003d44:	481f      	ldr	r0, [pc, #124]	; (8003dc4 <HAL_ADC_ConfigChannel+0x22c>)
 8003d46:	4282      	cmp	r2, r0
 8003d48:	d013      	beq.n	8003d72 <HAL_ADC_ConfigChannel+0x1da>
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003d4a:	481f      	ldr	r0, [pc, #124]	; (8003dc8 <HAL_ADC_ConfigChannel+0x230>)
 8003d4c:	4282      	cmp	r2, r0
 8003d4e:	d01f      	beq.n	8003d90 <HAL_ADC_ConfigChannel+0x1f8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d50:	2000      	movs	r0, #0
 8003d52:	e739      	b.n	8003bc8 <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003d54:	f001 71a0 	and.w	r1, r1, #20971520	; 0x1400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003d58:	f100 4010 	add.w	r0, r0, #2415919104	; 0x90000000
 8003d5c:	f500 3088 	add.w	r0, r0, #69632	; 0x11000
 8003d60:	f8d0 2708 	ldr.w	r2, [r0, #1800]	; 0x708
 8003d64:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8003d68:	4311      	orrs	r1, r2
 8003d6a:	f8c0 1708 	str.w	r1, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d6e:	2000      	movs	r0, #0
}
 8003d70:	e72a      	b.n	8003bc8 <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003d72:	f401 0240 	and.w	r2, r1, #12582912	; 0xc00000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003d76:	f100 4008 	add.w	r0, r0, #2281701376	; 0x88000000
 8003d7a:	f500 4060 	add.w	r0, r0, #57344	; 0xe000
 8003d7e:	f8d0 1708 	ldr.w	r1, [r0, #1800]	; 0x708
 8003d82:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8003d86:	430a      	orrs	r2, r1
 8003d88:	f8c0 2708 	str.w	r2, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d8c:	2000      	movs	r0, #0
}
 8003d8e:	e71b      	b.n	8003bc8 <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003d90:	f001 72c0 	and.w	r2, r1, #25165824	; 0x1800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003d94:	f100 400c 	add.w	r0, r0, #2348810240	; 0x8c000000
 8003d98:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 8003d9c:	f8d0 1708 	ldr.w	r1, [r0, #1800]	; 0x708
 8003da0:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8003da4:	430a      	orrs	r2, r1
 8003da6:	f8c0 2708 	str.w	r2, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003daa:	2000      	movs	r0, #0
}
 8003dac:	e70c      	b.n	8003bc8 <HAL_ADC_ConfigChannel+0x30>
 8003dae:	2000      	movs	r0, #0
 8003db0:	e70a      	b.n	8003bc8 <HAL_ADC_ConfigChannel+0x30>
  __HAL_LOCK(hadc);
 8003db2:	2002      	movs	r0, #2
 8003db4:	e70b      	b.n	8003bce <HAL_ADC_ConfigChannel+0x36>
 8003db6:	bf00      	nop
 8003db8:	80000004 	.word	0x80000004
 8003dbc:	40012000 	.word	0x40012000
 8003dc0:	b0001000 	.word	0xb0001000
 8003dc4:	b8004000 	.word	0xb8004000
 8003dc8:	b4002000 	.word	0xb4002000
 8003dcc:	20000050 	.word	0x20000050
 8003dd0:	053e2d63 	.word	0x053e2d63

08003dd4 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8003dd4:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003dd6:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003dd8:	689a      	ldr	r2, [r3, #8]
 8003dda:	f012 0f04 	tst.w	r2, #4
 8003dde:	d02a      	beq.n	8003e36 <ADC_ConversionStop+0x62>
 8003de0:	4604      	mov	r4, r0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003de2:	689a      	ldr	r2, [r3, #8]
 8003de4:	f012 0f02 	tst.w	r2, #2
 8003de8:	d107      	bne.n	8003dfa <ADC_ConversionStop+0x26>
  MODIFY_REG(ADCx->CR,
 8003dea:	689a      	ldr	r2, [r3, #8]
 8003dec:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003df0:	f022 0217 	bic.w	r2, r2, #23
 8003df4:	f042 0210 	orr.w	r2, r2, #16
 8003df8:	609a      	str	r2, [r3, #8]
      LL_ADC_REG_StopConversion(hadc->Instance);
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003dfa:	f7fd ff95 	bl	8001d28 <HAL_GetTick>
 8003dfe:	4605      	mov	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003e00:	6823      	ldr	r3, [r4, #0]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	f013 0f04 	tst.w	r3, #4
 8003e08:	d013      	beq.n	8003e32 <ADC_ConversionStop+0x5e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003e0a:	f7fd ff8d 	bl	8001d28 <HAL_GetTick>
 8003e0e:	1b43      	subs	r3, r0, r5
 8003e10:	2b02      	cmp	r3, #2
 8003e12:	d9f5      	bls.n	8003e00 <ADC_ConversionStop+0x2c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003e14:	6823      	ldr	r3, [r4, #0]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	f013 0f04 	tst.w	r3, #4
 8003e1c:	d0f0      	beq.n	8003e00 <ADC_ConversionStop+0x2c>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e1e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003e20:	f043 0310 	orr.w	r3, r3, #16
 8003e24:	65a3      	str	r3, [r4, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e26:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003e28:	f043 0301 	orr.w	r3, r3, #1
 8003e2c:	65e3      	str	r3, [r4, #92]	; 0x5c

          return HAL_ERROR;
 8003e2e:	2001      	movs	r0, #1
 8003e30:	e002      	b.n	8003e38 <ADC_ConversionStop+0x64>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003e32:	2000      	movs	r0, #0
 8003e34:	e000      	b.n	8003e38 <ADC_ConversionStop+0x64>
 8003e36:	2000      	movs	r0, #0
}
 8003e38:	bd38      	pop	{r3, r4, r5, pc}
	...

08003e3c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003e3c:	b530      	push	{r4, r5, lr}
 8003e3e:	b083      	sub	sp, #12
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003e40:	2300      	movs	r3, #0
 8003e42:	9301      	str	r3, [sp, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e44:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003e46:	689a      	ldr	r2, [r3, #8]
 8003e48:	f012 0f01 	tst.w	r2, #1
 8003e4c:	d15b      	bne.n	8003f06 <ADC_Enable+0xca>
 8003e4e:	4604      	mov	r4, r0
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003e50:	6899      	ldr	r1, [r3, #8]
 8003e52:	4a2e      	ldr	r2, [pc, #184]	; (8003f0c <ADC_Enable+0xd0>)
 8003e54:	4211      	tst	r1, r2
 8003e56:	d117      	bne.n	8003e88 <ADC_Enable+0x4c>
  MODIFY_REG(ADCx->CR,
 8003e58:	689a      	ldr	r2, [r3, #8]
 8003e5a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003e5e:	f022 0217 	bic.w	r2, r2, #23
 8003e62:	f042 0201 	orr.w	r2, r2, #1
 8003e66:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003e68:	4b29      	ldr	r3, [pc, #164]	; (8003f10 <ADC_Enable+0xd4>)
 8003e6a:	f8d3 3708 	ldr.w	r3, [r3, #1800]	; 0x708
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003e6e:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8003e72:	d019      	beq.n	8003ea8 <ADC_Enable+0x6c>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003e74:	4b27      	ldr	r3, [pc, #156]	; (8003f14 <ADC_Enable+0xd8>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	099b      	lsrs	r3, r3, #6
 8003e7a:	4a27      	ldr	r2, [pc, #156]	; (8003f18 <ADC_Enable+0xdc>)
 8003e7c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e80:	099b      	lsrs	r3, r3, #6
 8003e82:	3301      	adds	r3, #1
 8003e84:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8003e86:	e00c      	b.n	8003ea2 <ADC_Enable+0x66>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e88:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8003e8a:	f043 0310 	orr.w	r3, r3, #16
 8003e8e:	6583      	str	r3, [r0, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e90:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8003e92:	f043 0301 	orr.w	r3, r3, #1
 8003e96:	65c3      	str	r3, [r0, #92]	; 0x5c
      return HAL_ERROR;
 8003e98:	2001      	movs	r0, #1
 8003e9a:	e035      	b.n	8003f08 <ADC_Enable+0xcc>
      {
        wait_loop_index--;
 8003e9c:	9b01      	ldr	r3, [sp, #4]
 8003e9e:	3b01      	subs	r3, #1
 8003ea0:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8003ea2:	9b01      	ldr	r3, [sp, #4]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d1f9      	bne.n	8003e9c <ADC_Enable+0x60>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003ea8:	7e63      	ldrb	r3, [r4, #25]
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d101      	bne.n	8003eb2 <ADC_Enable+0x76>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003eae:	2000      	movs	r0, #0
 8003eb0:	e02a      	b.n	8003f08 <ADC_Enable+0xcc>
      tickstart = HAL_GetTick();
 8003eb2:	f7fd ff39 	bl	8001d28 <HAL_GetTick>
 8003eb6:	4605      	mov	r5, r0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003eb8:	6823      	ldr	r3, [r4, #0]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	f012 0f01 	tst.w	r2, #1
 8003ec0:	d11f      	bne.n	8003f02 <ADC_Enable+0xc6>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003ec2:	689a      	ldr	r2, [r3, #8]
 8003ec4:	f012 0f01 	tst.w	r2, #1
 8003ec8:	d107      	bne.n	8003eda <ADC_Enable+0x9e>
  MODIFY_REG(ADCx->CR,
 8003eca:	689a      	ldr	r2, [r3, #8]
 8003ecc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003ed0:	f022 0217 	bic.w	r2, r2, #23
 8003ed4:	f042 0201 	orr.w	r2, r2, #1
 8003ed8:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003eda:	f7fd ff25 	bl	8001d28 <HAL_GetTick>
 8003ede:	1b40      	subs	r0, r0, r5
 8003ee0:	2802      	cmp	r0, #2
 8003ee2:	d9e9      	bls.n	8003eb8 <ADC_Enable+0x7c>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003ee4:	6823      	ldr	r3, [r4, #0]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f013 0f01 	tst.w	r3, #1
 8003eec:	d1e4      	bne.n	8003eb8 <ADC_Enable+0x7c>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003eee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003ef0:	f043 0310 	orr.w	r3, r3, #16
 8003ef4:	65a3      	str	r3, [r4, #88]	; 0x58
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ef6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003ef8:	f043 0301 	orr.w	r3, r3, #1
 8003efc:	65e3      	str	r3, [r4, #92]	; 0x5c
            return HAL_ERROR;
 8003efe:	2001      	movs	r0, #1
 8003f00:	e002      	b.n	8003f08 <ADC_Enable+0xcc>
  return HAL_OK;
 8003f02:	2000      	movs	r0, #0
 8003f04:	e000      	b.n	8003f08 <ADC_Enable+0xcc>
 8003f06:	2000      	movs	r0, #0
}
 8003f08:	b003      	add	sp, #12
 8003f0a:	bd30      	pop	{r4, r5, pc}
 8003f0c:	80000017 	.word	0x80000017
 8003f10:	40012000 	.word	0x40012000
 8003f14:	20000050 	.word	0x20000050
 8003f18:	053e2d63 	.word	0x053e2d63

08003f1c <HAL_ADC_Start>:
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003f1c:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	f013 0f04 	tst.w	r3, #4
 8003f24:	d128      	bne.n	8003f78 <HAL_ADC_Start+0x5c>
{
 8003f26:	b510      	push	{r4, lr}
 8003f28:	4604      	mov	r4, r0
    __HAL_LOCK(hadc);
 8003f2a:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d024      	beq.n	8003f7c <HAL_ADC_Start+0x60>
 8003f32:	2301      	movs	r3, #1
 8003f34:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
    tmp_hal_status = ADC_Enable(hadc);
 8003f38:	f7ff ff80 	bl	8003e3c <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8003f3c:	b9c0      	cbnz	r0, 8003f70 <HAL_ADC_Start+0x54>
      ADC_STATE_CLR_SET(hadc->State,
 8003f3e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003f40:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003f44:	f023 0301 	bic.w	r3, r3, #1
 8003f48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f4c:	65a3      	str	r3, [r4, #88]	; 0x58
      ADC_CLEAR_ERRORCODE(hadc);
 8003f4e:	2300      	movs	r3, #0
 8003f50:	65e3      	str	r3, [r4, #92]	; 0x5c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003f52:	6822      	ldr	r2, [r4, #0]
 8003f54:	211c      	movs	r1, #28
 8003f56:	6011      	str	r1, [r2, #0]
      __HAL_UNLOCK(hadc);
 8003f58:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003f5c:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8003f5e:	6893      	ldr	r3, [r2, #8]
 8003f60:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003f64:	f023 0317 	bic.w	r3, r3, #23
 8003f68:	f043 0304 	orr.w	r3, r3, #4
 8003f6c:	6093      	str	r3, [r2, #8]
}
 8003f6e:	bd10      	pop	{r4, pc}
      __HAL_UNLOCK(hadc);
 8003f70:	2300      	movs	r3, #0
 8003f72:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8003f76:	e7fa      	b.n	8003f6e <HAL_ADC_Start+0x52>
    tmp_hal_status = HAL_BUSY;
 8003f78:	2002      	movs	r0, #2
}
 8003f7a:	4770      	bx	lr
    __HAL_LOCK(hadc);
 8003f7c:	2002      	movs	r0, #2
 8003f7e:	e7f6      	b.n	8003f6e <HAL_ADC_Start+0x52>

08003f80 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003f80:	b538      	push	{r3, r4, r5, lr}
 8003f82:	4604      	mov	r4, r0
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003f84:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003f86:	6893      	ldr	r3, [r2, #8]
 8003f88:	f013 0302 	ands.w	r3, r3, #2
 8003f8c:	d000      	beq.n	8003f90 <ADC_Disable+0x10>
 8003f8e:	2301      	movs	r3, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003f90:	6891      	ldr	r1, [r2, #8]
 8003f92:	f011 0f01 	tst.w	r1, #1
 8003f96:	d039      	beq.n	800400c <ADC_Disable+0x8c>

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
      && (tmp_adc_is_disable_on_going == 0UL)
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d139      	bne.n	8004010 <ADC_Disable+0x90>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003f9c:	6893      	ldr	r3, [r2, #8]
 8003f9e:	f003 0305 	and.w	r3, r3, #5
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d009      	beq.n	8003fba <ADC_Disable+0x3a>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fa6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003fa8:	f043 0310 	orr.w	r3, r3, #16
 8003fac:	65a3      	str	r3, [r4, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fae:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003fb0:	f043 0301 	orr.w	r3, r3, #1
 8003fb4:	65e3      	str	r3, [r4, #92]	; 0x5c

      return HAL_ERROR;
 8003fb6:	2001      	movs	r0, #1
 8003fb8:	e029      	b.n	800400e <ADC_Disable+0x8e>
  MODIFY_REG(ADCx->CR,
 8003fba:	6893      	ldr	r3, [r2, #8]
 8003fbc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003fc0:	f023 0317 	bic.w	r3, r3, #23
 8003fc4:	f043 0302 	orr.w	r3, r3, #2
 8003fc8:	6093      	str	r3, [r2, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003fca:	6823      	ldr	r3, [r4, #0]
 8003fcc:	2203      	movs	r2, #3
 8003fce:	601a      	str	r2, [r3, #0]
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003fd0:	f7fd feaa 	bl	8001d28 <HAL_GetTick>
 8003fd4:	4605      	mov	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003fd6:	6823      	ldr	r3, [r4, #0]
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	f013 0f01 	tst.w	r3, #1
 8003fde:	d013      	beq.n	8004008 <ADC_Disable+0x88>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003fe0:	f7fd fea2 	bl	8001d28 <HAL_GetTick>
 8003fe4:	1b40      	subs	r0, r0, r5
 8003fe6:	2802      	cmp	r0, #2
 8003fe8:	d9f5      	bls.n	8003fd6 <ADC_Disable+0x56>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003fea:	6823      	ldr	r3, [r4, #0]
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	f013 0f01 	tst.w	r3, #1
 8003ff2:	d0f0      	beq.n	8003fd6 <ADC_Disable+0x56>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ff4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003ff6:	f043 0310 	orr.w	r3, r3, #16
 8003ffa:	65a3      	str	r3, [r4, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ffc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003ffe:	f043 0301 	orr.w	r3, r3, #1
 8004002:	65e3      	str	r3, [r4, #92]	; 0x5c

          return HAL_ERROR;
 8004004:	2001      	movs	r0, #1
 8004006:	e002      	b.n	800400e <ADC_Disable+0x8e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004008:	2000      	movs	r0, #0
 800400a:	e000      	b.n	800400e <ADC_Disable+0x8e>
 800400c:	2000      	movs	r0, #0
}
 800400e:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8004010:	2000      	movs	r0, #0
 8004012:	e7fc      	b.n	800400e <ADC_Disable+0x8e>

08004014 <HAL_ADC_DeInit>:
{
 8004014:	b570      	push	{r4, r5, r6, lr}
  if (hadc == NULL)
 8004016:	2800      	cmp	r0, #0
 8004018:	d04c      	beq.n	80040b4 <HAL_ADC_DeInit+0xa0>
 800401a:	4604      	mov	r4, r0
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 800401c:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800401e:	f043 0302 	orr.w	r3, r3, #2
 8004022:	6583      	str	r3, [r0, #88]	; 0x58
  tmp_hal_status = ADC_ConversionStop(hadc);
 8004024:	f7ff fed6 	bl	8003dd4 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8004028:	4606      	mov	r6, r0
 800402a:	2800      	cmp	r0, #0
 800402c:	d033      	beq.n	8004096 <HAL_ADC_DeInit+0x82>
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 800402e:	6822      	ldr	r2, [r4, #0]
 8004030:	6853      	ldr	r3, [r2, #4]
 8004032:	f423 7367 	bic.w	r3, r3, #924	; 0x39c
 8004036:	f023 0303 	bic.w	r3, r3, #3
 800403a:	6053      	str	r3, [r2, #4]
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 800403c:	6823      	ldr	r3, [r4, #0]
 800403e:	f240 329f 	movw	r2, #927	; 0x39f
 8004042:	601a      	str	r2, [r3, #0]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 8004044:	6822      	ldr	r2, [r4, #0]
 8004046:	68d1      	ldr	r1, [r2, #12]
 8004048:	4b1b      	ldr	r3, [pc, #108]	; (80040b8 <HAL_ADC_DeInit+0xa4>)
 800404a:	400b      	ands	r3, r1
 800404c:	60d3      	str	r3, [r2, #12]
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 800404e:	6822      	ldr	r2, [r4, #0]
 8004050:	6913      	ldr	r3, [r2, #16]
 8004052:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004056:	6113      	str	r3, [r2, #16]
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 8004058:	6822      	ldr	r2, [r4, #0]
 800405a:	6953      	ldr	r3, [r2, #20]
 800405c:	f023 0307 	bic.w	r3, r3, #7
 8004060:	6153      	str	r3, [r2, #20]
  hadc->Instance->TR1 &= ~(ADC_TR1_HT1 | ADC_TR1_LT1);
 8004062:	6822      	ldr	r2, [r4, #0]
 8004064:	6a13      	ldr	r3, [r2, #32]
 8004066:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 800406a:	6213      	str	r3, [r2, #32]
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 800406c:	6823      	ldr	r3, [r4, #0]
 800406e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004070:	2500      	movs	r5, #0
 8004072:	629d      	str	r5, [r3, #40]	; 0x28
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 8004074:	4a11      	ldr	r2, [pc, #68]	; (80040bc <HAL_ADC_DeInit+0xa8>)
 8004076:	f8d2 3708 	ldr.w	r3, [r2, #1800]	; 0x708
 800407a:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 800407e:	f8c2 3708 	str.w	r3, [r2, #1800]	; 0x708
  HAL_ADC_MspDeInit(hadc);
 8004082:	4620      	mov	r0, r4
 8004084:	f7fd fa9e 	bl	80015c4 <HAL_ADC_MspDeInit>
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 8004088:	6625      	str	r5, [r4, #96]	; 0x60
  ADC_CLEAR_ERRORCODE(hadc);
 800408a:	65e5      	str	r5, [r4, #92]	; 0x5c
  hadc->State = HAL_ADC_STATE_RESET;
 800408c:	65a5      	str	r5, [r4, #88]	; 0x58
  __HAL_UNLOCK(hadc);
 800408e:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
}
 8004092:	4630      	mov	r0, r6
 8004094:	bd70      	pop	{r4, r5, r6, pc}
    tmp_hal_status = ADC_Disable(hadc);
 8004096:	4620      	mov	r0, r4
 8004098:	f7ff ff72 	bl	8003f80 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 800409c:	4606      	mov	r6, r0
 800409e:	b908      	cbnz	r0, 80040a4 <HAL_ADC_DeInit+0x90>
      hadc->State = HAL_ADC_STATE_READY;
 80040a0:	2301      	movs	r3, #1
 80040a2:	65a3      	str	r3, [r4, #88]	; 0x58
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 80040a4:	6822      	ldr	r2, [r4, #0]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 80040a6:	6893      	ldr	r3, [r2, #8]
 80040a8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80040ac:	f023 0317 	bic.w	r3, r3, #23
 80040b0:	6093      	str	r3, [r2, #8]
}
 80040b2:	e7bc      	b.n	800402e <HAL_ADC_DeInit+0x1a>
    return HAL_ERROR;
 80040b4:	2601      	movs	r6, #1
 80040b6:	e7ec      	b.n	8004092 <HAL_ADC_DeInit+0x7e>
 80040b8:	833e0200 	.word	0x833e0200
 80040bc:	40012000 	.word	0x40012000

080040c0 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 80040c0:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d019      	beq.n	80040fc <HAL_ADC_Stop+0x3c>
{
 80040c8:	b510      	push	{r4, lr}
 80040ca:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 80040cc:	2301      	movs	r3, #1
 80040ce:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
  tmp_hal_status = ADC_ConversionStop(hadc);
 80040d2:	f7ff fe7f 	bl	8003dd4 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 80040d6:	b118      	cbz	r0, 80040e0 <HAL_ADC_Stop+0x20>
  __HAL_UNLOCK(hadc);
 80040d8:	2300      	movs	r3, #0
 80040da:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
}
 80040de:	bd10      	pop	{r4, pc}
    tmp_hal_status = ADC_Disable(hadc);
 80040e0:	4620      	mov	r0, r4
 80040e2:	f7ff ff4d 	bl	8003f80 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 80040e6:	2800      	cmp	r0, #0
 80040e8:	d1f6      	bne.n	80040d8 <HAL_ADC_Stop+0x18>
      ADC_STATE_CLR_SET(hadc->State,
 80040ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80040ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040f0:	f023 0301 	bic.w	r3, r3, #1
 80040f4:	f043 0301 	orr.w	r3, r3, #1
 80040f8:	65a3      	str	r3, [r4, #88]	; 0x58
 80040fa:	e7ed      	b.n	80040d8 <HAL_ADC_Stop+0x18>
  __HAL_LOCK(hadc);
 80040fc:	2002      	movs	r0, #2
}
 80040fe:	4770      	bx	lr

08004100 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8004100:	b510      	push	{r4, lr}
 8004102:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004104:	2300      	movs	r3, #0
 8004106:	9301      	str	r3, [sp, #4]
  uint32_t backup_setting_adc_dma_transfer; /* Note: Variable not declared as volatile because register read is already declared as volatile */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8004108:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 800410c:	2b01      	cmp	r3, #1
 800410e:	d045      	beq.n	800419c <HAL_ADCEx_Calibration_Start+0x9c>
 8004110:	4604      	mov	r4, r0
 8004112:	2301      	movs	r3, #1
 8004114:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004118:	f7ff ff32 	bl	8003f80 <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800411c:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800411e:	689a      	ldr	r2, [r3, #8]
 8004120:	f012 0f01 	tst.w	r2, #1
 8004124:	d008      	beq.n	8004138 <HAL_ADCEx_Calibration_Start+0x38>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004126:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004128:	f043 0310 	orr.w	r3, r3, #16
 800412c:	65a3      	str	r3, [r4, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 800412e:	2300      	movs	r3, #0
 8004130:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54

  return tmp_hal_status;
}
 8004134:	b002      	add	sp, #8
 8004136:	bd10      	pop	{r4, pc}
    ADC_STATE_CLR_SET(hadc->State,
 8004138:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800413a:	f422 7281 	bic.w	r2, r2, #258	; 0x102
 800413e:	f042 0202 	orr.w	r2, r2, #2
 8004142:	65a2      	str	r2, [r4, #88]	; 0x58
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8004144:	68d9      	ldr	r1, [r3, #12]
 8004146:	f001 0103 	and.w	r1, r1, #3
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800414a:	68da      	ldr	r2, [r3, #12]
 800414c:	f022 0203 	bic.w	r2, r2, #3
 8004150:	60da      	str	r2, [r3, #12]
    SET_BIT(hadc->Instance->CR, ADC_CR_ADCAL);
 8004152:	6822      	ldr	r2, [r4, #0]
 8004154:	6893      	ldr	r3, [r2, #8]
 8004156:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800415a:	6093      	str	r3, [r2, #8]
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800415c:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800415e:	689a      	ldr	r2, [r3, #8]
 8004160:	2a00      	cmp	r2, #0
 8004162:	db09      	blt.n	8004178 <HAL_ADCEx_Calibration_Start+0x78>
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8004164:	68da      	ldr	r2, [r3, #12]
 8004166:	430a      	orrs	r2, r1
 8004168:	60da      	str	r2, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 800416a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800416c:	f023 0303 	bic.w	r3, r3, #3
 8004170:	f043 0301 	orr.w	r3, r3, #1
 8004174:	65a3      	str	r3, [r4, #88]	; 0x58
 8004176:	e7da      	b.n	800412e <HAL_ADCEx_Calibration_Start+0x2e>
      wait_loop_index++;
 8004178:	9b01      	ldr	r3, [sp, #4]
 800417a:	3301      	adds	r3, #1
 800417c:	9301      	str	r3, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800417e:	9b01      	ldr	r3, [sp, #4]
 8004180:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 8004184:	d3ea      	bcc.n	800415c <HAL_ADCEx_Calibration_Start+0x5c>
        ADC_STATE_CLR_SET(hadc->State,
 8004186:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004188:	f023 0312 	bic.w	r3, r3, #18
 800418c:	f043 0310 	orr.w	r3, r3, #16
 8004190:	65a3      	str	r3, [r4, #88]	; 0x58
        __HAL_UNLOCK(hadc);
 8004192:	2300      	movs	r3, #0
 8004194:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
        return HAL_ERROR;
 8004198:	2001      	movs	r0, #1
 800419a:	e7cb      	b.n	8004134 <HAL_ADCEx_Calibration_Start+0x34>
  __HAL_LOCK(hadc);
 800419c:	2002      	movs	r0, #2
 800419e:	e7c9      	b.n	8004134 <HAL_ADCEx_Calibration_Start+0x34>

080041a0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80041a0:	4a07      	ldr	r2, [pc, #28]	; (80041c0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80041a2:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80041a4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80041a8:	041b      	lsls	r3, r3, #16
 80041aa:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80041ac:	0200      	lsls	r0, r0, #8
 80041ae:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80041b2:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80041b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80041b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80041bc:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80041be:	4770      	bx	lr
 80041c0:	e000ed00 	.word	0xe000ed00

080041c4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80041c4:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80041c6:	4b19      	ldr	r3, [pc, #100]	; (800422c <HAL_NVIC_SetPriority+0x68>)
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80041ce:	f1c3 0c07 	rsb	ip, r3, #7
 80041d2:	f1bc 0f04 	cmp.w	ip, #4
 80041d6:	bf28      	it	cs
 80041d8:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80041dc:	f103 0e04 	add.w	lr, r3, #4
 80041e0:	f1be 0f06 	cmp.w	lr, #6
 80041e4:	d918      	bls.n	8004218 <HAL_NVIC_SetPriority+0x54>
 80041e6:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041e8:	f04f 3eff 	mov.w	lr, #4294967295
 80041ec:	fa0e fc0c 	lsl.w	ip, lr, ip
 80041f0:	ea21 010c 	bic.w	r1, r1, ip
 80041f4:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80041f6:	fa0e fe03 	lsl.w	lr, lr, r3
 80041fa:	ea22 020e 	bic.w	r2, r2, lr
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041fe:	430a      	orrs	r2, r1
  if ((int32_t)(IRQn) >= 0)
 8004200:	2800      	cmp	r0, #0
 8004202:	db0b      	blt.n	800421c <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004204:	0112      	lsls	r2, r2, #4
 8004206:	b2d2      	uxtb	r2, r2
 8004208:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800420c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8004210:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8004214:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004218:	2300      	movs	r3, #0
 800421a:	e7e5      	b.n	80041e8 <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800421c:	f000 000f 	and.w	r0, r0, #15
 8004220:	0112      	lsls	r2, r2, #4
 8004222:	b2d2      	uxtb	r2, r2
 8004224:	4b02      	ldr	r3, [pc, #8]	; (8004230 <HAL_NVIC_SetPriority+0x6c>)
 8004226:	541a      	strb	r2, [r3, r0]
 8004228:	e7f4      	b.n	8004214 <HAL_NVIC_SetPriority+0x50>
 800422a:	bf00      	nop
 800422c:	e000ed00 	.word	0xe000ed00
 8004230:	e000ed14 	.word	0xe000ed14

08004234 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004234:	2800      	cmp	r0, #0
 8004236:	db07      	blt.n	8004248 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004238:	f000 021f 	and.w	r2, r0, #31
 800423c:	0940      	lsrs	r0, r0, #5
 800423e:	2301      	movs	r3, #1
 8004240:	4093      	lsls	r3, r2
 8004242:	4a02      	ldr	r2, [pc, #8]	; (800424c <HAL_NVIC_EnableIRQ+0x18>)
 8004244:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8004248:	4770      	bx	lr
 800424a:	bf00      	nop
 800424c:	e000e100 	.word	0xe000e100

08004250 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004250:	2800      	cmp	r0, #0
 8004252:	db0c      	blt.n	800426e <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004254:	f000 021f 	and.w	r2, r0, #31
 8004258:	0940      	lsrs	r0, r0, #5
 800425a:	2301      	movs	r3, #1
 800425c:	4093      	lsls	r3, r2
 800425e:	3020      	adds	r0, #32
 8004260:	4a03      	ldr	r2, [pc, #12]	; (8004270 <HAL_NVIC_DisableIRQ+0x20>)
 8004262:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004266:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800426a:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 800426e:	4770      	bx	lr
 8004270:	e000e100 	.word	0xe000e100

08004274 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004274:	b410      	push	{r4}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004276:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 8004278:	f8d0 c050 	ldr.w	ip, [r0, #80]	; 0x50
 800427c:	f8c4 c004 	str.w	ip, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004280:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8004282:	b124      	cbz	r4, 800428e <DMA_SetConfig+0x1a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004284:	6d84      	ldr	r4, [r0, #88]	; 0x58
 8004286:	f8d0 c05c 	ldr.w	ip, [r0, #92]	; 0x5c
 800428a:	f8c4 c004 	str.w	ip, [r4, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800428e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8004290:	f004 0c1c 	and.w	ip, r4, #28
 8004294:	2401      	movs	r4, #1
 8004296:	fa04 f40c 	lsl.w	r4, r4, ip
 800429a:	f8d0 c040 	ldr.w	ip, [r0, #64]	; 0x40
 800429e:	f8cc 4004 	str.w	r4, [ip, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80042a2:	6804      	ldr	r4, [r0, #0]
 80042a4:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80042a6:	6883      	ldr	r3, [r0, #8]
 80042a8:	2b10      	cmp	r3, #16
 80042aa:	d005      	beq.n	80042b8 <DMA_SetConfig+0x44>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80042ac:	6803      	ldr	r3, [r0, #0]
 80042ae:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80042b0:	6803      	ldr	r3, [r0, #0]
 80042b2:	60da      	str	r2, [r3, #12]
  }
}
 80042b4:	bc10      	pop	{r4}
 80042b6:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 80042b8:	6803      	ldr	r3, [r0, #0]
 80042ba:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 80042bc:	6803      	ldr	r3, [r0, #0]
 80042be:	60d9      	str	r1, [r3, #12]
 80042c0:	e7f8      	b.n	80042b4 <DMA_SetConfig+0x40>
	...

080042c4 <DMA_CalcDMAMUXChannelBaseAndMask>:
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80042c4:	6803      	ldr	r3, [r0, #0]
 80042c6:	4a14      	ldr	r2, [pc, #80]	; (8004318 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d816      	bhi.n	80042fa <DMA_CalcDMAMUXChannelBaseAndMask+0x36>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80042cc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80042ce:	f022 0203 	bic.w	r2, r2, #3
 80042d2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80042d6:	f502 3202 	add.w	r2, r2, #133120	; 0x20800
 80042da:	6482      	str	r2, [r0, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	3b08      	subs	r3, #8
 80042e0:	4a0e      	ldr	r2, [pc, #56]	; (800431c <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 80042e2:	fba2 2303 	umull	r2, r3, r2, r3
 80042e6:	091b      	lsrs	r3, r3, #4
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80042e8:	4a0d      	ldr	r2, [pc, #52]	; (8004320 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>)
 80042ea:	64c2      	str	r2, [r0, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80042ec:	f003 031f 	and.w	r3, r3, #31
 80042f0:	2201      	movs	r2, #1
 80042f2:	fa02 f303 	lsl.w	r3, r2, r3
 80042f6:	6503      	str	r3, [r0, #80]	; 0x50
}
 80042f8:	4770      	bx	lr
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80042fa:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80042fc:	f022 0103 	bic.w	r1, r2, #3
 8004300:	4a08      	ldr	r2, [pc, #32]	; (8004324 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>)
 8004302:	440a      	add	r2, r1
 8004304:	6482      	str	r2, [r0, #72]	; 0x48
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8004306:	b2db      	uxtb	r3, r3
 8004308:	3b08      	subs	r3, #8
 800430a:	4a04      	ldr	r2, [pc, #16]	; (800431c <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 800430c:	fba2 2303 	umull	r2, r3, r2, r3
 8004310:	091b      	lsrs	r3, r3, #4
 8004312:	3307      	adds	r3, #7
 8004314:	e7e8      	b.n	80042e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x24>
 8004316:	bf00      	nop
 8004318:	40020407 	.word	0x40020407
 800431c:	cccccccd 	.word	0xcccccccd
 8004320:	40020880 	.word	0x40020880
 8004324:	4002081c 	.word	0x4002081c

08004328 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004328:	6843      	ldr	r3, [r0, #4]
 800432a:	f003 037f 	and.w	r3, r3, #127	; 0x7f

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800432e:	4a07      	ldr	r2, [pc, #28]	; (800434c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x24>)
 8004330:	441a      	add	r2, r3
 8004332:	0092      	lsls	r2, r2, #2
 8004334:	6542      	str	r2, [r0, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004336:	4a06      	ldr	r2, [pc, #24]	; (8004350 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x28>)
 8004338:	6582      	str	r2, [r0, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800433a:	3b01      	subs	r3, #1
 800433c:	f003 0303 	and.w	r3, r3, #3
 8004340:	2201      	movs	r2, #1
 8004342:	fa02 f303 	lsl.w	r3, r2, r3
 8004346:	65c3      	str	r3, [r0, #92]	; 0x5c
}
 8004348:	4770      	bx	lr
 800434a:	bf00      	nop
 800434c:	1000823f 	.word	0x1000823f
 8004350:	40020940 	.word	0x40020940

08004354 <HAL_DMA_Init>:
  if (hdma == NULL)
 8004354:	2800      	cmp	r0, #0
 8004356:	d060      	beq.n	800441a <HAL_DMA_Init+0xc6>
{
 8004358:	b510      	push	{r4, lr}
 800435a:	4604      	mov	r4, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800435c:	6802      	ldr	r2, [r0, #0]
 800435e:	4b30      	ldr	r3, [pc, #192]	; (8004420 <HAL_DMA_Init+0xcc>)
 8004360:	429a      	cmp	r2, r3
 8004362:	d842      	bhi.n	80043ea <HAL_DMA_Init+0x96>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004364:	4b2f      	ldr	r3, [pc, #188]	; (8004424 <HAL_DMA_Init+0xd0>)
 8004366:	4413      	add	r3, r2
 8004368:	492f      	ldr	r1, [pc, #188]	; (8004428 <HAL_DMA_Init+0xd4>)
 800436a:	fba1 1303 	umull	r1, r3, r1, r3
 800436e:	091b      	lsrs	r3, r3, #4
 8004370:	009b      	lsls	r3, r3, #2
 8004372:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004374:	4b2d      	ldr	r3, [pc, #180]	; (800442c <HAL_DMA_Init+0xd8>)
 8004376:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8004378:	2302      	movs	r3, #2
 800437a:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800437e:	6813      	ldr	r3, [r2, #0]
 8004380:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004384:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004388:	6013      	str	r3, [r2, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800438a:	6821      	ldr	r1, [r4, #0]
 800438c:	680a      	ldr	r2, [r1, #0]
 800438e:	68a3      	ldr	r3, [r4, #8]
 8004390:	68e0      	ldr	r0, [r4, #12]
 8004392:	4303      	orrs	r3, r0
 8004394:	6920      	ldr	r0, [r4, #16]
 8004396:	4303      	orrs	r3, r0
 8004398:	6960      	ldr	r0, [r4, #20]
 800439a:	4303      	orrs	r3, r0
 800439c:	69a0      	ldr	r0, [r4, #24]
 800439e:	4303      	orrs	r3, r0
 80043a0:	69e0      	ldr	r0, [r4, #28]
 80043a2:	4303      	orrs	r3, r0
 80043a4:	6a20      	ldr	r0, [r4, #32]
 80043a6:	4303      	orrs	r3, r0
 80043a8:	4313      	orrs	r3, r2
 80043aa:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80043ac:	4620      	mov	r0, r4
 80043ae:	f7ff ff89 	bl	80042c4 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80043b2:	68a3      	ldr	r3, [r4, #8]
 80043b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043b8:	d022      	beq.n	8004400 <HAL_DMA_Init+0xac>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80043ba:	6863      	ldr	r3, [r4, #4]
 80043bc:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80043be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043c2:	6013      	str	r3, [r2, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80043c4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80043c6:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80043c8:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80043ca:	6863      	ldr	r3, [r4, #4]
 80043cc:	3b01      	subs	r3, #1
 80043ce:	2b03      	cmp	r3, #3
 80043d0:	d919      	bls.n	8004406 <HAL_DMA_Init+0xb2>
    hdma->DMAmuxRequestGen = 0U;
 80043d2:	2300      	movs	r3, #0
 80043d4:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80043d6:	65a3      	str	r3, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80043d8:	65e3      	str	r3, [r4, #92]	; 0x5c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80043da:	2000      	movs	r0, #0
 80043dc:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 80043de:	2301      	movs	r3, #1
 80043e0:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 80043e4:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 80043e8:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80043ea:	4b11      	ldr	r3, [pc, #68]	; (8004430 <HAL_DMA_Init+0xdc>)
 80043ec:	4413      	add	r3, r2
 80043ee:	490e      	ldr	r1, [pc, #56]	; (8004428 <HAL_DMA_Init+0xd4>)
 80043f0:	fba1 1303 	umull	r1, r3, r1, r3
 80043f4:	091b      	lsrs	r3, r3, #4
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80043fa:	4b0e      	ldr	r3, [pc, #56]	; (8004434 <HAL_DMA_Init+0xe0>)
 80043fc:	6403      	str	r3, [r0, #64]	; 0x40
 80043fe:	e7bb      	b.n	8004378 <HAL_DMA_Init+0x24>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004400:	2300      	movs	r3, #0
 8004402:	6063      	str	r3, [r4, #4]
 8004404:	e7d9      	b.n	80043ba <HAL_DMA_Init+0x66>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004406:	4620      	mov	r0, r4
 8004408:	f7ff ff8e 	bl	8004328 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800440c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800440e:	2200      	movs	r2, #0
 8004410:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004412:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004414:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004416:	605a      	str	r2, [r3, #4]
 8004418:	e7df      	b.n	80043da <HAL_DMA_Init+0x86>
    return HAL_ERROR;
 800441a:	2001      	movs	r0, #1
}
 800441c:	4770      	bx	lr
 800441e:	bf00      	nop
 8004420:	40020407 	.word	0x40020407
 8004424:	bffdfff8 	.word	0xbffdfff8
 8004428:	cccccccd 	.word	0xcccccccd
 800442c:	40020000 	.word	0x40020000
 8004430:	bffdfbf8 	.word	0xbffdfbf8
 8004434:	40020400 	.word	0x40020400

08004438 <HAL_DMA_DeInit>:
  if (NULL == hdma)
 8004438:	2800      	cmp	r0, #0
 800443a:	d04b      	beq.n	80044d4 <HAL_DMA_DeInit+0x9c>
{
 800443c:	b538      	push	{r3, r4, r5, lr}
 800443e:	4604      	mov	r4, r0
  __HAL_DMA_DISABLE(hdma);
 8004440:	6802      	ldr	r2, [r0, #0]
 8004442:	6813      	ldr	r3, [r2, #0]
 8004444:	f023 0301 	bic.w	r3, r3, #1
 8004448:	6013      	str	r3, [r2, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800444a:	6802      	ldr	r2, [r0, #0]
 800444c:	4b22      	ldr	r3, [pc, #136]	; (80044d8 <HAL_DMA_DeInit+0xa0>)
 800444e:	429a      	cmp	r2, r3
 8004450:	d82c      	bhi.n	80044ac <HAL_DMA_DeInit+0x74>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004452:	4b22      	ldr	r3, [pc, #136]	; (80044dc <HAL_DMA_DeInit+0xa4>)
 8004454:	4413      	add	r3, r2
 8004456:	4922      	ldr	r1, [pc, #136]	; (80044e0 <HAL_DMA_DeInit+0xa8>)
 8004458:	fba1 1303 	umull	r1, r3, r1, r3
 800445c:	091b      	lsrs	r3, r3, #4
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004462:	4b20      	ldr	r3, [pc, #128]	; (80044e4 <HAL_DMA_DeInit+0xac>)
 8004464:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->Instance->CCR = 0U;
 8004466:	2500      	movs	r5, #0
 8004468:	6015      	str	r5, [r2, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800446a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800446c:	f003 021c 	and.w	r2, r3, #28
 8004470:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8004472:	2301      	movs	r3, #1
 8004474:	4093      	lsls	r3, r2
 8004476:	604b      	str	r3, [r1, #4]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004478:	4620      	mov	r0, r4
 800447a:	f7ff ff23 	bl	80042c4 <DMA_CalcDMAMUXChannelBaseAndMask>
  hdma->DMAmuxChannel->CCR = 0U;
 800447e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004480:	601d      	str	r5, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004482:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004484:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8004486:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004488:	6863      	ldr	r3, [r4, #4]
 800448a:	3b01      	subs	r3, #1
 800448c:	2b03      	cmp	r3, #3
 800448e:	d918      	bls.n	80044c2 <HAL_DMA_DeInit+0x8a>
  hdma->DMAmuxRequestGen = 0U;
 8004490:	2000      	movs	r0, #0
 8004492:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 8004494:	65a0      	str	r0, [r4, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8004496:	65e0      	str	r0, [r4, #92]	; 0x5c
  hdma->XferCpltCallback = NULL;
 8004498:	62e0      	str	r0, [r4, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 800449a:	6320      	str	r0, [r4, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 800449c:	6360      	str	r0, [r4, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 800449e:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80044a0:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_RESET;
 80044a2:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 80044a6:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 80044aa:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80044ac:	4b0e      	ldr	r3, [pc, #56]	; (80044e8 <HAL_DMA_DeInit+0xb0>)
 80044ae:	4413      	add	r3, r2
 80044b0:	490b      	ldr	r1, [pc, #44]	; (80044e0 <HAL_DMA_DeInit+0xa8>)
 80044b2:	fba1 1303 	umull	r1, r3, r1, r3
 80044b6:	091b      	lsrs	r3, r3, #4
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80044bc:	4b0b      	ldr	r3, [pc, #44]	; (80044ec <HAL_DMA_DeInit+0xb4>)
 80044be:	6403      	str	r3, [r0, #64]	; 0x40
 80044c0:	e7d1      	b.n	8004466 <HAL_DMA_DeInit+0x2e>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80044c2:	4620      	mov	r0, r4
 80044c4:	f7ff ff30 	bl	8004328 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80044c8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80044ca:	601d      	str	r5, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80044cc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80044ce:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80044d0:	605a      	str	r2, [r3, #4]
 80044d2:	e7dd      	b.n	8004490 <HAL_DMA_DeInit+0x58>
    return HAL_ERROR;
 80044d4:	2001      	movs	r0, #1
}
 80044d6:	4770      	bx	lr
 80044d8:	40020407 	.word	0x40020407
 80044dc:	bffdfff8 	.word	0xbffdfff8
 80044e0:	cccccccd 	.word	0xcccccccd
 80044e4:	40020000 	.word	0x40020000
 80044e8:	bffdfbf8 	.word	0xbffdfbf8
 80044ec:	40020400 	.word	0x40020400

080044f0 <HAL_DMA_Start_IT>:
{
 80044f0:	b538      	push	{r3, r4, r5, lr}
 80044f2:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 80044f4:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
 80044f8:	2801      	cmp	r0, #1
 80044fa:	d043      	beq.n	8004584 <HAL_DMA_Start_IT+0x94>
 80044fc:	2001      	movs	r0, #1
 80044fe:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  if (hdma->State == HAL_DMA_STATE_READY)
 8004502:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
 8004506:	b2c0      	uxtb	r0, r0
 8004508:	2801      	cmp	r0, #1
 800450a:	d006      	beq.n	800451a <HAL_DMA_Start_IT+0x2a>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800450c:	2380      	movs	r3, #128	; 0x80
 800450e:	63e3      	str	r3, [r4, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8004510:	2300      	movs	r3, #0
 8004512:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    status = HAL_ERROR;
 8004516:	2001      	movs	r0, #1
}
 8004518:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 800451a:	2002      	movs	r0, #2
 800451c:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004520:	2000      	movs	r0, #0
 8004522:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8004524:	6825      	ldr	r5, [r4, #0]
 8004526:	6828      	ldr	r0, [r5, #0]
 8004528:	f020 0001 	bic.w	r0, r0, #1
 800452c:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800452e:	4620      	mov	r0, r4
 8004530:	f7ff fea0 	bl	8004274 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 8004534:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004536:	b1d3      	cbz	r3, 800456e <HAL_DMA_Start_IT+0x7e>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004538:	6822      	ldr	r2, [r4, #0]
 800453a:	6813      	ldr	r3, [r2, #0]
 800453c:	f043 030e 	orr.w	r3, r3, #14
 8004540:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004542:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 800454a:	d003      	beq.n	8004554 <HAL_DMA_Start_IT+0x64>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004552:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 8004554:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004556:	b11b      	cbz	r3, 8004560 <HAL_DMA_Start_IT+0x70>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800455e:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8004560:	6822      	ldr	r2, [r4, #0]
 8004562:	6813      	ldr	r3, [r2, #0]
 8004564:	f043 0301 	orr.w	r3, r3, #1
 8004568:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800456a:	2000      	movs	r0, #0
 800456c:	e7d4      	b.n	8004518 <HAL_DMA_Start_IT+0x28>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800456e:	6822      	ldr	r2, [r4, #0]
 8004570:	6813      	ldr	r3, [r2, #0]
 8004572:	f023 0304 	bic.w	r3, r3, #4
 8004576:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004578:	6822      	ldr	r2, [r4, #0]
 800457a:	6813      	ldr	r3, [r2, #0]
 800457c:	f043 030a 	orr.w	r3, r3, #10
 8004580:	6013      	str	r3, [r2, #0]
 8004582:	e7de      	b.n	8004542 <HAL_DMA_Start_IT+0x52>
  __HAL_LOCK(hdma);
 8004584:	2002      	movs	r0, #2
 8004586:	e7c7      	b.n	8004518 <HAL_DMA_Start_IT+0x28>

08004588 <HAL_DMA_Abort>:
  if (NULL == hdma)
 8004588:	4603      	mov	r3, r0
 800458a:	2800      	cmp	r0, #0
 800458c:	d034      	beq.n	80045f8 <HAL_DMA_Abort+0x70>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800458e:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8004592:	b2d2      	uxtb	r2, r2
 8004594:	2a02      	cmp	r2, #2
 8004596:	d006      	beq.n	80045a6 <HAL_DMA_Abort+0x1e>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004598:	2204      	movs	r2, #4
 800459a:	63c2      	str	r2, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 800459c:	2200      	movs	r2, #0
 800459e:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    return HAL_ERROR;
 80045a2:	2001      	movs	r0, #1
 80045a4:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80045a6:	6801      	ldr	r1, [r0, #0]
 80045a8:	680a      	ldr	r2, [r1, #0]
 80045aa:	f022 020e 	bic.w	r2, r2, #14
 80045ae:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80045b0:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80045b2:	680a      	ldr	r2, [r1, #0]
 80045b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80045b8:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 80045ba:	6801      	ldr	r1, [r0, #0]
 80045bc:	680a      	ldr	r2, [r1, #0]
 80045be:	f022 0201 	bic.w	r2, r2, #1
 80045c2:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80045c4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80045c6:	f002 011c 	and.w	r1, r2, #28
 80045ca:	6c00      	ldr	r0, [r0, #64]	; 0x40
 80045cc:	2201      	movs	r2, #1
 80045ce:	408a      	lsls	r2, r1
 80045d0:	6042      	str	r2, [r0, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80045d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80045d4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80045d6:	6051      	str	r1, [r2, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 80045d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80045da:	b132      	cbz	r2, 80045ea <HAL_DMA_Abort+0x62>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80045dc:	6811      	ldr	r1, [r2, #0]
 80045de:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 80045e2:	6011      	str	r1, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80045e4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80045e6:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80045e8:	6051      	str	r1, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80045f0:	2000      	movs	r0, #0
 80045f2:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
  return HAL_OK;
 80045f6:	4770      	bx	lr
    return HAL_ERROR;
 80045f8:	2001      	movs	r0, #1
}
 80045fa:	4770      	bx	lr

080045fc <HAL_DMA_Abort_IT>:
{
 80045fc:	b508      	push	{r3, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80045fe:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8004602:	b2db      	uxtb	r3, r3
 8004604:	2b02      	cmp	r3, #2
 8004606:	d003      	beq.n	8004610 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004608:	2304      	movs	r3, #4
 800460a:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 800460c:	2001      	movs	r0, #1
}
 800460e:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004610:	6802      	ldr	r2, [r0, #0]
 8004612:	6813      	ldr	r3, [r2, #0]
 8004614:	f023 030e 	bic.w	r3, r3, #14
 8004618:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 800461a:	6802      	ldr	r2, [r0, #0]
 800461c:	6813      	ldr	r3, [r2, #0]
 800461e:	f023 0301 	bic.w	r3, r3, #1
 8004622:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004624:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8004626:	6813      	ldr	r3, [r2, #0]
 8004628:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800462c:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800462e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004630:	f003 021c 	and.w	r2, r3, #28
 8004634:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8004636:	2301      	movs	r3, #1
 8004638:	4093      	lsls	r3, r2
 800463a:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800463c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800463e:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8004640:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8004642:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8004644:	b133      	cbz	r3, 8004654 <HAL_DMA_Abort_IT+0x58>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800464c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800464e:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8004650:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8004652:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8004654:	2301      	movs	r3, #1
 8004656:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 800465a:	2300      	movs	r3, #0
 800465c:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 8004660:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004662:	b113      	cbz	r3, 800466a <HAL_DMA_Abort_IT+0x6e>
      hdma->XferAbortCallback(hdma);
 8004664:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8004666:	2000      	movs	r0, #0
 8004668:	e7d1      	b.n	800460e <HAL_DMA_Abort_IT+0x12>
 800466a:	2000      	movs	r0, #0
 800466c:	e7cf      	b.n	800460e <HAL_DMA_Abort_IT+0x12>
	...

08004670 <HAL_DMA_IRQHandler>:
{
 8004670:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004672:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004674:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8004676:	6804      	ldr	r4, [r0, #0]
 8004678:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800467a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800467c:	f003 031c 	and.w	r3, r3, #28
 8004680:	2204      	movs	r2, #4
 8004682:	409a      	lsls	r2, r3
 8004684:	420a      	tst	r2, r1
 8004686:	d015      	beq.n	80046b4 <HAL_DMA_IRQHandler+0x44>
 8004688:	f015 0f04 	tst.w	r5, #4
 800468c:	d012      	beq.n	80046b4 <HAL_DMA_IRQHandler+0x44>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800468e:	6823      	ldr	r3, [r4, #0]
 8004690:	f013 0f20 	tst.w	r3, #32
 8004694:	d103      	bne.n	800469e <HAL_DMA_IRQHandler+0x2e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004696:	6823      	ldr	r3, [r4, #0]
 8004698:	f023 0304 	bic.w	r3, r3, #4
 800469c:	6023      	str	r3, [r4, #0]
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800469e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80046a0:	f003 021c 	and.w	r2, r3, #28
 80046a4:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80046a6:	2304      	movs	r3, #4
 80046a8:	4093      	lsls	r3, r2
 80046aa:	604b      	str	r3, [r1, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 80046ac:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80046ae:	b103      	cbz	r3, 80046b2 <HAL_DMA_IRQHandler+0x42>
        hdma->XferHalfCpltCallback(hdma);
 80046b0:	4798      	blx	r3
}
 80046b2:	bd38      	pop	{r3, r4, r5, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80046b4:	2202      	movs	r2, #2
 80046b6:	409a      	lsls	r2, r3
 80046b8:	420a      	tst	r2, r1
 80046ba:	d028      	beq.n	800470e <HAL_DMA_IRQHandler+0x9e>
 80046bc:	f015 0f02 	tst.w	r5, #2
 80046c0:	d025      	beq.n	800470e <HAL_DMA_IRQHandler+0x9e>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80046c2:	6823      	ldr	r3, [r4, #0]
 80046c4:	f013 0f20 	tst.w	r3, #32
 80046c8:	d106      	bne.n	80046d8 <HAL_DMA_IRQHandler+0x68>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80046ca:	6823      	ldr	r3, [r4, #0]
 80046cc:	f023 030a 	bic.w	r3, r3, #10
 80046d0:	6023      	str	r3, [r4, #0]
        hdma->State = HAL_DMA_STATE_READY;
 80046d2:	2301      	movs	r3, #1
 80046d4:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80046d8:	6802      	ldr	r2, [r0, #0]
 80046da:	4b1c      	ldr	r3, [pc, #112]	; (800474c <HAL_DMA_IRQHandler+0xdc>)
 80046dc:	429a      	cmp	r2, r3
 80046de:	d90e      	bls.n	80046fe <HAL_DMA_IRQHandler+0x8e>
 80046e0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80046e2:	f003 021c 	and.w	r2, r3, #28
 80046e6:	2302      	movs	r3, #2
 80046e8:	4093      	lsls	r3, r2
 80046ea:	4a19      	ldr	r2, [pc, #100]	; (8004750 <HAL_DMA_IRQHandler+0xe0>)
 80046ec:	6053      	str	r3, [r2, #4]
      __HAL_UNLOCK(hdma);
 80046ee:	2300      	movs	r3, #0
 80046f0:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
      if (hdma->XferCpltCallback != NULL)
 80046f4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d0db      	beq.n	80046b2 <HAL_DMA_IRQHandler+0x42>
        hdma->XferCpltCallback(hdma);
 80046fa:	4798      	blx	r3
 80046fc:	e7d9      	b.n	80046b2 <HAL_DMA_IRQHandler+0x42>
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80046fe:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004700:	f003 021c 	and.w	r2, r3, #28
 8004704:	2302      	movs	r3, #2
 8004706:	4093      	lsls	r3, r2
 8004708:	4a12      	ldr	r2, [pc, #72]	; (8004754 <HAL_DMA_IRQHandler+0xe4>)
 800470a:	6053      	str	r3, [r2, #4]
 800470c:	e7ef      	b.n	80046ee <HAL_DMA_IRQHandler+0x7e>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800470e:	2208      	movs	r2, #8
 8004710:	fa02 f303 	lsl.w	r3, r2, r3
 8004714:	420b      	tst	r3, r1
 8004716:	d0cc      	beq.n	80046b2 <HAL_DMA_IRQHandler+0x42>
 8004718:	f015 0f08 	tst.w	r5, #8
 800471c:	d0c9      	beq.n	80046b2 <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800471e:	6823      	ldr	r3, [r4, #0]
 8004720:	f023 030e 	bic.w	r3, r3, #14
 8004724:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004726:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004728:	f003 031c 	and.w	r3, r3, #28
 800472c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800472e:	2201      	movs	r2, #1
 8004730:	fa02 f303 	lsl.w	r3, r2, r3
 8004734:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004736:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8004738:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 800473c:	2300      	movs	r3, #0
 800473e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8004742:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004744:	2b00      	cmp	r3, #0
 8004746:	d0b4      	beq.n	80046b2 <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 8004748:	4798      	blx	r3
  return;
 800474a:	e7b2      	b.n	80046b2 <HAL_DMA_IRQHandler+0x42>
 800474c:	40020080 	.word	0x40020080
 8004750:	40020400 	.word	0x40020400
 8004754:	40020000 	.word	0x40020000

08004758 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8004758:	b410      	push	{r4}
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800475a:	4c05      	ldr	r4, [pc, #20]	; (8004770 <FLASH_Program_DoubleWord+0x18>)
 800475c:	6961      	ldr	r1, [r4, #20]
 800475e:	f041 0101 	orr.w	r1, r1, #1
 8004762:	6161      	str	r1, [r4, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8004764:	6002      	str	r2, [r0, #0]
 8004766:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 800476a:	6043      	str	r3, [r0, #4]
}
 800476c:	bc10      	pop	{r4}
 800476e:	4770      	bx	lr
 8004770:	58004000 	.word	0x58004000

08004774 <FLASH_Program_Fast>:

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8004774:	4a0c      	ldr	r2, [pc, #48]	; (80047a8 <FLASH_Program_Fast+0x34>)
 8004776:	6953      	ldr	r3, [r2, #20]
 8004778:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800477c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800477e:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8004782:	b672      	cpsid	i
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8004784:	2340      	movs	r3, #64	; 0x40
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8004786:	f851 2b04 	ldr.w	r2, [r1], #4
 800478a:	f840 2b04 	str.w	r2, [r0], #4
    dest_addr++;
    src_addr++;
    row_index--;
 800478e:	3b01      	subs	r3, #1
  }
  while (row_index != 0U);
 8004790:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8004794:	d1f7      	bne.n	8004786 <FLASH_Program_Fast+0x12>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 8004796:	4b04      	ldr	r3, [pc, #16]	; (80047a8 <FLASH_Program_Fast+0x34>)
 8004798:	691b      	ldr	r3, [r3, #16]
 800479a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800479e:	d1fa      	bne.n	8004796 <FLASH_Program_Fast+0x22>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047a0:	f38c 8810 	msr	PRIMASK, ip
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 80047a4:	4770      	bx	lr
 80047a6:	bf00      	nop
 80047a8:	58004000 	.word	0x58004000

080047ac <HAL_FLASH_Unlock>:
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80047ac:	4b09      	ldr	r3, [pc, #36]	; (80047d4 <HAL_FLASH_Unlock+0x28>)
 80047ae:	695b      	ldr	r3, [r3, #20]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	db01      	blt.n	80047b8 <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 80047b4:	2000      	movs	r0, #0
 80047b6:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80047b8:	4b06      	ldr	r3, [pc, #24]	; (80047d4 <HAL_FLASH_Unlock+0x28>)
 80047ba:	4a07      	ldr	r2, [pc, #28]	; (80047d8 <HAL_FLASH_Unlock+0x2c>)
 80047bc:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80047be:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 80047c2:	609a      	str	r2, [r3, #8]
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80047c4:	695b      	ldr	r3, [r3, #20]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	db01      	blt.n	80047ce <HAL_FLASH_Unlock+0x22>
  HAL_StatusTypeDef status = HAL_OK;
 80047ca:	2000      	movs	r0, #0
 80047cc:	4770      	bx	lr
      status = HAL_ERROR;
 80047ce:	2001      	movs	r0, #1
}
 80047d0:	4770      	bx	lr
 80047d2:	bf00      	nop
 80047d4:	58004000 	.word	0x58004000
 80047d8:	45670123 	.word	0x45670123

080047dc <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80047dc:	4b05      	ldr	r3, [pc, #20]	; (80047f4 <HAL_FLASH_Lock+0x18>)
 80047de:	695a      	ldr	r2, [r3, #20]
 80047e0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80047e4:	615a      	str	r2, [r3, #20]
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 80047e6:	695b      	ldr	r3, [r3, #20]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	db01      	blt.n	80047f0 <HAL_FLASH_Lock+0x14>
    status = HAL_ERROR;
 80047ec:	2001      	movs	r0, #1
}
 80047ee:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 80047f0:	2000      	movs	r0, #0
 80047f2:	4770      	bx	lr
 80047f4:	58004000 	.word	0x58004000

080047f8 <FLASH_WaitForLastOperation>:
{
 80047f8:	b538      	push	{r3, r4, r5, lr}
 80047fa:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 80047fc:	f7fd fa94 	bl	8001d28 <HAL_GetTick>
 8004800:	4604      	mov	r4, r0
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8004802:	4b16      	ldr	r3, [pc, #88]	; (800485c <FLASH_WaitForLastOperation+0x64>)
 8004804:	691b      	ldr	r3, [r3, #16]
 8004806:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800480a:	d006      	beq.n	800481a <FLASH_WaitForLastOperation+0x22>
    if ((HAL_GetTick() - tickstart) >= Timeout)
 800480c:	f7fd fa8c 	bl	8001d28 <HAL_GetTick>
 8004810:	1b00      	subs	r0, r0, r4
 8004812:	42a8      	cmp	r0, r5
 8004814:	d3f5      	bcc.n	8004802 <FLASH_WaitForLastOperation+0xa>
      return HAL_TIMEOUT;
 8004816:	2003      	movs	r0, #3
}
 8004818:	bd38      	pop	{r3, r4, r5, pc}
  error = FLASH->SR;
 800481a:	4b10      	ldr	r3, [pc, #64]	; (800485c <FLASH_WaitForLastOperation+0x64>)
 800481c:	691b      	ldr	r3, [r3, #16]
  if ((error & FLASH_FLAG_EOP) != 0U)
 800481e:	f013 0f01 	tst.w	r3, #1
 8004822:	d002      	beq.n	800482a <FLASH_WaitForLastOperation+0x32>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004824:	4a0d      	ldr	r2, [pc, #52]	; (800485c <FLASH_WaitForLastOperation+0x64>)
 8004826:	2101      	movs	r1, #1
 8004828:	6111      	str	r1, [r2, #16]
  error &= FLASH_FLAG_SR_ERRORS;
 800482a:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
  __HAL_FLASH_CLEAR_FLAG(error);
 800482e:	4013      	ands	r3, r2
 8004830:	d001      	beq.n	8004836 <FLASH_WaitForLastOperation+0x3e>
 8004832:	4a0a      	ldr	r2, [pc, #40]	; (800485c <FLASH_WaitForLastOperation+0x64>)
 8004834:	6113      	str	r3, [r2, #16]
  if (error != 0U)
 8004836:	b95b      	cbnz	r3, 8004850 <FLASH_WaitForLastOperation+0x58>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 8004838:	4b08      	ldr	r3, [pc, #32]	; (800485c <FLASH_WaitForLastOperation+0x64>)
 800483a:	691b      	ldr	r3, [r3, #16]
 800483c:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8004840:	d00a      	beq.n	8004858 <FLASH_WaitForLastOperation+0x60>
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8004842:	f7fd fa71 	bl	8001d28 <HAL_GetTick>
 8004846:	1b00      	subs	r0, r0, r4
 8004848:	42a8      	cmp	r0, r5
 800484a:	d3f5      	bcc.n	8004838 <FLASH_WaitForLastOperation+0x40>
      return HAL_TIMEOUT;
 800484c:	2003      	movs	r0, #3
 800484e:	e7e3      	b.n	8004818 <FLASH_WaitForLastOperation+0x20>
    pFlash.ErrorCode = error;
 8004850:	4a03      	ldr	r2, [pc, #12]	; (8004860 <FLASH_WaitForLastOperation+0x68>)
 8004852:	6053      	str	r3, [r2, #4]
    return HAL_ERROR;
 8004854:	2001      	movs	r0, #1
 8004856:	e7df      	b.n	8004818 <FLASH_WaitForLastOperation+0x20>
  return HAL_OK;
 8004858:	2000      	movs	r0, #0
 800485a:	e7dd      	b.n	8004818 <FLASH_WaitForLastOperation+0x20>
 800485c:	58004000 	.word	0x58004000
 8004860:	200006b4 	.word	0x200006b4

08004864 <HAL_FLASH_Program>:
{
 8004864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004866:	461f      	mov	r7, r3
  __HAL_LOCK(&pFlash);
 8004868:	4b15      	ldr	r3, [pc, #84]	; (80048c0 <HAL_FLASH_Program+0x5c>)
 800486a:	781b      	ldrb	r3, [r3, #0]
 800486c:	2b01      	cmp	r3, #1
 800486e:	d025      	beq.n	80048bc <HAL_FLASH_Program+0x58>
 8004870:	4604      	mov	r4, r0
 8004872:	460d      	mov	r5, r1
 8004874:	4616      	mov	r6, r2
 8004876:	4b12      	ldr	r3, [pc, #72]	; (80048c0 <HAL_FLASH_Program+0x5c>)
 8004878:	2201      	movs	r2, #1
 800487a:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800487c:	2200      	movs	r2, #0
 800487e:	605a      	str	r2, [r3, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004880:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004884:	f7ff ffb8 	bl	80047f8 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8004888:	b970      	cbnz	r0, 80048a8 <HAL_FLASH_Program+0x44>
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 800488a:	2c01      	cmp	r4, #1
 800488c:	d010      	beq.n	80048b0 <HAL_FLASH_Program+0x4c>
      FLASH_Program_Fast(Address, (uint32_t)Data);
 800488e:	4631      	mov	r1, r6
 8004890:	4628      	mov	r0, r5
 8004892:	f7ff ff6f 	bl	8004774 <FLASH_Program_Fast>
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004896:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800489a:	f7ff ffad 	bl	80047f8 <FLASH_WaitForLastOperation>
    CLEAR_BIT(FLASH->CR, TypeProgram);
 800489e:	4a09      	ldr	r2, [pc, #36]	; (80048c4 <HAL_FLASH_Program+0x60>)
 80048a0:	6953      	ldr	r3, [r2, #20]
 80048a2:	ea23 0304 	bic.w	r3, r3, r4
 80048a6:	6153      	str	r3, [r2, #20]
  __HAL_UNLOCK(&pFlash);
 80048a8:	4b05      	ldr	r3, [pc, #20]	; (80048c0 <HAL_FLASH_Program+0x5c>)
 80048aa:	2200      	movs	r2, #0
 80048ac:	701a      	strb	r2, [r3, #0]
}
 80048ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      FLASH_Program_DoubleWord(Address, Data);
 80048b0:	4632      	mov	r2, r6
 80048b2:	463b      	mov	r3, r7
 80048b4:	4628      	mov	r0, r5
 80048b6:	f7ff ff4f 	bl	8004758 <FLASH_Program_DoubleWord>
 80048ba:	e7ec      	b.n	8004896 <HAL_FLASH_Program+0x32>
  __HAL_LOCK(&pFlash);
 80048bc:	2002      	movs	r0, #2
 80048be:	e7f6      	b.n	80048ae <HAL_FLASH_Program+0x4a>
 80048c0:	200006b4 	.word	0x200006b4
 80048c4:	58004000 	.word	0x58004000

080048c8 <FLASH_MassErase>:
{
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 80048c8:	4a03      	ldr	r2, [pc, #12]	; (80048d8 <FLASH_MassErase+0x10>)
 80048ca:	6953      	ldr	r3, [r2, #20]
 80048cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048d0:	f043 0304 	orr.w	r3, r3, #4
 80048d4:	6153      	str	r3, [r2, #20]
#endif
}
 80048d6:	4770      	bx	lr
 80048d8:	58004000 	.word	0x58004000

080048dc <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 80048dc:	4b18      	ldr	r3, [pc, #96]	; (8004940 <FLASH_FlushCaches+0x64>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d006      	beq.n	80048f6 <FLASH_FlushCaches+0x1a>
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 80048e8:	4b15      	ldr	r3, [pc, #84]	; (8004940 <FLASH_FlushCaches+0x64>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d012      	beq.n	800491a <FLASH_FlushCaches+0x3e>
    __HAL_FLASH_DATA_CACHE_RESET();
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
  }
#endif
}
 80048f4:	4770      	bx	lr
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80048f6:	4b12      	ldr	r3, [pc, #72]	; (8004940 <FLASH_FlushCaches+0x64>)
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80048fe:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004906:	601a      	str	r2, [r3, #0]
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800490e:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004916:	601a      	str	r2, [r3, #0]
 8004918:	e7e6      	b.n	80048e8 <FLASH_FlushCaches+0xc>
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800491a:	4b09      	ldr	r3, [pc, #36]	; (8004940 <FLASH_FlushCaches+0x64>)
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004922:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_DATA_CACHE_RESET();
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800492a:	601a      	str	r2, [r3, #0]
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004932:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800493a:	601a      	str	r2, [r3, #0]
}
 800493c:	e7da      	b.n	80048f4 <FLASH_FlushCaches+0x18>
 800493e:	bf00      	nop
 8004940:	58004000 	.word	0x58004000

08004944 <FLASH_AcknowledgePageErase>:
static void FLASH_AcknowledgePageErase(void)
{
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8004944:	4a03      	ldr	r2, [pc, #12]	; (8004954 <FLASH_AcknowledgePageErase+0x10>)
 8004946:	6953      	ldr	r3, [r2, #20]
 8004948:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 800494c:	f023 0302 	bic.w	r3, r3, #2
 8004950:	6153      	str	r3, [r2, #20]
#endif
}
 8004952:	4770      	bx	lr
 8004954:	58004000 	.word	0x58004000

08004958 <FLASH_PageErase>:
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8004958:	4a05      	ldr	r2, [pc, #20]	; (8004970 <FLASH_PageErase+0x18>)
 800495a:	6953      	ldr	r3, [r2, #20]
 800495c:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8004960:	ea43 00c0 	orr.w	r0, r3, r0, lsl #3
 8004964:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8004968:	f040 0002 	orr.w	r0, r0, #2
 800496c:	6150      	str	r0, [r2, #20]
}
 800496e:	4770      	bx	lr
 8004970:	58004000 	.word	0x58004000

08004974 <HAL_FLASHEx_Erase>:
{
 8004974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 8004976:	4b1e      	ldr	r3, [pc, #120]	; (80049f0 <HAL_FLASHEx_Erase+0x7c>)
 8004978:	781b      	ldrb	r3, [r3, #0]
 800497a:	2b01      	cmp	r3, #1
 800497c:	d035      	beq.n	80049ea <HAL_FLASHEx_Erase+0x76>
 800497e:	4605      	mov	r5, r0
 8004980:	460f      	mov	r7, r1
 8004982:	4b1b      	ldr	r3, [pc, #108]	; (80049f0 <HAL_FLASHEx_Erase+0x7c>)
 8004984:	2201      	movs	r2, #1
 8004986:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004988:	2200      	movs	r2, #0
 800498a:	605a      	str	r2, [r3, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800498c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004990:	f7ff ff32 	bl	80047f8 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8004994:	4606      	mov	r6, r0
 8004996:	bb18      	cbnz	r0, 80049e0 <HAL_FLASHEx_Erase+0x6c>
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004998:	682b      	ldr	r3, [r5, #0]
 800499a:	2b04      	cmp	r3, #4
 800499c:	d013      	beq.n	80049c6 <HAL_FLASHEx_Erase+0x52>
      *PageError = 0xFFFFFFFFU;
 800499e:	f04f 33ff 	mov.w	r3, #4294967295
 80049a2:	603b      	str	r3, [r7, #0]
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 80049a4:	686c      	ldr	r4, [r5, #4]
 80049a6:	686b      	ldr	r3, [r5, #4]
 80049a8:	68aa      	ldr	r2, [r5, #8]
 80049aa:	4413      	add	r3, r2
 80049ac:	42a3      	cmp	r3, r4
 80049ae:	d913      	bls.n	80049d8 <HAL_FLASHEx_Erase+0x64>
        FLASH_PageErase(index);
 80049b0:	4620      	mov	r0, r4
 80049b2:	f7ff ffd1 	bl	8004958 <FLASH_PageErase>
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80049b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80049ba:	f7ff ff1d 	bl	80047f8 <FLASH_WaitForLastOperation>
        if (status != HAL_OK)
 80049be:	4606      	mov	r6, r0
 80049c0:	b948      	cbnz	r0, 80049d6 <HAL_FLASHEx_Erase+0x62>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 80049c2:	3401      	adds	r4, #1
 80049c4:	e7ef      	b.n	80049a6 <HAL_FLASHEx_Erase+0x32>
      FLASH_MassErase();
 80049c6:	f7ff ff7f 	bl	80048c8 <FLASH_MassErase>
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80049ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80049ce:	f7ff ff13 	bl	80047f8 <FLASH_WaitForLastOperation>
 80049d2:	4606      	mov	r6, r0
 80049d4:	e002      	b.n	80049dc <HAL_FLASHEx_Erase+0x68>
          *PageError = index;
 80049d6:	603c      	str	r4, [r7, #0]
      FLASH_AcknowledgePageErase();
 80049d8:	f7ff ffb4 	bl	8004944 <FLASH_AcknowledgePageErase>
    FLASH_FlushCaches();
 80049dc:	f7ff ff7e 	bl	80048dc <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 80049e0:	4b03      	ldr	r3, [pc, #12]	; (80049f0 <HAL_FLASHEx_Erase+0x7c>)
 80049e2:	2200      	movs	r2, #0
 80049e4:	701a      	strb	r2, [r3, #0]
}
 80049e6:	4630      	mov	r0, r6
 80049e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 80049ea:	2602      	movs	r6, #2
 80049ec:	e7fb      	b.n	80049e6 <HAL_FLASHEx_Erase+0x72>
 80049ee:	bf00      	nop
 80049f0:	200006b4 	.word	0x200006b4

080049f4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80049f4:	b570      	push	{r4, r5, r6, lr}
  uint32_t position = 0x00u;
 80049f6:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80049f8:	e069      	b.n	8004ace <HAL_GPIO_Init+0xda>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80049fa:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80049fc:	005e      	lsls	r6, r3, #1
 80049fe:	2403      	movs	r4, #3
 8004a00:	40b4      	lsls	r4, r6
 8004a02:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004a06:	68cc      	ldr	r4, [r1, #12]
 8004a08:	40b4      	lsls	r4, r6
 8004a0a:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8004a0c:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a0e:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004a10:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004a14:	684c      	ldr	r4, [r1, #4]
 8004a16:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8004a1a:	409c      	lsls	r4, r3
 8004a1c:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8004a1e:	6044      	str	r4, [r0, #4]
 8004a20:	e066      	b.n	8004af0 <HAL_GPIO_Init+0xfc>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004a22:	08dd      	lsrs	r5, r3, #3
 8004a24:	3508      	adds	r5, #8
 8004a26:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004a2a:	f003 0c07 	and.w	ip, r3, #7
 8004a2e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8004a32:	f04f 0e0f 	mov.w	lr, #15
 8004a36:	fa0e fe0c 	lsl.w	lr, lr, ip
 8004a3a:	ea24 0e0e 	bic.w	lr, r4, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004a3e:	690c      	ldr	r4, [r1, #16]
 8004a40:	fa04 f40c 	lsl.w	r4, r4, ip
 8004a44:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3u] = temp;
 8004a48:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 8004a4c:	e067      	b.n	8004b1e <HAL_GPIO_Init+0x12a>
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004a4e:	2402      	movs	r4, #2
 8004a50:	e000      	b.n	8004a54 <HAL_GPIO_Init+0x60>
 8004a52:	2400      	movs	r4, #0
 8004a54:	fa04 f40e 	lsl.w	r4, r4, lr
 8004a58:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004a5a:	f10c 0c02 	add.w	ip, ip, #2
 8004a5e:	4d4b      	ldr	r5, [pc, #300]	; (8004b8c <HAL_GPIO_Init+0x198>)
 8004a60:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8004a64:	4c4a      	ldr	r4, [pc, #296]	; (8004b90 <HAL_GPIO_Init+0x19c>)
 8004a66:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8004a6a:	43d4      	mvns	r4, r2
 8004a6c:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004a70:	f8d1 c004 	ldr.w	ip, [r1, #4]
 8004a74:	f41c 3f80 	tst.w	ip, #65536	; 0x10000
 8004a78:	d001      	beq.n	8004a7e <HAL_GPIO_Init+0x8a>
        {
          temp |= iocurrent;
 8004a7a:	ea42 0605 	orr.w	r6, r2, r5
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8004a7e:	4d44      	ldr	r5, [pc, #272]	; (8004b90 <HAL_GPIO_Init+0x19c>)
 8004a80:	f8c5 6080 	str.w	r6, [r5, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8004a84:	f8d5 5084 	ldr.w	r5, [r5, #132]	; 0x84
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8004a88:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004a8c:	f8d1 c004 	ldr.w	ip, [r1, #4]
 8004a90:	f41c 3f00 	tst.w	ip, #131072	; 0x20000
 8004a94:	d001      	beq.n	8004a9a <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 8004a96:	ea42 0605 	orr.w	r6, r2, r5
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8004a9a:	4d3d      	ldr	r5, [pc, #244]	; (8004b90 <HAL_GPIO_Init+0x19c>)
 8004a9c:	f8c5 6084 	str.w	r6, [r5, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004aa0:	682d      	ldr	r5, [r5, #0]
        temp &= ~(iocurrent);
 8004aa2:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004aa6:	f8d1 c004 	ldr.w	ip, [r1, #4]
 8004aaa:	f41c 1f80 	tst.w	ip, #1048576	; 0x100000
 8004aae:	d001      	beq.n	8004ab4 <HAL_GPIO_Init+0xc0>
        {
          temp |= iocurrent;
 8004ab0:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8004ab4:	4d36      	ldr	r5, [pc, #216]	; (8004b90 <HAL_GPIO_Init+0x19c>)
 8004ab6:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 8004ab8:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8004aba:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004abc:	684e      	ldr	r6, [r1, #4]
 8004abe:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8004ac2:	d001      	beq.n	8004ac8 <HAL_GPIO_Init+0xd4>
        {
          temp |= iocurrent;
 8004ac4:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR1 = temp;
 8004ac8:	4a31      	ldr	r2, [pc, #196]	; (8004b90 <HAL_GPIO_Init+0x19c>)
 8004aca:	6054      	str	r4, [r2, #4]
      }
    }

    position++;
 8004acc:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004ace:	680a      	ldr	r2, [r1, #0]
 8004ad0:	fa32 f403 	lsrs.w	r4, r2, r3
 8004ad4:	d058      	beq.n	8004b88 <HAL_GPIO_Init+0x194>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004ad6:	f04f 0c01 	mov.w	ip, #1
 8004ada:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 8004ade:	ea1c 0202 	ands.w	r2, ip, r2
 8004ae2:	d0f3      	beq.n	8004acc <HAL_GPIO_Init+0xd8>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004ae4:	684c      	ldr	r4, [r1, #4]
 8004ae6:	f004 0403 	and.w	r4, r4, #3
 8004aea:	3c01      	subs	r4, #1
 8004aec:	2c01      	cmp	r4, #1
 8004aee:	d984      	bls.n	80049fa <HAL_GPIO_Init+0x6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004af0:	684c      	ldr	r4, [r1, #4]
 8004af2:	f004 0403 	and.w	r4, r4, #3
 8004af6:	2c03      	cmp	r4, #3
 8004af8:	d00c      	beq.n	8004b14 <HAL_GPIO_Init+0x120>
        temp = GPIOx->PUPDR;
 8004afa:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004afc:	005d      	lsls	r5, r3, #1
 8004afe:	f04f 0c03 	mov.w	ip, #3
 8004b02:	fa0c fc05 	lsl.w	ip, ip, r5
 8004b06:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004b0a:	688c      	ldr	r4, [r1, #8]
 8004b0c:	40ac      	lsls	r4, r5
 8004b0e:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->PUPDR = temp;
 8004b12:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b14:	684c      	ldr	r4, [r1, #4]
 8004b16:	f004 0403 	and.w	r4, r4, #3
 8004b1a:	2c02      	cmp	r4, #2
 8004b1c:	d081      	beq.n	8004a22 <HAL_GPIO_Init+0x2e>
      temp = GPIOx->MODER;
 8004b1e:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004b20:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8004b24:	f04f 0c03 	mov.w	ip, #3
 8004b28:	fa0c fc0e 	lsl.w	ip, ip, lr
 8004b2c:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004b30:	684c      	ldr	r4, [r1, #4]
 8004b32:	f004 0403 	and.w	r4, r4, #3
 8004b36:	fa04 f40e 	lsl.w	r4, r4, lr
 8004b3a:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8004b3e:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004b40:	684c      	ldr	r4, [r1, #4]
 8004b42:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 8004b46:	d0c1      	beq.n	8004acc <HAL_GPIO_Init+0xd8>
        temp = SYSCFG->EXTICR[position >> 2u];
 8004b48:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8004b4c:	f10c 0502 	add.w	r5, ip, #2
 8004b50:	4c0e      	ldr	r4, [pc, #56]	; (8004b8c <HAL_GPIO_Init+0x198>)
 8004b52:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8004b56:	f003 0e03 	and.w	lr, r3, #3
 8004b5a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8004b5e:	2407      	movs	r4, #7
 8004b60:	fa04 f40e 	lsl.w	r4, r4, lr
 8004b64:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004b68:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8004b6c:	f43f af71 	beq.w	8004a52 <HAL_GPIO_Init+0x5e>
 8004b70:	4c08      	ldr	r4, [pc, #32]	; (8004b94 <HAL_GPIO_Init+0x1a0>)
 8004b72:	42a0      	cmp	r0, r4
 8004b74:	d006      	beq.n	8004b84 <HAL_GPIO_Init+0x190>
 8004b76:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004b7a:	42a0      	cmp	r0, r4
 8004b7c:	f43f af67 	beq.w	8004a4e <HAL_GPIO_Init+0x5a>
 8004b80:	2407      	movs	r4, #7
 8004b82:	e767      	b.n	8004a54 <HAL_GPIO_Init+0x60>
 8004b84:	2401      	movs	r4, #1
 8004b86:	e765      	b.n	8004a54 <HAL_GPIO_Init+0x60>
  }
}
 8004b88:	bd70      	pop	{r4, r5, r6, pc}
 8004b8a:	bf00      	nop
 8004b8c:	40010000 	.word	0x40010000
 8004b90:	58000800 	.word	0x58000800
 8004b94:	48000400 	.word	0x48000400

08004b98 <HAL_GPIO_DeInit>:
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0x00u;
 8004b98:	2300      	movs	r3, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8004b9a:	fa31 f203 	lsrs.w	r2, r1, r3
 8004b9e:	d071      	beq.n	8004c84 <HAL_GPIO_DeInit+0xec>
{
 8004ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ba2:	e02e      	b.n	8004c02 <HAL_GPIO_DeInit+0x6a>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
      tmp &= (0x07uL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8004ba4:	2502      	movs	r5, #2
 8004ba6:	e000      	b.n	8004baa <HAL_GPIO_DeInit+0x12>
 8004ba8:	2500      	movs	r5, #0
 8004baa:	fa05 f50c 	lsl.w	r5, r5, ip
 8004bae:	42a5      	cmp	r5, r4
 8004bb0:	d049      	beq.n	8004c46 <HAL_GPIO_DeInit+0xae>
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8004bb2:	6804      	ldr	r4, [r0, #0]
 8004bb4:	005d      	lsls	r5, r3, #1
 8004bb6:	f04f 0c03 	mov.w	ip, #3
 8004bba:	fa0c fc05 	lsl.w	ip, ip, r5
 8004bbe:	ea44 040c 	orr.w	r4, r4, ip
 8004bc2:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8004bc4:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8004bc8:	f10e 0e08 	add.w	lr, lr, #8
 8004bcc:	f850 402e 	ldr.w	r4, [r0, lr, lsl #2]
 8004bd0:	f003 0607 	and.w	r6, r3, #7
 8004bd4:	00b6      	lsls	r6, r6, #2
 8004bd6:	250f      	movs	r5, #15
 8004bd8:	40b5      	lsls	r5, r6
 8004bda:	ea24 0405 	bic.w	r4, r4, r5
 8004bde:	f840 402e 	str.w	r4, [r0, lr, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004be2:	6884      	ldr	r4, [r0, #8]
 8004be4:	ea24 040c 	bic.w	r4, r4, ip
 8004be8:	6084      	str	r4, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004bea:	6844      	ldr	r4, [r0, #4]
 8004bec:	ea24 0202 	bic.w	r2, r4, r2
 8004bf0:	6042      	str	r2, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004bf2:	68c2      	ldr	r2, [r0, #12]
 8004bf4:	ea22 020c 	bic.w	r2, r2, ip
 8004bf8:	60c2      	str	r2, [r0, #12]
    }

    position++;
 8004bfa:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00u)
 8004bfc:	fa31 f203 	lsrs.w	r2, r1, r3
 8004c00:	d03f      	beq.n	8004c82 <HAL_GPIO_DeInit+0xea>
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004c02:	2201      	movs	r2, #1
 8004c04:	409a      	lsls	r2, r3
    if (iocurrent != 0x00u)
 8004c06:	ea12 0701 	ands.w	r7, r2, r1
 8004c0a:	d0f6      	beq.n	8004bfa <HAL_GPIO_DeInit+0x62>
      tmp = SYSCFG->EXTICR[position >> 2u];
 8004c0c:	089e      	lsrs	r6, r3, #2
 8004c0e:	1cb5      	adds	r5, r6, #2
 8004c10:	4c1d      	ldr	r4, [pc, #116]	; (8004c88 <HAL_GPIO_DeInit+0xf0>)
 8004c12:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8004c16:	f003 0c03 	and.w	ip, r3, #3
 8004c1a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8004c1e:	f04f 0e07 	mov.w	lr, #7
 8004c22:	fa0e fe0c 	lsl.w	lr, lr, ip
 8004c26:	ea0e 0404 	and.w	r4, lr, r4
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8004c2a:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8004c2e:	d0bb      	beq.n	8004ba8 <HAL_GPIO_DeInit+0x10>
 8004c30:	4d16      	ldr	r5, [pc, #88]	; (8004c8c <HAL_GPIO_DeInit+0xf4>)
 8004c32:	42a8      	cmp	r0, r5
 8004c34:	d005      	beq.n	8004c42 <HAL_GPIO_DeInit+0xaa>
 8004c36:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004c3a:	42a8      	cmp	r0, r5
 8004c3c:	d0b2      	beq.n	8004ba4 <HAL_GPIO_DeInit+0xc>
 8004c3e:	2507      	movs	r5, #7
 8004c40:	e7b3      	b.n	8004baa <HAL_GPIO_DeInit+0x12>
 8004c42:	2501      	movs	r5, #1
 8004c44:	e7b1      	b.n	8004baa <HAL_GPIO_DeInit+0x12>
        EXTI->IMR1 &= ~(iocurrent);
 8004c46:	4c12      	ldr	r4, [pc, #72]	; (8004c90 <HAL_GPIO_DeInit+0xf8>)
 8004c48:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 8004c4c:	ea25 0507 	bic.w	r5, r5, r7
 8004c50:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8004c54:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 8004c58:	ea25 0507 	bic.w	r5, r5, r7
 8004c5c:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
        EXTI->RTSR1 &= ~(iocurrent);
 8004c60:	6825      	ldr	r5, [r4, #0]
 8004c62:	ea25 0507 	bic.w	r5, r5, r7
 8004c66:	6025      	str	r5, [r4, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8004c68:	6865      	ldr	r5, [r4, #4]
 8004c6a:	ea25 0507 	bic.w	r5, r5, r7
 8004c6e:	6065      	str	r5, [r4, #4]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8004c70:	4d05      	ldr	r5, [pc, #20]	; (8004c88 <HAL_GPIO_DeInit+0xf0>)
 8004c72:	3602      	adds	r6, #2
 8004c74:	f855 4026 	ldr.w	r4, [r5, r6, lsl #2]
 8004c78:	ea24 040e 	bic.w	r4, r4, lr
 8004c7c:	f845 4026 	str.w	r4, [r5, r6, lsl #2]
 8004c80:	e797      	b.n	8004bb2 <HAL_GPIO_DeInit+0x1a>
  }
}
 8004c82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c84:	4770      	bx	lr
 8004c86:	bf00      	nop
 8004c88:	40010000 	.word	0x40010000
 8004c8c:	48000400 	.word	0x48000400
 8004c90:	58000800 	.word	0x58000800

08004c94 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004c94:	6903      	ldr	r3, [r0, #16]
 8004c96:	4219      	tst	r1, r3
 8004c98:	d001      	beq.n	8004c9e <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 8004c9a:	2001      	movs	r0, #1
 8004c9c:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004c9e:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8004ca0:	4770      	bx	lr

08004ca2 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004ca2:	b10a      	cbz	r2, 8004ca8 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004ca4:	6181      	str	r1, [r0, #24]
 8004ca6:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004ca8:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8004caa:	4770      	bx	lr

08004cac <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004cac:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004cae:	ea01 0203 	and.w	r2, r1, r3
 8004cb2:	ea21 0103 	bic.w	r1, r1, r3
 8004cb6:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004cba:	6181      	str	r1, [r0, #24]
}
 8004cbc:	4770      	bx	lr
	...

08004cc0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004cc0:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004cc2:	4b05      	ldr	r3, [pc, #20]	; (8004cd8 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8004cc4:	68db      	ldr	r3, [r3, #12]
 8004cc6:	4203      	tst	r3, r0
 8004cc8:	d100      	bne.n	8004ccc <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 8004cca:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004ccc:	4b02      	ldr	r3, [pc, #8]	; (8004cd8 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8004cce:	60d8      	str	r0, [r3, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004cd0:	f7fe fbda 	bl	8003488 <HAL_GPIO_EXTI_Callback>
}
 8004cd4:	e7f9      	b.n	8004cca <HAL_GPIO_EXTI_IRQHandler+0xa>
 8004cd6:	bf00      	nop
 8004cd8:	58000800 	.word	0x58000800

08004cdc <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004cdc:	6803      	ldr	r3, [r0, #0]
 8004cde:	699a      	ldr	r2, [r3, #24]
 8004ce0:	f012 0f02 	tst.w	r2, #2
 8004ce4:	d001      	beq.n	8004cea <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004cea:	6803      	ldr	r3, [r0, #0]
 8004cec:	699a      	ldr	r2, [r3, #24]
 8004cee:	f012 0f01 	tst.w	r2, #1
 8004cf2:	d103      	bne.n	8004cfc <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004cf4:	699a      	ldr	r2, [r3, #24]
 8004cf6:	f042 0201 	orr.w	r2, r2, #1
 8004cfa:	619a      	str	r2, [r3, #24]
  }
}
 8004cfc:	4770      	bx	lr

08004cfe <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004cfe:	b410      	push	{r4}
 8004d00:	9c01      	ldr	r4, [sp, #4]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004d02:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8004d06:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004d0a:	4319      	orrs	r1, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004d0c:	4321      	orrs	r1, r4
 8004d0e:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004d12:	6802      	ldr	r2, [r0, #0]
 8004d14:	6853      	ldr	r3, [r2, #4]
 8004d16:	0d64      	lsrs	r4, r4, #21
 8004d18:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 8004d1c:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 8004d20:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 8004d24:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 8004d28:	f044 0403 	orr.w	r4, r4, #3
 8004d2c:	ea23 0304 	bic.w	r3, r3, r4
 8004d30:	430b      	orrs	r3, r1
 8004d32:	6053      	str	r3, [r2, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004d34:	bc10      	pop	{r4}
 8004d36:	4770      	bx	lr

08004d38 <I2C_IsErrorOccurred>:
{
 8004d38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d3c:	4604      	mov	r4, r0
  uint32_t itflag   = hi2c->Instance->ISR;
 8004d3e:	6803      	ldr	r3, [r0, #0]
 8004d40:	699e      	ldr	r6, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004d42:	f016 0610 	ands.w	r6, r6, #16
 8004d46:	d07c      	beq.n	8004e42 <I2C_IsErrorOccurred+0x10a>
 8004d48:	460d      	mov	r5, r1
 8004d4a:	4690      	mov	r8, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d4c:	2210      	movs	r2, #16
 8004d4e:	61da      	str	r2, [r3, #28]
  uint32_t error_code = 0;
 8004d50:	2600      	movs	r6, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004d52:	4637      	mov	r7, r6
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004d54:	6823      	ldr	r3, [r4, #0]
 8004d56:	6998      	ldr	r0, [r3, #24]
 8004d58:	f010 0f20 	tst.w	r0, #32
 8004d5c:	d130      	bne.n	8004dc0 <I2C_IsErrorOccurred+0x88>
 8004d5e:	bb7f      	cbnz	r7, 8004dc0 <I2C_IsErrorOccurred+0x88>
      if (Timeout != HAL_MAX_DELAY)
 8004d60:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004d64:	d0f6      	beq.n	8004d54 <I2C_IsErrorOccurred+0x1c>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004d66:	f7fc ffdf 	bl	8001d28 <HAL_GetTick>
 8004d6a:	eba0 0008 	sub.w	r0, r0, r8
 8004d6e:	42a8      	cmp	r0, r5
 8004d70:	d801      	bhi.n	8004d76 <I2C_IsErrorOccurred+0x3e>
 8004d72:	2d00      	cmp	r5, #0
 8004d74:	d1ee      	bne.n	8004d54 <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004d76:	6821      	ldr	r1, [r4, #0]
 8004d78:	684b      	ldr	r3, [r1, #4]
 8004d7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          tmp2 = hi2c->Mode;
 8004d7e:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 8004d82:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004d84:	6988      	ldr	r0, [r1, #24]
 8004d86:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8004d8a:	d002      	beq.n	8004d92 <I2C_IsErrorOccurred+0x5a>
 8004d8c:	b90b      	cbnz	r3, 8004d92 <I2C_IsErrorOccurred+0x5a>
              (tmp1 != I2C_CR2_STOP) && \
 8004d8e:	2a20      	cmp	r2, #32
 8004d90:	d10e      	bne.n	8004db0 <I2C_IsErrorOccurred+0x78>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004d92:	6823      	ldr	r3, [r4, #0]
 8004d94:	699b      	ldr	r3, [r3, #24]
 8004d96:	f013 0f20 	tst.w	r3, #32
 8004d9a:	d1db      	bne.n	8004d54 <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004d9c:	f7fc ffc4 	bl	8001d28 <HAL_GetTick>
 8004da0:	eba0 0008 	sub.w	r0, r0, r8
 8004da4:	2819      	cmp	r0, #25
 8004da6:	d9f4      	bls.n	8004d92 <I2C_IsErrorOccurred+0x5a>
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8004da8:	f046 0620 	orr.w	r6, r6, #32
              status = HAL_ERROR;
 8004dac:	2701      	movs	r7, #1
              break;
 8004dae:	e7d1      	b.n	8004d54 <I2C_IsErrorOccurred+0x1c>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004db0:	684b      	ldr	r3, [r1, #4]
 8004db2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004db6:	604b      	str	r3, [r1, #4]
            tickstart = HAL_GetTick();
 8004db8:	f7fc ffb6 	bl	8001d28 <HAL_GetTick>
 8004dbc:	4680      	mov	r8, r0
 8004dbe:	e7e8      	b.n	8004d92 <I2C_IsErrorOccurred+0x5a>
    if (status == HAL_OK)
 8004dc0:	b90f      	cbnz	r7, 8004dc6 <I2C_IsErrorOccurred+0x8e>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004dc2:	2220      	movs	r2, #32
 8004dc4:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 8004dc6:	f046 0604 	orr.w	r6, r6, #4
    status = HAL_ERROR;
 8004dca:	2501      	movs	r5, #1
  itflag = hi2c->Instance->ISR;
 8004dcc:	6822      	ldr	r2, [r4, #0]
 8004dce:	6993      	ldr	r3, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004dd0:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004dd4:	d005      	beq.n	8004de2 <I2C_IsErrorOccurred+0xaa>
    error_code |= HAL_I2C_ERROR_BERR;
 8004dd6:	f046 0601 	orr.w	r6, r6, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004dda:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004dde:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 8004de0:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004de2:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004de6:	d006      	beq.n	8004df6 <I2C_IsErrorOccurred+0xbe>
    error_code |= HAL_I2C_ERROR_OVR;
 8004de8:	f046 0608 	orr.w	r6, r6, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004dec:	6822      	ldr	r2, [r4, #0]
 8004dee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004df2:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 8004df4:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004df6:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004dfa:	d024      	beq.n	8004e46 <I2C_IsErrorOccurred+0x10e>
    error_code |= HAL_I2C_ERROR_ARLO;
 8004dfc:	f046 0602 	orr.w	r6, r6, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004e00:	6823      	ldr	r3, [r4, #0]
 8004e02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e06:	61da      	str	r2, [r3, #28]
    status = HAL_ERROR;
 8004e08:	2501      	movs	r5, #1
    I2C_Flush_TXDR(hi2c);
 8004e0a:	4620      	mov	r0, r4
 8004e0c:	f7ff ff66 	bl	8004cdc <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8004e10:	6822      	ldr	r2, [r4, #0]
 8004e12:	6853      	ldr	r3, [r2, #4]
 8004e14:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8004e18:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8004e1c:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8004e20:	f023 0301 	bic.w	r3, r3, #1
 8004e24:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 8004e26:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004e28:	4333      	orrs	r3, r6
 8004e2a:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004e2c:	2320      	movs	r3, #32
 8004e2e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e32:	2300      	movs	r3, #0
 8004e34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8004e38:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8004e3c:	4628      	mov	r0, r5
 8004e3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  HAL_StatusTypeDef status = HAL_OK;
 8004e42:	2500      	movs	r5, #0
 8004e44:	e7c2      	b.n	8004dcc <I2C_IsErrorOccurred+0x94>
  if (status != HAL_OK)
 8004e46:	2d00      	cmp	r5, #0
 8004e48:	d0f8      	beq.n	8004e3c <I2C_IsErrorOccurred+0x104>
 8004e4a:	e7de      	b.n	8004e0a <I2C_IsErrorOccurred+0xd2>

08004e4c <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8004e4c:	b570      	push	{r4, r5, r6, lr}
 8004e4e:	4604      	mov	r4, r0
 8004e50:	460d      	mov	r5, r1
 8004e52:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004e54:	6823      	ldr	r3, [r4, #0]
 8004e56:	699b      	ldr	r3, [r3, #24]
 8004e58:	f013 0f02 	tst.w	r3, #2
 8004e5c:	d11d      	bne.n	8004e9a <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e5e:	4632      	mov	r2, r6
 8004e60:	4629      	mov	r1, r5
 8004e62:	4620      	mov	r0, r4
 8004e64:	f7ff ff68 	bl	8004d38 <I2C_IsErrorOccurred>
 8004e68:	b9c8      	cbnz	r0, 8004e9e <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 8004e6a:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004e6e:	d0f1      	beq.n	8004e54 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e70:	f7fc ff5a 	bl	8001d28 <HAL_GetTick>
 8004e74:	1b80      	subs	r0, r0, r6
 8004e76:	42a8      	cmp	r0, r5
 8004e78:	d801      	bhi.n	8004e7e <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8004e7a:	2d00      	cmp	r5, #0
 8004e7c:	d1ea      	bne.n	8004e54 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e7e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004e80:	f043 0320 	orr.w	r3, r3, #32
 8004e84:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004e86:	2320      	movs	r3, #32
 8004e88:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8004e92:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8004e96:	2001      	movs	r0, #1
 8004e98:	e000      	b.n	8004e9c <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
 8004e9a:	2000      	movs	r0, #0
}
 8004e9c:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8004e9e:	2001      	movs	r0, #1
 8004ea0:	e7fc      	b.n	8004e9c <I2C_WaitOnTXISFlagUntilTimeout+0x50>

08004ea2 <I2C_WaitOnFlagUntilTimeout>:
{
 8004ea2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ea6:	4606      	mov	r6, r0
 8004ea8:	4688      	mov	r8, r1
 8004eaa:	4617      	mov	r7, r2
 8004eac:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004eae:	6834      	ldr	r4, [r6, #0]
 8004eb0:	69a4      	ldr	r4, [r4, #24]
 8004eb2:	ea38 0404 	bics.w	r4, r8, r4
 8004eb6:	bf0c      	ite	eq
 8004eb8:	2401      	moveq	r4, #1
 8004eba:	2400      	movne	r4, #0
 8004ebc:	42bc      	cmp	r4, r7
 8004ebe:	d118      	bne.n	8004ef2 <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8004ec0:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004ec4:	d0f3      	beq.n	8004eae <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ec6:	f7fc ff2f 	bl	8001d28 <HAL_GetTick>
 8004eca:	9b06      	ldr	r3, [sp, #24]
 8004ecc:	1ac0      	subs	r0, r0, r3
 8004ece:	42a8      	cmp	r0, r5
 8004ed0:	d801      	bhi.n	8004ed6 <I2C_WaitOnFlagUntilTimeout+0x34>
 8004ed2:	2d00      	cmp	r5, #0
 8004ed4:	d1eb      	bne.n	8004eae <I2C_WaitOnFlagUntilTimeout+0xc>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ed6:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8004ed8:	f043 0320 	orr.w	r3, r3, #32
 8004edc:	6473      	str	r3, [r6, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004ede:	2320      	movs	r3, #32
 8004ee0:	f886 3041 	strb.w	r3, [r6, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	f886 3042 	strb.w	r3, [r6, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8004eea:	f886 3040 	strb.w	r3, [r6, #64]	; 0x40
        return HAL_ERROR;
 8004eee:	2001      	movs	r0, #1
 8004ef0:	e000      	b.n	8004ef4 <I2C_WaitOnFlagUntilTimeout+0x52>
  return HAL_OK;
 8004ef2:	2000      	movs	r0, #0
}
 8004ef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004ef8 <I2C_RequestMemoryWrite>:
{
 8004ef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004efc:	b082      	sub	sp, #8
 8004efe:	4604      	mov	r4, r0
 8004f00:	4690      	mov	r8, r2
 8004f02:	461d      	mov	r5, r3
 8004f04:	9e08      	ldr	r6, [sp, #32]
 8004f06:	9f09      	ldr	r7, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004f08:	4b19      	ldr	r3, [pc, #100]	; (8004f70 <I2C_RequestMemoryWrite+0x78>)
 8004f0a:	9300      	str	r3, [sp, #0]
 8004f0c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004f10:	b2ea      	uxtb	r2, r5
 8004f12:	f7ff fef4 	bl	8004cfe <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f16:	463a      	mov	r2, r7
 8004f18:	4631      	mov	r1, r6
 8004f1a:	4620      	mov	r0, r4
 8004f1c:	f7ff ff96 	bl	8004e4c <I2C_WaitOnTXISFlagUntilTimeout>
 8004f20:	b9f8      	cbnz	r0, 8004f62 <I2C_RequestMemoryWrite+0x6a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004f22:	2d01      	cmp	r5, #1
 8004f24:	d10e      	bne.n	8004f44 <I2C_RequestMemoryWrite+0x4c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004f26:	6823      	ldr	r3, [r4, #0]
 8004f28:	fa5f f288 	uxtb.w	r2, r8
 8004f2c:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004f2e:	9700      	str	r7, [sp, #0]
 8004f30:	4633      	mov	r3, r6
 8004f32:	2200      	movs	r2, #0
 8004f34:	2180      	movs	r1, #128	; 0x80
 8004f36:	4620      	mov	r0, r4
 8004f38:	f7ff ffb3 	bl	8004ea2 <I2C_WaitOnFlagUntilTimeout>
 8004f3c:	b9a8      	cbnz	r0, 8004f6a <I2C_RequestMemoryWrite+0x72>
}
 8004f3e:	b002      	add	sp, #8
 8004f40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004f44:	6823      	ldr	r3, [r4, #0]
 8004f46:	ea4f 2218 	mov.w	r2, r8, lsr #8
 8004f4a:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f4c:	463a      	mov	r2, r7
 8004f4e:	4631      	mov	r1, r6
 8004f50:	4620      	mov	r0, r4
 8004f52:	f7ff ff7b 	bl	8004e4c <I2C_WaitOnTXISFlagUntilTimeout>
 8004f56:	b930      	cbnz	r0, 8004f66 <I2C_RequestMemoryWrite+0x6e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004f58:	6823      	ldr	r3, [r4, #0]
 8004f5a:	fa5f f288 	uxtb.w	r2, r8
 8004f5e:	629a      	str	r2, [r3, #40]	; 0x28
 8004f60:	e7e5      	b.n	8004f2e <I2C_RequestMemoryWrite+0x36>
    return HAL_ERROR;
 8004f62:	2001      	movs	r0, #1
 8004f64:	e7eb      	b.n	8004f3e <I2C_RequestMemoryWrite+0x46>
      return HAL_ERROR;
 8004f66:	2001      	movs	r0, #1
 8004f68:	e7e9      	b.n	8004f3e <I2C_RequestMemoryWrite+0x46>
    return HAL_ERROR;
 8004f6a:	2001      	movs	r0, #1
 8004f6c:	e7e7      	b.n	8004f3e <I2C_RequestMemoryWrite+0x46>
 8004f6e:	bf00      	nop
 8004f70:	80002000 	.word	0x80002000

08004f74 <I2C_RequestMemoryRead>:
{
 8004f74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f78:	b082      	sub	sp, #8
 8004f7a:	4604      	mov	r4, r0
 8004f7c:	4690      	mov	r8, r2
 8004f7e:	461d      	mov	r5, r3
 8004f80:	9e08      	ldr	r6, [sp, #32]
 8004f82:	9f09      	ldr	r7, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004f84:	4b18      	ldr	r3, [pc, #96]	; (8004fe8 <I2C_RequestMemoryRead+0x74>)
 8004f86:	9300      	str	r3, [sp, #0]
 8004f88:	2300      	movs	r3, #0
 8004f8a:	b2ea      	uxtb	r2, r5
 8004f8c:	f7ff feb7 	bl	8004cfe <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f90:	463a      	mov	r2, r7
 8004f92:	4631      	mov	r1, r6
 8004f94:	4620      	mov	r0, r4
 8004f96:	f7ff ff59 	bl	8004e4c <I2C_WaitOnTXISFlagUntilTimeout>
 8004f9a:	b9f8      	cbnz	r0, 8004fdc <I2C_RequestMemoryRead+0x68>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004f9c:	2d01      	cmp	r5, #1
 8004f9e:	d10e      	bne.n	8004fbe <I2C_RequestMemoryRead+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004fa0:	6823      	ldr	r3, [r4, #0]
 8004fa2:	fa5f f288 	uxtb.w	r2, r8
 8004fa6:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004fa8:	9700      	str	r7, [sp, #0]
 8004faa:	4633      	mov	r3, r6
 8004fac:	2200      	movs	r2, #0
 8004fae:	2140      	movs	r1, #64	; 0x40
 8004fb0:	4620      	mov	r0, r4
 8004fb2:	f7ff ff76 	bl	8004ea2 <I2C_WaitOnFlagUntilTimeout>
 8004fb6:	b9a8      	cbnz	r0, 8004fe4 <I2C_RequestMemoryRead+0x70>
}
 8004fb8:	b002      	add	sp, #8
 8004fba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004fbe:	6823      	ldr	r3, [r4, #0]
 8004fc0:	ea4f 2218 	mov.w	r2, r8, lsr #8
 8004fc4:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fc6:	463a      	mov	r2, r7
 8004fc8:	4631      	mov	r1, r6
 8004fca:	4620      	mov	r0, r4
 8004fcc:	f7ff ff3e 	bl	8004e4c <I2C_WaitOnTXISFlagUntilTimeout>
 8004fd0:	b930      	cbnz	r0, 8004fe0 <I2C_RequestMemoryRead+0x6c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004fd2:	6823      	ldr	r3, [r4, #0]
 8004fd4:	fa5f f288 	uxtb.w	r2, r8
 8004fd8:	629a      	str	r2, [r3, #40]	; 0x28
 8004fda:	e7e5      	b.n	8004fa8 <I2C_RequestMemoryRead+0x34>
    return HAL_ERROR;
 8004fdc:	2001      	movs	r0, #1
 8004fde:	e7eb      	b.n	8004fb8 <I2C_RequestMemoryRead+0x44>
      return HAL_ERROR;
 8004fe0:	2001      	movs	r0, #1
 8004fe2:	e7e9      	b.n	8004fb8 <I2C_RequestMemoryRead+0x44>
    return HAL_ERROR;
 8004fe4:	2001      	movs	r0, #1
 8004fe6:	e7e7      	b.n	8004fb8 <I2C_RequestMemoryRead+0x44>
 8004fe8:	80002000 	.word	0x80002000

08004fec <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8004fec:	b570      	push	{r4, r5, r6, lr}
 8004fee:	4605      	mov	r5, r0
 8004ff0:	460c      	mov	r4, r1
 8004ff2:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ff4:	682b      	ldr	r3, [r5, #0]
 8004ff6:	699b      	ldr	r3, [r3, #24]
 8004ff8:	f013 0f20 	tst.w	r3, #32
 8004ffc:	d11a      	bne.n	8005034 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ffe:	4632      	mov	r2, r6
 8005000:	4621      	mov	r1, r4
 8005002:	4628      	mov	r0, r5
 8005004:	f7ff fe98 	bl	8004d38 <I2C_IsErrorOccurred>
 8005008:	b9b0      	cbnz	r0, 8005038 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800500a:	f7fc fe8d 	bl	8001d28 <HAL_GetTick>
 800500e:	1b80      	subs	r0, r0, r6
 8005010:	42a0      	cmp	r0, r4
 8005012:	d801      	bhi.n	8005018 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 8005014:	2c00      	cmp	r4, #0
 8005016:	d1ed      	bne.n	8004ff4 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005018:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800501a:	f043 0320 	orr.w	r3, r3, #32
 800501e:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005020:	2320      	movs	r3, #32
 8005022:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005026:	2300      	movs	r3, #0
 8005028:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800502c:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 8005030:	2001      	movs	r0, #1
}
 8005032:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8005034:	2000      	movs	r0, #0
 8005036:	e7fc      	b.n	8005032 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 8005038:	2001      	movs	r0, #1
 800503a:	e7fa      	b.n	8005032 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

0800503c <HAL_I2C_Init>:
  if (hi2c == NULL)
 800503c:	2800      	cmp	r0, #0
 800503e:	d059      	beq.n	80050f4 <HAL_I2C_Init+0xb8>
{
 8005040:	b510      	push	{r4, lr}
 8005042:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005044:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005048:	2b00      	cmp	r3, #0
 800504a:	d043      	beq.n	80050d4 <HAL_I2C_Init+0x98>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800504c:	2324      	movs	r3, #36	; 0x24
 800504e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8005052:	6822      	ldr	r2, [r4, #0]
 8005054:	6813      	ldr	r3, [r2, #0]
 8005056:	f023 0301 	bic.w	r3, r3, #1
 800505a:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800505c:	6863      	ldr	r3, [r4, #4]
 800505e:	6822      	ldr	r2, [r4, #0]
 8005060:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8005064:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005066:	6822      	ldr	r2, [r4, #0]
 8005068:	6893      	ldr	r3, [r2, #8]
 800506a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800506e:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005070:	68e3      	ldr	r3, [r4, #12]
 8005072:	2b01      	cmp	r3, #1
 8005074:	d033      	beq.n	80050de <HAL_I2C_Init+0xa2>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005076:	68a3      	ldr	r3, [r4, #8]
 8005078:	6822      	ldr	r2, [r4, #0]
 800507a:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 800507e:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005080:	68e3      	ldr	r3, [r4, #12]
 8005082:	2b02      	cmp	r3, #2
 8005084:	d031      	beq.n	80050ea <HAL_I2C_Init+0xae>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005086:	6822      	ldr	r2, [r4, #0]
 8005088:	6853      	ldr	r3, [r2, #4]
 800508a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800508e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005092:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005094:	6822      	ldr	r2, [r4, #0]
 8005096:	68d3      	ldr	r3, [r2, #12]
 8005098:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800509c:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800509e:	6923      	ldr	r3, [r4, #16]
 80050a0:	6962      	ldr	r2, [r4, #20]
 80050a2:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80050a4:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80050a6:	6822      	ldr	r2, [r4, #0]
 80050a8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80050ac:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80050ae:	69e3      	ldr	r3, [r4, #28]
 80050b0:	6a21      	ldr	r1, [r4, #32]
 80050b2:	6822      	ldr	r2, [r4, #0]
 80050b4:	430b      	orrs	r3, r1
 80050b6:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 80050b8:	6822      	ldr	r2, [r4, #0]
 80050ba:	6813      	ldr	r3, [r2, #0]
 80050bc:	f043 0301 	orr.w	r3, r3, #1
 80050c0:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050c2:	2000      	movs	r0, #0
 80050c4:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80050c6:	2320      	movs	r3, #32
 80050c8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80050cc:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80050ce:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 80050d2:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80050d4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 80050d8:	f7fc fc94 	bl	8001a04 <HAL_I2C_MspInit>
 80050dc:	e7b6      	b.n	800504c <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80050de:	68a3      	ldr	r3, [r4, #8]
 80050e0:	6822      	ldr	r2, [r4, #0]
 80050e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050e6:	6093      	str	r3, [r2, #8]
 80050e8:	e7ca      	b.n	8005080 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80050ea:	6823      	ldr	r3, [r4, #0]
 80050ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80050f0:	605a      	str	r2, [r3, #4]
 80050f2:	e7c8      	b.n	8005086 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 80050f4:	2001      	movs	r0, #1
}
 80050f6:	4770      	bx	lr

080050f8 <HAL_I2C_Mem_Write>:
{
 80050f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050fc:	b083      	sub	sp, #12
 80050fe:	460e      	mov	r6, r1
 8005100:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 8005104:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005106:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 800510a:	b2c9      	uxtb	r1, r1
 800510c:	2920      	cmp	r1, #32
 800510e:	f040 80bb 	bne.w	8005288 <HAL_I2C_Mem_Write+0x190>
 8005112:	4604      	mov	r4, r0
 8005114:	4690      	mov	r8, r2
 8005116:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 8005118:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800511a:	b1cb      	cbz	r3, 8005150 <HAL_I2C_Mem_Write+0x58>
 800511c:	f1ba 0f00 	cmp.w	sl, #0
 8005120:	d016      	beq.n	8005150 <HAL_I2C_Mem_Write+0x58>
    __HAL_LOCK(hi2c);
 8005122:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005126:	2b01      	cmp	r3, #1
 8005128:	f000 80b2 	beq.w	8005290 <HAL_I2C_Mem_Write+0x198>
 800512c:	f04f 0b01 	mov.w	fp, #1
 8005130:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8005134:	f7fc fdf8 	bl	8001d28 <HAL_GetTick>
 8005138:	4607      	mov	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800513a:	9000      	str	r0, [sp, #0]
 800513c:	2319      	movs	r3, #25
 800513e:	465a      	mov	r2, fp
 8005140:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005144:	4620      	mov	r0, r4
 8005146:	f7ff feac 	bl	8004ea2 <I2C_WaitOnFlagUntilTimeout>
 800514a:	b130      	cbz	r0, 800515a <HAL_I2C_Mem_Write+0x62>
      return HAL_ERROR;
 800514c:	2001      	movs	r0, #1
 800514e:	e09c      	b.n	800528a <HAL_I2C_Mem_Write+0x192>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005150:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005154:	6463      	str	r3, [r4, #68]	; 0x44
      return  HAL_ERROR;
 8005156:	2001      	movs	r0, #1
 8005158:	e097      	b.n	800528a <HAL_I2C_Mem_Write+0x192>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800515a:	2321      	movs	r3, #33	; 0x21
 800515c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005160:	2340      	movs	r3, #64	; 0x40
 8005162:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005166:	2300      	movs	r3, #0
 8005168:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 800516a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800516c:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 800516e:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005172:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005174:	9701      	str	r7, [sp, #4]
 8005176:	9500      	str	r5, [sp, #0]
 8005178:	464b      	mov	r3, r9
 800517a:	4642      	mov	r2, r8
 800517c:	4631      	mov	r1, r6
 800517e:	4620      	mov	r0, r4
 8005180:	f7ff feba 	bl	8004ef8 <I2C_RequestMemoryWrite>
 8005184:	b970      	cbnz	r0, 80051a4 <HAL_I2C_Mem_Write+0xac>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005186:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005188:	b29b      	uxth	r3, r3
 800518a:	2bff      	cmp	r3, #255	; 0xff
 800518c:	d90f      	bls.n	80051ae <HAL_I2C_Mem_Write+0xb6>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800518e:	22ff      	movs	r2, #255	; 0xff
 8005190:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005192:	2300      	movs	r3, #0
 8005194:	9300      	str	r3, [sp, #0]
 8005196:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800519a:	4631      	mov	r1, r6
 800519c:	4620      	mov	r0, r4
 800519e:	f7ff fdae 	bl	8004cfe <I2C_TransferConfig>
 80051a2:	e021      	b.n	80051e8 <HAL_I2C_Mem_Write+0xf0>
      __HAL_UNLOCK(hi2c);
 80051a4:	2300      	movs	r3, #0
 80051a6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80051aa:	4658      	mov	r0, fp
 80051ac:	e06d      	b.n	800528a <HAL_I2C_Mem_Write+0x192>
      hi2c->XferSize = hi2c->XferCount;
 80051ae:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80051b0:	b292      	uxth	r2, r2
 80051b2:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80051b4:	2300      	movs	r3, #0
 80051b6:	9300      	str	r3, [sp, #0]
 80051b8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80051bc:	b2d2      	uxtb	r2, r2
 80051be:	4631      	mov	r1, r6
 80051c0:	4620      	mov	r0, r4
 80051c2:	f7ff fd9c 	bl	8004cfe <I2C_TransferConfig>
 80051c6:	e00f      	b.n	80051e8 <HAL_I2C_Mem_Write+0xf0>
          hi2c->XferSize = hi2c->XferCount;
 80051c8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80051ca:	b292      	uxth	r2, r2
 80051cc:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80051ce:	2300      	movs	r3, #0
 80051d0:	9300      	str	r3, [sp, #0]
 80051d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80051d6:	b2d2      	uxtb	r2, r2
 80051d8:	4631      	mov	r1, r6
 80051da:	4620      	mov	r0, r4
 80051dc:	f7ff fd8f 	bl	8004cfe <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 80051e0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80051e2:	b29b      	uxth	r3, r3
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d033      	beq.n	8005250 <HAL_I2C_Mem_Write+0x158>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051e8:	463a      	mov	r2, r7
 80051ea:	4629      	mov	r1, r5
 80051ec:	4620      	mov	r0, r4
 80051ee:	f7ff fe2d 	bl	8004e4c <I2C_WaitOnTXISFlagUntilTimeout>
 80051f2:	2800      	cmp	r0, #0
 80051f4:	d14e      	bne.n	8005294 <HAL_I2C_Mem_Write+0x19c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80051f6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80051f8:	6823      	ldr	r3, [r4, #0]
 80051fa:	7812      	ldrb	r2, [r2, #0]
 80051fc:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 80051fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005200:	3301      	adds	r3, #1
 8005202:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8005204:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005206:	b29b      	uxth	r3, r3
 8005208:	3b01      	subs	r3, #1
 800520a:	b29b      	uxth	r3, r3
 800520c:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800520e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005210:	3b01      	subs	r3, #1
 8005212:	b29b      	uxth	r3, r3
 8005214:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005216:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005218:	b292      	uxth	r2, r2
 800521a:	2a00      	cmp	r2, #0
 800521c:	d0e0      	beq.n	80051e0 <HAL_I2C_Mem_Write+0xe8>
 800521e:	2b00      	cmp	r3, #0
 8005220:	d1de      	bne.n	80051e0 <HAL_I2C_Mem_Write+0xe8>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005222:	9700      	str	r7, [sp, #0]
 8005224:	462b      	mov	r3, r5
 8005226:	2200      	movs	r2, #0
 8005228:	2180      	movs	r1, #128	; 0x80
 800522a:	4620      	mov	r0, r4
 800522c:	f7ff fe39 	bl	8004ea2 <I2C_WaitOnFlagUntilTimeout>
 8005230:	bb90      	cbnz	r0, 8005298 <HAL_I2C_Mem_Write+0x1a0>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005232:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005234:	b29b      	uxth	r3, r3
 8005236:	2bff      	cmp	r3, #255	; 0xff
 8005238:	d9c6      	bls.n	80051c8 <HAL_I2C_Mem_Write+0xd0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800523a:	22ff      	movs	r2, #255	; 0xff
 800523c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800523e:	2300      	movs	r3, #0
 8005240:	9300      	str	r3, [sp, #0]
 8005242:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005246:	4631      	mov	r1, r6
 8005248:	4620      	mov	r0, r4
 800524a:	f7ff fd58 	bl	8004cfe <I2C_TransferConfig>
 800524e:	e7c7      	b.n	80051e0 <HAL_I2C_Mem_Write+0xe8>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005250:	463a      	mov	r2, r7
 8005252:	4629      	mov	r1, r5
 8005254:	4620      	mov	r0, r4
 8005256:	f7ff fec9 	bl	8004fec <I2C_WaitOnSTOPFlagUntilTimeout>
 800525a:	b9f8      	cbnz	r0, 800529c <HAL_I2C_Mem_Write+0x1a4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800525c:	6823      	ldr	r3, [r4, #0]
 800525e:	2220      	movs	r2, #32
 8005260:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8005262:	6821      	ldr	r1, [r4, #0]
 8005264:	684b      	ldr	r3, [r1, #4]
 8005266:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 800526a:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 800526e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8005272:	f023 0301 	bic.w	r3, r3, #1
 8005276:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005278:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800527c:	2300      	movs	r3, #0
 800527e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8005282:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 8005286:	e000      	b.n	800528a <HAL_I2C_Mem_Write+0x192>
    return HAL_BUSY;
 8005288:	2002      	movs	r0, #2
}
 800528a:	b003      	add	sp, #12
 800528c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8005290:	2002      	movs	r0, #2
 8005292:	e7fa      	b.n	800528a <HAL_I2C_Mem_Write+0x192>
        return HAL_ERROR;
 8005294:	2001      	movs	r0, #1
 8005296:	e7f8      	b.n	800528a <HAL_I2C_Mem_Write+0x192>
          return HAL_ERROR;
 8005298:	2001      	movs	r0, #1
 800529a:	e7f6      	b.n	800528a <HAL_I2C_Mem_Write+0x192>
      return HAL_ERROR;
 800529c:	2001      	movs	r0, #1
 800529e:	e7f4      	b.n	800528a <HAL_I2C_Mem_Write+0x192>

080052a0 <HAL_I2C_Mem_Read>:
{
 80052a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052a4:	b083      	sub	sp, #12
 80052a6:	460e      	mov	r6, r1
 80052a8:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 80052ac:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 80052ae:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 80052b2:	b2c9      	uxtb	r1, r1
 80052b4:	2920      	cmp	r1, #32
 80052b6:	f040 80bc 	bne.w	8005432 <HAL_I2C_Mem_Read+0x192>
 80052ba:	4604      	mov	r4, r0
 80052bc:	4690      	mov	r8, r2
 80052be:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 80052c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80052c2:	b1cb      	cbz	r3, 80052f8 <HAL_I2C_Mem_Read+0x58>
 80052c4:	f1ba 0f00 	cmp.w	sl, #0
 80052c8:	d016      	beq.n	80052f8 <HAL_I2C_Mem_Read+0x58>
    __HAL_LOCK(hi2c);
 80052ca:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	f000 80b3 	beq.w	800543a <HAL_I2C_Mem_Read+0x19a>
 80052d4:	f04f 0b01 	mov.w	fp, #1
 80052d8:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80052dc:	f7fc fd24 	bl	8001d28 <HAL_GetTick>
 80052e0:	4607      	mov	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80052e2:	9000      	str	r0, [sp, #0]
 80052e4:	2319      	movs	r3, #25
 80052e6:	465a      	mov	r2, fp
 80052e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80052ec:	4620      	mov	r0, r4
 80052ee:	f7ff fdd8 	bl	8004ea2 <I2C_WaitOnFlagUntilTimeout>
 80052f2:	b130      	cbz	r0, 8005302 <HAL_I2C_Mem_Read+0x62>
      return HAL_ERROR;
 80052f4:	2001      	movs	r0, #1
 80052f6:	e09d      	b.n	8005434 <HAL_I2C_Mem_Read+0x194>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80052f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80052fc:	6463      	str	r3, [r4, #68]	; 0x44
      return  HAL_ERROR;
 80052fe:	2001      	movs	r0, #1
 8005300:	e098      	b.n	8005434 <HAL_I2C_Mem_Read+0x194>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005302:	2322      	movs	r3, #34	; 0x22
 8005304:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005308:	2340      	movs	r3, #64	; 0x40
 800530a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800530e:	2300      	movs	r3, #0
 8005310:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8005312:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005314:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8005316:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800531a:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800531c:	9701      	str	r7, [sp, #4]
 800531e:	9500      	str	r5, [sp, #0]
 8005320:	464b      	mov	r3, r9
 8005322:	4642      	mov	r2, r8
 8005324:	4631      	mov	r1, r6
 8005326:	4620      	mov	r0, r4
 8005328:	f7ff fe24 	bl	8004f74 <I2C_RequestMemoryRead>
 800532c:	b970      	cbnz	r0, 800534c <HAL_I2C_Mem_Read+0xac>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800532e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005330:	b29b      	uxth	r3, r3
 8005332:	2bff      	cmp	r3, #255	; 0xff
 8005334:	d90f      	bls.n	8005356 <HAL_I2C_Mem_Read+0xb6>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005336:	22ff      	movs	r2, #255	; 0xff
 8005338:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800533a:	4b44      	ldr	r3, [pc, #272]	; (800544c <HAL_I2C_Mem_Read+0x1ac>)
 800533c:	9300      	str	r3, [sp, #0]
 800533e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005342:	4631      	mov	r1, r6
 8005344:	4620      	mov	r0, r4
 8005346:	f7ff fcda 	bl	8004cfe <I2C_TransferConfig>
 800534a:	e021      	b.n	8005390 <HAL_I2C_Mem_Read+0xf0>
      __HAL_UNLOCK(hi2c);
 800534c:	2300      	movs	r3, #0
 800534e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8005352:	4658      	mov	r0, fp
 8005354:	e06e      	b.n	8005434 <HAL_I2C_Mem_Read+0x194>
      hi2c->XferSize = hi2c->XferCount;
 8005356:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005358:	b292      	uxth	r2, r2
 800535a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800535c:	4b3b      	ldr	r3, [pc, #236]	; (800544c <HAL_I2C_Mem_Read+0x1ac>)
 800535e:	9300      	str	r3, [sp, #0]
 8005360:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005364:	b2d2      	uxtb	r2, r2
 8005366:	4631      	mov	r1, r6
 8005368:	4620      	mov	r0, r4
 800536a:	f7ff fcc8 	bl	8004cfe <I2C_TransferConfig>
 800536e:	e00f      	b.n	8005390 <HAL_I2C_Mem_Read+0xf0>
          hi2c->XferSize = hi2c->XferCount;
 8005370:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005372:	b292      	uxth	r2, r2
 8005374:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005376:	2300      	movs	r3, #0
 8005378:	9300      	str	r3, [sp, #0]
 800537a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800537e:	b2d2      	uxtb	r2, r2
 8005380:	4631      	mov	r1, r6
 8005382:	4620      	mov	r0, r4
 8005384:	f7ff fcbb 	bl	8004cfe <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8005388:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800538a:	b29b      	uxth	r3, r3
 800538c:	2b00      	cmp	r3, #0
 800538e:	d034      	beq.n	80053fa <HAL_I2C_Mem_Read+0x15a>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005390:	9700      	str	r7, [sp, #0]
 8005392:	462b      	mov	r3, r5
 8005394:	2200      	movs	r2, #0
 8005396:	2104      	movs	r1, #4
 8005398:	4620      	mov	r0, r4
 800539a:	f7ff fd82 	bl	8004ea2 <I2C_WaitOnFlagUntilTimeout>
 800539e:	2800      	cmp	r0, #0
 80053a0:	d14d      	bne.n	800543e <HAL_I2C_Mem_Read+0x19e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80053a2:	6823      	ldr	r3, [r4, #0]
 80053a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80053a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80053a8:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80053aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80053ac:	3301      	adds	r3, #1
 80053ae:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80053b0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80053b2:	3a01      	subs	r2, #1
 80053b4:	b292      	uxth	r2, r2
 80053b6:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80053b8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80053ba:	b29b      	uxth	r3, r3
 80053bc:	3b01      	subs	r3, #1
 80053be:	b29b      	uxth	r3, r3
 80053c0:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80053c2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d0de      	beq.n	8005388 <HAL_I2C_Mem_Read+0xe8>
 80053ca:	2a00      	cmp	r2, #0
 80053cc:	d1dc      	bne.n	8005388 <HAL_I2C_Mem_Read+0xe8>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80053ce:	9700      	str	r7, [sp, #0]
 80053d0:	462b      	mov	r3, r5
 80053d2:	2180      	movs	r1, #128	; 0x80
 80053d4:	4620      	mov	r0, r4
 80053d6:	f7ff fd64 	bl	8004ea2 <I2C_WaitOnFlagUntilTimeout>
 80053da:	bb90      	cbnz	r0, 8005442 <HAL_I2C_Mem_Read+0x1a2>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80053dc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80053de:	b29b      	uxth	r3, r3
 80053e0:	2bff      	cmp	r3, #255	; 0xff
 80053e2:	d9c5      	bls.n	8005370 <HAL_I2C_Mem_Read+0xd0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80053e4:	22ff      	movs	r2, #255	; 0xff
 80053e6:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80053e8:	2300      	movs	r3, #0
 80053ea:	9300      	str	r3, [sp, #0]
 80053ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80053f0:	4631      	mov	r1, r6
 80053f2:	4620      	mov	r0, r4
 80053f4:	f7ff fc83 	bl	8004cfe <I2C_TransferConfig>
 80053f8:	e7c6      	b.n	8005388 <HAL_I2C_Mem_Read+0xe8>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053fa:	463a      	mov	r2, r7
 80053fc:	4629      	mov	r1, r5
 80053fe:	4620      	mov	r0, r4
 8005400:	f7ff fdf4 	bl	8004fec <I2C_WaitOnSTOPFlagUntilTimeout>
 8005404:	b9f8      	cbnz	r0, 8005446 <HAL_I2C_Mem_Read+0x1a6>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005406:	6823      	ldr	r3, [r4, #0]
 8005408:	2220      	movs	r2, #32
 800540a:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800540c:	6821      	ldr	r1, [r4, #0]
 800540e:	684b      	ldr	r3, [r1, #4]
 8005410:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8005414:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8005418:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800541c:	f023 0301 	bic.w	r3, r3, #1
 8005420:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005422:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005426:	2300      	movs	r3, #0
 8005428:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 800542c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 8005430:	e000      	b.n	8005434 <HAL_I2C_Mem_Read+0x194>
    return HAL_BUSY;
 8005432:	2002      	movs	r0, #2
}
 8005434:	b003      	add	sp, #12
 8005436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 800543a:	2002      	movs	r0, #2
 800543c:	e7fa      	b.n	8005434 <HAL_I2C_Mem_Read+0x194>
        return HAL_ERROR;
 800543e:	2001      	movs	r0, #1
 8005440:	e7f8      	b.n	8005434 <HAL_I2C_Mem_Read+0x194>
          return HAL_ERROR;
 8005442:	2001      	movs	r0, #1
 8005444:	e7f6      	b.n	8005434 <HAL_I2C_Mem_Read+0x194>
      return HAL_ERROR;
 8005446:	2001      	movs	r0, #1
 8005448:	e7f4      	b.n	8005434 <HAL_I2C_Mem_Read+0x194>
 800544a:	bf00      	nop
 800544c:	80002400 	.word	0x80002400

08005450 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005450:	4603      	mov	r3, r0
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005452:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8005456:	b2d2      	uxtb	r2, r2
 8005458:	2a20      	cmp	r2, #32
 800545a:	d123      	bne.n	80054a4 <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800545c:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8005460:	2a01      	cmp	r2, #1
 8005462:	d021      	beq.n	80054a8 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8005464:	2201      	movs	r2, #1
 8005466:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800546a:	2224      	movs	r2, #36	; 0x24
 800546c:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005470:	6800      	ldr	r0, [r0, #0]
 8005472:	6802      	ldr	r2, [r0, #0]
 8005474:	f022 0201 	bic.w	r2, r2, #1
 8005478:	6002      	str	r2, [r0, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800547a:	6818      	ldr	r0, [r3, #0]
 800547c:	6802      	ldr	r2, [r0, #0]
 800547e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005482:	6002      	str	r2, [r0, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005484:	6818      	ldr	r0, [r3, #0]
 8005486:	6802      	ldr	r2, [r0, #0]
 8005488:	4311      	orrs	r1, r2
 800548a:	6001      	str	r1, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 800548c:	6819      	ldr	r1, [r3, #0]
 800548e:	680a      	ldr	r2, [r1, #0]
 8005490:	f042 0201 	orr.w	r2, r2, #1
 8005494:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005496:	2220      	movs	r2, #32
 8005498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800549c:	2000      	movs	r0, #0
 800549e:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40

    return HAL_OK;
 80054a2:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 80054a4:	2002      	movs	r0, #2
 80054a6:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 80054a8:	2002      	movs	r0, #2
  }
}
 80054aa:	4770      	bx	lr

080054ac <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80054ac:	4603      	mov	r3, r0

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054ae:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 80054b2:	b2d2      	uxtb	r2, r2
 80054b4:	2a20      	cmp	r2, #32
 80054b6:	d121      	bne.n	80054fc <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054b8:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 80054bc:	2a01      	cmp	r2, #1
 80054be:	d01f      	beq.n	8005500 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 80054c0:	2201      	movs	r2, #1
 80054c2:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80054c6:	2224      	movs	r2, #36	; 0x24
 80054c8:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80054cc:	6800      	ldr	r0, [r0, #0]
 80054ce:	6802      	ldr	r2, [r0, #0]
 80054d0:	f022 0201 	bic.w	r2, r2, #1
 80054d4:	6002      	str	r2, [r0, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80054d6:	6818      	ldr	r0, [r3, #0]
 80054d8:	6802      	ldr	r2, [r0, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80054da:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80054de:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80054e2:	6002      	str	r2, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 80054e4:	6819      	ldr	r1, [r3, #0]
 80054e6:	680a      	ldr	r2, [r1, #0]
 80054e8:	f042 0201 	orr.w	r2, r2, #1
 80054ec:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80054ee:	2220      	movs	r2, #32
 80054f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054f4:	2000      	movs	r0, #0
 80054f6:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40

    return HAL_OK;
 80054fa:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 80054fc:	2002      	movs	r0, #2
 80054fe:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8005500:	2002      	movs	r0, #2
  }
}
 8005502:	4770      	bx	lr

08005504 <HAL_PWR_EnableBkUpAccess>:
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005504:	4a02      	ldr	r2, [pc, #8]	; (8005510 <HAL_PWR_EnableBkUpAccess+0xc>)
 8005506:	6813      	ldr	r3, [r2, #0]
 8005508:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800550c:	6013      	str	r3, [r2, #0]
}
 800550e:	4770      	bx	lr
 8005510:	58000400 	.word	0x58000400

08005514 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8005514:	b510      	push	{r4, lr}
 8005516:	460c      	mov	r4, r1
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8005518:	b9a0      	cbnz	r0, 8005544 <HAL_PWR_EnterSLEEPMode+0x30>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 800551a:	4b0f      	ldr	r3, [pc, #60]	; (8005558 <HAL_PWR_EnterSLEEPMode+0x44>)
 800551c:	695b      	ldr	r3, [r3, #20]
 800551e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8005522:	d10a      	bne.n	800553a <HAL_PWR_EnterSLEEPMode+0x26>
      HAL_PWREx_EnableLowPowerRunMode();
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005524:	4a0d      	ldr	r2, [pc, #52]	; (800555c <HAL_PWR_EnterSLEEPMode+0x48>)
 8005526:	6913      	ldr	r3, [r2, #16]
 8005528:	f023 0304 	bic.w	r3, r3, #4
 800552c:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 800552e:	2c01      	cmp	r4, #1
 8005530:	d010      	beq.n	8005554 <HAL_PWR_EnterSLEEPMode+0x40>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8005532:	bf40      	sev
    __WFE();
 8005534:	bf20      	wfe
    __WFE();
 8005536:	bf20      	wfe
  }
}
 8005538:	bd10      	pop	{r4, pc}
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 800553a:	f000 f821 	bl	8005580 <HAL_PWREx_DisableLowPowerRunMode>
 800553e:	2800      	cmp	r0, #0
 8005540:	d0f0      	beq.n	8005524 <HAL_PWR_EnterSLEEPMode+0x10>
 8005542:	e7f9      	b.n	8005538 <HAL_PWR_EnterSLEEPMode+0x24>
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8005544:	4b04      	ldr	r3, [pc, #16]	; (8005558 <HAL_PWR_EnterSLEEPMode+0x44>)
 8005546:	695b      	ldr	r3, [r3, #20]
 8005548:	f413 7f00 	tst.w	r3, #512	; 0x200
 800554c:	d1ea      	bne.n	8005524 <HAL_PWR_EnterSLEEPMode+0x10>
      HAL_PWREx_EnableLowPowerRunMode();
 800554e:	f000 f80f 	bl	8005570 <HAL_PWREx_EnableLowPowerRunMode>
 8005552:	e7e7      	b.n	8005524 <HAL_PWR_EnterSLEEPMode+0x10>
    __WFI();
 8005554:	bf30      	wfi
 8005556:	e7ef      	b.n	8005538 <HAL_PWR_EnterSLEEPMode+0x24>
 8005558:	58000400 	.word	0x58000400
 800555c:	e000ed00 	.word	0xe000ed00

08005560 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return (PWR->CR1 & PWR_CR1_VOS);
 8005560:	4b02      	ldr	r3, [pc, #8]	; (800556c <HAL_PWREx_GetVoltageRange+0xc>)
 8005562:	6818      	ldr	r0, [r3, #0]
}
 8005564:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8005568:	4770      	bx	lr
 800556a:	bf00      	nop
 800556c:	58000400 	.word	0x58000400

08005570 <HAL_PWREx_EnableLowPowerRunMode>:
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8005570:	4a02      	ldr	r2, [pc, #8]	; (800557c <HAL_PWREx_EnableLowPowerRunMode+0xc>)
 8005572:	6813      	ldr	r3, [r2, #0]
 8005574:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005578:	6013      	str	r3, [r2, #0]
}
 800557a:	4770      	bx	lr
 800557c:	58000400 	.word	0x58000400

08005580 <HAL_PWREx_DisableLowPowerRunMode>:
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8005580:	4a0f      	ldr	r2, [pc, #60]	; (80055c0 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 8005582:	6813      	ldr	r3, [r2, #0]
 8005584:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005588:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 800558a:	4b0e      	ldr	r3, [pc, #56]	; (80055c4 <HAL_PWREx_DisableLowPowerRunMode+0x44>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	2232      	movs	r2, #50	; 0x32
 8005590:	fb02 f303 	mul.w	r3, r2, r3
 8005594:	4a0c      	ldr	r2, [pc, #48]	; (80055c8 <HAL_PWREx_DisableLowPowerRunMode+0x48>)
 8005596:	fba2 2303 	umull	r2, r3, r2, r3
 800559a:	0c9b      	lsrs	r3, r3, #18
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800559c:	e000      	b.n	80055a0 <HAL_PWREx_DisableLowPowerRunMode+0x20>
  {
    wait_loop_index--;
 800559e:	3b01      	subs	r3, #1
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80055a0:	4a07      	ldr	r2, [pc, #28]	; (80055c0 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 80055a2:	6952      	ldr	r2, [r2, #20]
 80055a4:	f412 7f00 	tst.w	r2, #512	; 0x200
 80055a8:	d001      	beq.n	80055ae <HAL_PWREx_DisableLowPowerRunMode+0x2e>
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d1f7      	bne.n	800559e <HAL_PWREx_DisableLowPowerRunMode+0x1e>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 80055ae:	4b04      	ldr	r3, [pc, #16]	; (80055c0 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 80055b0:	695b      	ldr	r3, [r3, #20]
 80055b2:	f413 7f00 	tst.w	r3, #512	; 0x200
 80055b6:	d101      	bne.n	80055bc <HAL_PWREx_DisableLowPowerRunMode+0x3c>
  {
    return HAL_TIMEOUT;
  }

  return HAL_OK;
 80055b8:	2000      	movs	r0, #0
 80055ba:	4770      	bx	lr
    return HAL_TIMEOUT;
 80055bc:	2003      	movs	r0, #3
}
 80055be:	4770      	bx	lr
 80055c0:	58000400 	.word	0x58000400
 80055c4:	20000050 	.word	0x20000050
 80055c8:	431bde83 	.word	0x431bde83

080055cc <HAL_PWREx_EnterSTOP2Mode>:
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 80055cc:	4a0c      	ldr	r2, [pc, #48]	; (8005600 <HAL_PWREx_EnterSTOP2Mode+0x34>)
 80055ce:	6813      	ldr	r3, [r2, #0]
 80055d0:	f023 0307 	bic.w	r3, r3, #7
 80055d4:	f043 0302 	orr.w	r3, r3, #2
 80055d8:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80055da:	4a0a      	ldr	r2, [pc, #40]	; (8005604 <HAL_PWREx_EnterSTOP2Mode+0x38>)
 80055dc:	6913      	ldr	r3, [r2, #16]
 80055de:	f043 0304 	orr.w	r3, r3, #4
 80055e2:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 80055e4:	2801      	cmp	r0, #1
 80055e6:	d008      	beq.n	80055fa <HAL_PWREx_EnterSTOP2Mode+0x2e>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80055e8:	bf40      	sev
    __WFE();
 80055ea:	bf20      	wfe
    __WFE();
 80055ec:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80055ee:	4a05      	ldr	r2, [pc, #20]	; (8005604 <HAL_PWREx_EnterSTOP2Mode+0x38>)
 80055f0:	6913      	ldr	r3, [r2, #16]
 80055f2:	f023 0304 	bic.w	r3, r3, #4
 80055f6:	6113      	str	r3, [r2, #16]
}
 80055f8:	4770      	bx	lr
    __WFI();
 80055fa:	bf30      	wfi
 80055fc:	e7f7      	b.n	80055ee <HAL_PWREx_EnterSTOP2Mode+0x22>
 80055fe:	bf00      	nop
 8005600:	58000400 	.word	0x58000400
 8005604:	e000ed00 	.word	0xe000ed00

08005608 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005608:	b530      	push	{r4, r5, lr}
 800560a:	b089      	sub	sp, #36	; 0x24
 800560c:	4604      	mov	r4, r0
 800560e:	468c      	mov	ip, r1
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8005610:	4b2a      	ldr	r3, [pc, #168]	; (80056bc <RCC_SetFlashLatency+0xb4>)
 8005612:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005616:	9006      	str	r0, [sp, #24]
 8005618:	f8ad 101c 	strh.w	r1, [sp, #28]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 800561c:	f103 0208 	add.w	r2, r3, #8
 8005620:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005624:	9004      	str	r0, [sp, #16]
 8005626:	f8ad 1014 	strh.w	r1, [sp, #20]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 800562a:	ad01      	add	r5, sp, #4
 800562c:	3310      	adds	r3, #16
 800562e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005632:	e885 0007 	stmia.w	r5, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005636:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 800563a:	d007      	beq.n	800564c <RCC_SetFlashLatency+0x44>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800563c:	2300      	movs	r3, #0
 800563e:	e014      	b.n	800566a <RCC_SetFlashLatency+0x62>
        latency = FLASH_LATENCY_RANGE[index];
 8005640:	aa08      	add	r2, sp, #32
 8005642:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005646:	f853 5c1c 	ldr.w	r5, [r3, #-28]
        break;
 800564a:	e01e      	b.n	800568a <RCC_SetFlashLatency+0x82>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800564c:	2300      	movs	r3, #0
 800564e:	2b02      	cmp	r3, #2
 8005650:	d808      	bhi.n	8005664 <RCC_SetFlashLatency+0x5c>
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8005652:	aa08      	add	r2, sp, #32
 8005654:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8005658:	f832 2c08 	ldrh.w	r2, [r2, #-8]
 800565c:	42a2      	cmp	r2, r4
 800565e:	d2ef      	bcs.n	8005640 <RCC_SetFlashLatency+0x38>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005660:	3301      	adds	r3, #1
 8005662:	e7f4      	b.n	800564e <RCC_SetFlashLatency+0x46>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005664:	2500      	movs	r5, #0
 8005666:	e010      	b.n	800568a <RCC_SetFlashLatency+0x82>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005668:	3301      	adds	r3, #1
 800566a:	2b02      	cmp	r3, #2
 800566c:	d80c      	bhi.n	8005688 <RCC_SetFlashLatency+0x80>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800566e:	aa08      	add	r2, sp, #32
 8005670:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8005674:	f832 2c10 	ldrh.w	r2, [r2, #-16]
 8005678:	42a2      	cmp	r2, r4
 800567a:	d3f5      	bcc.n	8005668 <RCC_SetFlashLatency+0x60>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800567c:	aa08      	add	r2, sp, #32
 800567e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005682:	f853 5c1c 	ldr.w	r5, [r3, #-28]
        break;
 8005686:	e000      	b.n	800568a <RCC_SetFlashLatency+0x82>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005688:	2500      	movs	r5, #0
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800568a:	4a0d      	ldr	r2, [pc, #52]	; (80056c0 <RCC_SetFlashLatency+0xb8>)
 800568c:	6813      	ldr	r3, [r2, #0]
 800568e:	f023 0307 	bic.w	r3, r3, #7
 8005692:	432b      	orrs	r3, r5
 8005694:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005696:	f7fc fb47 	bl	8001d28 <HAL_GetTick>
 800569a:	4604      	mov	r4, r0

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800569c:	4b08      	ldr	r3, [pc, #32]	; (80056c0 <RCC_SetFlashLatency+0xb8>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f003 0307 	and.w	r3, r3, #7
 80056a4:	42ab      	cmp	r3, r5
 80056a6:	d006      	beq.n	80056b6 <RCC_SetFlashLatency+0xae>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80056a8:	f7fc fb3e 	bl	8001d28 <HAL_GetTick>
 80056ac:	1b00      	subs	r0, r0, r4
 80056ae:	2802      	cmp	r0, #2
 80056b0:	d9f4      	bls.n	800569c <RCC_SetFlashLatency+0x94>
    {
      return HAL_TIMEOUT;
 80056b2:	2003      	movs	r0, #3
 80056b4:	e000      	b.n	80056b8 <RCC_SetFlashLatency+0xb0>
    }
  }
  return HAL_OK;
 80056b6:	2000      	movs	r0, #0
}
 80056b8:	b009      	add	sp, #36	; 0x24
 80056ba:	bd30      	pop	{r4, r5, pc}
 80056bc:	08016e78 	.word	0x08016e78
 80056c0:	58004000 	.word	0x58004000

080056c4 <RCC_SetFlashLatencyFromMSIRange>:
{
 80056c4:	b510      	push	{r4, lr}
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 80056c6:	f3c0 1003 	ubfx	r0, r0, #4, #4
 80056ca:	4b0c      	ldr	r3, [pc, #48]	; (80056fc <RCC_SetFlashLatencyFromMSIRange+0x38>)
 80056cc:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80056d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056d4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80056d8:	f003 030f 	and.w	r3, r3, #15
 80056dc:	4a08      	ldr	r2, [pc, #32]	; (8005700 <RCC_SetFlashLatencyFromMSIRange+0x3c>)
 80056de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056e2:	fbb4 f4f3 	udiv	r4, r4, r3
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80056e6:	f7ff ff3b 	bl	8005560 <HAL_PWREx_GetVoltageRange>
 80056ea:	4601      	mov	r1, r0
 80056ec:	4b05      	ldr	r3, [pc, #20]	; (8005704 <RCC_SetFlashLatencyFromMSIRange+0x40>)
 80056ee:	fba3 3404 	umull	r3, r4, r3, r4
 80056f2:	0ca0      	lsrs	r0, r4, #18
 80056f4:	f7ff ff88 	bl	8005608 <RCC_SetFlashLatency>
}
 80056f8:	bd10      	pop	{r4, pc}
 80056fa:	bf00      	nop
 80056fc:	080173cc 	.word	0x080173cc
 8005700:	0801736c 	.word	0x0801736c
 8005704:	431bde83 	.word	0x431bde83

08005708 <HAL_RCC_GetSysClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005708:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800570c:	6899      	ldr	r1, [r3, #8]
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800570e:	68db      	ldr	r3, [r3, #12]
 8005710:	f003 0303 	and.w	r3, r3, #3
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005714:	f011 010c 	ands.w	r1, r1, #12
 8005718:	d00a      	beq.n	8005730 <HAL_RCC_GetSysClockFreq+0x28>
 800571a:	290c      	cmp	r1, #12
 800571c:	d006      	beq.n	800572c <HAL_RCC_GetSysClockFreq+0x24>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800571e:	2904      	cmp	r1, #4
 8005720:	d047      	beq.n	80057b2 <HAL_RCC_GetSysClockFreq+0xaa>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005722:	2908      	cmp	r1, #8
 8005724:	d03b      	beq.n	800579e <HAL_RCC_GetSysClockFreq+0x96>
  uint32_t msifreq = 0U;
 8005726:	2200      	movs	r2, #0
  uint32_t sysclockfreq = 0U;
 8005728:	4610      	mov	r0, r2
 800572a:	e026      	b.n	800577a <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 800572c:	2b01      	cmp	r3, #1
 800572e:	d1f6      	bne.n	800571e <HAL_RCC_GetSysClockFreq+0x16>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8005730:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f013 0308 	ands.w	r3, r3, #8
 800573a:	d00d      	beq.n	8005758 <HAL_RCC_GetSysClockFreq+0x50>
 800573c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f013 0308 	ands.w	r3, r3, #8
 8005746:	d124      	bne.n	8005792 <HAL_RCC_GetSysClockFreq+0x8a>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8005748:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800574c:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8005750:	4a2e      	ldr	r2, [pc, #184]	; (800580c <HAL_RCC_GetSysClockFreq+0x104>)
 8005752:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005756:	e00e      	b.n	8005776 <HAL_RCC_GetSysClockFreq+0x6e>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8005758:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800575c:	6812      	ldr	r2, [r2, #0]
 800575e:	f012 0f08 	tst.w	r2, #8
 8005762:	d112      	bne.n	800578a <HAL_RCC_GetSysClockFreq+0x82>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8005764:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005768:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800576c:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8005770:	4a26      	ldr	r2, [pc, #152]	; (800580c <HAL_RCC_GetSysClockFreq+0x104>)
 8005772:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005776:	b1d1      	cbz	r1, 80057ae <HAL_RCC_GetSysClockFreq+0xa6>
  uint32_t sysclockfreq = 0U;
 8005778:	2000      	movs	r0, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800577a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	f003 030c 	and.w	r3, r3, #12
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005784:	2b0c      	cmp	r3, #12
 8005786:	d01a      	beq.n	80057be <HAL_RCC_GetSysClockFreq+0xb6>
}
 8005788:	4770      	bx	lr
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 800578a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800578e:	6812      	ldr	r2, [r2, #0]
 8005790:	e7ee      	b.n	8005770 <HAL_RCC_GetSysClockFreq+0x68>
 8005792:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005796:	681b      	ldr	r3, [r3, #0]
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8005798:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800579c:	e7d8      	b.n	8005750 <HAL_RCC_GetSysClockFreq+0x48>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800579e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	f412 1280 	ands.w	r2, r2, #1048576	; 0x100000
 80057a8:	d106      	bne.n	80057b8 <HAL_RCC_GetSysClockFreq+0xb0>
      sysclockfreq = HSE_VALUE;
 80057aa:	4819      	ldr	r0, [pc, #100]	; (8005810 <HAL_RCC_GetSysClockFreq+0x108>)
 80057ac:	e7e5      	b.n	800577a <HAL_RCC_GetSysClockFreq+0x72>
      sysclockfreq = msifreq;
 80057ae:	4610      	mov	r0, r2
 80057b0:	e7e3      	b.n	800577a <HAL_RCC_GetSysClockFreq+0x72>
  uint32_t msifreq = 0U;
 80057b2:	2200      	movs	r2, #0
    sysclockfreq = HSI_VALUE;
 80057b4:	4817      	ldr	r0, [pc, #92]	; (8005814 <HAL_RCC_GetSysClockFreq+0x10c>)
 80057b6:	e7e0      	b.n	800577a <HAL_RCC_GetSysClockFreq+0x72>
  uint32_t msifreq = 0U;
 80057b8:	2200      	movs	r2, #0
      sysclockfreq = HSE_VALUE / 2U;
 80057ba:	4816      	ldr	r0, [pc, #88]	; (8005814 <HAL_RCC_GetSysClockFreq+0x10c>)
 80057bc:	e7dd      	b.n	800577a <HAL_RCC_GetSysClockFreq+0x72>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80057be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057c2:	68db      	ldr	r3, [r3, #12]
 80057c4:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 80057c8:	2b02      	cmp	r3, #2
 80057ca:	d009      	beq.n	80057e0 <HAL_RCC_GetSysClockFreq+0xd8>
 80057cc:	2b03      	cmp	r3, #3
 80057ce:	d108      	bne.n	80057e2 <HAL_RCC_GetSysClockFreq+0xda>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80057d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80057da:	d115      	bne.n	8005808 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80057dc:	4a0c      	ldr	r2, [pc, #48]	; (8005810 <HAL_RCC_GetSysClockFreq+0x108>)
 80057de:	e000      	b.n	80057e2 <HAL_RCC_GetSysClockFreq+0xda>
    switch (pllsource)
 80057e0:	4a0c      	ldr	r2, [pc, #48]	; (8005814 <HAL_RCC_GetSysClockFreq+0x10c>)
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80057e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80057e6:	68cb      	ldr	r3, [r1, #12]
 80057e8:	f3c3 2306 	ubfx	r3, r3, #8, #7
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80057ec:	fb03 f202 	mul.w	r2, r3, r2
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80057f0:	68cb      	ldr	r3, [r1, #12]
 80057f2:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80057f6:	3301      	adds	r3, #1
 80057f8:	fbb2 f2f3 	udiv	r2, r2, r3
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80057fc:	68c8      	ldr	r0, [r1, #12]
 80057fe:	0f40      	lsrs	r0, r0, #29
 8005800:	3001      	adds	r0, #1
 8005802:	fbb2 f0f0 	udiv	r0, r2, r0
  return sysclockfreq;
 8005806:	e7bf      	b.n	8005788 <HAL_RCC_GetSysClockFreq+0x80>
          pllinputfreq = HSE_VALUE / 2U;
 8005808:	4a02      	ldr	r2, [pc, #8]	; (8005814 <HAL_RCC_GetSysClockFreq+0x10c>)
 800580a:	e7ea      	b.n	80057e2 <HAL_RCC_GetSysClockFreq+0xda>
 800580c:	080173cc 	.word	0x080173cc
 8005810:	01e84800 	.word	0x01e84800
 8005814:	00f42400 	.word	0x00f42400

08005818 <HAL_RCC_GetHCLKFreq>:
{
 8005818:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800581a:	f7ff ff75 	bl	8005708 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800581e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005822:	689b      	ldr	r3, [r3, #8]
 8005824:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005828:	4a02      	ldr	r2, [pc, #8]	; (8005834 <HAL_RCC_GetHCLKFreq+0x1c>)
 800582a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800582e:	fbb0 f0f3 	udiv	r0, r0, r3
 8005832:	bd08      	pop	{r3, pc}
 8005834:	0801736c 	.word	0x0801736c

08005838 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8005838:	2800      	cmp	r0, #0
 800583a:	f000 8319 	beq.w	8005e70 <HAL_RCC_OscConfig+0x638>
{
 800583e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005840:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005842:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005846:	689d      	ldr	r5, [r3, #8]
 8005848:	f005 050c 	and.w	r5, r5, #12
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800584c:	68de      	ldr	r6, [r3, #12]
 800584e:	f006 0603 	and.w	r6, r6, #3
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005852:	6803      	ldr	r3, [r0, #0]
 8005854:	f013 0f20 	tst.w	r3, #32
 8005858:	f000 808f 	beq.w	800597a <HAL_RCC_OscConfig+0x142>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800585c:	b1ed      	cbz	r5, 800589a <HAL_RCC_OscConfig+0x62>
 800585e:	2d0c      	cmp	r5, #12
 8005860:	d019      	beq.n	8005896 <HAL_RCC_OscConfig+0x5e>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005862:	6a23      	ldr	r3, [r4, #32]
 8005864:	2b00      	cmp	r3, #0
 8005866:	f000 80bc 	beq.w	80059e2 <HAL_RCC_OscConfig+0x1aa>
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800586a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800586e:	6813      	ldr	r3, [r2, #0]
 8005870:	f043 0301 	orr.w	r3, r3, #1
 8005874:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005876:	f7fc fa57 	bl	8001d28 <HAL_GetTick>
 800587a:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800587c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f013 0f02 	tst.w	r3, #2
 8005886:	d165      	bne.n	8005954 <HAL_RCC_OscConfig+0x11c>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005888:	f7fc fa4e 	bl	8001d28 <HAL_GetTick>
 800588c:	1bc0      	subs	r0, r0, r7
 800588e:	2802      	cmp	r0, #2
 8005890:	d9f4      	bls.n	800587c <HAL_RCC_OscConfig+0x44>
            return HAL_TIMEOUT;
 8005892:	2003      	movs	r0, #3
 8005894:	e2f9      	b.n	8005e8a <HAL_RCC_OscConfig+0x652>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005896:	2e01      	cmp	r6, #1
 8005898:	d1e3      	bne.n	8005862 <HAL_RCC_OscConfig+0x2a>
 800589a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f013 0f02 	tst.w	r3, #2
 80058a4:	d003      	beq.n	80058ae <HAL_RCC_OscConfig+0x76>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80058a6:	6a23      	ldr	r3, [r4, #32]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	f000 82e3 	beq.w	8005e74 <HAL_RCC_OscConfig+0x63c>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80058ae:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80058b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f013 0f08 	tst.w	r3, #8
 80058ba:	d029      	beq.n	8005910 <HAL_RCC_OscConfig+0xd8>
 80058bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80058c6:	4298      	cmp	r0, r3
 80058c8:	d92a      	bls.n	8005920 <HAL_RCC_OscConfig+0xe8>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80058ca:	f7ff fefb 	bl	80056c4 <RCC_SetFlashLatencyFromMSIRange>
 80058ce:	2800      	cmp	r0, #0
 80058d0:	f040 82d2 	bne.w	8005e78 <HAL_RCC_OscConfig+0x640>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80058d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	f042 0208 	orr.w	r2, r2, #8
 80058de:	601a      	str	r2, [r3, #0]
 80058e0:	681a      	ldr	r2, [r3, #0]
 80058e2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80058e6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80058e8:	430a      	orrs	r2, r1
 80058ea:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80058ec:	6a61      	ldr	r1, [r4, #36]	; 0x24
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80058ee:	685a      	ldr	r2, [r3, #4]
 80058f0:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80058f4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80058f8:	605a      	str	r2, [r3, #4]
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80058fa:	f7ff ff8d 	bl	8005818 <HAL_RCC_GetHCLKFreq>
 80058fe:	4bb0      	ldr	r3, [pc, #704]	; (8005bc0 <HAL_RCC_OscConfig+0x388>)
 8005900:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8005902:	4bb0      	ldr	r3, [pc, #704]	; (8005bc4 <HAL_RCC_OscConfig+0x38c>)
 8005904:	6818      	ldr	r0, [r3, #0]
 8005906:	f7fc fa0d 	bl	8001d24 <HAL_InitTick>
        if (status != HAL_OK)
 800590a:	2800      	cmp	r0, #0
 800590c:	d035      	beq.n	800597a <HAL_RCC_OscConfig+0x142>
 800590e:	e2bc      	b.n	8005e8a <HAL_RCC_OscConfig+0x652>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005910:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005914:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005918:	091b      	lsrs	r3, r3, #4
 800591a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800591e:	e7d2      	b.n	80058c6 <HAL_RCC_OscConfig+0x8e>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005920:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	f042 0208 	orr.w	r2, r2, #8
 800592a:	601a      	str	r2, [r3, #0]
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8005932:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005934:	430a      	orrs	r2, r1
 8005936:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005938:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800593a:	685a      	ldr	r2, [r3, #4]
 800593c:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8005940:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005944:	605a      	str	r2, [r3, #4]
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005946:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8005948:	f7ff febc 	bl	80056c4 <RCC_SetFlashLatencyFromMSIRange>
 800594c:	2800      	cmp	r0, #0
 800594e:	d0d4      	beq.n	80058fa <HAL_RCC_OscConfig+0xc2>
            return HAL_ERROR;
 8005950:	2001      	movs	r0, #1
 8005952:	e29a      	b.n	8005e8a <HAL_RCC_OscConfig+0x652>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005954:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	f042 0208 	orr.w	r2, r2, #8
 800595e:	601a      	str	r2, [r3, #0]
 8005960:	681a      	ldr	r2, [r3, #0]
 8005962:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8005966:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005968:	430a      	orrs	r2, r1
 800596a:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800596c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800596e:	685a      	ldr	r2, [r3, #4]
 8005970:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8005974:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005978:	605a      	str	r2, [r3, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800597a:	6823      	ldr	r3, [r4, #0]
 800597c:	f013 0f01 	tst.w	r3, #1
 8005980:	d051      	beq.n	8005a26 <HAL_RCC_OscConfig+0x1ee>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005982:	2d08      	cmp	r5, #8
 8005984:	d045      	beq.n	8005a12 <HAL_RCC_OscConfig+0x1da>
 8005986:	2d0c      	cmp	r5, #12
 8005988:	d041      	beq.n	8005a0e <HAL_RCC_OscConfig+0x1d6>
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 800598a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800598e:	6813      	ldr	r3, [r2, #0]
 8005990:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005994:	68a1      	ldr	r1, [r4, #8]
 8005996:	430b      	orrs	r3, r1
 8005998:	6013      	str	r3, [r2, #0]
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800599a:	6863      	ldr	r3, [r4, #4]
 800599c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059a0:	d063      	beq.n	8005a6a <HAL_RCC_OscConfig+0x232>
 80059a2:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 80059a6:	d065      	beq.n	8005a74 <HAL_RCC_OscConfig+0x23c>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80059a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059ac:	681a      	ldr	r2, [r3, #0]
 80059ae:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80059b2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80059b4:	681a      	ldr	r2, [r3, #0]
 80059b6:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80059ba:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80059bc:	6863      	ldr	r3, [r4, #4]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d063      	beq.n	8005a8a <HAL_RCC_OscConfig+0x252>
        tickstart = HAL_GetTick();
 80059c2:	f7fc f9b1 	bl	8001d28 <HAL_GetTick>
 80059c6:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80059c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80059d2:	d128      	bne.n	8005a26 <HAL_RCC_OscConfig+0x1ee>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059d4:	f7fc f9a8 	bl	8001d28 <HAL_GetTick>
 80059d8:	1bc0      	subs	r0, r0, r7
 80059da:	2864      	cmp	r0, #100	; 0x64
 80059dc:	d9f4      	bls.n	80059c8 <HAL_RCC_OscConfig+0x190>
            return HAL_TIMEOUT;
 80059de:	2003      	movs	r0, #3
 80059e0:	e253      	b.n	8005e8a <HAL_RCC_OscConfig+0x652>
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80059e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80059e6:	6813      	ldr	r3, [r2, #0]
 80059e8:	f023 0301 	bic.w	r3, r3, #1
 80059ec:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80059ee:	f7fc f99b 	bl	8001d28 <HAL_GetTick>
 80059f2:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80059f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f013 0f02 	tst.w	r3, #2
 80059fe:	d0bc      	beq.n	800597a <HAL_RCC_OscConfig+0x142>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005a00:	f7fc f992 	bl	8001d28 <HAL_GetTick>
 8005a04:	1bc0      	subs	r0, r0, r7
 8005a06:	2802      	cmp	r0, #2
 8005a08:	d9f4      	bls.n	80059f4 <HAL_RCC_OscConfig+0x1bc>
            return HAL_TIMEOUT;
 8005a0a:	2003      	movs	r0, #3
 8005a0c:	e23d      	b.n	8005e8a <HAL_RCC_OscConfig+0x652>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005a0e:	2e03      	cmp	r6, #3
 8005a10:	d1bb      	bne.n	800598a <HAL_RCC_OscConfig+0x152>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005a12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005a1c:	d003      	beq.n	8005a26 <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a1e:	6863      	ldr	r3, [r4, #4]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	f000 822b 	beq.w	8005e7c <HAL_RCC_OscConfig+0x644>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a26:	6823      	ldr	r3, [r4, #0]
 8005a28:	f013 0f02 	tst.w	r3, #2
 8005a2c:	d052      	beq.n	8005ad4 <HAL_RCC_OscConfig+0x29c>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005a2e:	2d04      	cmp	r5, #4
 8005a30:	d03d      	beq.n	8005aae <HAL_RCC_OscConfig+0x276>
 8005a32:	2d0c      	cmp	r5, #12
 8005a34:	d039      	beq.n	8005aaa <HAL_RCC_OscConfig+0x272>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005a36:	6923      	ldr	r3, [r4, #16]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	f000 8091 	beq.w	8005b60 <HAL_RCC_OscConfig+0x328>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005a3e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a42:	6813      	ldr	r3, [r2, #0]
 8005a44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a48:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005a4a:	f7fc f96d 	bl	8001d28 <HAL_GetTick>
 8005a4e:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005a50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8005a5a:	d177      	bne.n	8005b4c <HAL_RCC_OscConfig+0x314>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a5c:	f7fc f964 	bl	8001d28 <HAL_GetTick>
 8005a60:	1b80      	subs	r0, r0, r6
 8005a62:	2802      	cmp	r0, #2
 8005a64:	d9f4      	bls.n	8005a50 <HAL_RCC_OscConfig+0x218>
            return HAL_TIMEOUT;
 8005a66:	2003      	movs	r0, #3
 8005a68:	e20f      	b.n	8005e8a <HAL_RCC_OscConfig+0x652>
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8005a6a:	6813      	ldr	r3, [r2, #0]
 8005a6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a70:	6013      	str	r3, [r2, #0]
}
 8005a72:	e7a3      	b.n	80059bc <HAL_RCC_OscConfig+0x184>
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8005a74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a78:	681a      	ldr	r2, [r3, #0]
 8005a7a:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8005a7e:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8005a80:	681a      	ldr	r2, [r3, #0]
 8005a82:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005a86:	601a      	str	r2, [r3, #0]
}
 8005a88:	e798      	b.n	80059bc <HAL_RCC_OscConfig+0x184>
        tickstart = HAL_GetTick();
 8005a8a:	f7fc f94d 	bl	8001d28 <HAL_GetTick>
 8005a8e:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005a90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005a9a:	d0c4      	beq.n	8005a26 <HAL_RCC_OscConfig+0x1ee>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a9c:	f7fc f944 	bl	8001d28 <HAL_GetTick>
 8005aa0:	1bc0      	subs	r0, r0, r7
 8005aa2:	2864      	cmp	r0, #100	; 0x64
 8005aa4:	d9f4      	bls.n	8005a90 <HAL_RCC_OscConfig+0x258>
            return HAL_TIMEOUT;
 8005aa6:	2003      	movs	r0, #3
 8005aa8:	e1ef      	b.n	8005e8a <HAL_RCC_OscConfig+0x652>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005aaa:	2e02      	cmp	r6, #2
 8005aac:	d1c3      	bne.n	8005a36 <HAL_RCC_OscConfig+0x1fe>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005aae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8005ab8:	d003      	beq.n	8005ac2 <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005aba:	6923      	ldr	r3, [r4, #16]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	f000 81df 	beq.w	8005e80 <HAL_RCC_OscConfig+0x648>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ac2:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8005ac4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ac8:	6853      	ldr	r3, [r2, #4]
 8005aca:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005ace:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8005ad2:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ad4:	6823      	ldr	r3, [r4, #0]
 8005ad6:	f013 0f08 	tst.w	r3, #8
 8005ada:	f000 808e 	beq.w	8005bfa <HAL_RCC_OscConfig+0x3c2>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005ade:	69a3      	ldr	r3, [r4, #24]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d071      	beq.n	8005bc8 <HAL_RCC_OscConfig+0x390>
      uint32_t csr_temp = RCC->CSR;
 8005ae4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ae8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8005aec:	69e1      	ldr	r1, [r4, #28]
 8005aee:	f003 0210 	and.w	r2, r3, #16
 8005af2:	4291      	cmp	r1, r2
 8005af4:	d011      	beq.n	8005b1a <HAL_RCC_OscConfig+0x2e2>
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8005af6:	f003 0203 	and.w	r2, r3, #3
 8005afa:	2a02      	cmp	r2, #2
 8005afc:	f000 81c2 	beq.w	8005e84 <HAL_RCC_OscConfig+0x64c>
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8005b00:	f013 0f01 	tst.w	r3, #1
 8005b04:	d142      	bne.n	8005b8c <HAL_RCC_OscConfig+0x354>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8005b06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b0a:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8005b0e:	f023 0310 	bic.w	r3, r3, #16
 8005b12:	69e1      	ldr	r1, [r4, #28]
 8005b14:	430b      	orrs	r3, r1
 8005b16:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8005b1a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b1e:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8005b22:	f043 0301 	orr.w	r3, r3, #1
 8005b26:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8005b2a:	f7fc f8fd 	bl	8001d28 <HAL_GetTick>
 8005b2e:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8005b30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b38:	f013 0f02 	tst.w	r3, #2
 8005b3c:	d15d      	bne.n	8005bfa <HAL_RCC_OscConfig+0x3c2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b3e:	f7fc f8f3 	bl	8001d28 <HAL_GetTick>
 8005b42:	1b80      	subs	r0, r0, r6
 8005b44:	2811      	cmp	r0, #17
 8005b46:	d9f3      	bls.n	8005b30 <HAL_RCC_OscConfig+0x2f8>
          return HAL_TIMEOUT;
 8005b48:	2003      	movs	r0, #3
 8005b4a:	e19e      	b.n	8005e8a <HAL_RCC_OscConfig+0x652>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b4c:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8005b4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b52:	6853      	ldr	r3, [r2, #4]
 8005b54:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005b58:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8005b5c:	6053      	str	r3, [r2, #4]
}
 8005b5e:	e7b9      	b.n	8005ad4 <HAL_RCC_OscConfig+0x29c>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8005b60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b64:	6813      	ldr	r3, [r2, #0]
 8005b66:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b6a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005b6c:	f7fc f8dc 	bl	8001d28 <HAL_GetTick>
 8005b70:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005b72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8005b7c:	d0aa      	beq.n	8005ad4 <HAL_RCC_OscConfig+0x29c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b7e:	f7fc f8d3 	bl	8001d28 <HAL_GetTick>
 8005b82:	1b80      	subs	r0, r0, r6
 8005b84:	2802      	cmp	r0, #2
 8005b86:	d9f4      	bls.n	8005b72 <HAL_RCC_OscConfig+0x33a>
            return HAL_TIMEOUT;
 8005b88:	2003      	movs	r0, #3
 8005b8a:	e17e      	b.n	8005e8a <HAL_RCC_OscConfig+0x652>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8005b8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b90:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8005b94:	f023 0301 	bic.w	r3, r3, #1
 8005b98:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
          tickstart = HAL_GetTick();
 8005b9c:	f7fc f8c4 	bl	8001d28 <HAL_GetTick>
 8005ba0:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8005ba2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ba6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005baa:	f013 0f02 	tst.w	r3, #2
 8005bae:	d0aa      	beq.n	8005b06 <HAL_RCC_OscConfig+0x2ce>
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005bb0:	f7fc f8ba 	bl	8001d28 <HAL_GetTick>
 8005bb4:	1b80      	subs	r0, r0, r6
 8005bb6:	2811      	cmp	r0, #17
 8005bb8:	d9f3      	bls.n	8005ba2 <HAL_RCC_OscConfig+0x36a>
              return HAL_TIMEOUT;
 8005bba:	2003      	movs	r0, #3
 8005bbc:	e165      	b.n	8005e8a <HAL_RCC_OscConfig+0x652>
 8005bbe:	bf00      	nop
 8005bc0:	20000050 	.word	0x20000050
 8005bc4:	20000058 	.word	0x20000058
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8005bc8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005bcc:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8005bd0:	f023 0301 	bic.w	r3, r3, #1
 8005bd4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8005bd8:	f7fc f8a6 	bl	8001d28 <HAL_GetTick>
 8005bdc:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8005bde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005be2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005be6:	f013 0f02 	tst.w	r3, #2
 8005bea:	d006      	beq.n	8005bfa <HAL_RCC_OscConfig+0x3c2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005bec:	f7fc f89c 	bl	8001d28 <HAL_GetTick>
 8005bf0:	1b80      	subs	r0, r0, r6
 8005bf2:	2811      	cmp	r0, #17
 8005bf4:	d9f3      	bls.n	8005bde <HAL_RCC_OscConfig+0x3a6>
          return HAL_TIMEOUT;
 8005bf6:	2003      	movs	r0, #3
 8005bf8:	e147      	b.n	8005e8a <HAL_RCC_OscConfig+0x652>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005bfa:	6823      	ldr	r3, [r4, #0]
 8005bfc:	f013 0f04 	tst.w	r3, #4
 8005c00:	f000 80b1 	beq.w	8005d66 <HAL_RCC_OscConfig+0x52e>
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8005c04:	4ba8      	ldr	r3, [pc, #672]	; (8005ea8 <HAL_RCC_OscConfig+0x670>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005c0c:	d110      	bne.n	8005c30 <HAL_RCC_OscConfig+0x3f8>
      HAL_PWR_EnableBkUpAccess();
 8005c0e:	f7ff fc79 	bl	8005504 <HAL_PWR_EnableBkUpAccess>
      tickstart = HAL_GetTick();
 8005c12:	f7fc f889 	bl	8001d28 <HAL_GetTick>
 8005c16:	4606      	mov	r6, r0
 8005c18:	4ba3      	ldr	r3, [pc, #652]	; (8005ea8 <HAL_RCC_OscConfig+0x670>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005c20:	d106      	bne.n	8005c30 <HAL_RCC_OscConfig+0x3f8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c22:	f7fc f881 	bl	8001d28 <HAL_GetTick>
 8005c26:	1b80      	subs	r0, r0, r6
 8005c28:	2802      	cmp	r0, #2
 8005c2a:	d9f5      	bls.n	8005c18 <HAL_RCC_OscConfig+0x3e0>
          return HAL_TIMEOUT;
 8005c2c:	2003      	movs	r0, #3
 8005c2e:	e12c      	b.n	8005e8a <HAL_RCC_OscConfig+0x652>
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005c30:	68e3      	ldr	r3, [r4, #12]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d061      	beq.n	8005cfa <HAL_RCC_OscConfig+0x4c2>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8005c36:	2b85      	cmp	r3, #133	; 0x85
 8005c38:	d001      	beq.n	8005c3e <HAL_RCC_OscConfig+0x406>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8005c3a:	2b05      	cmp	r3, #5
 8005c3c:	d107      	bne.n	8005c4e <HAL_RCC_OscConfig+0x416>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005c3e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c42:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005c46:	f043 0304 	orr.w	r3, r3, #4
 8005c4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 8005c4e:	f7fc f86b 	bl	8001d28 <HAL_GetTick>
 8005c52:	4606      	mov	r6, r0
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005c54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c58:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005c5c:	f043 0301 	orr.w	r3, r3, #1
 8005c60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005c64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c6c:	f013 0f02 	tst.w	r3, #2
 8005c70:	d108      	bne.n	8005c84 <HAL_RCC_OscConfig+0x44c>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c72:	f7fc f859 	bl	8001d28 <HAL_GetTick>
 8005c76:	1b80      	subs	r0, r0, r6
 8005c78:	f241 3388 	movw	r3, #5000	; 0x1388
 8005c7c:	4298      	cmp	r0, r3
 8005c7e:	d9f1      	bls.n	8005c64 <HAL_RCC_OscConfig+0x42c>
          return HAL_TIMEOUT;
 8005c80:	2003      	movs	r0, #3
 8005c82:	e102      	b.n	8005e8a <HAL_RCC_OscConfig+0x652>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8005c84:	68e3      	ldr	r3, [r4, #12]
 8005c86:	2b81      	cmp	r3, #129	; 0x81
 8005c88:	d001      	beq.n	8005c8e <HAL_RCC_OscConfig+0x456>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8005c8a:	2b85      	cmp	r3, #133	; 0x85
 8005c8c:	d11a      	bne.n	8005cc4 <HAL_RCC_OscConfig+0x48c>
        tickstart = HAL_GetTick();
 8005c8e:	f7fc f84b 	bl	8001d28 <HAL_GetTick>
 8005c92:	4606      	mov	r6, r0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005c94:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c98:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005c9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ca0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005ca4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cac:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8005cb0:	d159      	bne.n	8005d66 <HAL_RCC_OscConfig+0x52e>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cb2:	f7fc f839 	bl	8001d28 <HAL_GetTick>
 8005cb6:	1b80      	subs	r0, r0, r6
 8005cb8:	f241 3388 	movw	r3, #5000	; 0x1388
 8005cbc:	4298      	cmp	r0, r3
 8005cbe:	d9f1      	bls.n	8005ca4 <HAL_RCC_OscConfig+0x46c>
            return HAL_TIMEOUT;
 8005cc0:	2003      	movs	r0, #3
 8005cc2:	e0e2      	b.n	8005e8a <HAL_RCC_OscConfig+0x652>
        tickstart = HAL_GetTick();
 8005cc4:	f7fc f830 	bl	8001d28 <HAL_GetTick>
 8005cc8:	4606      	mov	r6, r0
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005cca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005cce:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005cd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005cd6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005cda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ce2:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8005ce6:	d03e      	beq.n	8005d66 <HAL_RCC_OscConfig+0x52e>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ce8:	f7fc f81e 	bl	8001d28 <HAL_GetTick>
 8005cec:	1b80      	subs	r0, r0, r6
 8005cee:	f241 3388 	movw	r3, #5000	; 0x1388
 8005cf2:	4298      	cmp	r0, r3
 8005cf4:	d9f1      	bls.n	8005cda <HAL_RCC_OscConfig+0x4a2>
            return HAL_TIMEOUT;
 8005cf6:	2003      	movs	r0, #3
 8005cf8:	e0c7      	b.n	8005e8a <HAL_RCC_OscConfig+0x652>
      tickstart = HAL_GetTick();
 8005cfa:	f7fc f815 	bl	8001d28 <HAL_GetTick>
 8005cfe:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005d00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d04:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005d08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005d10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d18:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8005d1c:	d008      	beq.n	8005d30 <HAL_RCC_OscConfig+0x4f8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d1e:	f7fc f803 	bl	8001d28 <HAL_GetTick>
 8005d22:	1b80      	subs	r0, r0, r6
 8005d24:	f241 3388 	movw	r3, #5000	; 0x1388
 8005d28:	4298      	cmp	r0, r3
 8005d2a:	d9f1      	bls.n	8005d10 <HAL_RCC_OscConfig+0x4d8>
          return HAL_TIMEOUT;
 8005d2c:	2003      	movs	r0, #3
 8005d2e:	e0ac      	b.n	8005e8a <HAL_RCC_OscConfig+0x652>
      tickstart = HAL_GetTick();
 8005d30:	f7fb fffa 	bl	8001d28 <HAL_GetTick>
 8005d34:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005d36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d3a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005d3e:	f023 0301 	bic.w	r3, r3, #1
 8005d42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005d46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d4e:	f013 0f02 	tst.w	r3, #2
 8005d52:	d008      	beq.n	8005d66 <HAL_RCC_OscConfig+0x52e>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d54:	f7fb ffe8 	bl	8001d28 <HAL_GetTick>
 8005d58:	1b80      	subs	r0, r0, r6
 8005d5a:	f241 3388 	movw	r3, #5000	; 0x1388
 8005d5e:	4298      	cmp	r0, r3
 8005d60:	d9f1      	bls.n	8005d46 <HAL_RCC_OscConfig+0x50e>
          return HAL_TIMEOUT;
 8005d62:	2003      	movs	r0, #3
 8005d64:	e091      	b.n	8005e8a <HAL_RCC_OscConfig+0x652>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005d66:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	f000 808d 	beq.w	8005e88 <HAL_RCC_OscConfig+0x650>
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005d6e:	2d0c      	cmp	r5, #12
 8005d70:	d062      	beq.n	8005e38 <HAL_RCC_OscConfig+0x600>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005d72:	2b02      	cmp	r3, #2
 8005d74:	d01f      	beq.n	8005db6 <HAL_RCC_OscConfig+0x57e>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005d76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8005d80:	601a      	str	r2, [r3, #0]
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8005d82:	68da      	ldr	r2, [r3, #12]
 8005d84:	f022 0203 	bic.w	r2, r2, #3
 8005d88:	60da      	str	r2, [r3, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 8005d8a:	68da      	ldr	r2, [r3, #12]
 8005d8c:	f022 5288 	bic.w	r2, r2, #285212672	; 0x11000000
 8005d90:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005d94:	60da      	str	r2, [r3, #12]
        tickstart = HAL_GetTick();
 8005d96:	f7fb ffc7 	bl	8001d28 <HAL_GetTick>
 8005d9a:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005d9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8005da6:	d073      	beq.n	8005e90 <HAL_RCC_OscConfig+0x658>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005da8:	f7fb ffbe 	bl	8001d28 <HAL_GetTick>
 8005dac:	1b00      	subs	r0, r0, r4
 8005dae:	280a      	cmp	r0, #10
 8005db0:	d9f4      	bls.n	8005d9c <HAL_RCC_OscConfig+0x564>
            return HAL_TIMEOUT;
 8005db2:	2003      	movs	r0, #3
 8005db4:	e069      	b.n	8005e8a <HAL_RCC_OscConfig+0x652>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005db6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005dba:	6813      	ldr	r3, [r2, #0]
 8005dbc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005dc0:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005dc2:	f7fb ffb1 	bl	8001d28 <HAL_GetTick>
 8005dc6:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005dc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8005dd2:	d12a      	bne.n	8005e2a <HAL_RCC_OscConfig+0x5f2>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005dd4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005dd8:	68d3      	ldr	r3, [r2, #12]
 8005dda:	4934      	ldr	r1, [pc, #208]	; (8005eac <HAL_RCC_OscConfig+0x674>)
 8005ddc:	4019      	ands	r1, r3
 8005dde:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005de0:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8005de2:	4303      	orrs	r3, r0
 8005de4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8005de6:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8005dea:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8005dec:	4303      	orrs	r3, r0
 8005dee:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8005df0:	4303      	orrs	r3, r0
 8005df2:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8005df4:	4303      	orrs	r3, r0
 8005df6:	4319      	orrs	r1, r3
 8005df8:	60d1      	str	r1, [r2, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8005dfa:	6813      	ldr	r3, [r2, #0]
 8005dfc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005e00:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005e02:	68d3      	ldr	r3, [r2, #12]
 8005e04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e08:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8005e0a:	f7fb ff8d 	bl	8001d28 <HAL_GetTick>
 8005e0e:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005e10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8005e1a:	d137      	bne.n	8005e8c <HAL_RCC_OscConfig+0x654>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e1c:	f7fb ff84 	bl	8001d28 <HAL_GetTick>
 8005e20:	1b00      	subs	r0, r0, r4
 8005e22:	280a      	cmp	r0, #10
 8005e24:	d9f4      	bls.n	8005e10 <HAL_RCC_OscConfig+0x5d8>
            return HAL_TIMEOUT;
 8005e26:	2003      	movs	r0, #3
 8005e28:	e02f      	b.n	8005e8a <HAL_RCC_OscConfig+0x652>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e2a:	f7fb ff7d 	bl	8001d28 <HAL_GetTick>
 8005e2e:	1b40      	subs	r0, r0, r5
 8005e30:	280a      	cmp	r0, #10
 8005e32:	d9c9      	bls.n	8005dc8 <HAL_RCC_OscConfig+0x590>
            return HAL_TIMEOUT;
 8005e34:	2003      	movs	r0, #3
 8005e36:	e028      	b.n	8005e8a <HAL_RCC_OscConfig+0x652>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	d02b      	beq.n	8005e94 <HAL_RCC_OscConfig+0x65c>
        pll_config = RCC->PLLCFGR;
 8005e3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e40:	68db      	ldr	r3, [r3, #12]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8005e42:	f003 0103 	and.w	r1, r3, #3
 8005e46:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005e48:	4291      	cmp	r1, r2
 8005e4a:	d125      	bne.n	8005e98 <HAL_RCC_OscConfig+0x660>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8005e4c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005e50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005e52:	428a      	cmp	r2, r1
 8005e54:	d122      	bne.n	8005e9c <HAL_RCC_OscConfig+0x664>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8005e56:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005e5a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005e5c:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8005e60:	d11e      	bne.n	8005ea0 <HAL_RCC_OscConfig+0x668>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8005e62:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 8005e66:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d11b      	bne.n	8005ea4 <HAL_RCC_OscConfig+0x66c>
  return HAL_OK;
 8005e6c:	2000      	movs	r0, #0
 8005e6e:	e00c      	b.n	8005e8a <HAL_RCC_OscConfig+0x652>
    return HAL_ERROR;
 8005e70:	2001      	movs	r0, #1
}
 8005e72:	4770      	bx	lr
        return HAL_ERROR;
 8005e74:	2001      	movs	r0, #1
 8005e76:	e008      	b.n	8005e8a <HAL_RCC_OscConfig+0x652>
            return HAL_ERROR;
 8005e78:	2001      	movs	r0, #1
 8005e7a:	e006      	b.n	8005e8a <HAL_RCC_OscConfig+0x652>
        return HAL_ERROR;
 8005e7c:	2001      	movs	r0, #1
 8005e7e:	e004      	b.n	8005e8a <HAL_RCC_OscConfig+0x652>
        return HAL_ERROR;
 8005e80:	2001      	movs	r0, #1
 8005e82:	e002      	b.n	8005e8a <HAL_RCC_OscConfig+0x652>
          return HAL_ERROR;
 8005e84:	2001      	movs	r0, #1
 8005e86:	e000      	b.n	8005e8a <HAL_RCC_OscConfig+0x652>
  return HAL_OK;
 8005e88:	2000      	movs	r0, #0
}
 8005e8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 8005e8c:	2000      	movs	r0, #0
 8005e8e:	e7fc      	b.n	8005e8a <HAL_RCC_OscConfig+0x652>
 8005e90:	2000      	movs	r0, #0
 8005e92:	e7fa      	b.n	8005e8a <HAL_RCC_OscConfig+0x652>
        return HAL_ERROR;
 8005e94:	2001      	movs	r0, #1
 8005e96:	e7f8      	b.n	8005e8a <HAL_RCC_OscConfig+0x652>
          return HAL_ERROR;
 8005e98:	2001      	movs	r0, #1
 8005e9a:	e7f6      	b.n	8005e8a <HAL_RCC_OscConfig+0x652>
 8005e9c:	2001      	movs	r0, #1
 8005e9e:	e7f4      	b.n	8005e8a <HAL_RCC_OscConfig+0x652>
 8005ea0:	2001      	movs	r0, #1
 8005ea2:	e7f2      	b.n	8005e8a <HAL_RCC_OscConfig+0x652>
 8005ea4:	2001      	movs	r0, #1
 8005ea6:	e7f0      	b.n	8005e8a <HAL_RCC_OscConfig+0x652>
 8005ea8:	58000400 	.word	0x58000400
 8005eac:	11c1808c 	.word	0x11c1808c

08005eb0 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8005eb0:	2800      	cmp	r0, #0
 8005eb2:	f000 8104 	beq.w	80060be <HAL_RCC_ClockConfig+0x20e>
{
 8005eb6:	b570      	push	{r4, r5, r6, lr}
 8005eb8:	460c      	mov	r4, r1
 8005eba:	4605      	mov	r5, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005ebc:	4b82      	ldr	r3, [pc, #520]	; (80060c8 <HAL_RCC_ClockConfig+0x218>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f003 0307 	and.w	r3, r3, #7
 8005ec4:	428b      	cmp	r3, r1
 8005ec6:	d327      	bcc.n	8005f18 <HAL_RCC_ClockConfig+0x68>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ec8:	682b      	ldr	r3, [r5, #0]
 8005eca:	f013 0f02 	tst.w	r3, #2
 8005ece:	d139      	bne.n	8005f44 <HAL_RCC_ClockConfig+0x94>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8005ed0:	682b      	ldr	r3, [r5, #0]
 8005ed2:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005ed6:	d14d      	bne.n	8005f74 <HAL_RCC_ClockConfig+0xc4>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ed8:	682b      	ldr	r3, [r5, #0]
 8005eda:	f013 0f04 	tst.w	r3, #4
 8005ede:	d165      	bne.n	8005fac <HAL_RCC_ClockConfig+0xfc>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ee0:	682b      	ldr	r3, [r5, #0]
 8005ee2:	f013 0f08 	tst.w	r3, #8
 8005ee6:	d179      	bne.n	8005fdc <HAL_RCC_ClockConfig+0x12c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ee8:	682b      	ldr	r3, [r5, #0]
 8005eea:	f013 0f01 	tst.w	r3, #1
 8005eee:	f000 80c1 	beq.w	8006074 <HAL_RCC_ClockConfig+0x1c4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ef2:	686b      	ldr	r3, [r5, #4]
 8005ef4:	2b02      	cmp	r3, #2
 8005ef6:	f000 808b 	beq.w	8006010 <HAL_RCC_ClockConfig+0x160>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005efa:	2b03      	cmp	r3, #3
 8005efc:	f000 8090 	beq.w	8006020 <HAL_RCC_ClockConfig+0x170>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	f040 8095 	bne.w	8006030 <HAL_RCC_ClockConfig+0x180>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005f06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f0a:	6812      	ldr	r2, [r2, #0]
 8005f0c:	f012 0f02 	tst.w	r2, #2
 8005f10:	f040 8094 	bne.w	800603c <HAL_RCC_ClockConfig+0x18c>
        return HAL_ERROR;
 8005f14:	2001      	movs	r0, #1
 8005f16:	e0d1      	b.n	80060bc <HAL_RCC_ClockConfig+0x20c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f18:	4a6b      	ldr	r2, [pc, #428]	; (80060c8 <HAL_RCC_ClockConfig+0x218>)
 8005f1a:	6813      	ldr	r3, [r2, #0]
 8005f1c:	f023 0307 	bic.w	r3, r3, #7
 8005f20:	430b      	orrs	r3, r1
 8005f22:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8005f24:	f7fb ff00 	bl	8001d28 <HAL_GetTick>
 8005f28:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f2a:	4b67      	ldr	r3, [pc, #412]	; (80060c8 <HAL_RCC_ClockConfig+0x218>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f003 0307 	and.w	r3, r3, #7
 8005f32:	42a3      	cmp	r3, r4
 8005f34:	d0c8      	beq.n	8005ec8 <HAL_RCC_ClockConfig+0x18>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005f36:	f7fb fef7 	bl	8001d28 <HAL_GetTick>
 8005f3a:	1b80      	subs	r0, r0, r6
 8005f3c:	2802      	cmp	r0, #2
 8005f3e:	d9f4      	bls.n	8005f2a <HAL_RCC_ClockConfig+0x7a>
        return HAL_TIMEOUT;
 8005f40:	2003      	movs	r0, #3
 8005f42:	e0bb      	b.n	80060bc <HAL_RCC_ClockConfig+0x20c>
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8005f44:	68ab      	ldr	r3, [r5, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8005f46:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f4a:	688a      	ldr	r2, [r1, #8]
 8005f4c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8005f50:	4313      	orrs	r3, r2
 8005f52:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8005f54:	f7fb fee8 	bl	8001d28 <HAL_GetTick>
 8005f58:	4606      	mov	r6, r0
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8005f5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f5e:	689b      	ldr	r3, [r3, #8]
 8005f60:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8005f64:	d1b4      	bne.n	8005ed0 <HAL_RCC_ClockConfig+0x20>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005f66:	f7fb fedf 	bl	8001d28 <HAL_GetTick>
 8005f6a:	1b80      	subs	r0, r0, r6
 8005f6c:	2802      	cmp	r0, #2
 8005f6e:	d9f4      	bls.n	8005f5a <HAL_RCC_ClockConfig+0xaa>
        return HAL_TIMEOUT;
 8005f70:	2003      	movs	r0, #3
 8005f72:	e0a3      	b.n	80060bc <HAL_RCC_ClockConfig+0x20c>
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8005f74:	6969      	ldr	r1, [r5, #20]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8005f76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f7a:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
 8005f7e:	f023 030f 	bic.w	r3, r3, #15
 8005f82:	ea43 1311 	orr.w	r3, r3, r1, lsr #4
 8005f86:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    tickstart = HAL_GetTick();
 8005f8a:	f7fb fecd 	bl	8001d28 <HAL_GetTick>
 8005f8e:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8005f90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f94:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005f98:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8005f9c:	d19c      	bne.n	8005ed8 <HAL_RCC_ClockConfig+0x28>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005f9e:	f7fb fec3 	bl	8001d28 <HAL_GetTick>
 8005fa2:	1b80      	subs	r0, r0, r6
 8005fa4:	2802      	cmp	r0, #2
 8005fa6:	d9f3      	bls.n	8005f90 <HAL_RCC_ClockConfig+0xe0>
        return HAL_TIMEOUT;
 8005fa8:	2003      	movs	r0, #3
 8005faa:	e087      	b.n	80060bc <HAL_RCC_ClockConfig+0x20c>
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8005fac:	68eb      	ldr	r3, [r5, #12]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8005fae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005fb2:	688a      	ldr	r2, [r1, #8]
 8005fb4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8005fbc:	f7fb feb4 	bl	8001d28 <HAL_GetTick>
 8005fc0:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8005fc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005fcc:	d188      	bne.n	8005ee0 <HAL_RCC_ClockConfig+0x30>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005fce:	f7fb feab 	bl	8001d28 <HAL_GetTick>
 8005fd2:	1b80      	subs	r0, r0, r6
 8005fd4:	2802      	cmp	r0, #2
 8005fd6:	d9f4      	bls.n	8005fc2 <HAL_RCC_ClockConfig+0x112>
        return HAL_TIMEOUT;
 8005fd8:	2003      	movs	r0, #3
 8005fda:	e06f      	b.n	80060bc <HAL_RCC_ClockConfig+0x20c>
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8005fdc:	6929      	ldr	r1, [r5, #16]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005fde:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005fe2:	6893      	ldr	r3, [r2, #8]
 8005fe4:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8005fe8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005fec:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8005fee:	f7fb fe9b 	bl	8001d28 <HAL_GetTick>
 8005ff2:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8005ff4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8005ffe:	f47f af73 	bne.w	8005ee8 <HAL_RCC_ClockConfig+0x38>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006002:	f7fb fe91 	bl	8001d28 <HAL_GetTick>
 8006006:	1b80      	subs	r0, r0, r6
 8006008:	2802      	cmp	r0, #2
 800600a:	d9f3      	bls.n	8005ff4 <HAL_RCC_ClockConfig+0x144>
        return HAL_TIMEOUT;
 800600c:	2003      	movs	r0, #3
 800600e:	e055      	b.n	80060bc <HAL_RCC_ClockConfig+0x20c>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8006010:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006014:	6812      	ldr	r2, [r2, #0]
 8006016:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800601a:	d10f      	bne.n	800603c <HAL_RCC_ClockConfig+0x18c>
        return HAL_ERROR;
 800601c:	2001      	movs	r0, #1
 800601e:	e04d      	b.n	80060bc <HAL_RCC_ClockConfig+0x20c>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8006020:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006024:	6812      	ldr	r2, [r2, #0]
 8006026:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800602a:	d107      	bne.n	800603c <HAL_RCC_ClockConfig+0x18c>
        return HAL_ERROR;
 800602c:	2001      	movs	r0, #1
 800602e:	e045      	b.n	80060bc <HAL_RCC_ClockConfig+0x20c>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8006030:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006034:	6812      	ldr	r2, [r2, #0]
 8006036:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800603a:	d042      	beq.n	80060c2 <HAL_RCC_ClockConfig+0x212>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800603c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006040:	688a      	ldr	r2, [r1, #8]
 8006042:	f022 0203 	bic.w	r2, r2, #3
 8006046:	4313      	orrs	r3, r2
 8006048:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800604a:	f7fb fe6d 	bl	8001d28 <HAL_GetTick>
 800604e:	4606      	mov	r6, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8006050:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006054:	689b      	ldr	r3, [r3, #8]
 8006056:	f003 030c 	and.w	r3, r3, #12
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800605a:	686a      	ldr	r2, [r5, #4]
 800605c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8006060:	d008      	beq.n	8006074 <HAL_RCC_ClockConfig+0x1c4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006062:	f7fb fe61 	bl	8001d28 <HAL_GetTick>
 8006066:	1b80      	subs	r0, r0, r6
 8006068:	f241 3388 	movw	r3, #5000	; 0x1388
 800606c:	4298      	cmp	r0, r3
 800606e:	d9ef      	bls.n	8006050 <HAL_RCC_ClockConfig+0x1a0>
        return HAL_TIMEOUT;
 8006070:	2003      	movs	r0, #3
 8006072:	e023      	b.n	80060bc <HAL_RCC_ClockConfig+0x20c>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006074:	4b14      	ldr	r3, [pc, #80]	; (80060c8 <HAL_RCC_ClockConfig+0x218>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f003 0307 	and.w	r3, r3, #7
 800607c:	42a3      	cmp	r3, r4
 800607e:	d915      	bls.n	80060ac <HAL_RCC_ClockConfig+0x1fc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006080:	4a11      	ldr	r2, [pc, #68]	; (80060c8 <HAL_RCC_ClockConfig+0x218>)
 8006082:	6813      	ldr	r3, [r2, #0]
 8006084:	f023 0307 	bic.w	r3, r3, #7
 8006088:	4323      	orrs	r3, r4
 800608a:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800608c:	f7fb fe4c 	bl	8001d28 <HAL_GetTick>
 8006090:	4605      	mov	r5, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006092:	4b0d      	ldr	r3, [pc, #52]	; (80060c8 <HAL_RCC_ClockConfig+0x218>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f003 0307 	and.w	r3, r3, #7
 800609a:	42a3      	cmp	r3, r4
 800609c:	d006      	beq.n	80060ac <HAL_RCC_ClockConfig+0x1fc>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800609e:	f7fb fe43 	bl	8001d28 <HAL_GetTick>
 80060a2:	1b40      	subs	r0, r0, r5
 80060a4:	2802      	cmp	r0, #2
 80060a6:	d9f4      	bls.n	8006092 <HAL_RCC_ClockConfig+0x1e2>
        return HAL_TIMEOUT;
 80060a8:	2003      	movs	r0, #3
 80060aa:	e007      	b.n	80060bc <HAL_RCC_ClockConfig+0x20c>
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80060ac:	f7ff fbb4 	bl	8005818 <HAL_RCC_GetHCLKFreq>
 80060b0:	4b06      	ldr	r3, [pc, #24]	; (80060cc <HAL_RCC_ClockConfig+0x21c>)
 80060b2:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 80060b4:	4b06      	ldr	r3, [pc, #24]	; (80060d0 <HAL_RCC_ClockConfig+0x220>)
 80060b6:	6818      	ldr	r0, [r3, #0]
 80060b8:	f7fb fe34 	bl	8001d24 <HAL_InitTick>
}
 80060bc:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80060be:	2001      	movs	r0, #1
}
 80060c0:	4770      	bx	lr
        return HAL_ERROR;
 80060c2:	2001      	movs	r0, #1
 80060c4:	e7fa      	b.n	80060bc <HAL_RCC_ClockConfig+0x20c>
 80060c6:	bf00      	nop
 80060c8:	58004000 	.word	0x58004000
 80060cc:	20000050 	.word	0x20000050
 80060d0:	20000058 	.word	0x20000058

080060d4 <HAL_RCC_GetPCLK1Freq>:
{
 80060d4:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80060d6:	f7ff fb9f 	bl	8005818 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80060da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060de:	689b      	ldr	r3, [r3, #8]
 80060e0:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80060e4:	4a02      	ldr	r2, [pc, #8]	; (80060f0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80060e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80060ea:	40d8      	lsrs	r0, r3
 80060ec:	bd08      	pop	{r3, pc}
 80060ee:	bf00      	nop
 80060f0:	080173ac 	.word	0x080173ac

080060f4 <HAL_RCC_GetPCLK2Freq>:
{
 80060f4:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80060f6:	f7ff fb8f 	bl	8005818 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80060fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060fe:	689b      	ldr	r3, [r3, #8]
 8006100:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8006104:	4a02      	ldr	r2, [pc, #8]	; (8006110 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8006106:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800610a:	40d8      	lsrs	r0, r3
 800610c:	bd08      	pop	{r3, pc}
 800610e:	bf00      	nop
 8006110:	080173ac 	.word	0x080173ac

08006114 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006114:	b570      	push	{r4, r5, r6, lr}
 8006116:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006118:	6803      	ldr	r3, [r0, #0]
 800611a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800611e:	f040 80ab 	bne.w	8006278 <HAL_RCCEx_PeriphCLKConfig+0x164>
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8006122:	2500      	movs	r5, #0
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006124:	6823      	ldr	r3, [r4, #0]
 8006126:	f013 0f01 	tst.w	r3, #1
 800612a:	d00a      	beq.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0x2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800612c:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 800612e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006132:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8006136:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 800613a:	b292      	uxth	r2, r2
 800613c:	4313      	orrs	r3, r2
 800613e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006142:	6823      	ldr	r3, [r4, #0]
 8006144:	f013 0f02 	tst.w	r3, #2
 8006148:	d00a      	beq.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x4c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800614a:	68a2      	ldr	r2, [r4, #8]
 800614c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006150:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8006154:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 8006158:	b292      	uxth	r2, r2
 800615a:	4313      	orrs	r3, r2
 800615c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006160:	6823      	ldr	r3, [r4, #0]
 8006162:	f013 0f20 	tst.w	r3, #32
 8006166:	d009      	beq.n	800617c <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006168:	6923      	ldr	r3, [r4, #16]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800616a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800616e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006172:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006176:	4313      	orrs	r3, r2
 8006178:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800617c:	6823      	ldr	r3, [r4, #0]
 800617e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8006182:	d00c      	beq.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006184:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8006186:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800618a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800618e:	0c02      	lsrs	r2, r0, #16
 8006190:	0412      	lsls	r2, r2, #16
 8006192:	ea23 0302 	bic.w	r3, r3, r2
 8006196:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800619a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800619e:	6823      	ldr	r3, [r4, #0]
 80061a0:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80061a4:	d00c      	beq.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0xac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80061a6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80061a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80061ac:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80061b0:	0c02      	lsrs	r2, r0, #16
 80061b2:	0412      	lsls	r2, r2, #16
 80061b4:	ea23 0302 	bic.w	r3, r3, r2
 80061b8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80061bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80061c0:	6823      	ldr	r3, [r4, #0]
 80061c2:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80061c6:	d00c      	beq.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80061c8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80061ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80061ce:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80061d2:	0c02      	lsrs	r2, r0, #16
 80061d4:	0412      	lsls	r2, r2, #16
 80061d6:	ea23 0302 	bic.w	r3, r3, r2
 80061da:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80061de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80061e2:	6823      	ldr	r3, [r4, #0]
 80061e4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80061e8:	f040 809e 	bne.w	8006328 <HAL_RCCEx_PeriphCLKConfig+0x214>
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80061ec:	6823      	ldr	r3, [r4, #0]
 80061ee:	f013 0f80 	tst.w	r3, #128	; 0x80
 80061f2:	f040 80aa 	bne.w	800634a <HAL_RCCEx_PeriphCLKConfig+0x236>
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80061f6:	6823      	ldr	r3, [r4, #0]
 80061f8:	f413 7f80 	tst.w	r3, #256	; 0x100
 80061fc:	f040 80b6 	bne.w	800636c <HAL_RCCEx_PeriphCLKConfig+0x258>
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8006200:	6823      	ldr	r3, [r4, #0]
 8006202:	f013 0f10 	tst.w	r3, #16
 8006206:	d00e      	beq.n	8006226 <HAL_RCCEx_PeriphCLKConfig+0x112>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8006208:	68e3      	ldr	r3, [r4, #12]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 800620a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800620e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006212:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006216:	4313      	orrs	r3, r2
 8006218:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800621c:	68e3      	ldr	r3, [r4, #12]
 800621e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006222:	f000 80b4 	beq.w	800638e <HAL_RCCEx_PeriphCLKConfig+0x27a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006226:	6823      	ldr	r3, [r4, #0]
 8006228:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800622c:	d00f      	beq.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800622e:	6b23      	ldr	r3, [r4, #48]	; 0x30
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8006230:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006234:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006238:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 800623c:	4313      	orrs	r3, r2
 800623e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006242:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006244:	b91b      	cbnz	r3, 800624e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8006246:	68cb      	ldr	r3, [r1, #12]
 8006248:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800624c:	60cb      	str	r3, [r1, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800624e:	6823      	ldr	r3, [r4, #0]
 8006250:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8006254:	d00e      	beq.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006256:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8006258:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800625c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006260:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006264:	4313      	orrs	r3, r2
 8006266:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800626a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800626c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006270:	f000 8092 	beq.w	8006398 <HAL_RCCEx_PeriphCLKConfig+0x284>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
    }
  }

  return status;
}
 8006274:	4628      	mov	r0, r5
 8006276:	bd70      	pop	{r4, r5, r6, pc}
    HAL_PWR_EnableBkUpAccess();
 8006278:	f7ff f944 	bl	8005504 <HAL_PWR_EnableBkUpAccess>
    tickstart = HAL_GetTick();
 800627c:	f7fb fd54 	bl	8001d28 <HAL_GetTick>
 8006280:	4605      	mov	r5, r0
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8006282:	4b48      	ldr	r3, [pc, #288]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f413 7f80 	tst.w	r3, #256	; 0x100
 800628a:	d106      	bne.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x186>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800628c:	f7fb fd4c 	bl	8001d28 <HAL_GetTick>
 8006290:	1b40      	subs	r0, r0, r5
 8006292:	2802      	cmp	r0, #2
 8006294:	d9f5      	bls.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x16e>
        ret = HAL_TIMEOUT;
 8006296:	2503      	movs	r5, #3
 8006298:	e000      	b.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x188>
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 800629a:	2500      	movs	r5, #0
    if (ret == HAL_OK)
 800629c:	2d00      	cmp	r5, #0
 800629e:	f47f af41 	bne.w	8006124 <HAL_RCCEx_PeriphCLKConfig+0x10>
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80062a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 80062ae:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80062b0:	429a      	cmp	r2, r3
 80062b2:	d024      	beq.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0x1ea>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80062b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062b8:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80062bc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80062c0:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 80062c4:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80062c8:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80062cc:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 80062d0:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80062d4:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
        RCC->BDCR = tmpregister;
 80062d8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 80062dc:	f012 0f02 	tst.w	r2, #2
 80062e0:	d10f      	bne.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
      if (ret == HAL_OK)
 80062e2:	2d00      	cmp	r5, #0
 80062e4:	f47f af1e 	bne.w	8006124 <HAL_RCCEx_PeriphCLKConfig+0x10>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80062e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80062ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80062ee:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80062f2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80062f6:	4313      	orrs	r3, r2
 80062f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80062fc:	e712      	b.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0x10>
  uint32_t tmpregister = 0;
 80062fe:	2200      	movs	r2, #0
 8006300:	e7ec      	b.n	80062dc <HAL_RCCEx_PeriphCLKConfig+0x1c8>
        tickstart = HAL_GetTick();
 8006302:	f7fb fd11 	bl	8001d28 <HAL_GetTick>
 8006306:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006308:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800630c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006310:	f013 0f02 	tst.w	r3, #2
 8006314:	d1e5      	bne.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006316:	f7fb fd07 	bl	8001d28 <HAL_GetTick>
 800631a:	1b80      	subs	r0, r0, r6
 800631c:	f241 3388 	movw	r3, #5000	; 0x1388
 8006320:	4298      	cmp	r0, r3
 8006322:	d9f1      	bls.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
            ret = HAL_TIMEOUT;
 8006324:	2503      	movs	r5, #3
 8006326:	e7dc      	b.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006328:	6963      	ldr	r3, [r4, #20]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800632a:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 800632e:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8006332:	0919      	lsrs	r1, r3, #4
 8006334:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 8006338:	ea22 0201 	bic.w	r2, r2, r1
 800633c:	011b      	lsls	r3, r3, #4
 800633e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006342:	4313      	orrs	r3, r2
 8006344:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 8006348:	e750      	b.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0xd8>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800634a:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800634c:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8006350:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8006354:	0919      	lsrs	r1, r3, #4
 8006356:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 800635a:	ea22 0201 	bic.w	r2, r2, r1
 800635e:	011b      	lsls	r3, r3, #4
 8006360:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006364:	4313      	orrs	r3, r2
 8006366:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 800636a:	e744      	b.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800636c:	69e3      	ldr	r3, [r4, #28]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800636e:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8006372:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8006376:	0919      	lsrs	r1, r3, #4
 8006378:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 800637c:	ea22 0201 	bic.w	r2, r2, r1
 8006380:	011b      	lsls	r3, r3, #4
 8006382:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006386:	4313      	orrs	r3, r2
 8006388:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 800638c:	e738      	b.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0xec>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 800638e:	68cb      	ldr	r3, [r1, #12]
 8006390:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006394:	60cb      	str	r3, [r1, #12]
 8006396:	e746      	b.n	8006226 <HAL_RCCEx_PeriphCLKConfig+0x112>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006398:	68cb      	ldr	r3, [r1, #12]
 800639a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800639e:	60cb      	str	r3, [r1, #12]
 80063a0:	e768      	b.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80063a2:	bf00      	nop
 80063a4:	58000400 	.word	0x58000400

080063a8 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 80063a8:	4603      	mov	r3, r0
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80063aa:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
 80063ae:	2a01      	cmp	r2, #1
 80063b0:	d035      	beq.n	800641e <HAL_RTC_DeactivateAlarm+0x76>
 80063b2:	2201      	movs	r2, #1
 80063b4:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80063b8:	2202      	movs	r2, #2
 80063ba:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80063be:	4a19      	ldr	r2, [pc, #100]	; (8006424 <HAL_RTC_DeactivateAlarm+0x7c>)
 80063c0:	20ca      	movs	r0, #202	; 0xca
 80063c2:	6250      	str	r0, [r2, #36]	; 0x24
 80063c4:	2053      	movs	r0, #83	; 0x53
 80063c6:	6250      	str	r0, [r2, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 80063c8:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80063cc:	d018      	beq.n	8006400 <HAL_RTC_DeactivateAlarm+0x58>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80063ce:	4a15      	ldr	r2, [pc, #84]	; (8006424 <HAL_RTC_DeactivateAlarm+0x7c>)
 80063d0:	6991      	ldr	r1, [r2, #24]
 80063d2:	f421 5108 	bic.w	r1, r1, #8704	; 0x2200
 80063d6:	6191      	str	r1, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 80063d8:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 80063da:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80063de:	64d1      	str	r1, [r2, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 80063e0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80063e2:	f021 0102 	bic.w	r1, r1, #2
 80063e6:	6319      	str	r1, [r3, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80063e8:	2102      	movs	r1, #2
 80063ea:	65d1      	str	r1, [r2, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80063ec:	4a0d      	ldr	r2, [pc, #52]	; (8006424 <HAL_RTC_DeactivateAlarm+0x7c>)
 80063ee:	21ff      	movs	r1, #255	; 0xff
 80063f0:	6251      	str	r1, [r2, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80063f2:	2201      	movs	r2, #1
 80063f4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80063f8:	2000      	movs	r0, #0
 80063fa:	f883 002c 	strb.w	r0, [r3, #44]	; 0x2c

  return HAL_OK;
 80063fe:	4770      	bx	lr
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006400:	6991      	ldr	r1, [r2, #24]
 8006402:	f421 5188 	bic.w	r1, r1, #4352	; 0x1100
 8006406:	6191      	str	r1, [r2, #24]
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8006408:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800640a:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800640e:	6451      	str	r1, [r2, #68]	; 0x44
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8006410:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006412:	f021 0101 	bic.w	r1, r1, #1
 8006416:	6319      	str	r1, [r3, #48]	; 0x30
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006418:	2101      	movs	r1, #1
 800641a:	65d1      	str	r1, [r2, #92]	; 0x5c
 800641c:	e7e6      	b.n	80063ec <HAL_RTC_DeactivateAlarm+0x44>
  __HAL_LOCK(hrtc);
 800641e:	2002      	movs	r0, #2
}
 8006420:	4770      	bx	lr
 8006422:	bf00      	nop
 8006424:	40002800 	.word	0x40002800

08006428 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006428:	b538      	push	{r3, r4, r5, lr}
 800642a:	4604      	mov	r4, r0
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 800642c:	4b0d      	ldr	r3, [pc, #52]	; (8006464 <HAL_RTC_AlarmIRQHandler+0x3c>)
 800642e:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 8006430:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8006432:	401d      	ands	r5, r3

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8006434:	f015 0f01 	tst.w	r5, #1
 8006438:	d106      	bne.n	8006448 <HAL_RTC_AlarmIRQHandler+0x20>
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 800643a:	f015 0f02 	tst.w	r5, #2
 800643e:	d109      	bne.n	8006454 <HAL_RTC_AlarmIRQHandler+0x2c>
    HAL_RTCEx_AlarmBEventCallback(hrtc);
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006440:	2301      	movs	r3, #1
 8006442:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 8006446:	bd38      	pop	{r3, r4, r5, pc}
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006448:	4b06      	ldr	r3, [pc, #24]	; (8006464 <HAL_RTC_AlarmIRQHandler+0x3c>)
 800644a:	2201      	movs	r2, #1
 800644c:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTC_AlarmAEventCallback(hrtc);
 800644e:	f7fb fe09 	bl	8002064 <HAL_RTC_AlarmAEventCallback>
 8006452:	e7f2      	b.n	800643a <HAL_RTC_AlarmIRQHandler+0x12>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006454:	4b03      	ldr	r3, [pc, #12]	; (8006464 <HAL_RTC_AlarmIRQHandler+0x3c>)
 8006456:	2202      	movs	r2, #2
 8006458:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 800645a:	4620      	mov	r0, r4
 800645c:	f000 f9e4 	bl	8006828 <HAL_RTCEx_AlarmBEventCallback>
 8006460:	e7ee      	b.n	8006440 <HAL_RTC_AlarmIRQHandler+0x18>
 8006462:	bf00      	nop
 8006464:	40002800 	.word	0x40002800

08006468 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006468:	b510      	push	{r4, lr}
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800646a:	4a0b      	ldr	r2, [pc, #44]	; (8006498 <HAL_RTC_WaitForSynchro+0x30>)
 800646c:	68d3      	ldr	r3, [r2, #12]
 800646e:	f023 0320 	bic.w	r3, r3, #32
 8006472:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8006474:	f7fb fc58 	bl	8001d28 <HAL_GetTick>
 8006478:	4604      	mov	r4, r0

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800647a:	4b07      	ldr	r3, [pc, #28]	; (8006498 <HAL_RTC_WaitForSynchro+0x30>)
 800647c:	68db      	ldr	r3, [r3, #12]
 800647e:	f013 0f20 	tst.w	r3, #32
 8006482:	d107      	bne.n	8006494 <HAL_RTC_WaitForSynchro+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006484:	f7fb fc50 	bl	8001d28 <HAL_GetTick>
 8006488:	1b00      	subs	r0, r0, r4
 800648a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800648e:	d9f4      	bls.n	800647a <HAL_RTC_WaitForSynchro+0x12>
    {
      return HAL_TIMEOUT;
 8006490:	2003      	movs	r0, #3
 8006492:	e000      	b.n	8006496 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8006494:	2000      	movs	r0, #0
}
 8006496:	bd10      	pop	{r4, pc}
 8006498:	40002800 	.word	0x40002800

0800649c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800649c:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800649e:	4b11      	ldr	r3, [pc, #68]	; (80064e4 <RTC_EnterInitMode+0x48>)
 80064a0:	68db      	ldr	r3, [r3, #12]
 80064a2:	f013 0f40 	tst.w	r3, #64	; 0x40
 80064a6:	d002      	beq.n	80064ae <RTC_EnterInitMode+0x12>
  HAL_StatusTypeDef status = HAL_OK;
 80064a8:	2400      	movs	r4, #0
      }
    }
  }

  return status;
}
 80064aa:	4620      	mov	r0, r4
 80064ac:	bd70      	pop	{r4, r5, r6, pc}
 80064ae:	4606      	mov	r6, r0
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80064b0:	4a0c      	ldr	r2, [pc, #48]	; (80064e4 <RTC_EnterInitMode+0x48>)
 80064b2:	68d3      	ldr	r3, [r2, #12]
 80064b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064b8:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 80064ba:	f7fb fc35 	bl	8001d28 <HAL_GetTick>
 80064be:	4605      	mov	r5, r0
  HAL_StatusTypeDef status = HAL_OK;
 80064c0:	2400      	movs	r4, #0
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80064c2:	4b08      	ldr	r3, [pc, #32]	; (80064e4 <RTC_EnterInitMode+0x48>)
 80064c4:	68db      	ldr	r3, [r3, #12]
 80064c6:	f013 0f40 	tst.w	r3, #64	; 0x40
 80064ca:	d1ee      	bne.n	80064aa <RTC_EnterInitMode+0xe>
 80064cc:	2c03      	cmp	r4, #3
 80064ce:	d0ec      	beq.n	80064aa <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80064d0:	f7fb fc2a 	bl	8001d28 <HAL_GetTick>
 80064d4:	1b43      	subs	r3, r0, r5
 80064d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80064da:	d9f2      	bls.n	80064c2 <RTC_EnterInitMode+0x26>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80064dc:	2403      	movs	r4, #3
 80064de:	f886 402d 	strb.w	r4, [r6, #45]	; 0x2d
 80064e2:	e7ee      	b.n	80064c2 <RTC_EnterInitMode+0x26>
 80064e4:	40002800 	.word	0x40002800

080064e8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80064e8:	b510      	push	{r4, lr}
 80064ea:	4604      	mov	r4, r0
  HAL_StatusTypeDef status = HAL_OK;

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80064ec:	4b10      	ldr	r3, [pc, #64]	; (8006530 <RTC_ExitInitMode+0x48>)
 80064ee:	68da      	ldr	r2, [r3, #12]
 80064f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80064f4:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80064f6:	699b      	ldr	r3, [r3, #24]
 80064f8:	f013 0f20 	tst.w	r3, #32
 80064fc:	d106      	bne.n	800650c <RTC_ExitInitMode+0x24>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80064fe:	f7ff ffb3 	bl	8006468 <HAL_RTC_WaitForSynchro>
 8006502:	b198      	cbz	r0, 800652c <RTC_ExitInitMode+0x44>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006504:	2003      	movs	r0, #3
 8006506:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
      status = HAL_TIMEOUT;
 800650a:	e00f      	b.n	800652c <RTC_ExitInitMode+0x44>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800650c:	4a08      	ldr	r2, [pc, #32]	; (8006530 <RTC_ExitInitMode+0x48>)
 800650e:	6993      	ldr	r3, [r2, #24]
 8006510:	f023 0320 	bic.w	r3, r3, #32
 8006514:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006516:	f7ff ffa7 	bl	8006468 <HAL_RTC_WaitForSynchro>
 800651a:	b110      	cbz	r0, 8006522 <RTC_ExitInitMode+0x3a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800651c:	2003      	movs	r0, #3
 800651e:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
      status = HAL_TIMEOUT;
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006522:	4a03      	ldr	r2, [pc, #12]	; (8006530 <RTC_ExitInitMode+0x48>)
 8006524:	6993      	ldr	r3, [r2, #24]
 8006526:	f043 0320 	orr.w	r3, r3, #32
 800652a:	6193      	str	r3, [r2, #24]
  }

  return status;
}
 800652c:	bd10      	pop	{r4, pc}
 800652e:	bf00      	nop
 8006530:	40002800 	.word	0x40002800

08006534 <HAL_RTC_Init>:
  if (hrtc != NULL)
 8006534:	2800      	cmp	r0, #0
 8006536:	d04a      	beq.n	80065ce <HAL_RTC_Init+0x9a>
{
 8006538:	b538      	push	{r3, r4, r5, lr}
 800653a:	4604      	mov	r4, r0
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800653c:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8006540:	b19b      	cbz	r3, 800656a <HAL_RTC_Init+0x36>
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006542:	2302      	movs	r3, #2
 8006544:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006548:	4b22      	ldr	r3, [pc, #136]	; (80065d4 <HAL_RTC_Init+0xa0>)
 800654a:	22ca      	movs	r2, #202	; 0xca
 800654c:	625a      	str	r2, [r3, #36]	; 0x24
 800654e:	2253      	movs	r2, #83	; 0x53
 8006550:	625a      	str	r2, [r3, #36]	; 0x24
    status = RTC_EnterInitMode(hrtc);
 8006552:	4620      	mov	r0, r4
 8006554:	f7ff ffa2 	bl	800649c <RTC_EnterInitMode>
    if (status == HAL_OK)
 8006558:	b160      	cbz	r0, 8006574 <HAL_RTC_Init+0x40>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800655a:	4b1e      	ldr	r3, [pc, #120]	; (80065d4 <HAL_RTC_Init+0xa0>)
 800655c:	22ff      	movs	r2, #255	; 0xff
 800655e:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8006560:	b910      	cbnz	r0, 8006568 <HAL_RTC_Init+0x34>
      hrtc->State = HAL_RTC_STATE_READY;
 8006562:	2301      	movs	r3, #1
 8006564:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 8006568:	bd38      	pop	{r3, r4, r5, pc}
      hrtc->Lock = HAL_UNLOCKED;
 800656a:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
      HAL_RTC_MspInit(hrtc);
 800656e:	f7fb f9e9 	bl	8001944 <HAL_RTC_MspInit>
 8006572:	e7e6      	b.n	8006542 <HAL_RTC_Init+0xe>
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8006574:	4b17      	ldr	r3, [pc, #92]	; (80065d4 <HAL_RTC_Init+0xa0>)
 8006576:	699a      	ldr	r2, [r3, #24]
 8006578:	f022 628e 	bic.w	r2, r2, #74448896	; 0x4700000
 800657c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006580:	619a      	str	r2, [r3, #24]
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8006582:	6999      	ldr	r1, [r3, #24]
 8006584:	6862      	ldr	r2, [r4, #4]
 8006586:	6920      	ldr	r0, [r4, #16]
 8006588:	4302      	orrs	r2, r0
 800658a:	69a0      	ldr	r0, [r4, #24]
 800658c:	4302      	orrs	r2, r0
 800658e:	430a      	orrs	r2, r1
 8006590:	619a      	str	r2, [r3, #24]
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8006592:	68e2      	ldr	r2, [r4, #12]
 8006594:	68a1      	ldr	r1, [r4, #8]
 8006596:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800659a:	611a      	str	r2, [r3, #16]
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800659c:	68da      	ldr	r2, [r3, #12]
 800659e:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 80065a2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80065a4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80065a6:	4301      	orrs	r1, r0
 80065a8:	430a      	orrs	r2, r1
 80065aa:	60da      	str	r2, [r3, #12]
      status = RTC_ExitInitMode(hrtc);
 80065ac:	4620      	mov	r0, r4
 80065ae:	f7ff ff9b 	bl	80064e8 <RTC_ExitInitMode>
      if (status == HAL_OK)
 80065b2:	2800      	cmp	r0, #0
 80065b4:	d1d1      	bne.n	800655a <HAL_RTC_Init+0x26>
        MODIFY_REG(RTC->CR, \
 80065b6:	4907      	ldr	r1, [pc, #28]	; (80065d4 <HAL_RTC_Init+0xa0>)
 80065b8:	698b      	ldr	r3, [r1, #24]
 80065ba:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 80065be:	6a22      	ldr	r2, [r4, #32]
 80065c0:	69e5      	ldr	r5, [r4, #28]
 80065c2:	432a      	orrs	r2, r5
 80065c4:	6965      	ldr	r5, [r4, #20]
 80065c6:	432a      	orrs	r2, r5
 80065c8:	4313      	orrs	r3, r2
 80065ca:	618b      	str	r3, [r1, #24]
 80065cc:	e7c5      	b.n	800655a <HAL_RTC_Init+0x26>
  HAL_StatusTypeDef status = HAL_ERROR;
 80065ce:	2001      	movs	r0, #1
}
 80065d0:	4770      	bx	lr
 80065d2:	bf00      	nop
 80065d4:	40002800 	.word	0x40002800

080065d8 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 80065d8:	2300      	movs	r3, #0
  uint8_t tmp_Value = Value;

  while (tmp_Value >= 10U)
 80065da:	e002      	b.n	80065e2 <RTC_ByteToBcd2+0xa>
  {
    bcdhigh++;
 80065dc:	3301      	adds	r3, #1
    tmp_Value -= 10U;
 80065de:	380a      	subs	r0, #10
 80065e0:	b2c0      	uxtb	r0, r0
  while (tmp_Value >= 10U)
 80065e2:	2809      	cmp	r0, #9
 80065e4:	d8fa      	bhi.n	80065dc <RTC_ByteToBcd2+0x4>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 80065e6:	011b      	lsls	r3, r3, #4
 80065e8:	b2db      	uxtb	r3, r3
}
 80065ea:	4318      	orrs	r0, r3
 80065ec:	4770      	bx	lr
	...

080065f0 <HAL_RTC_SetAlarm_IT>:
  __HAL_LOCK(hrtc);
 80065f0:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80065f4:	2b01      	cmp	r3, #1
 80065f6:	f000 80b0 	beq.w	800675a <HAL_RTC_SetAlarm_IT+0x16a>
{
 80065fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065fe:	4605      	mov	r5, r0
 8006600:	460c      	mov	r4, r1
  __HAL_LOCK(hrtc);
 8006602:	2301      	movs	r3, #1
 8006604:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006608:	2302      	movs	r3, #2
 800660a:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 800660e:	4b54      	ldr	r3, [pc, #336]	; (8006760 <HAL_RTC_SetAlarm_IT+0x170>)
 8006610:	68de      	ldr	r6, [r3, #12]
 8006612:	f406 7640 	and.w	r6, r6, #768	; 0x300
  if (binaryMode != RTC_BINARY_ONLY)
 8006616:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 800661a:	d043      	beq.n	80066a4 <HAL_RTC_SetAlarm_IT+0xb4>
    if (Format == RTC_FORMAT_BIN)
 800661c:	bb12      	cbnz	r2, 8006664 <HAL_RTC_SetAlarm_IT+0x74>
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800661e:	699b      	ldr	r3, [r3, #24]
 8006620:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006624:	d101      	bne.n	800662a <HAL_RTC_SetAlarm_IT+0x3a>
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006626:	2300      	movs	r3, #0
 8006628:	70cb      	strb	r3, [r1, #3]
      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 800662a:	f8d4 8014 	ldr.w	r8, [r4, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800662e:	7820      	ldrb	r0, [r4, #0]
 8006630:	f7ff ffd2 	bl	80065d8 <RTC_ByteToBcd2>
 8006634:	0407      	lsls	r7, r0, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006636:	7860      	ldrb	r0, [r4, #1]
 8006638:	f7ff ffce 	bl	80065d8 <RTC_ByteToBcd2>
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800663c:	ea47 2700 	orr.w	r7, r7, r0, lsl #8
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006640:	78a0      	ldrb	r0, [r4, #2]
 8006642:	f7ff ffc9 	bl	80065d8 <RTC_ByteToBcd2>
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006646:	4307      	orrs	r7, r0
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006648:	78e3      	ldrb	r3, [r4, #3]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800664a:	ea47 5783 	orr.w	r7, r7, r3, lsl #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800664e:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 8006652:	f7ff ffc1 	bl	80065d8 <RTC_ByteToBcd2>
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006656:	ea47 6000 	orr.w	r0, r7, r0, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800665a:	6a23      	ldr	r3, [r4, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800665c:	4318      	orrs	r0, r3
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800665e:	ea48 0000 	orr.w	r0, r8, r0
 8006662:	e020      	b.n	80066a6 <HAL_RTC_SetAlarm_IT+0xb6>
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8006664:	6948      	ldr	r0, [r1, #20]
 8006666:	f1b0 3f80 	cmp.w	r0, #2155905152	; 0x80808080
 800666a:	d009      	beq.n	8006680 <HAL_RTC_SetAlarm_IT+0x90>
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 800666c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8006670:	d006      	beq.n	8006680 <HAL_RTC_SetAlarm_IT+0x90>
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8006672:	4b3b      	ldr	r3, [pc, #236]	; (8006760 <HAL_RTC_SetAlarm_IT+0x170>)
 8006674:	699b      	ldr	r3, [r3, #24]
 8006676:	f013 0f40 	tst.w	r3, #64	; 0x40
 800667a:	d101      	bne.n	8006680 <HAL_RTC_SetAlarm_IT+0x90>
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 800667c:	2300      	movs	r3, #0
 800667e:	70cb      	strb	r3, [r1, #3]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006680:	7822      	ldrb	r2, [r4, #0]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006682:	7863      	ldrb	r3, [r4, #1]
 8006684:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006686:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800668a:	78a2      	ldrb	r2, [r4, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800668c:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800668e:	78e2      	ldrb	r2, [r4, #3]
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006690:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006694:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006698:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800669c:	6a22      	ldr	r2, [r4, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800669e:	4313      	orrs	r3, r2
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80066a0:	4318      	orrs	r0, r3
 80066a2:	e000      	b.n	80066a6 <HAL_RTC_SetAlarm_IT+0xb6>
  uint32_t tmpreg = 0;
 80066a4:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80066a6:	4b2e      	ldr	r3, [pc, #184]	; (8006760 <HAL_RTC_SetAlarm_IT+0x170>)
 80066a8:	22ca      	movs	r2, #202	; 0xca
 80066aa:	625a      	str	r2, [r3, #36]	; 0x24
 80066ac:	2253      	movs	r2, #83	; 0x53
 80066ae:	625a      	str	r2, [r3, #36]	; 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 80066b0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80066b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066b6:	d02a      	beq.n	800670e <HAL_RTC_SetAlarm_IT+0x11e>
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80066b8:	4b29      	ldr	r3, [pc, #164]	; (8006760 <HAL_RTC_SetAlarm_IT+0x170>)
 80066ba:	699a      	ldr	r2, [r3, #24]
 80066bc:	f422 5208 	bic.w	r2, r2, #8704	; 0x2200
 80066c0:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80066c2:	2202      	movs	r2, #2
 80066c4:	65da      	str	r2, [r3, #92]	; 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 80066c6:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 80066ca:	d040      	beq.n	800674e <HAL_RTC_SetAlarm_IT+0x15e>
      WRITE_REG(RTC->ALRMBR, tmpreg);
 80066cc:	4b24      	ldr	r3, [pc, #144]	; (8006760 <HAL_RTC_SetAlarm_IT+0x170>)
 80066ce:	6498      	str	r0, [r3, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 80066d0:	69a2      	ldr	r2, [r4, #24]
 80066d2:	64da      	str	r2, [r3, #76]	; 0x4c
    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 80066d4:	6862      	ldr	r2, [r4, #4]
 80066d6:	4b22      	ldr	r3, [pc, #136]	; (8006760 <HAL_RTC_SetAlarm_IT+0x170>)
 80066d8:	675a      	str	r2, [r3, #116]	; 0x74
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 80066da:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80066dc:	f042 0202 	orr.w	r2, r2, #2
 80066e0:	632a      	str	r2, [r5, #48]	; 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80066e2:	699a      	ldr	r2, [r3, #24]
 80066e4:	f442 5208 	orr.w	r2, r2, #8704	; 0x2200
 80066e8:	619a      	str	r2, [r3, #24]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80066ea:	4a1e      	ldr	r2, [pc, #120]	; (8006764 <HAL_RTC_SetAlarm_IT+0x174>)
 80066ec:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 80066f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066f4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80066f8:	4b19      	ldr	r3, [pc, #100]	; (8006760 <HAL_RTC_SetAlarm_IT+0x170>)
 80066fa:	22ff      	movs	r2, #255	; 0xff
 80066fc:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 80066fe:	2301      	movs	r3, #1
 8006700:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
  __HAL_UNLOCK(hrtc);
 8006704:	2000      	movs	r0, #0
 8006706:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
}
 800670a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 800670e:	4b14      	ldr	r3, [pc, #80]	; (8006760 <HAL_RTC_SetAlarm_IT+0x170>)
 8006710:	699a      	ldr	r2, [r3, #24]
 8006712:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8006716:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006718:	2201      	movs	r2, #1
 800671a:	65da      	str	r2, [r3, #92]	; 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 800671c:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8006720:	d00f      	beq.n	8006742 <HAL_RTC_SetAlarm_IT+0x152>
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8006722:	4b0f      	ldr	r3, [pc, #60]	; (8006760 <HAL_RTC_SetAlarm_IT+0x170>)
 8006724:	6418      	str	r0, [r3, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8006726:	69a2      	ldr	r2, [r4, #24]
 8006728:	645a      	str	r2, [r3, #68]	; 0x44
    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 800672a:	6862      	ldr	r2, [r4, #4]
 800672c:	4b0c      	ldr	r3, [pc, #48]	; (8006760 <HAL_RTC_SetAlarm_IT+0x170>)
 800672e:	671a      	str	r2, [r3, #112]	; 0x70
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8006730:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8006732:	f042 0201 	orr.w	r2, r2, #1
 8006736:	632a      	str	r2, [r5, #48]	; 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006738:	699a      	ldr	r2, [r3, #24]
 800673a:	f442 5288 	orr.w	r2, r2, #4352	; 0x1100
 800673e:	619a      	str	r2, [r3, #24]
 8006740:	e7d3      	b.n	80066ea <HAL_RTC_SetAlarm_IT+0xfa>
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8006742:	69a3      	ldr	r3, [r4, #24]
 8006744:	69e2      	ldr	r2, [r4, #28]
 8006746:	4313      	orrs	r3, r2
 8006748:	4a05      	ldr	r2, [pc, #20]	; (8006760 <HAL_RTC_SetAlarm_IT+0x170>)
 800674a:	6453      	str	r3, [r2, #68]	; 0x44
 800674c:	e7ed      	b.n	800672a <HAL_RTC_SetAlarm_IT+0x13a>
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 800674e:	69a3      	ldr	r3, [r4, #24]
 8006750:	69e2      	ldr	r2, [r4, #28]
 8006752:	4313      	orrs	r3, r2
 8006754:	4a02      	ldr	r2, [pc, #8]	; (8006760 <HAL_RTC_SetAlarm_IT+0x170>)
 8006756:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006758:	e7bc      	b.n	80066d4 <HAL_RTC_SetAlarm_IT+0xe4>
  __HAL_LOCK(hrtc);
 800675a:	2002      	movs	r0, #2
}
 800675c:	4770      	bx	lr
 800675e:	bf00      	nop
 8006760:	40002800 	.word	0x40002800
 8006764:	58000800 	.word	0x58000800

08006768 <HAL_RTCEx_EnableBypassShadow>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006768:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800676c:	2b01      	cmp	r3, #1
 800676e:	d017      	beq.n	80067a0 <HAL_RTCEx_EnableBypassShadow+0x38>
 8006770:	2101      	movs	r1, #1
 8006772:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006776:	2302      	movs	r3, #2
 8006778:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800677c:	4b09      	ldr	r3, [pc, #36]	; (80067a4 <HAL_RTCEx_EnableBypassShadow+0x3c>)
 800677e:	22ca      	movs	r2, #202	; 0xca
 8006780:	625a      	str	r2, [r3, #36]	; 0x24
 8006782:	2253      	movs	r2, #83	; 0x53
 8006784:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006786:	699a      	ldr	r2, [r3, #24]
 8006788:	f042 0220 	orr.w	r2, r2, #32
 800678c:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800678e:	22ff      	movs	r2, #255	; 0xff
 8006790:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006792:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006796:	2300      	movs	r3, #0
 8006798:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 800679c:	4618      	mov	r0, r3
 800679e:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 80067a0:	2002      	movs	r0, #2
}
 80067a2:	4770      	bx	lr
 80067a4:	40002800 	.word	0x40002800

080067a8 <HAL_RTCEx_SetSSRU_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80067a8:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	d020      	beq.n	80067f2 <HAL_RTCEx_SetSSRU_IT+0x4a>
{
 80067b0:	b410      	push	{r4}
  __HAL_LOCK(hrtc);
 80067b2:	2101      	movs	r1, #1
 80067b4:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80067b8:	2302      	movs	r3, #2
 80067ba:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80067be:	4b0e      	ldr	r3, [pc, #56]	; (80067f8 <HAL_RTCEx_SetSSRU_IT+0x50>)
 80067c0:	22ca      	movs	r2, #202	; 0xca
 80067c2:	625a      	str	r2, [r3, #36]	; 0x24
 80067c4:	2253      	movs	r2, #83	; 0x53
 80067c6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 80067c8:	699a      	ldr	r2, [r3, #24]
 80067ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80067ce:	619a      	str	r2, [r3, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 80067d0:	4c0a      	ldr	r4, [pc, #40]	; (80067fc <HAL_RTCEx_SetSSRU_IT+0x54>)
 80067d2:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 80067d6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80067da:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80067de:	22ff      	movs	r2, #255	; 0xff
 80067e0:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80067e2:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80067e6:	2300      	movs	r3, #0
 80067e8:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 80067ec:	4618      	mov	r0, r3
}
 80067ee:	bc10      	pop	{r4}
 80067f0:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 80067f2:	2002      	movs	r0, #2
}
 80067f4:	4770      	bx	lr
 80067f6:	bf00      	nop
 80067f8:	40002800 	.word	0x40002800
 80067fc:	58000800 	.word	0x58000800

08006800 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006800:	b510      	push	{r4, lr}
 8006802:	4604      	mov	r4, r0
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 8006804:	4b07      	ldr	r3, [pc, #28]	; (8006824 <HAL_RTCEx_SSRUIRQHandler+0x24>)
 8006806:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006808:	f013 0f40 	tst.w	r3, #64	; 0x40
 800680c:	d103      	bne.n	8006816 <HAL_RTCEx_SSRUIRQHandler+0x16>
    HAL_RTCEx_SSRUEventCallback(hrtc);
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800680e:	2301      	movs	r3, #1
 8006810:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 8006814:	bd10      	pop	{r4, pc}
    RTC->SCR = RTC_SCR_CSSRUF;
 8006816:	4b03      	ldr	r3, [pc, #12]	; (8006824 <HAL_RTCEx_SSRUIRQHandler+0x24>)
 8006818:	2240      	movs	r2, #64	; 0x40
 800681a:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTCEx_SSRUEventCallback(hrtc);
 800681c:	f7fb fc26 	bl	800206c <HAL_RTCEx_SSRUEventCallback>
 8006820:	e7f5      	b.n	800680e <HAL_RTCEx_SSRUIRQHandler+0xe>
 8006822:	bf00      	nop
 8006824:	40002800 	.word	0x40002800

08006828 <HAL_RTCEx_AlarmBEventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8006828:	4770      	bx	lr

0800682a <HAL_RTCEx_BKUPWrite>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 800682a:	0089      	lsls	r1, r1, #2
 800682c:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8006830:	f501 4131 	add.w	r1, r1, #45312	; 0xb100

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8006834:	600a      	str	r2, [r1, #0]
}
 8006836:	4770      	bx	lr

08006838 <HAL_RTCEx_BKUPRead>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 8006838:	0089      	lsls	r1, r1, #2
 800683a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800683e:	f501 4131 	add.w	r1, r1, #45312	; 0xb100

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8006842:	6808      	ldr	r0, [r1, #0]
}
 8006844:	4770      	bx	lr
	...

08006848 <SUBGHZSPI_Init>:
{
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8006848:	4b07      	ldr	r3, [pc, #28]	; (8006868 <SUBGHZSPI_Init+0x20>)
 800684a:	681a      	ldr	r2, [r3, #0]
 800684c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006850:	601a      	str	r2, [r3, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8006852:	f440 7041 	orr.w	r0, r0, #772	; 0x304
 8006856:	6018      	str	r0, [r3, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8006858:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 800685c:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800685e:	681a      	ldr	r2, [r3, #0]
 8006860:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006864:	601a      	str	r2, [r3, #0]
}
 8006866:	4770      	bx	lr
 8006868:	58010000 	.word	0x58010000

0800686c <HAL_SUBGHZ_Init>:
{
 800686c:	b530      	push	{r4, r5, lr}
 800686e:	b083      	sub	sp, #12
  if (hsubghz == NULL)
 8006870:	2800      	cmp	r0, #0
 8006872:	d04e      	beq.n	8006912 <HAL_SUBGHZ_Init+0xa6>
 8006874:	4604      	mov	r4, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 8006876:	7983      	ldrb	r3, [r0, #6]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d03b      	beq.n	80068f4 <HAL_SUBGHZ_Init+0x88>
  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 800687c:	2302      	movs	r3, #2
 800687e:	71a3      	strb	r3, [r4, #6]
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8006880:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006884:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8006888:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800688c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006890:	4b21      	ldr	r3, [pc, #132]	; (8006918 <HAL_SUBGHZ_Init+0xac>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8006898:	f3c3 434c 	ubfx	r3, r3, #17, #13
 800689c:	2264      	movs	r2, #100	; 0x64
 800689e:	fb02 f303 	mul.w	r3, r2, r3
 80068a2:	9301      	str	r3, [sp, #4]
    if (count == 0U)
 80068a4:	9b01      	ldr	r3, [sp, #4]
 80068a6:	b34b      	cbz	r3, 80068fc <HAL_SUBGHZ_Init+0x90>
    count--;
 80068a8:	9b01      	ldr	r3, [sp, #4]
 80068aa:	3b01      	subs	r3, #1
 80068ac:	9301      	str	r3, [sp, #4]
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 80068ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80068b6:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80068ba:	d1f3      	bne.n	80068a4 <HAL_SUBGHZ_Init+0x38>
    status = HAL_OK;
 80068bc:	2500      	movs	r5, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80068be:	4b17      	ldr	r3, [pc, #92]	; (800691c <HAL_SUBGHZ_Init+0xb0>)
 80068c0:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80068c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80068c8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR2, ExtiLine);
 80068cc:	4914      	ldr	r1, [pc, #80]	; (8006920 <HAL_SUBGHZ_Init+0xb4>)
 80068ce:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80068d2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80068d6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 80068da:	689a      	ldr	r2, [r3, #8]
 80068dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80068e0:	609a      	str	r2, [r3, #8]
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 80068e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80068e6:	619a      	str	r2, [r3, #24]
  if (status == HAL_OK)
 80068e8:	b15d      	cbz	r5, 8006902 <HAL_SUBGHZ_Init+0x96>
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 80068ea:	2301      	movs	r3, #1
 80068ec:	71a3      	strb	r3, [r4, #6]
}
 80068ee:	4628      	mov	r0, r5
 80068f0:	b003      	add	sp, #12
 80068f2:	bd30      	pop	{r4, r5, pc}
    hsubghz->Lock = HAL_UNLOCKED;
 80068f4:	7143      	strb	r3, [r0, #5]
    HAL_SUBGHZ_MspInit(hsubghz);
 80068f6:	f7fb f927 	bl	8001b48 <HAL_SUBGHZ_MspInit>
 80068fa:	e7bf      	b.n	800687c <HAL_SUBGHZ_Init+0x10>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80068fc:	2501      	movs	r5, #1
 80068fe:	60a5      	str	r5, [r4, #8]
      break;
 8006900:	e7dd      	b.n	80068be <HAL_SUBGHZ_Init+0x52>
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8006902:	6820      	ldr	r0, [r4, #0]
 8006904:	f7ff ffa0 	bl	8006848 <SUBGHZSPI_Init>
    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8006908:	2301      	movs	r3, #1
 800690a:	7123      	strb	r3, [r4, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 800690c:	2300      	movs	r3, #0
 800690e:	60a3      	str	r3, [r4, #8]
 8006910:	e7eb      	b.n	80068ea <HAL_SUBGHZ_Init+0x7e>
    return status;
 8006912:	2501      	movs	r5, #1
 8006914:	e7eb      	b.n	80068ee <HAL_SUBGHZ_Init+0x82>
 8006916:	bf00      	nop
 8006918:	20000050 	.word	0x20000050
 800691c:	58000400 	.word	0x58000400
 8006920:	58000800 	.word	0x58000800

08006924 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8006924:	b082      	sub	sp, #8
 8006926:	4602      	mov	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006928:	4b1a      	ldr	r3, [pc, #104]	; (8006994 <SUBGHZSPI_Transmit+0x70>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8006930:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8006934:	2064      	movs	r0, #100	; 0x64
 8006936:	fb00 f303 	mul.w	r3, r0, r3
 800693a:	9301      	str	r3, [sp, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800693c:	9b01      	ldr	r3, [sp, #4]
 800693e:	b14b      	cbz	r3, 8006954 <SUBGHZSPI_Transmit+0x30>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8006940:	9b01      	ldr	r3, [sp, #4]
 8006942:	3b01      	subs	r3, #1
 8006944:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8006946:	4b14      	ldr	r3, [pc, #80]	; (8006998 <SUBGHZSPI_Transmit+0x74>)
 8006948:	689b      	ldr	r3, [r3, #8]
 800694a:	f013 0f02 	tst.w	r3, #2
 800694e:	d0f5      	beq.n	800693c <SUBGHZSPI_Transmit+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8006950:	2000      	movs	r0, #0
 8006952:	e001      	b.n	8006958 <SUBGHZSPI_Transmit+0x34>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006954:	2001      	movs	r0, #1
 8006956:	6090      	str	r0, [r2, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = Data;
 8006958:	4b0f      	ldr	r3, [pc, #60]	; (8006998 <SUBGHZSPI_Transmit+0x74>)
 800695a:	7319      	strb	r1, [r3, #12]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800695c:	4b0d      	ldr	r3, [pc, #52]	; (8006994 <SUBGHZSPI_Transmit+0x70>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8006964:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8006968:	2164      	movs	r1, #100	; 0x64
 800696a:	fb01 f303 	mul.w	r3, r1, r3
 800696e:	9301      	str	r3, [sp, #4]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8006970:	9b01      	ldr	r3, [sp, #4]
 8006972:	b143      	cbz	r3, 8006986 <SUBGHZSPI_Transmit+0x62>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8006974:	9b01      	ldr	r3, [sp, #4]
 8006976:	3b01      	subs	r3, #1
 8006978:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800697a:	4b07      	ldr	r3, [pc, #28]	; (8006998 <SUBGHZSPI_Transmit+0x74>)
 800697c:	689b      	ldr	r3, [r3, #8]
 800697e:	f013 0f01 	tst.w	r3, #1
 8006982:	d0f5      	beq.n	8006970 <SUBGHZSPI_Transmit+0x4c>
 8006984:	e001      	b.n	800698a <SUBGHZSPI_Transmit+0x66>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006986:	2001      	movs	r0, #1
 8006988:	6090      	str	r0, [r2, #8]

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 800698a:	4b03      	ldr	r3, [pc, #12]	; (8006998 <SUBGHZSPI_Transmit+0x74>)
 800698c:	68db      	ldr	r3, [r3, #12]

  return status;
}
 800698e:	b002      	add	sp, #8
 8006990:	4770      	bx	lr
 8006992:	bf00      	nop
 8006994:	20000050 	.word	0x20000050
 8006998:	58010000 	.word	0x58010000

0800699c <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 800699c:	b082      	sub	sp, #8
 800699e:	4602      	mov	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80069a0:	4b1c      	ldr	r3, [pc, #112]	; (8006a14 <SUBGHZSPI_Receive+0x78>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80069a8:	f3c3 434c 	ubfx	r3, r3, #17, #13
 80069ac:	2064      	movs	r0, #100	; 0x64
 80069ae:	fb00 f303 	mul.w	r3, r0, r3
 80069b2:	9301      	str	r3, [sp, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80069b4:	9b01      	ldr	r3, [sp, #4]
 80069b6:	b14b      	cbz	r3, 80069cc <SUBGHZSPI_Receive+0x30>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 80069b8:	9b01      	ldr	r3, [sp, #4]
 80069ba:	3b01      	subs	r3, #1
 80069bc:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 80069be:	4b16      	ldr	r3, [pc, #88]	; (8006a18 <SUBGHZSPI_Receive+0x7c>)
 80069c0:	689b      	ldr	r3, [r3, #8]
 80069c2:	f013 0f02 	tst.w	r3, #2
 80069c6:	d0f5      	beq.n	80069b4 <SUBGHZSPI_Receive+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 80069c8:	2000      	movs	r0, #0
 80069ca:	e001      	b.n	80069d0 <SUBGHZSPI_Receive+0x34>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80069cc:	2001      	movs	r0, #1
 80069ce:	6090      	str	r0, [r2, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = SUBGHZ_DUMMY_DATA;
 80069d0:	4b11      	ldr	r3, [pc, #68]	; (8006a18 <SUBGHZSPI_Receive+0x7c>)
 80069d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80069d6:	f883 c00c 	strb.w	ip, [r3, #12]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80069da:	4b0e      	ldr	r3, [pc, #56]	; (8006a14 <SUBGHZSPI_Receive+0x78>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80069e2:	f3c3 434c 	ubfx	r3, r3, #17, #13
 80069e6:	f04f 0c64 	mov.w	ip, #100	; 0x64
 80069ea:	fb0c f303 	mul.w	r3, ip, r3
 80069ee:	9301      	str	r3, [sp, #4]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 80069f0:	9b01      	ldr	r3, [sp, #4]
 80069f2:	b143      	cbz	r3, 8006a06 <SUBGHZSPI_Receive+0x6a>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 80069f4:	9b01      	ldr	r3, [sp, #4]
 80069f6:	3b01      	subs	r3, #1
 80069f8:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 80069fa:	4b07      	ldr	r3, [pc, #28]	; (8006a18 <SUBGHZSPI_Receive+0x7c>)
 80069fc:	689b      	ldr	r3, [r3, #8]
 80069fe:	f013 0f01 	tst.w	r3, #1
 8006a02:	d0f5      	beq.n	80069f0 <SUBGHZSPI_Receive+0x54>
 8006a04:	e001      	b.n	8006a0a <SUBGHZSPI_Receive+0x6e>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006a06:	2001      	movs	r0, #1
 8006a08:	6090      	str	r0, [r2, #8]

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8006a0a:	4b03      	ldr	r3, [pc, #12]	; (8006a18 <SUBGHZSPI_Receive+0x7c>)
 8006a0c:	68db      	ldr	r3, [r3, #12]
 8006a0e:	700b      	strb	r3, [r1, #0]

  return status;
}
 8006a10:	b002      	add	sp, #8
 8006a12:	4770      	bx	lr
 8006a14:	20000050 	.word	0x20000050
 8006a18:	58010000 	.word	0x58010000

08006a1c <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8006a1c:	b082      	sub	sp, #8
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8006a1e:	4b13      	ldr	r3, [pc, #76]	; (8006a6c <SUBGHZ_WaitOnBusy+0x50>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006a26:	f3c3 434b 	ubfx	r3, r3, #17, #12
 8006a2a:	2264      	movs	r2, #100	; 0x64
 8006a2c:	fb02 f303 	mul.w	r3, r2, r3
 8006a30:	9301      	str	r3, [sp, #4]
 8006a32:	e006      	b.n	8006a42 <SUBGHZ_WaitOnBusy+0x26>
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();

    if (count == 0U)
    {
      status  = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8006a34:	2302      	movs	r3, #2
 8006a36:	6083      	str	r3, [r0, #8]
      status  = HAL_ERROR;
 8006a38:	2001      	movs	r0, #1
    }
    count--;
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);

  return status;
}
 8006a3a:	b002      	add	sp, #8
 8006a3c:	4770      	bx	lr
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8006a3e:	4213      	tst	r3, r2
 8006a40:	d012      	beq.n	8006a68 <SUBGHZ_WaitOnBusy+0x4c>
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8006a42:	4b0b      	ldr	r3, [pc, #44]	; (8006a70 <SUBGHZ_WaitOnBusy+0x54>)
 8006a44:	695b      	ldr	r3, [r3, #20]
 8006a46:	f013 0304 	ands.w	r3, r3, #4
 8006a4a:	d000      	beq.n	8006a4e <SUBGHZ_WaitOnBusy+0x32>
 8006a4c:	2301      	movs	r3, #1
    if (count == 0U)
 8006a4e:	9a01      	ldr	r2, [sp, #4]
 8006a50:	2a00      	cmp	r2, #0
 8006a52:	d0ef      	beq.n	8006a34 <SUBGHZ_WaitOnBusy+0x18>
    count--;
 8006a54:	9a01      	ldr	r2, [sp, #4]
 8006a56:	3a01      	subs	r2, #1
 8006a58:	9201      	str	r2, [sp, #4]
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8006a5a:	4a05      	ldr	r2, [pc, #20]	; (8006a70 <SUBGHZ_WaitOnBusy+0x54>)
 8006a5c:	6952      	ldr	r2, [r2, #20]
 8006a5e:	f012 0202 	ands.w	r2, r2, #2
 8006a62:	d0ec      	beq.n	8006a3e <SUBGHZ_WaitOnBusy+0x22>
 8006a64:	2201      	movs	r2, #1
 8006a66:	e7ea      	b.n	8006a3e <SUBGHZ_WaitOnBusy+0x22>
  status = HAL_OK;
 8006a68:	2000      	movs	r0, #0
 8006a6a:	e7e6      	b.n	8006a3a <SUBGHZ_WaitOnBusy+0x1e>
 8006a6c:	20000050 	.word	0x20000050
 8006a70:	58000400 	.word	0x58000400

08006a74 <SUBGHZ_CheckDeviceReady>:
{
 8006a74:	b500      	push	{lr}
 8006a76:	b083      	sub	sp, #12
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8006a78:	7903      	ldrb	r3, [r0, #4]
 8006a7a:	2b01      	cmp	r3, #1
 8006a7c:	d004      	beq.n	8006a88 <SUBGHZ_CheckDeviceReady+0x14>
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8006a7e:	f7ff ffcd 	bl	8006a1c <SUBGHZ_WaitOnBusy>
}
 8006a82:	b003      	add	sp, #12
 8006a84:	f85d fb04 	ldr.w	pc, [sp], #4
    count  = SUBGHZ_NSS_LOOP_TIME;
 8006a88:	4b0d      	ldr	r3, [pc, #52]	; (8006ac0 <SUBGHZ_CheckDeviceReady+0x4c>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006a90:	f3c3 334f 	ubfx	r3, r3, #13, #16
 8006a94:	9301      	str	r3, [sp, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006a96:	4a0b      	ldr	r2, [pc, #44]	; (8006ac4 <SUBGHZ_CheckDeviceReady+0x50>)
 8006a98:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006a9c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006aa0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      count--;
 8006aa4:	9b01      	ldr	r3, [sp, #4]
 8006aa6:	3b01      	subs	r3, #1
 8006aa8:	9301      	str	r3, [sp, #4]
    } while (count != 0UL);
 8006aaa:	9b01      	ldr	r3, [sp, #4]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d1f9      	bne.n	8006aa4 <SUBGHZ_CheckDeviceReady+0x30>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006ab0:	4a04      	ldr	r2, [pc, #16]	; (8006ac4 <SUBGHZ_CheckDeviceReady+0x50>)
 8006ab2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006ab6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006aba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006abe:	e7de      	b.n	8006a7e <SUBGHZ_CheckDeviceReady+0xa>
 8006ac0:	20000050 	.word	0x20000050
 8006ac4:	58000400 	.word	0x58000400

08006ac8 <HAL_SUBGHZ_WriteRegisters>:
{
 8006ac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006acc:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006ace:	7980      	ldrb	r0, [r0, #6]
 8006ad0:	fa5f f880 	uxtb.w	r8, r0
 8006ad4:	f1b8 0f01 	cmp.w	r8, #1
 8006ad8:	d13e      	bne.n	8006b58 <HAL_SUBGHZ_WriteRegisters+0x90>
 8006ada:	460c      	mov	r4, r1
 8006adc:	4617      	mov	r7, r2
 8006ade:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8006ae0:	796b      	ldrb	r3, [r5, #5]
 8006ae2:	2b01      	cmp	r3, #1
 8006ae4:	d03b      	beq.n	8006b5e <HAL_SUBGHZ_WriteRegisters+0x96>
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	716b      	strb	r3, [r5, #5]
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8006aea:	2302      	movs	r3, #2
 8006aec:	71ab      	strb	r3, [r5, #6]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006aee:	4628      	mov	r0, r5
 8006af0:	f7ff ffc0 	bl	8006a74 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006af4:	4a1b      	ldr	r2, [pc, #108]	; (8006b64 <HAL_SUBGHZ_WriteRegisters+0x9c>)
 8006af6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006afa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006afe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8006b02:	210d      	movs	r1, #13
 8006b04:	4628      	mov	r0, r5
 8006b06:	f7ff ff0d 	bl	8006924 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8006b0a:	0a21      	lsrs	r1, r4, #8
 8006b0c:	4628      	mov	r0, r5
 8006b0e:	f7ff ff09 	bl	8006924 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8006b12:	b2e1      	uxtb	r1, r4
 8006b14:	4628      	mov	r0, r5
 8006b16:	f7ff ff05 	bl	8006924 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006b1a:	2400      	movs	r4, #0
 8006b1c:	e005      	b.n	8006b2a <HAL_SUBGHZ_WriteRegisters+0x62>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8006b1e:	5d39      	ldrb	r1, [r7, r4]
 8006b20:	4628      	mov	r0, r5
 8006b22:	f7ff feff 	bl	8006924 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006b26:	3401      	adds	r4, #1
 8006b28:	b2a4      	uxth	r4, r4
 8006b2a:	42b4      	cmp	r4, r6
 8006b2c:	d3f7      	bcc.n	8006b1e <HAL_SUBGHZ_WriteRegisters+0x56>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006b2e:	4a0d      	ldr	r2, [pc, #52]	; (8006b64 <HAL_SUBGHZ_WriteRegisters+0x9c>)
 8006b30:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006b34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006b3c:	4628      	mov	r0, r5
 8006b3e:	f7ff ff6d 	bl	8006a1c <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006b42:	68ab      	ldr	r3, [r5, #8]
 8006b44:	b90b      	cbnz	r3, 8006b4a <HAL_SUBGHZ_WriteRegisters+0x82>
      status = HAL_OK;
 8006b46:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 8006b4e:	2300      	movs	r3, #0
 8006b50:	716b      	strb	r3, [r5, #5]
}
 8006b52:	4640      	mov	r0, r8
 8006b54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8006b58:	f04f 0802 	mov.w	r8, #2
 8006b5c:	e7f9      	b.n	8006b52 <HAL_SUBGHZ_WriteRegisters+0x8a>
    __HAL_LOCK(hsubghz);
 8006b5e:	f04f 0802 	mov.w	r8, #2
 8006b62:	e7f6      	b.n	8006b52 <HAL_SUBGHZ_WriteRegisters+0x8a>
 8006b64:	58000400 	.word	0x58000400

08006b68 <HAL_SUBGHZ_ReadRegisters>:
{
 8006b68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b6c:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006b6e:	7980      	ldrb	r0, [r0, #6]
 8006b70:	fa5f f880 	uxtb.w	r8, r0
 8006b74:	f1b8 0f01 	cmp.w	r8, #1
 8006b78:	d141      	bne.n	8006bfe <HAL_SUBGHZ_ReadRegisters+0x96>
 8006b7a:	460c      	mov	r4, r1
 8006b7c:	4615      	mov	r5, r2
 8006b7e:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 8006b80:	7973      	ldrb	r3, [r6, #5]
 8006b82:	2b01      	cmp	r3, #1
 8006b84:	d03e      	beq.n	8006c04 <HAL_SUBGHZ_ReadRegisters+0x9c>
 8006b86:	2301      	movs	r3, #1
 8006b88:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006b8a:	4630      	mov	r0, r6
 8006b8c:	f7ff ff72 	bl	8006a74 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006b90:	4a1e      	ldr	r2, [pc, #120]	; (8006c0c <HAL_SUBGHZ_ReadRegisters+0xa4>)
 8006b92:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006b96:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006b9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8006b9e:	211d      	movs	r1, #29
 8006ba0:	4630      	mov	r0, r6
 8006ba2:	f7ff febf 	bl	8006924 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8006ba6:	0a21      	lsrs	r1, r4, #8
 8006ba8:	4630      	mov	r0, r6
 8006baa:	f7ff febb 	bl	8006924 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8006bae:	b2e1      	uxtb	r1, r4
 8006bb0:	4630      	mov	r0, r6
 8006bb2:	f7ff feb7 	bl	8006924 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8006bb6:	2100      	movs	r1, #0
 8006bb8:	4630      	mov	r0, r6
 8006bba:	f7ff feb3 	bl	8006924 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006bbe:	2400      	movs	r4, #0
 8006bc0:	e006      	b.n	8006bd0 <HAL_SUBGHZ_ReadRegisters+0x68>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8006bc2:	4629      	mov	r1, r5
 8006bc4:	4630      	mov	r0, r6
 8006bc6:	f7ff fee9 	bl	800699c <SUBGHZSPI_Receive>
      pData++;
 8006bca:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 8006bcc:	3401      	adds	r4, #1
 8006bce:	b2a4      	uxth	r4, r4
 8006bd0:	42bc      	cmp	r4, r7
 8006bd2:	d3f6      	bcc.n	8006bc2 <HAL_SUBGHZ_ReadRegisters+0x5a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006bd4:	4a0d      	ldr	r2, [pc, #52]	; (8006c0c <HAL_SUBGHZ_ReadRegisters+0xa4>)
 8006bd6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006bda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bde:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006be2:	4630      	mov	r0, r6
 8006be4:	f7ff ff1a 	bl	8006a1c <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006be8:	68b3      	ldr	r3, [r6, #8]
 8006bea:	b90b      	cbnz	r3, 8006bf0 <HAL_SUBGHZ_ReadRegisters+0x88>
      status = HAL_OK;
 8006bec:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	7173      	strb	r3, [r6, #5]
}
 8006bf8:	4640      	mov	r0, r8
 8006bfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8006bfe:	f04f 0802 	mov.w	r8, #2
 8006c02:	e7f9      	b.n	8006bf8 <HAL_SUBGHZ_ReadRegisters+0x90>
    __HAL_LOCK(hsubghz);
 8006c04:	f04f 0802 	mov.w	r8, #2
 8006c08:	e7f6      	b.n	8006bf8 <HAL_SUBGHZ_ReadRegisters+0x90>
 8006c0a:	bf00      	nop
 8006c0c:	58000400 	.word	0x58000400

08006c10 <HAL_SUBGHZ_ExecSetCmd>:
{
 8006c10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c14:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006c16:	7980      	ldrb	r0, [r0, #6]
 8006c18:	fa5f f980 	uxtb.w	r9, r0
 8006c1c:	f1b9 0f01 	cmp.w	r9, #1
 8006c20:	d143      	bne.n	8006caa <HAL_SUBGHZ_ExecSetCmd+0x9a>
 8006c22:	4688      	mov	r8, r1
 8006c24:	4617      	mov	r7, r2
 8006c26:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8006c28:	796b      	ldrb	r3, [r5, #5]
 8006c2a:	2b01      	cmp	r3, #1
 8006c2c:	d040      	beq.n	8006cb0 <HAL_SUBGHZ_ExecSetCmd+0xa0>
 8006c2e:	2301      	movs	r3, #1
 8006c30:	716b      	strb	r3, [r5, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006c32:	4628      	mov	r0, r5
 8006c34:	f7ff ff1e 	bl	8006a74 <SUBGHZ_CheckDeviceReady>
    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8006c38:	f1b8 0f84 	cmp.w	r8, #132	; 0x84
 8006c3c:	d005      	beq.n	8006c4a <HAL_SUBGHZ_ExecSetCmd+0x3a>
 8006c3e:	f1b8 0f94 	cmp.w	r8, #148	; 0x94
 8006c42:	d002      	beq.n	8006c4a <HAL_SUBGHZ_ExecSetCmd+0x3a>
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8006c44:	2300      	movs	r3, #0
 8006c46:	712b      	strb	r3, [r5, #4]
 8006c48:	e001      	b.n	8006c4e <HAL_SUBGHZ_ExecSetCmd+0x3e>
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	712b      	strb	r3, [r5, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006c4e:	4a1a      	ldr	r2, [pc, #104]	; (8006cb8 <HAL_SUBGHZ_ExecSetCmd+0xa8>)
 8006c50:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006c54:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006c58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8006c5c:	4641      	mov	r1, r8
 8006c5e:	4628      	mov	r0, r5
 8006c60:	f7ff fe60 	bl	8006924 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006c64:	2400      	movs	r4, #0
 8006c66:	e005      	b.n	8006c74 <HAL_SUBGHZ_ExecSetCmd+0x64>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8006c68:	5d39      	ldrb	r1, [r7, r4]
 8006c6a:	4628      	mov	r0, r5
 8006c6c:	f7ff fe5a 	bl	8006924 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006c70:	3401      	adds	r4, #1
 8006c72:	b2a4      	uxth	r4, r4
 8006c74:	42b4      	cmp	r4, r6
 8006c76:	d3f7      	bcc.n	8006c68 <HAL_SUBGHZ_ExecSetCmd+0x58>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006c78:	4a0f      	ldr	r2, [pc, #60]	; (8006cb8 <HAL_SUBGHZ_ExecSetCmd+0xa8>)
 8006c7a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006c7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    if (Command != RADIO_SET_SLEEP)
 8006c86:	f1b8 0f84 	cmp.w	r8, #132	; 0x84
 8006c8a:	d10a      	bne.n	8006ca2 <HAL_SUBGHZ_ExecSetCmd+0x92>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006c8c:	68ab      	ldr	r3, [r5, #8]
 8006c8e:	b90b      	cbnz	r3, 8006c94 <HAL_SUBGHZ_ExecSetCmd+0x84>
      status = HAL_OK;
 8006c90:	f04f 0900 	mov.w	r9, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006c94:	2301      	movs	r3, #1
 8006c96:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 8006c98:	2300      	movs	r3, #0
 8006c9a:	716b      	strb	r3, [r5, #5]
}
 8006c9c:	4648      	mov	r0, r9
 8006c9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006ca2:	4628      	mov	r0, r5
 8006ca4:	f7ff feba 	bl	8006a1c <SUBGHZ_WaitOnBusy>
 8006ca8:	e7f0      	b.n	8006c8c <HAL_SUBGHZ_ExecSetCmd+0x7c>
    return HAL_BUSY;
 8006caa:	f04f 0902 	mov.w	r9, #2
 8006cae:	e7f5      	b.n	8006c9c <HAL_SUBGHZ_ExecSetCmd+0x8c>
    __HAL_LOCK(hsubghz);
 8006cb0:	f04f 0902 	mov.w	r9, #2
 8006cb4:	e7f2      	b.n	8006c9c <HAL_SUBGHZ_ExecSetCmd+0x8c>
 8006cb6:	bf00      	nop
 8006cb8:	58000400 	.word	0x58000400

08006cbc <HAL_SUBGHZ_ExecGetCmd>:
{
 8006cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cc0:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006cc2:	7980      	ldrb	r0, [r0, #6]
 8006cc4:	fa5f f880 	uxtb.w	r8, r0
 8006cc8:	f1b8 0f01 	cmp.w	r8, #1
 8006ccc:	d139      	bne.n	8006d42 <HAL_SUBGHZ_ExecGetCmd+0x86>
 8006cce:	460c      	mov	r4, r1
 8006cd0:	4615      	mov	r5, r2
 8006cd2:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 8006cd4:	7973      	ldrb	r3, [r6, #5]
 8006cd6:	2b01      	cmp	r3, #1
 8006cd8:	d036      	beq.n	8006d48 <HAL_SUBGHZ_ExecGetCmd+0x8c>
 8006cda:	2301      	movs	r3, #1
 8006cdc:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006cde:	4630      	mov	r0, r6
 8006ce0:	f7ff fec8 	bl	8006a74 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006ce4:	4a1a      	ldr	r2, [pc, #104]	; (8006d50 <HAL_SUBGHZ_ExecGetCmd+0x94>)
 8006ce6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006cea:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006cee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8006cf2:	4621      	mov	r1, r4
 8006cf4:	4630      	mov	r0, r6
 8006cf6:	f7ff fe15 	bl	8006924 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8006cfa:	2100      	movs	r1, #0
 8006cfc:	4630      	mov	r0, r6
 8006cfe:	f7ff fe11 	bl	8006924 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006d02:	2400      	movs	r4, #0
 8006d04:	e006      	b.n	8006d14 <HAL_SUBGHZ_ExecGetCmd+0x58>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8006d06:	4629      	mov	r1, r5
 8006d08:	4630      	mov	r0, r6
 8006d0a:	f7ff fe47 	bl	800699c <SUBGHZSPI_Receive>
      pData++;
 8006d0e:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 8006d10:	3401      	adds	r4, #1
 8006d12:	b2a4      	uxth	r4, r4
 8006d14:	42bc      	cmp	r4, r7
 8006d16:	d3f6      	bcc.n	8006d06 <HAL_SUBGHZ_ExecGetCmd+0x4a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006d18:	4a0d      	ldr	r2, [pc, #52]	; (8006d50 <HAL_SUBGHZ_ExecGetCmd+0x94>)
 8006d1a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006d1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006d26:	4630      	mov	r0, r6
 8006d28:	f7ff fe78 	bl	8006a1c <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006d2c:	68b3      	ldr	r3, [r6, #8]
 8006d2e:	b90b      	cbnz	r3, 8006d34 <HAL_SUBGHZ_ExecGetCmd+0x78>
      status = HAL_OK;
 8006d30:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006d34:	2301      	movs	r3, #1
 8006d36:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 8006d38:	2300      	movs	r3, #0
 8006d3a:	7173      	strb	r3, [r6, #5]
}
 8006d3c:	4640      	mov	r0, r8
 8006d3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8006d42:	f04f 0802 	mov.w	r8, #2
 8006d46:	e7f9      	b.n	8006d3c <HAL_SUBGHZ_ExecGetCmd+0x80>
    __HAL_LOCK(hsubghz);
 8006d48:	f04f 0802 	mov.w	r8, #2
 8006d4c:	e7f6      	b.n	8006d3c <HAL_SUBGHZ_ExecGetCmd+0x80>
 8006d4e:	bf00      	nop
 8006d50:	58000400 	.word	0x58000400

08006d54 <HAL_SUBGHZ_IRQHandler>:
{
 8006d54:	b530      	push	{r4, r5, lr}
 8006d56:	b083      	sub	sp, #12
 8006d58:	4605      	mov	r5, r0
  uint8_t tmpisr[2] = {0};
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	f8ad 3004 	strh.w	r3, [sp, #4]
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2);
 8006d60:	2302      	movs	r3, #2
 8006d62:	aa01      	add	r2, sp, #4
 8006d64:	2112      	movs	r1, #18
 8006d66:	f7ff ffa9 	bl	8006cbc <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0];
 8006d6a:	f89d 4004 	ldrb.w	r4, [sp, #4]
  itsource = (itsource << 8) | tmpisr[1];
 8006d6e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8006d72:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8006d76:	f013 0f01 	tst.w	r3, #1
 8006d7a:	d126      	bne.n	8006dca <HAL_SUBGHZ_IRQHandler+0x76>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8006d7c:	f014 0f02 	tst.w	r4, #2
 8006d80:	d127      	bne.n	8006dd2 <HAL_SUBGHZ_IRQHandler+0x7e>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8006d82:	f014 0f04 	tst.w	r4, #4
 8006d86:	d128      	bne.n	8006dda <HAL_SUBGHZ_IRQHandler+0x86>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8006d88:	f014 0f08 	tst.w	r4, #8
 8006d8c:	d129      	bne.n	8006de2 <HAL_SUBGHZ_IRQHandler+0x8e>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8006d8e:	f014 0f10 	tst.w	r4, #16
 8006d92:	d12a      	bne.n	8006dea <HAL_SUBGHZ_IRQHandler+0x96>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8006d94:	f014 0f20 	tst.w	r4, #32
 8006d98:	d12b      	bne.n	8006df2 <HAL_SUBGHZ_IRQHandler+0x9e>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8006d9a:	f014 0f40 	tst.w	r4, #64	; 0x40
 8006d9e:	d12c      	bne.n	8006dfa <HAL_SUBGHZ_IRQHandler+0xa6>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8006da0:	f014 0f80 	tst.w	r4, #128	; 0x80
 8006da4:	d006      	beq.n	8006db4 <HAL_SUBGHZ_IRQHandler+0x60>
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8006da6:	f414 7f80 	tst.w	r4, #256	; 0x100
 8006daa:	d02a      	beq.n	8006e02 <HAL_SUBGHZ_IRQHandler+0xae>
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8006dac:	2101      	movs	r1, #1
 8006dae:	4628      	mov	r0, r5
 8006db0:	f00a fba4 	bl	80114fc <HAL_SUBGHZ_CADStatusCallback>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8006db4:	f414 7f00 	tst.w	r4, #512	; 0x200
 8006db8:	d128      	bne.n	8006e0c <HAL_SUBGHZ_IRQHandler+0xb8>
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2);
 8006dba:	2302      	movs	r3, #2
 8006dbc:	aa01      	add	r2, sp, #4
 8006dbe:	4619      	mov	r1, r3
 8006dc0:	4628      	mov	r0, r5
 8006dc2:	f7ff ff25 	bl	8006c10 <HAL_SUBGHZ_ExecSetCmd>
}
 8006dc6:	b003      	add	sp, #12
 8006dc8:	bd30      	pop	{r4, r5, pc}
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8006dca:	4628      	mov	r0, r5
 8006dcc:	f00a fb7e 	bl	80114cc <HAL_SUBGHZ_TxCpltCallback>
 8006dd0:	e7d4      	b.n	8006d7c <HAL_SUBGHZ_IRQHandler+0x28>
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8006dd2:	4628      	mov	r0, r5
 8006dd4:	f00a fb82 	bl	80114dc <HAL_SUBGHZ_RxCpltCallback>
 8006dd8:	e7d3      	b.n	8006d82 <HAL_SUBGHZ_IRQHandler+0x2e>
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8006dda:	4628      	mov	r0, r5
 8006ddc:	f00a fbb2 	bl	8011544 <HAL_SUBGHZ_PreambleDetectedCallback>
 8006de0:	e7d2      	b.n	8006d88 <HAL_SUBGHZ_IRQHandler+0x34>
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8006de2:	4628      	mov	r0, r5
 8006de4:	f00a fbb6 	bl	8011554 <HAL_SUBGHZ_SyncWordValidCallback>
 8006de8:	e7d1      	b.n	8006d8e <HAL_SUBGHZ_IRQHandler+0x3a>
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8006dea:	4628      	mov	r0, r5
 8006dec:	f00a fbba 	bl	8011564 <HAL_SUBGHZ_HeaderValidCallback>
 8006df0:	e7d0      	b.n	8006d94 <HAL_SUBGHZ_IRQHandler+0x40>
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8006df2:	4628      	mov	r0, r5
 8006df4:	f00a fb9e 	bl	8011534 <HAL_SUBGHZ_HeaderErrorCallback>
 8006df8:	e7cf      	b.n	8006d9a <HAL_SUBGHZ_IRQHandler+0x46>
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8006dfa:	4628      	mov	r0, r5
 8006dfc:	f00a fb76 	bl	80114ec <HAL_SUBGHZ_CRCErrorCallback>
 8006e00:	e7ce      	b.n	8006da0 <HAL_SUBGHZ_IRQHandler+0x4c>
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8006e02:	2100      	movs	r1, #0
 8006e04:	4628      	mov	r0, r5
 8006e06:	f00a fb79 	bl	80114fc <HAL_SUBGHZ_CADStatusCallback>
 8006e0a:	e7d3      	b.n	8006db4 <HAL_SUBGHZ_IRQHandler+0x60>
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8006e0c:	4628      	mov	r0, r5
 8006e0e:	f00a fb87 	bl	8011520 <HAL_SUBGHZ_RxTxTimeoutCallback>
 8006e12:	e7d2      	b.n	8006dba <HAL_SUBGHZ_IRQHandler+0x66>

08006e14 <HAL_SUBGHZ_WriteBuffer>:
{
 8006e14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e18:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006e1a:	7980      	ldrb	r0, [r0, #6]
 8006e1c:	fa5f f880 	uxtb.w	r8, r0
 8006e20:	f1b8 0f01 	cmp.w	r8, #1
 8006e24:	d138      	bne.n	8006e98 <HAL_SUBGHZ_WriteBuffer+0x84>
 8006e26:	460c      	mov	r4, r1
 8006e28:	4617      	mov	r7, r2
 8006e2a:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8006e2c:	796b      	ldrb	r3, [r5, #5]
 8006e2e:	2b01      	cmp	r3, #1
 8006e30:	d035      	beq.n	8006e9e <HAL_SUBGHZ_WriteBuffer+0x8a>
 8006e32:	2301      	movs	r3, #1
 8006e34:	716b      	strb	r3, [r5, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006e36:	4628      	mov	r0, r5
 8006e38:	f7ff fe1c 	bl	8006a74 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006e3c:	4a19      	ldr	r2, [pc, #100]	; (8006ea4 <HAL_SUBGHZ_WriteBuffer+0x90>)
 8006e3e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006e42:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006e46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8006e4a:	210e      	movs	r1, #14
 8006e4c:	4628      	mov	r0, r5
 8006e4e:	f7ff fd69 	bl	8006924 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8006e52:	4621      	mov	r1, r4
 8006e54:	4628      	mov	r0, r5
 8006e56:	f7ff fd65 	bl	8006924 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006e5a:	2400      	movs	r4, #0
 8006e5c:	e005      	b.n	8006e6a <HAL_SUBGHZ_WriteBuffer+0x56>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8006e5e:	5d39      	ldrb	r1, [r7, r4]
 8006e60:	4628      	mov	r0, r5
 8006e62:	f7ff fd5f 	bl	8006924 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006e66:	3401      	adds	r4, #1
 8006e68:	b2a4      	uxth	r4, r4
 8006e6a:	42b4      	cmp	r4, r6
 8006e6c:	d3f7      	bcc.n	8006e5e <HAL_SUBGHZ_WriteBuffer+0x4a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006e6e:	4a0d      	ldr	r2, [pc, #52]	; (8006ea4 <HAL_SUBGHZ_WriteBuffer+0x90>)
 8006e70:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006e74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006e7c:	4628      	mov	r0, r5
 8006e7e:	f7ff fdcd 	bl	8006a1c <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006e82:	68ab      	ldr	r3, [r5, #8]
 8006e84:	b90b      	cbnz	r3, 8006e8a <HAL_SUBGHZ_WriteBuffer+0x76>
      status = HAL_OK;
 8006e86:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 8006e8e:	2300      	movs	r3, #0
 8006e90:	716b      	strb	r3, [r5, #5]
}
 8006e92:	4640      	mov	r0, r8
 8006e94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8006e98:	f04f 0802 	mov.w	r8, #2
 8006e9c:	e7f9      	b.n	8006e92 <HAL_SUBGHZ_WriteBuffer+0x7e>
    __HAL_LOCK(hsubghz);
 8006e9e:	f04f 0802 	mov.w	r8, #2
 8006ea2:	e7f6      	b.n	8006e92 <HAL_SUBGHZ_WriteBuffer+0x7e>
 8006ea4:	58000400 	.word	0x58000400

08006ea8 <HAL_SUBGHZ_ReadBuffer>:
{
 8006ea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006eac:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006eae:	7980      	ldrb	r0, [r0, #6]
 8006eb0:	fa5f f880 	uxtb.w	r8, r0
 8006eb4:	f1b8 0f01 	cmp.w	r8, #1
 8006eb8:	d13d      	bne.n	8006f36 <HAL_SUBGHZ_ReadBuffer+0x8e>
 8006eba:	460c      	mov	r4, r1
 8006ebc:	4615      	mov	r5, r2
 8006ebe:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 8006ec0:	7973      	ldrb	r3, [r6, #5]
 8006ec2:	2b01      	cmp	r3, #1
 8006ec4:	d03a      	beq.n	8006f3c <HAL_SUBGHZ_ReadBuffer+0x94>
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006eca:	4630      	mov	r0, r6
 8006ecc:	f7ff fdd2 	bl	8006a74 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006ed0:	4a1c      	ldr	r2, [pc, #112]	; (8006f44 <HAL_SUBGHZ_ReadBuffer+0x9c>)
 8006ed2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006ed6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006eda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8006ede:	211e      	movs	r1, #30
 8006ee0:	4630      	mov	r0, r6
 8006ee2:	f7ff fd1f 	bl	8006924 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8006ee6:	4621      	mov	r1, r4
 8006ee8:	4630      	mov	r0, r6
 8006eea:	f7ff fd1b 	bl	8006924 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8006eee:	2100      	movs	r1, #0
 8006ef0:	4630      	mov	r0, r6
 8006ef2:	f7ff fd17 	bl	8006924 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006ef6:	2400      	movs	r4, #0
 8006ef8:	e006      	b.n	8006f08 <HAL_SUBGHZ_ReadBuffer+0x60>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8006efa:	4629      	mov	r1, r5
 8006efc:	4630      	mov	r0, r6
 8006efe:	f7ff fd4d 	bl	800699c <SUBGHZSPI_Receive>
      pData++;
 8006f02:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 8006f04:	3401      	adds	r4, #1
 8006f06:	b2a4      	uxth	r4, r4
 8006f08:	42bc      	cmp	r4, r7
 8006f0a:	d3f6      	bcc.n	8006efa <HAL_SUBGHZ_ReadBuffer+0x52>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006f0c:	4a0d      	ldr	r2, [pc, #52]	; (8006f44 <HAL_SUBGHZ_ReadBuffer+0x9c>)
 8006f0e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006f12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006f1a:	4630      	mov	r0, r6
 8006f1c:	f7ff fd7e 	bl	8006a1c <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006f20:	68b3      	ldr	r3, [r6, #8]
 8006f22:	b90b      	cbnz	r3, 8006f28 <HAL_SUBGHZ_ReadBuffer+0x80>
      status = HAL_OK;
 8006f24:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006f28:	2301      	movs	r3, #1
 8006f2a:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	7173      	strb	r3, [r6, #5]
}
 8006f30:	4640      	mov	r0, r8
 8006f32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8006f36:	f04f 0802 	mov.w	r8, #2
 8006f3a:	e7f9      	b.n	8006f30 <HAL_SUBGHZ_ReadBuffer+0x88>
    __HAL_LOCK(hsubghz);
 8006f3c:	f04f 0802 	mov.w	r8, #2
 8006f40:	e7f6      	b.n	8006f30 <HAL_SUBGHZ_ReadBuffer+0x88>
 8006f42:	bf00      	nop
 8006f44:	58000400 	.word	0x58000400

08006f48 <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8006f48:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f4a:	e852 3f00 	ldrex	r3, [r2]
 8006f4e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f52:	e842 3100 	strex	r1, r3, [r2]
 8006f56:	2900      	cmp	r1, #0
 8006f58:	d1f6      	bne.n	8006f48 <UART_EndTxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8006f5a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f5c:	f102 0308 	add.w	r3, r2, #8
 8006f60:	e853 3f00 	ldrex	r3, [r3]
 8006f64:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f68:	3208      	adds	r2, #8
 8006f6a:	e842 3100 	strex	r1, r3, [r2]
 8006f6e:	2900      	cmp	r1, #0
 8006f70:	d1f3      	bne.n	8006f5a <UART_EndTxTransfer+0x12>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006f72:	2320      	movs	r3, #32
 8006f74:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
}
 8006f78:	4770      	bx	lr

08006f7a <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006f7a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f7c:	e852 3f00 	ldrex	r3, [r2]
 8006f80:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f84:	e842 3100 	strex	r1, r3, [r2]
 8006f88:	2900      	cmp	r1, #0
 8006f8a:	d1f6      	bne.n	8006f7a <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006f8c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f8e:	f102 0308 	add.w	r3, r2, #8
 8006f92:	e853 3f00 	ldrex	r3, [r3]
 8006f96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f9a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f9e:	3208      	adds	r2, #8
 8006fa0:	e842 3100 	strex	r1, r3, [r2]
 8006fa4:	2900      	cmp	r1, #0
 8006fa6:	d1f1      	bne.n	8006f8c <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fa8:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8006faa:	2b01      	cmp	r3, #1
 8006fac:	d006      	beq.n	8006fbc <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006fae:	2320      	movs	r3, #32
 8006fb0:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006fb8:	6703      	str	r3, [r0, #112]	; 0x70
}
 8006fba:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fbc:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fbe:	e852 3f00 	ldrex	r3, [r2]
 8006fc2:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fc6:	e842 3100 	strex	r1, r3, [r2]
 8006fca:	2900      	cmp	r1, #0
 8006fcc:	d1f6      	bne.n	8006fbc <UART_EndRxTransfer+0x42>
 8006fce:	e7ee      	b.n	8006fae <UART_EndRxTransfer+0x34>

08006fd0 <HAL_UART_Transmit_DMA>:
{
 8006fd0:	4613      	mov	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8006fd2:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8006fd6:	2a20      	cmp	r2, #32
 8006fd8:	d14a      	bne.n	8007070 <HAL_UART_Transmit_DMA+0xa0>
{
 8006fda:	b510      	push	{r4, lr}
 8006fdc:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 8006fde:	2900      	cmp	r1, #0
 8006fe0:	d048      	beq.n	8007074 <HAL_UART_Transmit_DMA+0xa4>
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d048      	beq.n	8007078 <HAL_UART_Transmit_DMA+0xa8>
    __HAL_LOCK(huart);
 8006fe6:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 8006fea:	2a01      	cmp	r2, #1
 8006fec:	d046      	beq.n	800707c <HAL_UART_Transmit_DMA+0xac>
 8006fee:	2201      	movs	r2, #1
 8006ff0:	f880 2080 	strb.w	r2, [r0, #128]	; 0x80
    huart->pTxBuffPtr  = pData;
 8006ff4:	6501      	str	r1, [r0, #80]	; 0x50
    huart->TxXferSize  = Size;
 8006ff6:	f8a0 3054 	strh.w	r3, [r0, #84]	; 0x54
    huart->TxXferCount = Size;
 8006ffa:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ffe:	2200      	movs	r2, #0
 8007000:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007004:	2221      	movs	r2, #33	; 0x21
 8007006:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    if (huart->hdmatx != NULL)
 800700a:	6f82      	ldr	r2, [r0, #120]	; 0x78
 800700c:	b1e2      	cbz	r2, 8007048 <HAL_UART_Transmit_DMA+0x78>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800700e:	491c      	ldr	r1, [pc, #112]	; (8007080 <HAL_UART_Transmit_DMA+0xb0>)
 8007010:	62d1      	str	r1, [r2, #44]	; 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007012:	6f82      	ldr	r2, [r0, #120]	; 0x78
 8007014:	491b      	ldr	r1, [pc, #108]	; (8007084 <HAL_UART_Transmit_DMA+0xb4>)
 8007016:	6311      	str	r1, [r2, #48]	; 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007018:	6f82      	ldr	r2, [r0, #120]	; 0x78
 800701a:	491b      	ldr	r1, [pc, #108]	; (8007088 <HAL_UART_Transmit_DMA+0xb8>)
 800701c:	6351      	str	r1, [r2, #52]	; 0x34
      huart->hdmatx->XferAbortCallback = NULL;
 800701e:	6f82      	ldr	r2, [r0, #120]	; 0x78
 8007020:	2100      	movs	r1, #0
 8007022:	6391      	str	r1, [r2, #56]	; 0x38
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007024:	6802      	ldr	r2, [r0, #0]
 8007026:	3228      	adds	r2, #40	; 0x28
 8007028:	6d01      	ldr	r1, [r0, #80]	; 0x50
 800702a:	6f80      	ldr	r0, [r0, #120]	; 0x78
 800702c:	f7fd fa60 	bl	80044f0 <HAL_DMA_Start_IT>
 8007030:	b150      	cbz	r0, 8007048 <HAL_UART_Transmit_DMA+0x78>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007032:	2310      	movs	r3, #16
 8007034:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        __HAL_UNLOCK(huart);
 8007038:	2300      	movs	r3, #0
 800703a:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
        huart->gState = HAL_UART_STATE_READY;
 800703e:	2320      	movs	r3, #32
 8007040:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        return HAL_ERROR;
 8007044:	2001      	movs	r0, #1
 8007046:	e012      	b.n	800706e <HAL_UART_Transmit_DMA+0x9e>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007048:	6823      	ldr	r3, [r4, #0]
 800704a:	2240      	movs	r2, #64	; 0x40
 800704c:	621a      	str	r2, [r3, #32]
    __HAL_UNLOCK(huart);
 800704e:	2300      	movs	r3, #0
 8007050:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007054:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007056:	f102 0308 	add.w	r3, r2, #8
 800705a:	e853 3f00 	ldrex	r3, [r3]
 800705e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007062:	3208      	adds	r2, #8
 8007064:	e842 3100 	strex	r1, r3, [r2]
 8007068:	2900      	cmp	r1, #0
 800706a:	d1f3      	bne.n	8007054 <HAL_UART_Transmit_DMA+0x84>
    return HAL_OK;
 800706c:	2000      	movs	r0, #0
}
 800706e:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8007070:	2002      	movs	r0, #2
}
 8007072:	4770      	bx	lr
      return HAL_ERROR;
 8007074:	2001      	movs	r0, #1
 8007076:	e7fa      	b.n	800706e <HAL_UART_Transmit_DMA+0x9e>
 8007078:	2001      	movs	r0, #1
 800707a:	e7f8      	b.n	800706e <HAL_UART_Transmit_DMA+0x9e>
    __HAL_LOCK(huart);
 800707c:	2002      	movs	r0, #2
 800707e:	e7f6      	b.n	800706e <HAL_UART_Transmit_DMA+0x9e>
 8007080:	0800708d 	.word	0x0800708d
 8007084:	080070fb 	.word	0x080070fb
 8007088:	08007107 	.word	0x08007107

0800708c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800708c:	b508      	push	{r3, lr}
 800708e:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007090:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f013 0f20 	tst.w	r3, #32
 800709a:	d118      	bne.n	80070ce <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 800709c:	2300      	movs	r3, #0
 800709e:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80070a2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a4:	f102 0308 	add.w	r3, r2, #8
 80070a8:	e853 3f00 	ldrex	r3, [r3]
 80070ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070b0:	3208      	adds	r2, #8
 80070b2:	e842 3100 	strex	r1, r3, [r2]
 80070b6:	2900      	cmp	r1, #0
 80070b8:	d1f3      	bne.n	80070a2 <UART_DMATransmitCplt+0x16>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80070ba:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070bc:	e852 3f00 	ldrex	r3, [r2]
 80070c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070c4:	e842 3100 	strex	r1, r3, [r2]
 80070c8:	2900      	cmp	r1, #0
 80070ca:	d1f6      	bne.n	80070ba <UART_DMATransmitCplt+0x2e>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80070cc:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 80070ce:	f7fb f905 	bl	80022dc <HAL_UART_TxCpltCallback>
}
 80070d2:	e7fb      	b.n	80070cc <UART_DMATransmitCplt+0x40>

080070d4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80070d4:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80070d6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070d8:	e852 3f00 	ldrex	r3, [r2]
 80070dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070e0:	e842 3100 	strex	r1, r3, [r2]
 80070e4:	2900      	cmp	r1, #0
 80070e6:	d1f6      	bne.n	80070d6 <UART_EndTransmit_IT+0x2>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80070e8:	2320      	movs	r3, #32
 80070ea:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80070ee:	2300      	movs	r3, #0
 80070f0:	6743      	str	r3, [r0, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80070f2:	f7fb f8f3 	bl	80022dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80070f6:	bd08      	pop	{r3, pc}

080070f8 <HAL_UART_TxHalfCpltCallback>:
}
 80070f8:	4770      	bx	lr

080070fa <UART_DMATxHalfCplt>:
{
 80070fa:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 80070fc:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80070fe:	f7ff fffb 	bl	80070f8 <HAL_UART_TxHalfCpltCallback>
}
 8007102:	bd08      	pop	{r3, pc}

08007104 <HAL_UART_ErrorCallback>:
}
 8007104:	4770      	bx	lr

08007106 <UART_DMAError>:
{
 8007106:	b538      	push	{r3, r4, r5, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007108:	6a84      	ldr	r4, [r0, #40]	; 0x28
  const HAL_UART_StateTypeDef gstate = huart->gState;
 800710a:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800710e:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007112:	6823      	ldr	r3, [r4, #0]
 8007114:	689b      	ldr	r3, [r3, #8]
 8007116:	f013 0f80 	tst.w	r3, #128	; 0x80
 800711a:	d001      	beq.n	8007120 <UART_DMAError+0x1a>
 800711c:	2a21      	cmp	r2, #33	; 0x21
 800711e:	d010      	beq.n	8007142 <UART_DMAError+0x3c>
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007120:	6823      	ldr	r3, [r4, #0]
 8007122:	689b      	ldr	r3, [r3, #8]
 8007124:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007128:	d001      	beq.n	800712e <UART_DMAError+0x28>
 800712a:	2d22      	cmp	r5, #34	; 0x22
 800712c:	d010      	beq.n	8007150 <UART_DMAError+0x4a>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800712e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8007132:	f043 0310 	orr.w	r3, r3, #16
 8007136:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  HAL_UART_ErrorCallback(huart);
 800713a:	4620      	mov	r0, r4
 800713c:	f7ff ffe2 	bl	8007104 <HAL_UART_ErrorCallback>
}
 8007140:	bd38      	pop	{r3, r4, r5, pc}
    huart->TxXferCount = 0U;
 8007142:	2300      	movs	r3, #0
 8007144:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8007148:	4620      	mov	r0, r4
 800714a:	f7ff fefd 	bl	8006f48 <UART_EndTxTransfer>
 800714e:	e7e7      	b.n	8007120 <UART_DMAError+0x1a>
    huart->RxXferCount = 0U;
 8007150:	2300      	movs	r3, #0
 8007152:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8007156:	4620      	mov	r0, r4
 8007158:	f7ff ff0f 	bl	8006f7a <UART_EndRxTransfer>
 800715c:	e7e7      	b.n	800712e <UART_DMAError+0x28>

0800715e <UART_DMAAbortOnError>:
{
 800715e:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007160:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8007162:	2300      	movs	r3, #0
 8007164:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007168:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
  HAL_UART_ErrorCallback(huart);
 800716c:	f7ff ffca 	bl	8007104 <HAL_UART_ErrorCallback>
}
 8007170:	bd08      	pop	{r3, pc}

08007172 <HAL_UARTEx_RxEventCallback>:
}
 8007172:	4770      	bx	lr

08007174 <HAL_UART_IRQHandler>:
{
 8007174:	b570      	push	{r4, r5, r6, lr}
 8007176:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007178:	6801      	ldr	r1, [r0, #0]
 800717a:	69cb      	ldr	r3, [r1, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800717c:	6808      	ldr	r0, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800717e:	688d      	ldr	r5, [r1, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007180:	f640 020f 	movw	r2, #2063	; 0x80f
  if (errorflags == 0U)
 8007184:	401a      	ands	r2, r3
 8007186:	d108      	bne.n	800719a <HAL_UART_IRQHandler+0x26>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007188:	f013 0f20 	tst.w	r3, #32
 800718c:	d005      	beq.n	800719a <HAL_UART_IRQHandler+0x26>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800718e:	f010 0f20 	tst.w	r0, #32
 8007192:	d134      	bne.n	80071fe <HAL_UART_IRQHandler+0x8a>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007194:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 8007198:	d131      	bne.n	80071fe <HAL_UART_IRQHandler+0x8a>
  if ((errorflags != 0U)
 800719a:	b12a      	cbz	r2, 80071a8 <HAL_UART_IRQHandler+0x34>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800719c:	4a95      	ldr	r2, [pc, #596]	; (80073f4 <HAL_UART_IRQHandler+0x280>)
 800719e:	402a      	ands	r2, r5
 80071a0:	d133      	bne.n	800720a <HAL_UART_IRQHandler+0x96>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80071a2:	4e95      	ldr	r6, [pc, #596]	; (80073f8 <HAL_UART_IRQHandler+0x284>)
 80071a4:	4230      	tst	r0, r6
 80071a6:	d130      	bne.n	800720a <HAL_UART_IRQHandler+0x96>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071a8:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80071aa:	2a01      	cmp	r2, #1
 80071ac:	f000 80c3 	beq.w	8007336 <HAL_UART_IRQHandler+0x1c2>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80071b0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80071b4:	d003      	beq.n	80071be <HAL_UART_IRQHandler+0x4a>
 80071b6:	f415 0f80 	tst.w	r5, #4194304	; 0x400000
 80071ba:	f040 815b 	bne.w	8007474 <HAL_UART_IRQHandler+0x300>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80071be:	f013 0f80 	tst.w	r3, #128	; 0x80
 80071c2:	d007      	beq.n	80071d4 <HAL_UART_IRQHandler+0x60>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80071c4:	f010 0f80 	tst.w	r0, #128	; 0x80
 80071c8:	f040 815b 	bne.w	8007482 <HAL_UART_IRQHandler+0x30e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80071cc:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
 80071d0:	f040 8157 	bne.w	8007482 <HAL_UART_IRQHandler+0x30e>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80071d4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80071d8:	d003      	beq.n	80071e2 <HAL_UART_IRQHandler+0x6e>
 80071da:	f010 0f40 	tst.w	r0, #64	; 0x40
 80071de:	f040 8157 	bne.w	8007490 <HAL_UART_IRQHandler+0x31c>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80071e2:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 80071e6:	d003      	beq.n	80071f0 <HAL_UART_IRQHandler+0x7c>
 80071e8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80071ec:	f040 8154 	bne.w	8007498 <HAL_UART_IRQHandler+0x324>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80071f0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80071f4:	d002      	beq.n	80071fc <HAL_UART_IRQHandler+0x88>
 80071f6:	2800      	cmp	r0, #0
 80071f8:	f2c0 8152 	blt.w	80074a0 <HAL_UART_IRQHandler+0x32c>
}
 80071fc:	bd70      	pop	{r4, r5, r6, pc}
      if (huart->RxISR != NULL)
 80071fe:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8007200:	2b00      	cmp	r3, #0
 8007202:	d0fb      	beq.n	80071fc <HAL_UART_IRQHandler+0x88>
        huart->RxISR(huart);
 8007204:	4620      	mov	r0, r4
 8007206:	4798      	blx	r3
      return;
 8007208:	e7f8      	b.n	80071fc <HAL_UART_IRQHandler+0x88>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800720a:	f013 0f01 	tst.w	r3, #1
 800720e:	d009      	beq.n	8007224 <HAL_UART_IRQHandler+0xb0>
 8007210:	f410 7f80 	tst.w	r0, #256	; 0x100
 8007214:	d006      	beq.n	8007224 <HAL_UART_IRQHandler+0xb0>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007216:	2601      	movs	r6, #1
 8007218:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800721a:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800721e:	4331      	orrs	r1, r6
 8007220:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007224:	f013 0f02 	tst.w	r3, #2
 8007228:	d00b      	beq.n	8007242 <HAL_UART_IRQHandler+0xce>
 800722a:	f015 0f01 	tst.w	r5, #1
 800722e:	d008      	beq.n	8007242 <HAL_UART_IRQHandler+0xce>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007230:	6821      	ldr	r1, [r4, #0]
 8007232:	2602      	movs	r6, #2
 8007234:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007236:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800723a:	f041 0104 	orr.w	r1, r1, #4
 800723e:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007242:	f013 0f04 	tst.w	r3, #4
 8007246:	d00b      	beq.n	8007260 <HAL_UART_IRQHandler+0xec>
 8007248:	f015 0f01 	tst.w	r5, #1
 800724c:	d008      	beq.n	8007260 <HAL_UART_IRQHandler+0xec>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800724e:	6821      	ldr	r1, [r4, #0]
 8007250:	2604      	movs	r6, #4
 8007252:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007254:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8007258:	f041 0102 	orr.w	r1, r1, #2
 800725c:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007260:	f013 0f08 	tst.w	r3, #8
 8007264:	d00b      	beq.n	800727e <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007266:	f010 0f20 	tst.w	r0, #32
 800726a:	d100      	bne.n	800726e <HAL_UART_IRQHandler+0xfa>
 800726c:	b13a      	cbz	r2, 800727e <HAL_UART_IRQHandler+0x10a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800726e:	6822      	ldr	r2, [r4, #0]
 8007270:	2108      	movs	r1, #8
 8007272:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007274:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8007278:	430a      	orrs	r2, r1
 800727a:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800727e:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8007282:	d00c      	beq.n	800729e <HAL_UART_IRQHandler+0x12a>
 8007284:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 8007288:	d009      	beq.n	800729e <HAL_UART_IRQHandler+0x12a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800728a:	6822      	ldr	r2, [r4, #0]
 800728c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007290:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007292:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8007296:	f042 0220 	orr.w	r2, r2, #32
 800729a:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800729e:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 80072a2:	2a00      	cmp	r2, #0
 80072a4:	d0aa      	beq.n	80071fc <HAL_UART_IRQHandler+0x88>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80072a6:	f013 0f20 	tst.w	r3, #32
 80072aa:	d009      	beq.n	80072c0 <HAL_UART_IRQHandler+0x14c>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80072ac:	f010 0f20 	tst.w	r0, #32
 80072b0:	d102      	bne.n	80072b8 <HAL_UART_IRQHandler+0x144>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80072b2:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 80072b6:	d003      	beq.n	80072c0 <HAL_UART_IRQHandler+0x14c>
        if (huart->RxISR != NULL)
 80072b8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80072ba:	b10b      	cbz	r3, 80072c0 <HAL_UART_IRQHandler+0x14c>
          huart->RxISR(huart);
 80072bc:	4620      	mov	r0, r4
 80072be:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 80072c0:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80072c4:	6823      	ldr	r3, [r4, #0]
 80072c6:	689b      	ldr	r3, [r3, #8]
 80072c8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80072cc:	d102      	bne.n	80072d4 <HAL_UART_IRQHandler+0x160>
 80072ce:	f012 0f28 	tst.w	r2, #40	; 0x28
 80072d2:	d029      	beq.n	8007328 <HAL_UART_IRQHandler+0x1b4>
        UART_EndRxTransfer(huart);
 80072d4:	4620      	mov	r0, r4
 80072d6:	f7ff fe50 	bl	8006f7a <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072da:	6823      	ldr	r3, [r4, #0]
 80072dc:	689b      	ldr	r3, [r3, #8]
 80072de:	f013 0f40 	tst.w	r3, #64	; 0x40
 80072e2:	d01d      	beq.n	8007320 <HAL_UART_IRQHandler+0x1ac>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80072e4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072e6:	f102 0308 	add.w	r3, r2, #8
 80072ea:	e853 3f00 	ldrex	r3, [r3]
 80072ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072f2:	3208      	adds	r2, #8
 80072f4:	e842 3100 	strex	r1, r3, [r2]
 80072f8:	2900      	cmp	r1, #0
 80072fa:	d1f3      	bne.n	80072e4 <HAL_UART_IRQHandler+0x170>
          if (huart->hdmarx != NULL)
 80072fc:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80072fe:	b15b      	cbz	r3, 8007318 <HAL_UART_IRQHandler+0x1a4>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007300:	4a3e      	ldr	r2, [pc, #248]	; (80073fc <HAL_UART_IRQHandler+0x288>)
 8007302:	639a      	str	r2, [r3, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007304:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8007306:	f7fd f979 	bl	80045fc <HAL_DMA_Abort_IT>
 800730a:	2800      	cmp	r0, #0
 800730c:	f43f af76 	beq.w	80071fc <HAL_UART_IRQHandler+0x88>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007310:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8007312:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8007314:	4798      	blx	r3
 8007316:	e771      	b.n	80071fc <HAL_UART_IRQHandler+0x88>
            HAL_UART_ErrorCallback(huart);
 8007318:	4620      	mov	r0, r4
 800731a:	f7ff fef3 	bl	8007104 <HAL_UART_ErrorCallback>
 800731e:	e76d      	b.n	80071fc <HAL_UART_IRQHandler+0x88>
          HAL_UART_ErrorCallback(huart);
 8007320:	4620      	mov	r0, r4
 8007322:	f7ff feef 	bl	8007104 <HAL_UART_ErrorCallback>
 8007326:	e769      	b.n	80071fc <HAL_UART_IRQHandler+0x88>
        HAL_UART_ErrorCallback(huart);
 8007328:	4620      	mov	r0, r4
 800732a:	f7ff feeb 	bl	8007104 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800732e:	2300      	movs	r3, #0
 8007330:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    return;
 8007334:	e762      	b.n	80071fc <HAL_UART_IRQHandler+0x88>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8007336:	f013 0f10 	tst.w	r3, #16
 800733a:	f43f af39 	beq.w	80071b0 <HAL_UART_IRQHandler+0x3c>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 800733e:	f010 0f10 	tst.w	r0, #16
 8007342:	f43f af35 	beq.w	80071b0 <HAL_UART_IRQHandler+0x3c>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007346:	2310      	movs	r3, #16
 8007348:	620b      	str	r3, [r1, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800734a:	6823      	ldr	r3, [r4, #0]
 800734c:	689b      	ldr	r3, [r3, #8]
 800734e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007352:	d055      	beq.n	8007400 <HAL_UART_IRQHandler+0x28c>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007354:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8007356:	6813      	ldr	r3, [r2, #0]
 8007358:	685b      	ldr	r3, [r3, #4]
 800735a:	b29b      	uxth	r3, r3
      if (  (nb_remaining_rx_data > 0U)
 800735c:	2b00      	cmp	r3, #0
 800735e:	f43f af4d 	beq.w	80071fc <HAL_UART_IRQHandler+0x88>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007362:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8007366:	4299      	cmp	r1, r3
 8007368:	f67f af48 	bls.w	80071fc <HAL_UART_IRQHandler+0x88>
        huart->RxXferCount = nb_remaining_rx_data;
 800736c:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007370:	6813      	ldr	r3, [r2, #0]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f013 0f20 	tst.w	r3, #32
 8007378:	d131      	bne.n	80073de <HAL_UART_IRQHandler+0x26a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800737a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800737c:	e852 3f00 	ldrex	r3, [r2]
 8007380:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007384:	e842 3100 	strex	r1, r3, [r2]
 8007388:	2900      	cmp	r1, #0
 800738a:	d1f6      	bne.n	800737a <HAL_UART_IRQHandler+0x206>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800738c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800738e:	f102 0308 	add.w	r3, r2, #8
 8007392:	e853 3f00 	ldrex	r3, [r3]
 8007396:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800739a:	3208      	adds	r2, #8
 800739c:	e842 3100 	strex	r1, r3, [r2]
 80073a0:	2900      	cmp	r1, #0
 80073a2:	d1f3      	bne.n	800738c <HAL_UART_IRQHandler+0x218>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80073a4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073a6:	f102 0308 	add.w	r3, r2, #8
 80073aa:	e853 3f00 	ldrex	r3, [r3]
 80073ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073b2:	3208      	adds	r2, #8
 80073b4:	e842 3100 	strex	r1, r3, [r2]
 80073b8:	2900      	cmp	r1, #0
 80073ba:	d1f3      	bne.n	80073a4 <HAL_UART_IRQHandler+0x230>
          huart->RxState = HAL_UART_STATE_READY;
 80073bc:	2320      	movs	r3, #32
 80073be:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073c2:	2300      	movs	r3, #0
 80073c4:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073c6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073c8:	e852 3f00 	ldrex	r3, [r2]
 80073cc:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073d0:	e842 3100 	strex	r1, r3, [r2]
 80073d4:	2900      	cmp	r1, #0
 80073d6:	d1f6      	bne.n	80073c6 <HAL_UART_IRQHandler+0x252>
          (void)HAL_DMA_Abort(huart->hdmarx);
 80073d8:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80073da:	f7fd f8d5 	bl	8004588 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80073de:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80073e2:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80073e6:	b29b      	uxth	r3, r3
 80073e8:	1ac9      	subs	r1, r1, r3
 80073ea:	b289      	uxth	r1, r1
 80073ec:	4620      	mov	r0, r4
 80073ee:	f7ff fec0 	bl	8007172 <HAL_UARTEx_RxEventCallback>
      return;
 80073f2:	e703      	b.n	80071fc <HAL_UART_IRQHandler+0x88>
 80073f4:	10000001 	.word	0x10000001
 80073f8:	04000120 	.word	0x04000120
 80073fc:	0800715f 	.word	0x0800715f
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007400:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8007404:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8007408:	b29b      	uxth	r3, r3
 800740a:	1ac9      	subs	r1, r1, r3
 800740c:	b289      	uxth	r1, r1
      if (  (huart->RxXferCount > 0U)
 800740e:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8007412:	b29b      	uxth	r3, r3
 8007414:	2b00      	cmp	r3, #0
 8007416:	f43f aef1 	beq.w	80071fc <HAL_UART_IRQHandler+0x88>
          &&(nb_rx_data > 0U) )
 800741a:	2900      	cmp	r1, #0
 800741c:	f43f aeee 	beq.w	80071fc <HAL_UART_IRQHandler+0x88>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007420:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007422:	e852 3f00 	ldrex	r3, [r2]
 8007426:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800742a:	e842 3000 	strex	r0, r3, [r2]
 800742e:	2800      	cmp	r0, #0
 8007430:	d1f6      	bne.n	8007420 <HAL_UART_IRQHandler+0x2ac>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007432:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007434:	f102 0308 	add.w	r3, r2, #8
 8007438:	e853 3f00 	ldrex	r3, [r3]
 800743c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007440:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007444:	3208      	adds	r2, #8
 8007446:	e842 3000 	strex	r0, r3, [r2]
 800744a:	2800      	cmp	r0, #0
 800744c:	d1f1      	bne.n	8007432 <HAL_UART_IRQHandler+0x2be>
        huart->RxState = HAL_UART_STATE_READY;
 800744e:	2320      	movs	r3, #32
 8007450:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007454:	2300      	movs	r3, #0
 8007456:	66e3      	str	r3, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 8007458:	6723      	str	r3, [r4, #112]	; 0x70
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800745a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800745c:	e852 3f00 	ldrex	r3, [r2]
 8007460:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007464:	e842 3000 	strex	r0, r3, [r2]
 8007468:	2800      	cmp	r0, #0
 800746a:	d1f6      	bne.n	800745a <HAL_UART_IRQHandler+0x2e6>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800746c:	4620      	mov	r0, r4
 800746e:	f7ff fe80 	bl	8007172 <HAL_UARTEx_RxEventCallback>
      return;
 8007472:	e6c3      	b.n	80071fc <HAL_UART_IRQHandler+0x88>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007474:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007478:	620b      	str	r3, [r1, #32]
    HAL_UARTEx_WakeupCallback(huart);
 800747a:	4620      	mov	r0, r4
 800747c:	f000 fe0a 	bl	8008094 <HAL_UARTEx_WakeupCallback>
    return;
 8007480:	e6bc      	b.n	80071fc <HAL_UART_IRQHandler+0x88>
    if (huart->TxISR != NULL)
 8007482:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8007484:	2b00      	cmp	r3, #0
 8007486:	f43f aeb9 	beq.w	80071fc <HAL_UART_IRQHandler+0x88>
      huart->TxISR(huart);
 800748a:	4620      	mov	r0, r4
 800748c:	4798      	blx	r3
    return;
 800748e:	e6b5      	b.n	80071fc <HAL_UART_IRQHandler+0x88>
    UART_EndTransmit_IT(huart);
 8007490:	4620      	mov	r0, r4
 8007492:	f7ff fe1f 	bl	80070d4 <UART_EndTransmit_IT>
    return;
 8007496:	e6b1      	b.n	80071fc <HAL_UART_IRQHandler+0x88>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007498:	4620      	mov	r0, r4
 800749a:	f000 fdfd 	bl	8008098 <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 800749e:	e6ad      	b.n	80071fc <HAL_UART_IRQHandler+0x88>
    HAL_UARTEx_RxFifoFullCallback(huart);
 80074a0:	4620      	mov	r0, r4
 80074a2:	f000 fdf8 	bl	8008096 <HAL_UARTEx_RxFifoFullCallback>
    return;
 80074a6:	e6a9      	b.n	80071fc <HAL_UART_IRQHandler+0x88>

080074a8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80074a8:	b508      	push	{r3, lr}
  uint16_t uhMask = huart->Mask;
 80074aa:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80074ae:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80074b2:	2a22      	cmp	r2, #34	; 0x22
 80074b4:	d005      	beq.n	80074c2 <UART_RxISR_8BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80074b6:	6802      	ldr	r2, [r0, #0]
 80074b8:	6993      	ldr	r3, [r2, #24]
 80074ba:	f043 0308 	orr.w	r3, r3, #8
 80074be:	6193      	str	r3, [r2, #24]
  }
}
 80074c0:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80074c2:	6802      	ldr	r2, [r0, #0]
 80074c4:	6a51      	ldr	r1, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80074c6:	b2db      	uxtb	r3, r3
 80074c8:	6d82      	ldr	r2, [r0, #88]	; 0x58
 80074ca:	400b      	ands	r3, r1
 80074cc:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 80074ce:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80074d0:	3301      	adds	r3, #1
 80074d2:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 80074d4:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 80074d8:	b29b      	uxth	r3, r3
 80074da:	3b01      	subs	r3, #1
 80074dc:	b29b      	uxth	r3, r3
 80074de:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 80074e2:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 80074e6:	b29b      	uxth	r3, r3
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d1e9      	bne.n	80074c0 <UART_RxISR_8BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80074ec:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ee:	e852 3f00 	ldrex	r3, [r2]
 80074f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074f6:	e842 3100 	strex	r1, r3, [r2]
 80074fa:	2900      	cmp	r1, #0
 80074fc:	d1f6      	bne.n	80074ec <UART_RxISR_8BIT+0x44>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074fe:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007500:	f102 0308 	add.w	r3, r2, #8
 8007504:	e853 3f00 	ldrex	r3, [r3]
 8007508:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800750c:	3208      	adds	r2, #8
 800750e:	e842 3100 	strex	r1, r3, [r2]
 8007512:	2900      	cmp	r1, #0
 8007514:	d1f3      	bne.n	80074fe <UART_RxISR_8BIT+0x56>
      huart->RxState = HAL_UART_STATE_READY;
 8007516:	2320      	movs	r3, #32
 8007518:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
      huart->RxISR = NULL;
 800751c:	2300      	movs	r3, #0
 800751e:	6703      	str	r3, [r0, #112]	; 0x70
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007520:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8007522:	2b01      	cmp	r3, #1
 8007524:	d116      	bne.n	8007554 <UART_RxISR_8BIT+0xac>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007526:	2300      	movs	r3, #0
 8007528:	66c3      	str	r3, [r0, #108]	; 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800752a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800752c:	e852 3f00 	ldrex	r3, [r2]
 8007530:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007534:	e842 3100 	strex	r1, r3, [r2]
 8007538:	2900      	cmp	r1, #0
 800753a:	d1f6      	bne.n	800752a <UART_RxISR_8BIT+0x82>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800753c:	6803      	ldr	r3, [r0, #0]
 800753e:	69da      	ldr	r2, [r3, #28]
 8007540:	f012 0f10 	tst.w	r2, #16
 8007544:	d001      	beq.n	800754a <UART_RxISR_8BIT+0xa2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007546:	2210      	movs	r2, #16
 8007548:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800754a:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 800754e:	f7ff fe10 	bl	8007172 <HAL_UARTEx_RxEventCallback>
 8007552:	e7b5      	b.n	80074c0 <UART_RxISR_8BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 8007554:	f7fa feca 	bl	80022ec <HAL_UART_RxCpltCallback>
 8007558:	e7b2      	b.n	80074c0 <UART_RxISR_8BIT+0x18>

0800755a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800755a:	b508      	push	{r3, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800755c:	f8b0 2060 	ldrh.w	r2, [r0, #96]	; 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007560:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8007564:	2b22      	cmp	r3, #34	; 0x22
 8007566:	d005      	beq.n	8007574 <UART_RxISR_16BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007568:	6802      	ldr	r2, [r0, #0]
 800756a:	6993      	ldr	r3, [r2, #24]
 800756c:	f043 0308 	orr.w	r3, r3, #8
 8007570:	6193      	str	r3, [r2, #24]
  }
}
 8007572:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007574:	6803      	ldr	r3, [r0, #0]
 8007576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007578:	6d81      	ldr	r1, [r0, #88]	; 0x58
    *tmp = (uint16_t)(uhdata & uhMask);
 800757a:	4013      	ands	r3, r2
 800757c:	800b      	strh	r3, [r1, #0]
    huart->pRxBuffPtr += 2U;
 800757e:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8007580:	3302      	adds	r3, #2
 8007582:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8007584:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8007588:	b29b      	uxth	r3, r3
 800758a:	3b01      	subs	r3, #1
 800758c:	b29b      	uxth	r3, r3
 800758e:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 8007592:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8007596:	b29b      	uxth	r3, r3
 8007598:	2b00      	cmp	r3, #0
 800759a:	d1ea      	bne.n	8007572 <UART_RxISR_16BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800759c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800759e:	e852 3f00 	ldrex	r3, [r2]
 80075a2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075a6:	e842 3100 	strex	r1, r3, [r2]
 80075aa:	2900      	cmp	r1, #0
 80075ac:	d1f6      	bne.n	800759c <UART_RxISR_16BIT+0x42>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075ae:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075b0:	f102 0308 	add.w	r3, r2, #8
 80075b4:	e853 3f00 	ldrex	r3, [r3]
 80075b8:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075bc:	3208      	adds	r2, #8
 80075be:	e842 3100 	strex	r1, r3, [r2]
 80075c2:	2900      	cmp	r1, #0
 80075c4:	d1f3      	bne.n	80075ae <UART_RxISR_16BIT+0x54>
      huart->RxState = HAL_UART_STATE_READY;
 80075c6:	2320      	movs	r3, #32
 80075c8:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
      huart->RxISR = NULL;
 80075cc:	2300      	movs	r3, #0
 80075ce:	6703      	str	r3, [r0, #112]	; 0x70
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075d0:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80075d2:	2b01      	cmp	r3, #1
 80075d4:	d116      	bne.n	8007604 <UART_RxISR_16BIT+0xaa>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075d6:	2300      	movs	r3, #0
 80075d8:	66c3      	str	r3, [r0, #108]	; 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075da:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075dc:	e852 3f00 	ldrex	r3, [r2]
 80075e0:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075e4:	e842 3100 	strex	r1, r3, [r2]
 80075e8:	2900      	cmp	r1, #0
 80075ea:	d1f6      	bne.n	80075da <UART_RxISR_16BIT+0x80>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80075ec:	6803      	ldr	r3, [r0, #0]
 80075ee:	69da      	ldr	r2, [r3, #28]
 80075f0:	f012 0f10 	tst.w	r2, #16
 80075f4:	d001      	beq.n	80075fa <UART_RxISR_16BIT+0xa0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80075f6:	2210      	movs	r2, #16
 80075f8:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80075fa:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 80075fe:	f7ff fdb8 	bl	8007172 <HAL_UARTEx_RxEventCallback>
 8007602:	e7b6      	b.n	8007572 <UART_RxISR_16BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 8007604:	f7fa fe72 	bl	80022ec <HAL_UART_RxCpltCallback>
 8007608:	e7b3      	b.n	8007572 <UART_RxISR_16BIT+0x18>
	...

0800760c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800760c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t  uhMask = huart->Mask;
 8007610:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007614:	6803      	ldr	r3, [r0, #0]
 8007616:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007618:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800761c:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007620:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8007624:	2a22      	cmp	r2, #34	; 0x22
 8007626:	d005      	beq.n	8007634 <UART_RxISR_8BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007628:	699a      	ldr	r2, [r3, #24]
 800762a:	f042 0208 	orr.w	r2, r2, #8
 800762e:	619a      	str	r2, [r3, #24]
  }
}
 8007630:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007634:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 8007636:	f8b0 7068 	ldrh.w	r7, [r0, #104]	; 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800763a:	e008      	b.n	800764e <UART_RxISR_8BIT_FIFOEN+0x42>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800763c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8007640:	2b00      	cmp	r3, #0
 8007642:	d14c      	bne.n	80076de <UART_RxISR_8BIT_FIFOEN+0xd2>
      if (huart->RxXferCount == 0U)
 8007644:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8007648:	b29b      	uxth	r3, r3
 800764a:	2b00      	cmp	r3, #0
 800764c:	d04e      	beq.n	80076ec <UART_RxISR_8BIT_FIFOEN+0xe0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800764e:	2f00      	cmp	r7, #0
 8007650:	f000 8087 	beq.w	8007762 <UART_RxISR_8BIT_FIFOEN+0x156>
 8007654:	f015 0f20 	tst.w	r5, #32
 8007658:	f000 8083 	beq.w	8007762 <UART_RxISR_8BIT_FIFOEN+0x156>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800765c:	6823      	ldr	r3, [r4, #0]
 800765e:	6a59      	ldr	r1, [r3, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007660:	b2f3      	uxtb	r3, r6
 8007662:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8007664:	400b      	ands	r3, r1
 8007666:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr++;
 8007668:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800766a:	3301      	adds	r3, #1
 800766c:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 800766e:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8007672:	b29b      	uxth	r3, r3
 8007674:	3b01      	subs	r3, #1
 8007676:	b29b      	uxth	r3, r3
 8007678:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800767c:	6823      	ldr	r3, [r4, #0]
 800767e:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007680:	f015 0f07 	tst.w	r5, #7
 8007684:	d0de      	beq.n	8007644 <UART_RxISR_8BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007686:	f015 0f01 	tst.w	r5, #1
 800768a:	d009      	beq.n	80076a0 <UART_RxISR_8BIT_FIFOEN+0x94>
 800768c:	f419 7f80 	tst.w	r9, #256	; 0x100
 8007690:	d006      	beq.n	80076a0 <UART_RxISR_8BIT_FIFOEN+0x94>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007692:	2201      	movs	r2, #1
 8007694:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007696:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800769a:	4313      	orrs	r3, r2
 800769c:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80076a0:	f015 0f02 	tst.w	r5, #2
 80076a4:	d00b      	beq.n	80076be <UART_RxISR_8BIT_FIFOEN+0xb2>
 80076a6:	f018 0f01 	tst.w	r8, #1
 80076aa:	d008      	beq.n	80076be <UART_RxISR_8BIT_FIFOEN+0xb2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80076ac:	6823      	ldr	r3, [r4, #0]
 80076ae:	2202      	movs	r2, #2
 80076b0:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80076b2:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80076b6:	f043 0304 	orr.w	r3, r3, #4
 80076ba:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80076be:	f015 0f04 	tst.w	r5, #4
 80076c2:	d0bb      	beq.n	800763c <UART_RxISR_8BIT_FIFOEN+0x30>
 80076c4:	f018 0f01 	tst.w	r8, #1
 80076c8:	d0b8      	beq.n	800763c <UART_RxISR_8BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80076ca:	6823      	ldr	r3, [r4, #0]
 80076cc:	2204      	movs	r2, #4
 80076ce:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80076d0:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80076d4:	f043 0302 	orr.w	r3, r3, #2
 80076d8:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 80076dc:	e7ae      	b.n	800763c <UART_RxISR_8BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 80076de:	4620      	mov	r0, r4
 80076e0:	f7ff fd10 	bl	8007104 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076e4:	2300      	movs	r3, #0
 80076e6:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 80076ea:	e7ab      	b.n	8007644 <UART_RxISR_8BIT_FIFOEN+0x38>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80076ec:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ee:	e852 3f00 	ldrex	r3, [r2]
 80076f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076f6:	e842 3100 	strex	r1, r3, [r2]
 80076fa:	2900      	cmp	r1, #0
 80076fc:	d1f6      	bne.n	80076ec <UART_RxISR_8BIT_FIFOEN+0xe0>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80076fe:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007700:	f102 0308 	add.w	r3, r2, #8
 8007704:	e853 3f00 	ldrex	r3, [r3]
 8007708:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800770c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007710:	3208      	adds	r2, #8
 8007712:	e842 3100 	strex	r1, r3, [r2]
 8007716:	2900      	cmp	r1, #0
 8007718:	d1f1      	bne.n	80076fe <UART_RxISR_8BIT_FIFOEN+0xf2>
        huart->RxState = HAL_UART_STATE_READY;
 800771a:	2320      	movs	r3, #32
 800771c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->RxISR = NULL;
 8007720:	2300      	movs	r3, #0
 8007722:	6723      	str	r3, [r4, #112]	; 0x70
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007724:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8007726:	2b01      	cmp	r3, #1
 8007728:	d003      	beq.n	8007732 <UART_RxISR_8BIT_FIFOEN+0x126>
          HAL_UART_RxCpltCallback(huart);
 800772a:	4620      	mov	r0, r4
 800772c:	f7fa fdde 	bl	80022ec <HAL_UART_RxCpltCallback>
 8007730:	e78d      	b.n	800764e <UART_RxISR_8BIT_FIFOEN+0x42>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007732:	2300      	movs	r3, #0
 8007734:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007736:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007738:	e852 3f00 	ldrex	r3, [r2]
 800773c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007740:	e842 3100 	strex	r1, r3, [r2]
 8007744:	2900      	cmp	r1, #0
 8007746:	d1f6      	bne.n	8007736 <UART_RxISR_8BIT_FIFOEN+0x12a>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007748:	6823      	ldr	r3, [r4, #0]
 800774a:	69da      	ldr	r2, [r3, #28]
 800774c:	f012 0f10 	tst.w	r2, #16
 8007750:	d001      	beq.n	8007756 <UART_RxISR_8BIT_FIFOEN+0x14a>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007752:	2210      	movs	r2, #16
 8007754:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007756:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800775a:	4620      	mov	r0, r4
 800775c:	f7ff fd09 	bl	8007172 <HAL_UARTEx_RxEventCallback>
 8007760:	e775      	b.n	800764e <UART_RxISR_8BIT_FIFOEN+0x42>
    rxdatacount = huart->RxXferCount;
 8007762:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8007766:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007768:	2b00      	cmp	r3, #0
 800776a:	f43f af61 	beq.w	8007630 <UART_RxISR_8BIT_FIFOEN+0x24>
 800776e:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 8007772:	429a      	cmp	r2, r3
 8007774:	f67f af5c 	bls.w	8007630 <UART_RxISR_8BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007778:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800777a:	f102 0308 	add.w	r3, r2, #8
 800777e:	e853 3f00 	ldrex	r3, [r3]
 8007782:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007786:	3208      	adds	r2, #8
 8007788:	e842 3100 	strex	r1, r3, [r2]
 800778c:	2900      	cmp	r1, #0
 800778e:	d1f3      	bne.n	8007778 <UART_RxISR_8BIT_FIFOEN+0x16c>
      huart->RxISR = UART_RxISR_8BIT;
 8007790:	4b05      	ldr	r3, [pc, #20]	; (80077a8 <UART_RxISR_8BIT_FIFOEN+0x19c>)
 8007792:	6723      	str	r3, [r4, #112]	; 0x70
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007794:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007796:	e852 3f00 	ldrex	r3, [r2]
 800779a:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800779e:	e842 3100 	strex	r1, r3, [r2]
 80077a2:	2900      	cmp	r1, #0
 80077a4:	d1f6      	bne.n	8007794 <UART_RxISR_8BIT_FIFOEN+0x188>
 80077a6:	e743      	b.n	8007630 <UART_RxISR_8BIT_FIFOEN+0x24>
 80077a8:	080074a9 	.word	0x080074a9

080077ac <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80077ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80077b0:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80077b4:	6803      	ldr	r3, [r0, #0]
 80077b6:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80077b8:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80077bc:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80077c0:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80077c4:	2a22      	cmp	r2, #34	; 0x22
 80077c6:	d005      	beq.n	80077d4 <UART_RxISR_16BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80077c8:	699a      	ldr	r2, [r3, #24]
 80077ca:	f042 0208 	orr.w	r2, r2, #8
 80077ce:	619a      	str	r2, [r3, #24]
  }
}
 80077d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077d4:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 80077d6:	f8b0 7068 	ldrh.w	r7, [r0, #104]	; 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80077da:	e008      	b.n	80077ee <UART_RxISR_16BIT_FIFOEN+0x42>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80077dc:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d14b      	bne.n	800787c <UART_RxISR_16BIT_FIFOEN+0xd0>
      if (huart->RxXferCount == 0U)
 80077e4:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80077e8:	b29b      	uxth	r3, r3
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d04d      	beq.n	800788a <UART_RxISR_16BIT_FIFOEN+0xde>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80077ee:	2f00      	cmp	r7, #0
 80077f0:	f000 8086 	beq.w	8007900 <UART_RxISR_16BIT_FIFOEN+0x154>
 80077f4:	f015 0f20 	tst.w	r5, #32
 80077f8:	f000 8082 	beq.w	8007900 <UART_RxISR_16BIT_FIFOEN+0x154>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80077fc:	6823      	ldr	r3, [r4, #0]
 80077fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007800:	6da2      	ldr	r2, [r4, #88]	; 0x58
      *tmp = (uint16_t)(uhdata & uhMask);
 8007802:	4033      	ands	r3, r6
 8007804:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 8007806:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007808:	3302      	adds	r3, #2
 800780a:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 800780c:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8007810:	b29b      	uxth	r3, r3
 8007812:	3b01      	subs	r3, #1
 8007814:	b29b      	uxth	r3, r3
 8007816:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800781a:	6823      	ldr	r3, [r4, #0]
 800781c:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800781e:	f015 0f07 	tst.w	r5, #7
 8007822:	d0df      	beq.n	80077e4 <UART_RxISR_16BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007824:	f015 0f01 	tst.w	r5, #1
 8007828:	d009      	beq.n	800783e <UART_RxISR_16BIT_FIFOEN+0x92>
 800782a:	f419 7f80 	tst.w	r9, #256	; 0x100
 800782e:	d006      	beq.n	800783e <UART_RxISR_16BIT_FIFOEN+0x92>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007830:	2201      	movs	r2, #1
 8007832:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007834:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8007838:	4313      	orrs	r3, r2
 800783a:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800783e:	f015 0f02 	tst.w	r5, #2
 8007842:	d00b      	beq.n	800785c <UART_RxISR_16BIT_FIFOEN+0xb0>
 8007844:	f018 0f01 	tst.w	r8, #1
 8007848:	d008      	beq.n	800785c <UART_RxISR_16BIT_FIFOEN+0xb0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800784a:	6823      	ldr	r3, [r4, #0]
 800784c:	2202      	movs	r2, #2
 800784e:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007850:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8007854:	f043 0304 	orr.w	r3, r3, #4
 8007858:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800785c:	f015 0f04 	tst.w	r5, #4
 8007860:	d0bc      	beq.n	80077dc <UART_RxISR_16BIT_FIFOEN+0x30>
 8007862:	f018 0f01 	tst.w	r8, #1
 8007866:	d0b9      	beq.n	80077dc <UART_RxISR_16BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007868:	6823      	ldr	r3, [r4, #0]
 800786a:	2204      	movs	r2, #4
 800786c:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800786e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8007872:	f043 0302 	orr.w	r3, r3, #2
 8007876:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 800787a:	e7af      	b.n	80077dc <UART_RxISR_16BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 800787c:	4620      	mov	r0, r4
 800787e:	f7ff fc41 	bl	8007104 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007882:	2300      	movs	r3, #0
 8007884:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8007888:	e7ac      	b.n	80077e4 <UART_RxISR_16BIT_FIFOEN+0x38>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800788a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800788c:	e852 3f00 	ldrex	r3, [r2]
 8007890:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007894:	e842 3100 	strex	r1, r3, [r2]
 8007898:	2900      	cmp	r1, #0
 800789a:	d1f6      	bne.n	800788a <UART_RxISR_16BIT_FIFOEN+0xde>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800789c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800789e:	f102 0308 	add.w	r3, r2, #8
 80078a2:	e853 3f00 	ldrex	r3, [r3]
 80078a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80078aa:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ae:	3208      	adds	r2, #8
 80078b0:	e842 3100 	strex	r1, r3, [r2]
 80078b4:	2900      	cmp	r1, #0
 80078b6:	d1f1      	bne.n	800789c <UART_RxISR_16BIT_FIFOEN+0xf0>
        huart->RxState = HAL_UART_STATE_READY;
 80078b8:	2320      	movs	r3, #32
 80078ba:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->RxISR = NULL;
 80078be:	2300      	movs	r3, #0
 80078c0:	6723      	str	r3, [r4, #112]	; 0x70
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078c2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80078c4:	2b01      	cmp	r3, #1
 80078c6:	d003      	beq.n	80078d0 <UART_RxISR_16BIT_FIFOEN+0x124>
          HAL_UART_RxCpltCallback(huart);
 80078c8:	4620      	mov	r0, r4
 80078ca:	f7fa fd0f 	bl	80022ec <HAL_UART_RxCpltCallback>
 80078ce:	e78e      	b.n	80077ee <UART_RxISR_16BIT_FIFOEN+0x42>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078d0:	2300      	movs	r3, #0
 80078d2:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078d4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078d6:	e852 3f00 	ldrex	r3, [r2]
 80078da:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078de:	e842 3100 	strex	r1, r3, [r2]
 80078e2:	2900      	cmp	r1, #0
 80078e4:	d1f6      	bne.n	80078d4 <UART_RxISR_16BIT_FIFOEN+0x128>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80078e6:	6823      	ldr	r3, [r4, #0]
 80078e8:	69da      	ldr	r2, [r3, #28]
 80078ea:	f012 0f10 	tst.w	r2, #16
 80078ee:	d001      	beq.n	80078f4 <UART_RxISR_16BIT_FIFOEN+0x148>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80078f0:	2210      	movs	r2, #16
 80078f2:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80078f4:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80078f8:	4620      	mov	r0, r4
 80078fa:	f7ff fc3a 	bl	8007172 <HAL_UARTEx_RxEventCallback>
 80078fe:	e776      	b.n	80077ee <UART_RxISR_16BIT_FIFOEN+0x42>
    rxdatacount = huart->RxXferCount;
 8007900:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8007904:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007906:	2b00      	cmp	r3, #0
 8007908:	f43f af62 	beq.w	80077d0 <UART_RxISR_16BIT_FIFOEN+0x24>
 800790c:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 8007910:	429a      	cmp	r2, r3
 8007912:	f67f af5d 	bls.w	80077d0 <UART_RxISR_16BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007916:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007918:	f102 0308 	add.w	r3, r2, #8
 800791c:	e853 3f00 	ldrex	r3, [r3]
 8007920:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007924:	3208      	adds	r2, #8
 8007926:	e842 3100 	strex	r1, r3, [r2]
 800792a:	2900      	cmp	r1, #0
 800792c:	d1f3      	bne.n	8007916 <UART_RxISR_16BIT_FIFOEN+0x16a>
      huart->RxISR = UART_RxISR_16BIT;
 800792e:	4b06      	ldr	r3, [pc, #24]	; (8007948 <UART_RxISR_16BIT_FIFOEN+0x19c>)
 8007930:	6723      	str	r3, [r4, #112]	; 0x70
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007932:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007934:	e852 3f00 	ldrex	r3, [r2]
 8007938:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800793c:	e842 3100 	strex	r1, r3, [r2]
 8007940:	2900      	cmp	r1, #0
 8007942:	d1f6      	bne.n	8007932 <UART_RxISR_16BIT_FIFOEN+0x186>
 8007944:	e744      	b.n	80077d0 <UART_RxISR_16BIT_FIFOEN+0x24>
 8007946:	bf00      	nop
 8007948:	0800755b 	.word	0x0800755b

0800794c <UART_SetConfig>:
{
 800794c:	b570      	push	{r4, r5, r6, lr}
 800794e:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8007950:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007952:	6883      	ldr	r3, [r0, #8]
 8007954:	6902      	ldr	r2, [r0, #16]
 8007956:	4313      	orrs	r3, r2
 8007958:	6942      	ldr	r2, [r0, #20]
 800795a:	4313      	orrs	r3, r2
 800795c:	69c2      	ldr	r2, [r0, #28]
 800795e:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007960:	6808      	ldr	r0, [r1, #0]
 8007962:	4a9d      	ldr	r2, [pc, #628]	; (8007bd8 <UART_SetConfig+0x28c>)
 8007964:	4002      	ands	r2, r0
 8007966:	431a      	orrs	r2, r3
 8007968:	600a      	str	r2, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800796a:	6822      	ldr	r2, [r4, #0]
 800796c:	6853      	ldr	r3, [r2, #4]
 800796e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007972:	68e1      	ldr	r1, [r4, #12]
 8007974:	430b      	orrs	r3, r1
 8007976:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007978:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800797a:	6822      	ldr	r2, [r4, #0]
 800797c:	4b97      	ldr	r3, [pc, #604]	; (8007bdc <UART_SetConfig+0x290>)
 800797e:	429a      	cmp	r2, r3
 8007980:	d001      	beq.n	8007986 <UART_SetConfig+0x3a>
    tmpreg |= huart->Init.OneBitSampling;
 8007982:	6a23      	ldr	r3, [r4, #32]
 8007984:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007986:	6893      	ldr	r3, [r2, #8]
 8007988:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800798c:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007990:	430b      	orrs	r3, r1
 8007992:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007994:	6822      	ldr	r2, [r4, #0]
 8007996:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007998:	f023 030f 	bic.w	r3, r3, #15
 800799c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800799e:	430b      	orrs	r3, r1
 80079a0:	62d3      	str	r3, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80079a2:	6823      	ldr	r3, [r4, #0]
 80079a4:	4a8e      	ldr	r2, [pc, #568]	; (8007be0 <UART_SetConfig+0x294>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d01c      	beq.n	80079e4 <UART_SetConfig+0x98>
 80079aa:	4a8e      	ldr	r2, [pc, #568]	; (8007be4 <UART_SetConfig+0x298>)
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d031      	beq.n	8007a14 <UART_SetConfig+0xc8>
 80079b0:	4a8a      	ldr	r2, [pc, #552]	; (8007bdc <UART_SetConfig+0x290>)
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d04b      	beq.n	8007a4e <UART_SetConfig+0x102>
 80079b6:	2210      	movs	r2, #16
  if (UART_INSTANCE_LOWPOWER(huart))
 80079b8:	4988      	ldr	r1, [pc, #544]	; (8007bdc <UART_SetConfig+0x290>)
 80079ba:	428b      	cmp	r3, r1
 80079bc:	d068      	beq.n	8007a90 <UART_SetConfig+0x144>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80079be:	69e0      	ldr	r0, [r4, #28]
 80079c0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80079c4:	f000 80a5 	beq.w	8007b12 <UART_SetConfig+0x1c6>
    switch (clocksource)
 80079c8:	2a08      	cmp	r2, #8
 80079ca:	f200 811f 	bhi.w	8007c0c <UART_SetConfig+0x2c0>
 80079ce:	e8df f012 	tbh	[pc, r2, lsl #1]
 80079d2:	00d3      	.short	0x00d3
 80079d4:	00d100f5 	.word	0x00d100f5
 80079d8:	00f8011d 	.word	0x00f8011d
 80079dc:	011d011d 	.word	0x011d011d
 80079e0:	00fb011d 	.word	0x00fb011d
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 80079e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80079e8:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 80079ec:	f002 0203 	and.w	r2, r2, #3
 80079f0:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
  UART_GETCLOCKSOURCE(huart, clocksource);
 80079f4:	f5a2 3240 	sub.w	r2, r2, #196608	; 0x30000
 80079f8:	2a03      	cmp	r2, #3
 80079fa:	d809      	bhi.n	8007a10 <UART_SetConfig+0xc4>
 80079fc:	e8df f002 	tbb	[pc, r2]
 8007a00:	063c0402 	.word	0x063c0402
 8007a04:	2201      	movs	r2, #1
 8007a06:	e7d7      	b.n	80079b8 <UART_SetConfig+0x6c>
 8007a08:	2204      	movs	r2, #4
 8007a0a:	e7d5      	b.n	80079b8 <UART_SetConfig+0x6c>
 8007a0c:	2208      	movs	r2, #8
 8007a0e:	e7d3      	b.n	80079b8 <UART_SetConfig+0x6c>
 8007a10:	2210      	movs	r2, #16
 8007a12:	e7d1      	b.n	80079b8 <UART_SetConfig+0x6c>
 8007a14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007a18:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8007a1c:	f002 020c 	and.w	r2, r2, #12
 8007a20:	f442 2240 	orr.w	r2, r2, #786432	; 0xc0000
 8007a24:	f5a2 2240 	sub.w	r2, r2, #786432	; 0xc0000
 8007a28:	2a0c      	cmp	r2, #12
 8007a2a:	d80e      	bhi.n	8007a4a <UART_SetConfig+0xfe>
 8007a2c:	e8df f002 	tbb	[pc, r2]
 8007a30:	0d0d0d07 	.word	0x0d0d0d07
 8007a34:	0d0d0d09 	.word	0x0d0d0d09
 8007a38:	0d0d0d26 	.word	0x0d0d0d26
 8007a3c:	0b          	.byte	0x0b
 8007a3d:	00          	.byte	0x00
 8007a3e:	2200      	movs	r2, #0
 8007a40:	e7ba      	b.n	80079b8 <UART_SetConfig+0x6c>
 8007a42:	2204      	movs	r2, #4
 8007a44:	e7b8      	b.n	80079b8 <UART_SetConfig+0x6c>
 8007a46:	2208      	movs	r2, #8
 8007a48:	e7b6      	b.n	80079b8 <UART_SetConfig+0x6c>
 8007a4a:	2210      	movs	r2, #16
 8007a4c:	e7b4      	b.n	80079b8 <UART_SetConfig+0x6c>
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8007a4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007a52:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8007a56:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8007a5a:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8007a5e:	d00f      	beq.n	8007a80 <UART_SetConfig+0x134>
 8007a60:	d805      	bhi.n	8007a6e <UART_SetConfig+0x122>
 8007a62:	b17a      	cbz	r2, 8007a84 <UART_SetConfig+0x138>
 8007a64:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8007a68:	d10e      	bne.n	8007a88 <UART_SetConfig+0x13c>
 8007a6a:	2204      	movs	r2, #4
 8007a6c:	e7a4      	b.n	80079b8 <UART_SetConfig+0x6c>
 8007a6e:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8007a72:	d10b      	bne.n	8007a8c <UART_SetConfig+0x140>
 8007a74:	2208      	movs	r2, #8
 8007a76:	e79f      	b.n	80079b8 <UART_SetConfig+0x6c>
 8007a78:	2202      	movs	r2, #2
 8007a7a:	e79d      	b.n	80079b8 <UART_SetConfig+0x6c>
 8007a7c:	2202      	movs	r2, #2
 8007a7e:	e79b      	b.n	80079b8 <UART_SetConfig+0x6c>
 8007a80:	2202      	movs	r2, #2
 8007a82:	e799      	b.n	80079b8 <UART_SetConfig+0x6c>
 8007a84:	2200      	movs	r2, #0
 8007a86:	e797      	b.n	80079b8 <UART_SetConfig+0x6c>
 8007a88:	2210      	movs	r2, #16
 8007a8a:	e795      	b.n	80079b8 <UART_SetConfig+0x6c>
 8007a8c:	2210      	movs	r2, #16
 8007a8e:	e793      	b.n	80079b8 <UART_SetConfig+0x6c>
    switch (clocksource)
 8007a90:	2a08      	cmp	r2, #8
 8007a92:	f200 809c 	bhi.w	8007bce <UART_SetConfig+0x282>
 8007a96:	e8df f002 	tbb	[pc, r2]
 8007a9a:	9a08      	.short	0x9a08
 8007a9c:	9a379a3a 	.word	0x9a379a3a
 8007aa0:	9a9a      	.short	0x9a9a
 8007aa2:	05          	.byte	0x05
 8007aa3:	00          	.byte	0x00
 8007aa4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007aa8:	e004      	b.n	8007ab4 <UART_SetConfig+0x168>
        pclk = HAL_RCC_GetPCLK1Freq();
 8007aaa:	f7fe fb13 	bl	80060d4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8007aae:	2800      	cmp	r0, #0
 8007ab0:	f000 808f 	beq.w	8007bd2 <UART_SetConfig+0x286>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007ab4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007ab6:	4b4c      	ldr	r3, [pc, #304]	; (8007be8 <UART_SetConfig+0x29c>)
 8007ab8:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8007abc:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007ac0:	6865      	ldr	r5, [r4, #4]
 8007ac2:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8007ac6:	4299      	cmp	r1, r3
 8007ac8:	f200 8094 	bhi.w	8007bf4 <UART_SetConfig+0x2a8>
 8007acc:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8007ad0:	f200 8092 	bhi.w	8007bf8 <UART_SetConfig+0x2ac>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ad4:	2600      	movs	r6, #0
 8007ad6:	4633      	mov	r3, r6
 8007ad8:	4631      	mov	r1, r6
 8007ada:	f7f9 fb7b 	bl	80011d4 <__aeabi_uldivmod>
 8007ade:	0209      	lsls	r1, r1, #8
 8007ae0:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8007ae4:	0200      	lsls	r0, r0, #8
 8007ae6:	086b      	lsrs	r3, r5, #1
 8007ae8:	18c0      	adds	r0, r0, r3
 8007aea:	462a      	mov	r2, r5
 8007aec:	4633      	mov	r3, r6
 8007aee:	f141 0100 	adc.w	r1, r1, #0
 8007af2:	f7f9 fb6f 	bl	80011d4 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007af6:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8007afa:	4b3c      	ldr	r3, [pc, #240]	; (8007bec <UART_SetConfig+0x2a0>)
 8007afc:	429a      	cmp	r2, r3
 8007afe:	d87d      	bhi.n	8007bfc <UART_SetConfig+0x2b0>
          huart->Instance->BRR = usartdiv;
 8007b00:	6823      	ldr	r3, [r4, #0]
 8007b02:	60d8      	str	r0, [r3, #12]
 8007b04:	4630      	mov	r0, r6
 8007b06:	e050      	b.n	8007baa <UART_SetConfig+0x25e>
        pclk = HAL_RCC_GetSysClockFreq();
 8007b08:	f7fd fdfe 	bl	8005708 <HAL_RCC_GetSysClockFreq>
        break;
 8007b0c:	e7cf      	b.n	8007aae <UART_SetConfig+0x162>
        pclk = (uint32_t) HSI_VALUE;
 8007b0e:	4838      	ldr	r0, [pc, #224]	; (8007bf0 <UART_SetConfig+0x2a4>)
 8007b10:	e7d0      	b.n	8007ab4 <UART_SetConfig+0x168>
    switch (clocksource)
 8007b12:	2a08      	cmp	r2, #8
 8007b14:	d874      	bhi.n	8007c00 <UART_SetConfig+0x2b4>
 8007b16:	e8df f002 	tbb	[pc, r2]
 8007b1a:	2707      	.short	0x2707
 8007b1c:	732a7305 	.word	0x732a7305
 8007b20:	7373      	.short	0x7373
 8007b22:	0b          	.byte	0x0b
 8007b23:	00          	.byte	0x00
 8007b24:	4832      	ldr	r0, [pc, #200]	; (8007bf0 <UART_SetConfig+0x2a4>)
 8007b26:	e003      	b.n	8007b30 <UART_SetConfig+0x1e4>
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b28:	f7fe fad4 	bl	80060d4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8007b2c:	2800      	cmp	r0, #0
 8007b2e:	d069      	beq.n	8007c04 <UART_SetConfig+0x2b8>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b30:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007b32:	4b2d      	ldr	r3, [pc, #180]	; (8007be8 <UART_SetConfig+0x29c>)
 8007b34:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8007b38:	fbb0 f0f3 	udiv	r0, r0, r3
 8007b3c:	6862      	ldr	r2, [r4, #4]
 8007b3e:	0853      	lsrs	r3, r2, #1
 8007b40:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8007b44:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b48:	b29b      	uxth	r3, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b4a:	f1a3 0110 	sub.w	r1, r3, #16
 8007b4e:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8007b52:	4291      	cmp	r1, r2
 8007b54:	d858      	bhi.n	8007c08 <UART_SetConfig+0x2bc>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007b56:	f023 020f 	bic.w	r2, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007b5a:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8007b5e:	4313      	orrs	r3, r2
        huart->Instance->BRR = brrtemp;
 8007b60:	6822      	ldr	r2, [r4, #0]
 8007b62:	60d3      	str	r3, [r2, #12]
 8007b64:	2000      	movs	r0, #0
 8007b66:	e020      	b.n	8007baa <UART_SetConfig+0x25e>
        pclk = HAL_RCC_GetPCLK2Freq();
 8007b68:	f7fe fac4 	bl	80060f4 <HAL_RCC_GetPCLK2Freq>
        break;
 8007b6c:	e7de      	b.n	8007b2c <UART_SetConfig+0x1e0>
        pclk = HAL_RCC_GetSysClockFreq();
 8007b6e:	f7fd fdcb 	bl	8005708 <HAL_RCC_GetSysClockFreq>
        break;
 8007b72:	e7db      	b.n	8007b2c <UART_SetConfig+0x1e0>
    switch (clocksource)
 8007b74:	481e      	ldr	r0, [pc, #120]	; (8007bf0 <UART_SetConfig+0x2a4>)
 8007b76:	e003      	b.n	8007b80 <UART_SetConfig+0x234>
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b78:	f7fe faac 	bl	80060d4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8007b7c:	2800      	cmp	r0, #0
 8007b7e:	d047      	beq.n	8007c10 <UART_SetConfig+0x2c4>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b80:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007b82:	4b19      	ldr	r3, [pc, #100]	; (8007be8 <UART_SetConfig+0x29c>)
 8007b84:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8007b88:	fbb0 f0f3 	udiv	r0, r0, r3
 8007b8c:	6863      	ldr	r3, [r4, #4]
 8007b8e:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8007b92:	fbb0 f0f3 	udiv	r0, r0, r3
 8007b96:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b98:	f1a0 0210 	sub.w	r2, r0, #16
 8007b9c:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8007ba0:	429a      	cmp	r2, r3
 8007ba2:	d837      	bhi.n	8007c14 <UART_SetConfig+0x2c8>
        huart->Instance->BRR = usartdiv;
 8007ba4:	6823      	ldr	r3, [r4, #0]
 8007ba6:	60d8      	str	r0, [r3, #12]
 8007ba8:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
 8007baa:	2301      	movs	r3, #1
 8007bac:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007bb0:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	6723      	str	r3, [r4, #112]	; 0x70
  huart->TxISR = NULL;
 8007bb8:	6763      	str	r3, [r4, #116]	; 0x74
}
 8007bba:	bd70      	pop	{r4, r5, r6, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 8007bbc:	f7fe fa9a 	bl	80060f4 <HAL_RCC_GetPCLK2Freq>
        break;
 8007bc0:	e7dc      	b.n	8007b7c <UART_SetConfig+0x230>
        pclk = HAL_RCC_GetSysClockFreq();
 8007bc2:	f7fd fda1 	bl	8005708 <HAL_RCC_GetSysClockFreq>
        break;
 8007bc6:	e7d9      	b.n	8007b7c <UART_SetConfig+0x230>
        pclk = (uint32_t) LSE_VALUE;
 8007bc8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007bcc:	e7d8      	b.n	8007b80 <UART_SetConfig+0x234>
    switch (clocksource)
 8007bce:	2001      	movs	r0, #1
 8007bd0:	e7eb      	b.n	8007baa <UART_SetConfig+0x25e>
 8007bd2:	2000      	movs	r0, #0
 8007bd4:	e7e9      	b.n	8007baa <UART_SetConfig+0x25e>
 8007bd6:	bf00      	nop
 8007bd8:	cfff69f3 	.word	0xcfff69f3
 8007bdc:	40008000 	.word	0x40008000
 8007be0:	40013800 	.word	0x40013800
 8007be4:	40004400 	.word	0x40004400
 8007be8:	0801740c 	.word	0x0801740c
 8007bec:	000ffcff 	.word	0x000ffcff
 8007bf0:	00f42400 	.word	0x00f42400
        ret = HAL_ERROR;
 8007bf4:	2001      	movs	r0, #1
 8007bf6:	e7d8      	b.n	8007baa <UART_SetConfig+0x25e>
 8007bf8:	2001      	movs	r0, #1
 8007bfa:	e7d6      	b.n	8007baa <UART_SetConfig+0x25e>
          ret = HAL_ERROR;
 8007bfc:	2001      	movs	r0, #1
 8007bfe:	e7d4      	b.n	8007baa <UART_SetConfig+0x25e>
    switch (clocksource)
 8007c00:	2001      	movs	r0, #1
 8007c02:	e7d2      	b.n	8007baa <UART_SetConfig+0x25e>
 8007c04:	2000      	movs	r0, #0
 8007c06:	e7d0      	b.n	8007baa <UART_SetConfig+0x25e>
        ret = HAL_ERROR;
 8007c08:	2001      	movs	r0, #1
 8007c0a:	e7ce      	b.n	8007baa <UART_SetConfig+0x25e>
    switch (clocksource)
 8007c0c:	2001      	movs	r0, #1
 8007c0e:	e7cc      	b.n	8007baa <UART_SetConfig+0x25e>
 8007c10:	2000      	movs	r0, #0
 8007c12:	e7ca      	b.n	8007baa <UART_SetConfig+0x25e>
        ret = HAL_ERROR;
 8007c14:	2001      	movs	r0, #1
 8007c16:	e7c8      	b.n	8007baa <UART_SetConfig+0x25e>

08007c18 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007c18:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007c1a:	f013 0f01 	tst.w	r3, #1
 8007c1e:	d006      	beq.n	8007c2e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007c20:	6802      	ldr	r2, [r0, #0]
 8007c22:	6853      	ldr	r3, [r2, #4]
 8007c24:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007c28:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8007c2a:	430b      	orrs	r3, r1
 8007c2c:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007c2e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007c30:	f013 0f02 	tst.w	r3, #2
 8007c34:	d006      	beq.n	8007c44 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007c36:	6802      	ldr	r2, [r0, #0]
 8007c38:	6853      	ldr	r3, [r2, #4]
 8007c3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c3e:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8007c40:	430b      	orrs	r3, r1
 8007c42:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007c44:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007c46:	f013 0f04 	tst.w	r3, #4
 8007c4a:	d006      	beq.n	8007c5a <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007c4c:	6802      	ldr	r2, [r0, #0]
 8007c4e:	6853      	ldr	r3, [r2, #4]
 8007c50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007c54:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8007c56:	430b      	orrs	r3, r1
 8007c58:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007c5a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007c5c:	f013 0f08 	tst.w	r3, #8
 8007c60:	d006      	beq.n	8007c70 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007c62:	6802      	ldr	r2, [r0, #0]
 8007c64:	6853      	ldr	r3, [r2, #4]
 8007c66:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007c6a:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8007c6c:	430b      	orrs	r3, r1
 8007c6e:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007c70:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007c72:	f013 0f10 	tst.w	r3, #16
 8007c76:	d006      	beq.n	8007c86 <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007c78:	6802      	ldr	r2, [r0, #0]
 8007c7a:	6893      	ldr	r3, [r2, #8]
 8007c7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c80:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8007c82:	430b      	orrs	r3, r1
 8007c84:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007c86:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007c88:	f013 0f20 	tst.w	r3, #32
 8007c8c:	d006      	beq.n	8007c9c <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007c8e:	6802      	ldr	r2, [r0, #0]
 8007c90:	6893      	ldr	r3, [r2, #8]
 8007c92:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007c96:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8007c98:	430b      	orrs	r3, r1
 8007c9a:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007c9c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007c9e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007ca2:	d00a      	beq.n	8007cba <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007ca4:	6802      	ldr	r2, [r0, #0]
 8007ca6:	6853      	ldr	r3, [r2, #4]
 8007ca8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007cac:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8007cae:	430b      	orrs	r3, r1
 8007cb0:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007cb2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8007cb4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007cb8:	d00b      	beq.n	8007cd2 <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007cba:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007cbc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007cc0:	d006      	beq.n	8007cd0 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007cc2:	6802      	ldr	r2, [r0, #0]
 8007cc4:	6853      	ldr	r3, [r2, #4]
 8007cc6:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8007cca:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8007ccc:	430b      	orrs	r3, r1
 8007cce:	6053      	str	r3, [r2, #4]
}
 8007cd0:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007cd2:	6802      	ldr	r2, [r0, #0]
 8007cd4:	6853      	ldr	r3, [r2, #4]
 8007cd6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8007cda:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8007cdc:	430b      	orrs	r3, r1
 8007cde:	6053      	str	r3, [r2, #4]
 8007ce0:	e7eb      	b.n	8007cba <UART_AdvFeatureConfig+0xa2>

08007ce2 <UART_WaitOnFlagUntilTimeout>:
{
 8007ce2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ce6:	4605      	mov	r5, r0
 8007ce8:	460f      	mov	r7, r1
 8007cea:	4616      	mov	r6, r2
 8007cec:	4699      	mov	r9, r3
 8007cee:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007cf2:	682b      	ldr	r3, [r5, #0]
 8007cf4:	69dc      	ldr	r4, [r3, #28]
 8007cf6:	ea37 0404 	bics.w	r4, r7, r4
 8007cfa:	bf0c      	ite	eq
 8007cfc:	2401      	moveq	r4, #1
 8007cfe:	2400      	movne	r4, #0
 8007d00:	42b4      	cmp	r4, r6
 8007d02:	d157      	bne.n	8007db4 <UART_WaitOnFlagUntilTimeout+0xd2>
    if (Timeout != HAL_MAX_DELAY)
 8007d04:	f1b8 3fff 	cmp.w	r8, #4294967295
 8007d08:	d0f3      	beq.n	8007cf2 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d0a:	f7fa f80d 	bl	8001d28 <HAL_GetTick>
 8007d0e:	eba0 0009 	sub.w	r0, r0, r9
 8007d12:	4540      	cmp	r0, r8
 8007d14:	d82f      	bhi.n	8007d76 <UART_WaitOnFlagUntilTimeout+0x94>
 8007d16:	f1b8 0f00 	cmp.w	r8, #0
 8007d1a:	d02c      	beq.n	8007d76 <UART_WaitOnFlagUntilTimeout+0x94>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007d1c:	682b      	ldr	r3, [r5, #0]
 8007d1e:	681a      	ldr	r2, [r3, #0]
 8007d20:	f012 0f04 	tst.w	r2, #4
 8007d24:	d0e5      	beq.n	8007cf2 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007d26:	69da      	ldr	r2, [r3, #28]
 8007d28:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8007d2c:	d0e1      	beq.n	8007cf2 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007d2e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007d32:	621a      	str	r2, [r3, #32]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007d34:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d36:	e852 3f00 	ldrex	r3, [r2]
 8007d3a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d3e:	e842 3100 	strex	r1, r3, [r2]
 8007d42:	2900      	cmp	r1, #0
 8007d44:	d1f6      	bne.n	8007d34 <UART_WaitOnFlagUntilTimeout+0x52>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d46:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d48:	f102 0308 	add.w	r3, r2, #8
 8007d4c:	e853 3f00 	ldrex	r3, [r3]
 8007d50:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d54:	3208      	adds	r2, #8
 8007d56:	e842 3100 	strex	r1, r3, [r2]
 8007d5a:	2900      	cmp	r1, #0
 8007d5c:	d1f3      	bne.n	8007d46 <UART_WaitOnFlagUntilTimeout+0x64>
          huart->gState = HAL_UART_STATE_READY;
 8007d5e:	2320      	movs	r3, #32
 8007d60:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007d64:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007d68:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
          __HAL_UNLOCK(huart);
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
          return HAL_TIMEOUT;
 8007d72:	2003      	movs	r0, #3
 8007d74:	e01f      	b.n	8007db6 <UART_WaitOnFlagUntilTimeout+0xd4>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007d76:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d78:	e852 3f00 	ldrex	r3, [r2]
 8007d7c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d80:	e842 3100 	strex	r1, r3, [r2]
 8007d84:	2900      	cmp	r1, #0
 8007d86:	d1f6      	bne.n	8007d76 <UART_WaitOnFlagUntilTimeout+0x94>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d88:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d8a:	f102 0308 	add.w	r3, r2, #8
 8007d8e:	e853 3f00 	ldrex	r3, [r3]
 8007d92:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d96:	3208      	adds	r2, #8
 8007d98:	e842 3100 	strex	r1, r3, [r2]
 8007d9c:	2900      	cmp	r1, #0
 8007d9e:	d1f3      	bne.n	8007d88 <UART_WaitOnFlagUntilTimeout+0xa6>
        huart->gState = HAL_UART_STATE_READY;
 8007da0:	2320      	movs	r3, #32
 8007da2:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007da6:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
        __HAL_UNLOCK(huart);
 8007daa:	2300      	movs	r3, #0
 8007dac:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
        return HAL_TIMEOUT;
 8007db0:	2003      	movs	r0, #3
 8007db2:	e000      	b.n	8007db6 <UART_WaitOnFlagUntilTimeout+0xd4>
  return HAL_OK;
 8007db4:	2000      	movs	r0, #0
}
 8007db6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08007dba <UART_CheckIdleState>:
{
 8007dba:	b530      	push	{r4, r5, lr}
 8007dbc:	b083      	sub	sp, #12
 8007dbe:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  tickstart = HAL_GetTick();
 8007dc6:	f7f9 ffaf 	bl	8001d28 <HAL_GetTick>
 8007dca:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007dcc:	6822      	ldr	r2, [r4, #0]
 8007dce:	6812      	ldr	r2, [r2, #0]
 8007dd0:	f012 0f08 	tst.w	r2, #8
 8007dd4:	d10f      	bne.n	8007df6 <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007dd6:	6823      	ldr	r3, [r4, #0]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f013 0f04 	tst.w	r3, #4
 8007dde:	d118      	bne.n	8007e12 <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 8007de0:	2320      	movs	r3, #32
 8007de2:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007de6:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007dea:	2000      	movs	r0, #0
 8007dec:	66e0      	str	r0, [r4, #108]	; 0x6c
  __HAL_UNLOCK(huart);
 8007dee:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8007df2:	b003      	add	sp, #12
 8007df4:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007df6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007dfa:	9300      	str	r3, [sp, #0]
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	2200      	movs	r2, #0
 8007e00:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007e04:	4620      	mov	r0, r4
 8007e06:	f7ff ff6c 	bl	8007ce2 <UART_WaitOnFlagUntilTimeout>
 8007e0a:	2800      	cmp	r0, #0
 8007e0c:	d0e3      	beq.n	8007dd6 <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 8007e0e:	2003      	movs	r0, #3
 8007e10:	e7ef      	b.n	8007df2 <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e12:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007e16:	9300      	str	r3, [sp, #0]
 8007e18:	462b      	mov	r3, r5
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007e20:	4620      	mov	r0, r4
 8007e22:	f7ff ff5e 	bl	8007ce2 <UART_WaitOnFlagUntilTimeout>
 8007e26:	2800      	cmp	r0, #0
 8007e28:	d0da      	beq.n	8007de0 <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 8007e2a:	2003      	movs	r0, #3
 8007e2c:	e7e1      	b.n	8007df2 <UART_CheckIdleState+0x38>

08007e2e <HAL_UART_Init>:
  if (huart == NULL)
 8007e2e:	b378      	cbz	r0, 8007e90 <HAL_UART_Init+0x62>
{
 8007e30:	b510      	push	{r4, lr}
 8007e32:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8007e34:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8007e38:	b30b      	cbz	r3, 8007e7e <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8007e3a:	2324      	movs	r3, #36	; 0x24
 8007e3c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 8007e40:	6822      	ldr	r2, [r4, #0]
 8007e42:	6813      	ldr	r3, [r2, #0]
 8007e44:	f023 0301 	bic.w	r3, r3, #1
 8007e48:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007e4a:	4620      	mov	r0, r4
 8007e4c:	f7ff fd7e 	bl	800794c <UART_SetConfig>
 8007e50:	2801      	cmp	r0, #1
 8007e52:	d013      	beq.n	8007e7c <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007e54:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007e56:	b9bb      	cbnz	r3, 8007e88 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007e58:	6822      	ldr	r2, [r4, #0]
 8007e5a:	6853      	ldr	r3, [r2, #4]
 8007e5c:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8007e60:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007e62:	6822      	ldr	r2, [r4, #0]
 8007e64:	6893      	ldr	r3, [r2, #8]
 8007e66:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8007e6a:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8007e6c:	6822      	ldr	r2, [r4, #0]
 8007e6e:	6813      	ldr	r3, [r2, #0]
 8007e70:	f043 0301 	orr.w	r3, r3, #1
 8007e74:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8007e76:	4620      	mov	r0, r4
 8007e78:	f7ff ff9f 	bl	8007dba <UART_CheckIdleState>
}
 8007e7c:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8007e7e:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 8007e82:	f7fa f92f 	bl	80020e4 <HAL_UART_MspInit>
 8007e86:	e7d8      	b.n	8007e3a <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8007e88:	4620      	mov	r0, r4
 8007e8a:	f7ff fec5 	bl	8007c18 <UART_AdvFeatureConfig>
 8007e8e:	e7e3      	b.n	8007e58 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 8007e90:	2001      	movs	r0, #1
}
 8007e92:	4770      	bx	lr

08007e94 <UART_Start_Receive_IT>:
{
 8007e94:	b410      	push	{r4}
  huart->pRxBuffPtr  = pData;
 8007e96:	6581      	str	r1, [r0, #88]	; 0x58
  huart->RxXferSize  = Size;
 8007e98:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
  huart->RxXferCount = Size;
 8007e9c:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
  huart->RxISR       = NULL;
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	6703      	str	r3, [r0, #112]	; 0x70
  UART_MASK_COMPUTATION(huart);
 8007ea4:	6883      	ldr	r3, [r0, #8]
 8007ea6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007eaa:	d006      	beq.n	8007eba <UART_Start_Receive_IT+0x26>
 8007eac:	b9a3      	cbnz	r3, 8007ed8 <UART_Start_Receive_IT+0x44>
 8007eae:	6903      	ldr	r3, [r0, #16]
 8007eb0:	b973      	cbnz	r3, 8007ed0 <UART_Start_Receive_IT+0x3c>
 8007eb2:	23ff      	movs	r3, #255	; 0xff
 8007eb4:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8007eb8:	e014      	b.n	8007ee4 <UART_Start_Receive_IT+0x50>
 8007eba:	6903      	ldr	r3, [r0, #16]
 8007ebc:	b923      	cbnz	r3, 8007ec8 <UART_Start_Receive_IT+0x34>
 8007ebe:	f240 13ff 	movw	r3, #511	; 0x1ff
 8007ec2:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8007ec6:	e00d      	b.n	8007ee4 <UART_Start_Receive_IT+0x50>
 8007ec8:	23ff      	movs	r3, #255	; 0xff
 8007eca:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8007ece:	e009      	b.n	8007ee4 <UART_Start_Receive_IT+0x50>
 8007ed0:	237f      	movs	r3, #127	; 0x7f
 8007ed2:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8007ed6:	e005      	b.n	8007ee4 <UART_Start_Receive_IT+0x50>
 8007ed8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007edc:	d02d      	beq.n	8007f3a <UART_Start_Receive_IT+0xa6>
 8007ede:	2300      	movs	r3, #0
 8007ee0:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007eea:	2322      	movs	r3, #34	; 0x22
 8007eec:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ef0:	6801      	ldr	r1, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ef2:	f101 0308 	add.w	r3, r1, #8
 8007ef6:	e853 3f00 	ldrex	r3, [r3]
 8007efa:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007efe:	3108      	adds	r1, #8
 8007f00:	e841 3400 	strex	r4, r3, [r1]
 8007f04:	2c00      	cmp	r4, #0
 8007f06:	d1f3      	bne.n	8007ef0 <UART_Start_Receive_IT+0x5c>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007f08:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8007f0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f0e:	d01e      	beq.n	8007f4e <UART_Start_Receive_IT+0xba>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f10:	6883      	ldr	r3, [r0, #8]
 8007f12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f16:	d043      	beq.n	8007fa0 <UART_Start_Receive_IT+0x10c>
      huart->RxISR = UART_RxISR_8BIT;
 8007f18:	4b24      	ldr	r3, [pc, #144]	; (8007fac <UART_Start_Receive_IT+0x118>)
 8007f1a:	6703      	str	r3, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007f22:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f24:	e852 3f00 	ldrex	r3, [r2]
 8007f28:	f443 7390 	orr.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f2c:	e842 3100 	strex	r1, r3, [r2]
 8007f30:	2900      	cmp	r1, #0
 8007f32:	d1f6      	bne.n	8007f22 <UART_Start_Receive_IT+0x8e>
}
 8007f34:	2000      	movs	r0, #0
 8007f36:	bc10      	pop	{r4}
 8007f38:	4770      	bx	lr
  UART_MASK_COMPUTATION(huart);
 8007f3a:	6903      	ldr	r3, [r0, #16]
 8007f3c:	b91b      	cbnz	r3, 8007f46 <UART_Start_Receive_IT+0xb2>
 8007f3e:	237f      	movs	r3, #127	; 0x7f
 8007f40:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8007f44:	e7ce      	b.n	8007ee4 <UART_Start_Receive_IT+0x50>
 8007f46:	233f      	movs	r3, #63	; 0x3f
 8007f48:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8007f4c:	e7ca      	b.n	8007ee4 <UART_Start_Receive_IT+0x50>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007f4e:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d8dc      	bhi.n	8007f10 <UART_Start_Receive_IT+0x7c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f56:	6883      	ldr	r3, [r0, #8]
 8007f58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f5c:	d01a      	beq.n	8007f94 <UART_Start_Receive_IT+0x100>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007f5e:	4b14      	ldr	r3, [pc, #80]	; (8007fb0 <UART_Start_Receive_IT+0x11c>)
 8007f60:	6703      	str	r3, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 8007f62:	2300      	movs	r3, #0
 8007f64:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007f68:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f6a:	e852 3f00 	ldrex	r3, [r2]
 8007f6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f72:	e842 3100 	strex	r1, r3, [r2]
 8007f76:	2900      	cmp	r1, #0
 8007f78:	d1f6      	bne.n	8007f68 <UART_Start_Receive_IT+0xd4>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007f7a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f7c:	f102 0308 	add.w	r3, r2, #8
 8007f80:	e853 3f00 	ldrex	r3, [r3]
 8007f84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f88:	3208      	adds	r2, #8
 8007f8a:	e842 3100 	strex	r1, r3, [r2]
 8007f8e:	2900      	cmp	r1, #0
 8007f90:	d1f3      	bne.n	8007f7a <UART_Start_Receive_IT+0xe6>
 8007f92:	e7cf      	b.n	8007f34 <UART_Start_Receive_IT+0xa0>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f94:	6903      	ldr	r3, [r0, #16]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d1e1      	bne.n	8007f5e <UART_Start_Receive_IT+0xca>
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007f9a:	4b06      	ldr	r3, [pc, #24]	; (8007fb4 <UART_Start_Receive_IT+0x120>)
 8007f9c:	6703      	str	r3, [r0, #112]	; 0x70
 8007f9e:	e7e0      	b.n	8007f62 <UART_Start_Receive_IT+0xce>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007fa0:	6903      	ldr	r3, [r0, #16]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d1b8      	bne.n	8007f18 <UART_Start_Receive_IT+0x84>
      huart->RxISR = UART_RxISR_16BIT;
 8007fa6:	4b04      	ldr	r3, [pc, #16]	; (8007fb8 <UART_Start_Receive_IT+0x124>)
 8007fa8:	6703      	str	r3, [r0, #112]	; 0x70
 8007faa:	e7b7      	b.n	8007f1c <UART_Start_Receive_IT+0x88>
 8007fac:	080074a9 	.word	0x080074a9
 8007fb0:	0800760d 	.word	0x0800760d
 8007fb4:	080077ad 	.word	0x080077ad
 8007fb8:	0800755b 	.word	0x0800755b

08007fbc <HAL_UART_Receive_IT>:
{
 8007fbc:	b538      	push	{r3, r4, r5, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8007fbe:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8007fc2:	2b20      	cmp	r3, #32
 8007fc4:	d11e      	bne.n	8008004 <HAL_UART_Receive_IT+0x48>
    if ((pData == NULL) || (Size == 0U))
 8007fc6:	b1f9      	cbz	r1, 8008008 <HAL_UART_Receive_IT+0x4c>
 8007fc8:	b302      	cbz	r2, 800800c <HAL_UART_Receive_IT+0x50>
    __HAL_LOCK(huart);
 8007fca:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8007fce:	2b01      	cmp	r3, #1
 8007fd0:	d01e      	beq.n	8008010 <HAL_UART_Receive_IT+0x54>
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fd8:	2300      	movs	r3, #0
 8007fda:	66c3      	str	r3, [r0, #108]	; 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007fdc:	6803      	ldr	r3, [r0, #0]
 8007fde:	4c0d      	ldr	r4, [pc, #52]	; (8008014 <HAL_UART_Receive_IT+0x58>)
 8007fe0:	42a3      	cmp	r3, r4
 8007fe2:	d00c      	beq.n	8007ffe <HAL_UART_Receive_IT+0x42>
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007fe4:	685b      	ldr	r3, [r3, #4]
 8007fe6:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8007fea:	d008      	beq.n	8007ffe <HAL_UART_Receive_IT+0x42>
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007fec:	6804      	ldr	r4, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fee:	e854 3f00 	ldrex	r3, [r4]
 8007ff2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ff6:	e844 3500 	strex	r5, r3, [r4]
 8007ffa:	2d00      	cmp	r5, #0
 8007ffc:	d1f6      	bne.n	8007fec <HAL_UART_Receive_IT+0x30>
    return(UART_Start_Receive_IT(huart, pData, Size));
 8007ffe:	f7ff ff49 	bl	8007e94 <UART_Start_Receive_IT>
 8008002:	e000      	b.n	8008006 <HAL_UART_Receive_IT+0x4a>
    return HAL_BUSY;
 8008004:	2002      	movs	r0, #2
}
 8008006:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8008008:	2001      	movs	r0, #1
 800800a:	e7fc      	b.n	8008006 <HAL_UART_Receive_IT+0x4a>
 800800c:	2001      	movs	r0, #1
 800800e:	e7fa      	b.n	8008006 <HAL_UART_Receive_IT+0x4a>
    __HAL_LOCK(huart);
 8008010:	2002      	movs	r0, #2
 8008012:	e7f8      	b.n	8008006 <HAL_UART_Receive_IT+0x4a>
 8008014:	40008000 	.word	0x40008000

08008018 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8008018:	b082      	sub	sp, #8
 800801a:	ab02      	add	r3, sp, #8
 800801c:	e903 0006 	stmdb	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8008020:	6802      	ldr	r2, [r0, #0]
 8008022:	6853      	ldr	r3, [r2, #4]
 8008024:	f023 0310 	bic.w	r3, r3, #16
 8008028:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 800802c:	430b      	orrs	r3, r1
 800802e:	6053      	str	r3, [r2, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8008030:	6802      	ldr	r2, [r0, #0]
 8008032:	6853      	ldr	r3, [r2, #4]
 8008034:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008038:	f89d 1006 	ldrb.w	r1, [sp, #6]
 800803c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8008040:	6053      	str	r3, [r2, #4]
}
 8008042:	b002      	add	sp, #8
 8008044:	4770      	bx	lr
	...

08008048 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008048:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800804a:	b92b      	cbnz	r3, 8008058 <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 800804c:	2301      	movs	r3, #1
 800804e:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008052:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
 8008056:	4770      	bx	lr
{
 8008058:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800805a:	6803      	ldr	r3, [r0, #0]
 800805c:	689a      	ldr	r2, [r3, #8]
 800805e:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008062:	6899      	ldr	r1, [r3, #8]
 8008064:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008066:	4d09      	ldr	r5, [pc, #36]	; (800808c <UARTEx_SetNbDataToProcess+0x44>)
 8008068:	5c6b      	ldrb	r3, [r5, r1]
 800806a:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 800806c:	4c08      	ldr	r4, [pc, #32]	; (8008090 <UARTEx_SetNbDataToProcess+0x48>)
 800806e:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008070:	fb93 f3f1 	sdiv	r3, r3, r1
 8008074:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008078:	5cab      	ldrb	r3, [r5, r2]
 800807a:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 800807c:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800807e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008082:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  }
}
 8008086:	bc30      	pop	{r4, r5}
 8008088:	4770      	bx	lr
 800808a:	bf00      	nop
 800808c:	0801742c 	.word	0x0801742c
 8008090:	08017424 	.word	0x08017424

08008094 <HAL_UARTEx_WakeupCallback>:
}
 8008094:	4770      	bx	lr

08008096 <HAL_UARTEx_RxFifoFullCallback>:
}
 8008096:	4770      	bx	lr

08008098 <HAL_UARTEx_TxFifoEmptyCallback>:
}
 8008098:	4770      	bx	lr

0800809a <HAL_UARTEx_StopModeWakeUpSourceConfig>:
{
 800809a:	b510      	push	{r4, lr}
 800809c:	b084      	sub	sp, #16
 800809e:	ab04      	add	r3, sp, #16
 80080a0:	e903 0006 	stmdb	r3, {r1, r2}
  __HAL_LOCK(huart);
 80080a4:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 80080a8:	2b01      	cmp	r3, #1
 80080aa:	d035      	beq.n	8008118 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7e>
 80080ac:	4604      	mov	r4, r0
 80080ae:	2301      	movs	r3, #1
 80080b0:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 80080b4:	2324      	movs	r3, #36	; 0x24
 80080b6:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 80080ba:	6802      	ldr	r2, [r0, #0]
 80080bc:	6813      	ldr	r3, [r2, #0]
 80080be:	f023 0301 	bic.w	r3, r3, #1
 80080c2:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 80080c4:	6801      	ldr	r1, [r0, #0]
 80080c6:	688b      	ldr	r3, [r1, #8]
 80080c8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80080cc:	9a02      	ldr	r2, [sp, #8]
 80080ce:	4313      	orrs	r3, r2
 80080d0:	608b      	str	r3, [r1, #8]
  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 80080d2:	b1aa      	cbz	r2, 8008100 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  __HAL_UART_ENABLE(huart);
 80080d4:	6822      	ldr	r2, [r4, #0]
 80080d6:	6813      	ldr	r3, [r2, #0]
 80080d8:	f043 0301 	orr.w	r3, r3, #1
 80080dc:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 80080de:	f7f9 fe23 	bl	8001d28 <HAL_GetTick>
 80080e2:	4603      	mov	r3, r0
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80080e4:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 80080e8:	9200      	str	r2, [sp, #0]
 80080ea:	2200      	movs	r2, #0
 80080ec:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80080f0:	4620      	mov	r0, r4
 80080f2:	f7ff fdf6 	bl	8007ce2 <UART_WaitOnFlagUntilTimeout>
 80080f6:	b948      	cbnz	r0, 800810c <HAL_UARTEx_StopModeWakeUpSourceConfig+0x72>
    huart->gState = HAL_UART_STATE_READY;
 80080f8:	2320      	movs	r3, #32
 80080fa:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 80080fe:	e006      	b.n	800810e <HAL_UARTEx_StopModeWakeUpSourceConfig+0x74>
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 8008100:	ab04      	add	r3, sp, #16
 8008102:	e913 0006 	ldmdb	r3, {r1, r2}
 8008106:	f7ff ff87 	bl	8008018 <UARTEx_Wakeup_AddressConfig>
 800810a:	e7e3      	b.n	80080d4 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x3a>
    status = HAL_TIMEOUT;
 800810c:	2003      	movs	r0, #3
  __HAL_UNLOCK(huart);
 800810e:	2300      	movs	r3, #0
 8008110:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 8008114:	b004      	add	sp, #16
 8008116:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 8008118:	2002      	movs	r0, #2
 800811a:	e7fb      	b.n	8008114 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7a>

0800811c <HAL_UARTEx_EnableStopMode>:
  __HAL_LOCK(huart);
 800811c:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8008120:	2b01      	cmp	r3, #1
 8008122:	d010      	beq.n	8008146 <HAL_UARTEx_EnableStopMode+0x2a>
 8008124:	2301      	movs	r3, #1
 8008126:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800812a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800812c:	e852 3f00 	ldrex	r3, [r2]
 8008130:	f043 0302 	orr.w	r3, r3, #2
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008134:	e842 3100 	strex	r1, r3, [r2]
 8008138:	2900      	cmp	r1, #0
 800813a:	d1f6      	bne.n	800812a <HAL_UARTEx_EnableStopMode+0xe>
  __HAL_UNLOCK(huart);
 800813c:	2300      	movs	r3, #0
 800813e:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  return HAL_OK;
 8008142:	4618      	mov	r0, r3
 8008144:	4770      	bx	lr
  __HAL_LOCK(huart);
 8008146:	2002      	movs	r0, #2
}
 8008148:	4770      	bx	lr

0800814a <HAL_UARTEx_EnableFifoMode>:
  __HAL_LOCK(huart);
 800814a:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800814e:	2b01      	cmp	r3, #1
 8008150:	d01d      	beq.n	800818e <HAL_UARTEx_EnableFifoMode+0x44>
{
 8008152:	b510      	push	{r4, lr}
 8008154:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8008156:	2301      	movs	r3, #1
 8008158:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 800815c:	2324      	movs	r3, #36	; 0x24
 800815e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008162:	6802      	ldr	r2, [r0, #0]
 8008164:	6813      	ldr	r3, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8008166:	6811      	ldr	r1, [r2, #0]
 8008168:	f021 0101 	bic.w	r1, r1, #1
 800816c:	6011      	str	r1, [r2, #0]
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800816e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8008172:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8008176:	6642      	str	r2, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008178:	6802      	ldr	r2, [r0, #0]
 800817a:	6013      	str	r3, [r2, #0]
  UARTEx_SetNbDataToProcess(huart);
 800817c:	f7ff ff64 	bl	8008048 <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 8008180:	2320      	movs	r3, #32
 8008182:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8008186:	2000      	movs	r0, #0
 8008188:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 800818c:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 800818e:	2002      	movs	r0, #2
}
 8008190:	4770      	bx	lr

08008192 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8008192:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8008194:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8008198:	2b01      	cmp	r3, #1
 800819a:	d01d      	beq.n	80081d8 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 800819c:	4604      	mov	r4, r0
 800819e:	2301      	movs	r3, #1
 80081a0:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 80081a4:	2324      	movs	r3, #36	; 0x24
 80081a6:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80081aa:	6803      	ldr	r3, [r0, #0]
 80081ac:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 80081ae:	681a      	ldr	r2, [r3, #0]
 80081b0:	f022 0201 	bic.w	r2, r2, #1
 80081b4:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80081b6:	6802      	ldr	r2, [r0, #0]
 80081b8:	6893      	ldr	r3, [r2, #8]
 80081ba:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 80081be:	4319      	orrs	r1, r3
 80081c0:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 80081c2:	f7ff ff41 	bl	8008048 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80081c6:	6823      	ldr	r3, [r4, #0]
 80081c8:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80081ca:	2320      	movs	r3, #32
 80081cc:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 80081d0:	2000      	movs	r0, #0
 80081d2:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 80081d6:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 80081d8:	2002      	movs	r0, #2
 80081da:	e7fc      	b.n	80081d6 <HAL_UARTEx_SetTxFifoThreshold+0x44>

080081dc <HAL_UARTEx_SetRxFifoThreshold>:
{
 80081dc:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 80081de:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 80081e2:	2b01      	cmp	r3, #1
 80081e4:	d01d      	beq.n	8008222 <HAL_UARTEx_SetRxFifoThreshold+0x46>
 80081e6:	4604      	mov	r4, r0
 80081e8:	2301      	movs	r3, #1
 80081ea:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 80081ee:	2324      	movs	r3, #36	; 0x24
 80081f0:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80081f4:	6803      	ldr	r3, [r0, #0]
 80081f6:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 80081f8:	681a      	ldr	r2, [r3, #0]
 80081fa:	f022 0201 	bic.w	r2, r2, #1
 80081fe:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008200:	6802      	ldr	r2, [r0, #0]
 8008202:	6893      	ldr	r3, [r2, #8]
 8008204:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 8008208:	4319      	orrs	r1, r3
 800820a:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 800820c:	f7ff ff1c 	bl	8008048 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008210:	6823      	ldr	r3, [r4, #0]
 8008212:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8008214:	2320      	movs	r3, #32
 8008216:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800821a:	2000      	movs	r0, #0
 800821c:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8008220:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8008222:	2002      	movs	r0, #2
 8008224:	e7fc      	b.n	8008220 <HAL_UARTEx_SetRxFifoThreshold+0x44>
	...

08008228 <LmHandlerPackageIsInitialized>:
    }
}

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
    if (( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ))
 8008228:	2804      	cmp	r0, #4
 800822a:	d807      	bhi.n	800823c <LmHandlerPackageIsInitialized+0x14>
{
 800822c:	b508      	push	{r3, lr}
    if (( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ))
 800822e:	4b05      	ldr	r3, [pc, #20]	; (8008244 <LmHandlerPackageIsInitialized+0x1c>)
 8008230:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008234:	689b      	ldr	r3, [r3, #8]
 8008236:	b11b      	cbz	r3, 8008240 <LmHandlerPackageIsInitialized+0x18>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 8008238:	4798      	blx	r3
    }
    else
    {
        return false;
    }
}
 800823a:	bd08      	pop	{r3, pc}
        return false;
 800823c:	2000      	movs	r0, #0
}
 800823e:	4770      	bx	lr
        return false;
 8008240:	2000      	movs	r0, #0
 8008242:	e7fa      	b.n	800823a <LmHandlerPackageIsInitialized+0x12>
 8008244:	200007c4 	.word	0x200007c4

08008248 <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 8008248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800824a:	4605      	mov	r5, r0
 800824c:	460f      	mov	r7, r1
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800824e:	2400      	movs	r4, #0
 8008250:	e018      	b.n	8008284 <LmHandlerPackagesNotify+0x3c>
                    }
                    break;
                }
                case PACKAGE_MCPS_INDICATION:
                {
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 8008252:	69da      	ldr	r2, [r3, #28]
 8008254:	b1a2      	cbz	r2, 8008280 <LmHandlerPackagesNotify+0x38>
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
 8008256:	781a      	ldrb	r2, [r3, #0]
 8008258:	78fb      	ldrb	r3, [r7, #3]
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 800825a:	429a      	cmp	r2, r3
 800825c:	d005      	beq.n	800826a <LmHandlerPackagesNotify+0x22>
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
 800825e:	b97c      	cbnz	r4, 8008280 <LmHandlerPackagesNotify+0x38>
                          ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ))))
 8008260:	4b13      	ldr	r3, [pc, #76]	; (80082b0 <LmHandlerPackagesNotify+0x68>)
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	68db      	ldr	r3, [r3, #12]
 8008266:	4798      	blx	r3
 8008268:	b150      	cbz	r0, 8008280 <LmHandlerPackagesNotify+0x38>
                    {
                        LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t* )params );
 800826a:	4b11      	ldr	r3, [pc, #68]	; (80082b0 <LmHandlerPackagesNotify+0x68>)
 800826c:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 8008270:	69db      	ldr	r3, [r3, #28]
 8008272:	4638      	mov	r0, r7
 8008274:	4798      	blx	r3
 8008276:	e003      	b.n	8008280 <LmHandlerPackagesNotify+0x38>
                    }
                    break;
                }
                case PACKAGE_MLME_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 8008278:	6a1b      	ldr	r3, [r3, #32]
 800827a:	b10b      	cbz	r3, 8008280 <LmHandlerPackagesNotify+0x38>
                    {
                        LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t* )params );
 800827c:	4638      	mov	r0, r7
 800827e:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8008280:	3401      	adds	r4, #1
 8008282:	b264      	sxtb	r4, r4
 8008284:	2c04      	cmp	r4, #4
 8008286:	dc11      	bgt.n	80082ac <LmHandlerPackagesNotify+0x64>
        if( LmHandlerPackages[i] != NULL )
 8008288:	4626      	mov	r6, r4
 800828a:	4b09      	ldr	r3, [pc, #36]	; (80082b0 <LmHandlerPackagesNotify+0x68>)
 800828c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d0f5      	beq.n	8008280 <LmHandlerPackagesNotify+0x38>
            switch( notifyType )
 8008294:	2d01      	cmp	r5, #1
 8008296:	d0dc      	beq.n	8008252 <LmHandlerPackagesNotify+0xa>
 8008298:	2d02      	cmp	r5, #2
 800829a:	d0ed      	beq.n	8008278 <LmHandlerPackagesNotify+0x30>
 800829c:	2d00      	cmp	r5, #0
 800829e:	d1ef      	bne.n	8008280 <LmHandlerPackagesNotify+0x38>
                    if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 80082a0:	699b      	ldr	r3, [r3, #24]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d0ec      	beq.n	8008280 <LmHandlerPackagesNotify+0x38>
                        LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t* ) params );
 80082a6:	4638      	mov	r0, r7
 80082a8:	4798      	blx	r3
 80082aa:	e7e9      	b.n	8008280 <LmHandlerPackagesNotify+0x38>
                    break;
                }
            }
        }
    }
}
 80082ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082ae:	bf00      	nop
 80082b0:	200007c4 	.word	0x200007c4

080082b4 <McpsConfirm>:
{
 80082b4:	b510      	push	{r4, lr}
 80082b6:	4604      	mov	r4, r0
    TxParams.IsMcpsConfirm = 1;
 80082b8:	480c      	ldr	r0, [pc, #48]	; (80082ec <McpsConfirm+0x38>)
 80082ba:	2301      	movs	r3, #1
 80082bc:	7003      	strb	r3, [r0, #0]
    TxParams.Status = mcpsConfirm->Status;
 80082be:	7863      	ldrb	r3, [r4, #1]
 80082c0:	7043      	strb	r3, [r0, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 80082c2:	f994 3002 	ldrsb.w	r3, [r4, #2]
 80082c6:	7103      	strb	r3, [r0, #4]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 80082c8:	68e3      	ldr	r3, [r4, #12]
 80082ca:	6083      	str	r3, [r0, #8]
    TxParams.TxPower = mcpsConfirm->TxPower;
 80082cc:	f994 3003 	ldrsb.w	r3, [r4, #3]
 80082d0:	7503      	strb	r3, [r0, #20]
    TxParams.Channel = mcpsConfirm->Channel;
 80082d2:	6923      	ldr	r3, [r4, #16]
 80082d4:	7543      	strb	r3, [r0, #21]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 80082d6:	7923      	ldrb	r3, [r4, #4]
 80082d8:	70c3      	strb	r3, [r0, #3]
    LmHandlerCallbacks->OnTxData( &TxParams );
 80082da:	4b05      	ldr	r3, [pc, #20]	; (80082f0 <McpsConfirm+0x3c>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	6a1b      	ldr	r3, [r3, #32]
 80082e0:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 80082e2:	4621      	mov	r1, r4
 80082e4:	2000      	movs	r0, #0
 80082e6:	f7ff ffaf 	bl	8008248 <LmHandlerPackagesNotify>
}
 80082ea:	bd10      	pop	{r4, pc}
 80082ec:	2000080c 	.word	0x2000080c
 80082f0:	200007c0 	.word	0x200007c0

080082f4 <LmHandlerPackagesProcess>:

static void LmHandlerPackagesProcess( void )
{
 80082f4:	b538      	push	{r3, r4, r5, lr}
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 80082f6:	2400      	movs	r4, #0
 80082f8:	e001      	b.n	80082fe <LmHandlerPackagesProcess+0xa>
 80082fa:	3401      	adds	r4, #1
 80082fc:	b264      	sxtb	r4, r4
 80082fe:	2c04      	cmp	r4, #4
 8008300:	dc12      	bgt.n	8008328 <LmHandlerPackagesProcess+0x34>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 8008302:	4b0a      	ldr	r3, [pc, #40]	; (800832c <LmHandlerPackagesProcess+0x38>)
 8008304:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d0f6      	beq.n	80082fa <LmHandlerPackagesProcess+0x6>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800830c:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 800830e:	2b00      	cmp	r3, #0
 8008310:	d0f3      	beq.n	80082fa <LmHandlerPackagesProcess+0x6>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 8008312:	b2e0      	uxtb	r0, r4
 8008314:	f7ff ff88 	bl	8008228 <LmHandlerPackageIsInitialized>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 8008318:	2800      	cmp	r0, #0
 800831a:	d0ee      	beq.n	80082fa <LmHandlerPackagesProcess+0x6>
        {
            LmHandlerPackages[i]->Process( );
 800831c:	4b03      	ldr	r3, [pc, #12]	; (800832c <LmHandlerPackagesProcess+0x38>)
 800831e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008322:	691b      	ldr	r3, [r3, #16]
 8008324:	4798      	blx	r3
 8008326:	e7e8      	b.n	80082fa <LmHandlerPackagesProcess+0x6>
        }
    }
}
 8008328:	bd38      	pop	{r3, r4, r5, pc}
 800832a:	bf00      	nop
 800832c:	200007c4 	.word	0x200007c4

08008330 <DisplayClassUpdate>:
        return LORAMAC_HANDLER_ERROR;
    }
}

static void DisplayClassUpdate(DeviceClass_t deviceClass)
{
 8008330:	b500      	push	{lr}
 8008332:	b083      	sub	sp, #12
    MW_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 8008334:	4b05      	ldr	r3, [pc, #20]	; (800834c <DisplayClassUpdate+0x1c>)
 8008336:	5c1b      	ldrb	r3, [r3, r0]
 8008338:	9300      	str	r3, [sp, #0]
 800833a:	4b05      	ldr	r3, [pc, #20]	; (8008350 <DisplayClassUpdate+0x20>)
 800833c:	2200      	movs	r2, #0
 800833e:	4611      	mov	r1, r2
 8008340:	2002      	movs	r0, #2
 8008342:	f009 fa63 	bl	801180c <UTIL_ADV_TRACE_COND_FSend>
}
 8008346:	b003      	add	sp, #12
 8008348:	f85d fb04 	ldr.w	pc, [sp], #4
 800834c:	08017450 	.word	0x08017450
 8008350:	08017434 	.word	0x08017434

08008354 <LmHandlerSetSystemMaxRxError>:
{
 8008354:	b500      	push	{lr}
 8008356:	b08b      	sub	sp, #44	; 0x2c
    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 8008358:	2322      	movs	r3, #34	; 0x22
 800835a:	f88d 3004 	strb.w	r3, [sp, #4]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800835e:	9002      	str	r0, [sp, #8]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8008360:	a801      	add	r0, sp, #4
 8008362:	f003 fa91 	bl	800b888 <LoRaMacMibSetRequestConfirm>
 8008366:	b910      	cbnz	r0, 800836e <LmHandlerSetSystemMaxRxError+0x1a>
}
 8008368:	b00b      	add	sp, #44	; 0x2c
 800836a:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 800836e:	f04f 30ff 	mov.w	r0, #4294967295
 8008372:	e7f9      	b.n	8008368 <LmHandlerSetSystemMaxRxError+0x14>

08008374 <LmHandlerDeviceTimeReq>:
{
 8008374:	b500      	push	{lr}
 8008376:	b087      	sub	sp, #28
    mlmeReq.Type = MLME_DEVICE_TIME;
 8008378:	230a      	movs	r3, #10
 800837a:	f88d 3004 	strb.w	r3, [sp, #4]
    status = LoRaMacMlmeRequest( &mlmeReq );
 800837e:	a801      	add	r0, sp, #4
 8008380:	f003 fcfe 	bl	800bd80 <LoRaMacMlmeRequest>
    if( status == LORAMAC_STATUS_OK )
 8008384:	b910      	cbnz	r0, 800838c <LmHandlerDeviceTimeReq+0x18>
}
 8008386:	b007      	add	sp, #28
 8008388:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 800838c:	f04f 30ff 	mov.w	r0, #4294967295
 8008390:	e7f9      	b.n	8008386 <LmHandlerDeviceTimeReq+0x12>
	...

08008394 <LmHandlerConfigure>:
{
 8008394:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008396:	b095      	sub	sp, #84	; 0x54
 8008398:	4601      	mov	r1, r0
    UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 800839a:	4c63      	ldr	r4, [pc, #396]	; (8008528 <LmHandlerConfigure+0x194>)
 800839c:	2210      	movs	r2, #16
 800839e:	4620      	mov	r0, r4
 80083a0:	f009 fb4a 	bl	8011a38 <UTIL_MEM_cpy_8>
    loraInfo = LoraInfo_GetPtr();
 80083a4:	f7fb f908 	bl	80035b8 <LoraInfo_GetPtr>
    if (0U != ((1 << (LmHandlerParams.ActiveRegion)) & (loraInfo->Region)))
 80083a8:	7822      	ldrb	r2, [r4, #0]
 80083aa:	2301      	movs	r3, #1
 80083ac:	4093      	lsls	r3, r2
 80083ae:	6841      	ldr	r1, [r0, #4]
 80083b0:	420b      	tst	r3, r1
 80083b2:	f000 80ab 	beq.w	800850c <LmHandlerConfigure+0x178>
        if (LoRaMacInitialization(&LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion) != LORAMAC_STATUS_OK)
 80083b6:	495d      	ldr	r1, [pc, #372]	; (800852c <LmHandlerConfigure+0x198>)
 80083b8:	485d      	ldr	r0, [pc, #372]	; (8008530 <LmHandlerConfigure+0x19c>)
 80083ba:	f002 ff01 	bl	800b1c0 <LoRaMacInitialization>
 80083be:	2800      	cmp	r0, #0
 80083c0:	f040 80af 	bne.w	8008522 <LmHandlerConfigure+0x18e>
    nbNvmData = NvmDataMgmtRestore( );
 80083c4:	f004 fed5 	bl	800d172 <NvmDataMgmtRestore>
    if( nbNvmData > 0 )
 80083c8:	2800      	cmp	r0, #0
 80083ca:	f000 80a6 	beq.w	800851a <LmHandlerConfigure+0x186>
        CtxRestoreDone = true;
 80083ce:	4b59      	ldr	r3, [pc, #356]	; (8008534 <LmHandlerConfigure+0x1a0>)
 80083d0:	2201      	movs	r2, #1
 80083d2:	701a      	strb	r2, [r3, #0]
    mibReq.Type = MIB_DEV_EUI;
 80083d4:	2502      	movs	r5, #2
 80083d6:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
    LoRaMacMibGetRequestConfirm( &mibReq );
 80083da:	a80b      	add	r0, sp, #44	; 0x2c
 80083dc:	f003 f938 	bl	800b650 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.DevEui, mibReq.Param.DevEui, 8 );
 80083e0:	4c55      	ldr	r4, [pc, #340]	; (8008538 <LmHandlerConfigure+0x1a4>)
 80083e2:	2208      	movs	r2, #8
 80083e4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80083e6:	4620      	mov	r0, r4
 80083e8:	f007 f87b 	bl	800f4e2 <memcpy1>
    mibReq.Type = MIB_JOIN_EUI;
 80083ec:	2303      	movs	r3, #3
 80083ee:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    LoRaMacMibGetRequestConfirm( &mibReq );
 80083f2:	a80b      	add	r0, sp, #44	; 0x2c
 80083f4:	f003 f92c 	bl	800b650 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.JoinEui, mibReq.Param.JoinEui, 8 );
 80083f8:	2208      	movs	r2, #8
 80083fa:	990c      	ldr	r1, [sp, #48]	; 0x30
 80083fc:	18a0      	adds	r0, r4, r2
 80083fe:	f007 f870 	bl	800f4e2 <memcpy1>
    CommissioningParams.DevAddr = LmHandlerCallbacks->GetDevAddr();
 8008402:	4b4e      	ldr	r3, [pc, #312]	; (800853c <LmHandlerConfigure+0x1a8>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	68db      	ldr	r3, [r3, #12]
 8008408:	4798      	blx	r3
 800840a:	6160      	str	r0, [r4, #20]
    mibReq.Type = MIB_DEV_ADDR;
 800840c:	2306      	movs	r3, #6
 800840e:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    mibReq.Param.DevAddr = CommissioningParams.DevAddr;
 8008412:	900c      	str	r0, [sp, #48]	; 0x30
    LoRaMacMibSetRequestConfirm(&mibReq);
 8008414:	a80b      	add	r0, sp, #44	; 0x2c
 8008416:	f003 fa37 	bl	800b888 <LoRaMacMibSetRequestConfirm>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevEui:  %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800841a:	7823      	ldrb	r3, [r4, #0]
 800841c:	7862      	ldrb	r2, [r4, #1]
 800841e:	78a1      	ldrb	r1, [r4, #2]
 8008420:	78e0      	ldrb	r0, [r4, #3]
 8008422:	7926      	ldrb	r6, [r4, #4]
 8008424:	7967      	ldrb	r7, [r4, #5]
 8008426:	f894 c006 	ldrb.w	ip, [r4, #6]
 800842a:	f894 e007 	ldrb.w	lr, [r4, #7]
 800842e:	f8cd e01c 	str.w	lr, [sp, #28]
 8008432:	f8cd c018 	str.w	ip, [sp, #24]
 8008436:	9705      	str	r7, [sp, #20]
 8008438:	9604      	str	r6, [sp, #16]
 800843a:	9003      	str	r0, [sp, #12]
 800843c:	9102      	str	r1, [sp, #8]
 800843e:	9201      	str	r2, [sp, #4]
 8008440:	9300      	str	r3, [sp, #0]
 8008442:	4b3f      	ldr	r3, [pc, #252]	; (8008540 <LmHandlerConfigure+0x1ac>)
 8008444:	2200      	movs	r2, #0
 8008446:	4611      	mov	r1, r2
 8008448:	4628      	mov	r0, r5
 800844a:	f009 f9df 	bl	801180c <UTIL_ADV_TRACE_COND_FSend>
    MW_LOG(TS_OFF, VLEVEL_M, "###### AppEui:  %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800844e:	7a23      	ldrb	r3, [r4, #8]
 8008450:	7a62      	ldrb	r2, [r4, #9]
 8008452:	7aa1      	ldrb	r1, [r4, #10]
 8008454:	7ae0      	ldrb	r0, [r4, #11]
 8008456:	7b26      	ldrb	r6, [r4, #12]
 8008458:	f894 c00d 	ldrb.w	ip, [r4, #13]
 800845c:	f894 e00e 	ldrb.w	lr, [r4, #14]
 8008460:	7be7      	ldrb	r7, [r4, #15]
 8008462:	9707      	str	r7, [sp, #28]
 8008464:	f8cd e018 	str.w	lr, [sp, #24]
 8008468:	f8cd c014 	str.w	ip, [sp, #20]
 800846c:	9604      	str	r6, [sp, #16]
 800846e:	9003      	str	r0, [sp, #12]
 8008470:	9102      	str	r1, [sp, #8]
 8008472:	9201      	str	r2, [sp, #4]
 8008474:	9300      	str	r3, [sp, #0]
 8008476:	4b33      	ldr	r3, [pc, #204]	; (8008544 <LmHandlerConfigure+0x1b0>)
 8008478:	2200      	movs	r2, #0
 800847a:	4611      	mov	r1, r2
 800847c:	4628      	mov	r0, r5
 800847e:	f009 f9c5 	bl	801180c <UTIL_ADV_TRACE_COND_FSend>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevAddr: %02X:%02X:%02X:%02X\r\n",
 8008482:	7de3      	ldrb	r3, [r4, #23]
 8008484:	7da2      	ldrb	r2, [r4, #22]
 8008486:	7d61      	ldrb	r1, [r4, #21]
 8008488:	7d20      	ldrb	r0, [r4, #20]
 800848a:	9003      	str	r0, [sp, #12]
 800848c:	9102      	str	r1, [sp, #8]
 800848e:	9201      	str	r2, [sp, #4]
 8008490:	9300      	str	r3, [sp, #0]
 8008492:	4b2d      	ldr	r3, [pc, #180]	; (8008548 <LmHandlerConfigure+0x1b4>)
 8008494:	2200      	movs	r2, #0
 8008496:	4611      	mov	r1, r2
 8008498:	4628      	mov	r0, r5
 800849a:	f009 f9b7 	bl	801180c <UTIL_ADV_TRACE_COND_FSend>
    mibReq.Type = MIB_PUBLIC_NETWORK;
 800849e:	260f      	movs	r6, #15
 80084a0:	f88d 602c 	strb.w	r6, [sp, #44]	; 0x2c
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 80084a4:	2301      	movs	r3, #1
 80084a6:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
    LoRaMacMibSetRequestConfirm(&mibReq);
 80084aa:	a80b      	add	r0, sp, #44	; 0x2c
 80084ac:	f003 f9ec 	bl	800b888 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_NET_ID;
 80084b0:	2305      	movs	r3, #5
 80084b2:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 80084b6:	2400      	movs	r4, #0
 80084b8:	940c      	str	r4, [sp, #48]	; 0x30
    LoRaMacMibSetRequestConfirm(&mibReq);
 80084ba:	a80b      	add	r0, sp, #44	; 0x2c
 80084bc:	f003 f9e4 	bl	800b888 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_REPEATER_SUPPORT;
 80084c0:	2310      	movs	r3, #16
 80084c2:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 80084c6:	f88d 4030 	strb.w	r4, [sp, #48]	; 0x30
    LoRaMacMibSetRequestConfirm( &mibReq );
 80084ca:	a80b      	add	r0, sp, #44	; 0x2c
 80084cc:	f003 f9dc 	bl	800b888 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_ADR;
 80084d0:	2304      	movs	r3, #4
 80084d2:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 80084d6:	4d14      	ldr	r5, [pc, #80]	; (8008528 <LmHandlerConfigure+0x194>)
 80084d8:	78ab      	ldrb	r3, [r5, #2]
 80084da:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
    LoRaMacMibSetRequestConfirm( &mibReq );
 80084de:	a80b      	add	r0, sp, #44	; 0x2c
 80084e0:	f003 f9d2 	bl	800b888 <LoRaMacMibSetRequestConfirm>
    getPhy.Attribute = PHY_DUTY_CYCLE;
 80084e4:	f88d 6024 	strb.w	r6, [sp, #36]	; 0x24
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 80084e8:	a909      	add	r1, sp, #36	; 0x24
 80084ea:	7828      	ldrb	r0, [r5, #0]
 80084ec:	f004 fe49 	bl	800d182 <RegionGetPhyParam>
 80084f0:	9008      	str	r0, [sp, #32]
    LmHandlerParams.DutyCycleEnabled = (bool) phyParam.Value;
 80084f2:	1b03      	subs	r3, r0, r4
 80084f4:	bf18      	it	ne
 80084f6:	2301      	movne	r3, #1
 80084f8:	716b      	strb	r3, [r5, #5]
    LmHandlerSetSystemMaxRxError( 20 );
 80084fa:	2014      	movs	r0, #20
 80084fc:	f7ff ff2a 	bl	8008354 <LmHandlerSetSystemMaxRxError>
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 8008500:	7968      	ldrb	r0, [r5, #5]
 8008502:	f003 fdcf 	bl	800c0a4 <LoRaMacTestSetDutyCycleOn>
    return LORAMAC_HANDLER_SUCCESS;
 8008506:	4620      	mov	r0, r4
}
 8008508:	b015      	add	sp, #84	; 0x54
 800850a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        MW_LOG(TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n");
 800850c:	4b0f      	ldr	r3, [pc, #60]	; (800854c <LmHandlerConfigure+0x1b8>)
 800850e:	2201      	movs	r2, #1
 8008510:	2100      	movs	r1, #0
 8008512:	4608      	mov	r0, r1
 8008514:	f009 f97a 	bl	801180c <UTIL_ADV_TRACE_COND_FSend>
        while (1) {}  /* error: Region is not defined in the MW */
 8008518:	e7fe      	b.n	8008518 <LmHandlerConfigure+0x184>
        CtxRestoreDone = false;
 800851a:	4b06      	ldr	r3, [pc, #24]	; (8008534 <LmHandlerConfigure+0x1a0>)
 800851c:	2200      	movs	r2, #0
 800851e:	701a      	strb	r2, [r3, #0]
 8008520:	e758      	b.n	80083d4 <LmHandlerConfigure+0x40>
            return LORAMAC_HANDLER_ERROR;
 8008522:	f04f 30ff 	mov.w	r0, #4294967295
 8008526:	e7ef      	b.n	8008508 <LmHandlerConfigure+0x174>
 8008528:	200007d8 	.word	0x200007d8
 800852c:	200007e8 	.word	0x200007e8
 8008530:	200007fc 	.word	0x200007fc
 8008534:	200007be 	.word	0x200007be
 8008538:	2000005c 	.word	0x2000005c
 800853c:	200007c0 	.word	0x200007c0
 8008540:	080174a0 	.word	0x080174a0
 8008544:	080174dc 	.word	0x080174dc
 8008548:	08017518 	.word	0x08017518
 800854c:	08017454 	.word	0x08017454

08008550 <LmHandlerProcess>:
{
 8008550:	b508      	push	{r3, lr}
    LoRaMacProcess( );
 8008552:	f002 fe01 	bl	800b158 <LoRaMacProcess>
    LmHandlerPackagesProcess( );
 8008556:	f7ff fecd 	bl	80082f4 <LmHandlerPackagesProcess>
    NvmDataMgmtStore( );
 800855a:	f004 fe08 	bl	800d16e <NvmDataMgmtStore>
}
 800855e:	bd08      	pop	{r3, pc}

08008560 <LmHandlerJoinStatus>:
{
 8008560:	b500      	push	{lr}
 8008562:	b08b      	sub	sp, #44	; 0x2c
    mibReq.Type = MIB_NETWORK_ACTIVATION;
 8008564:	2301      	movs	r3, #1
 8008566:	f88d 3004 	strb.w	r3, [sp, #4]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800856a:	a801      	add	r0, sp, #4
 800856c:	f003 f870 	bl	800b650 <LoRaMacMibGetRequestConfirm>
    if( status == LORAMAC_STATUS_OK )
 8008570:	b920      	cbnz	r0, 800857c <LmHandlerJoinStatus+0x1c>
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 8008572:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8008576:	b110      	cbz	r0, 800857e <LmHandlerJoinStatus+0x1e>
            return LORAMAC_HANDLER_SET;
 8008578:	2001      	movs	r0, #1
 800857a:	e000      	b.n	800857e <LmHandlerJoinStatus+0x1e>
        return LORAMAC_HANDLER_RESET;
 800857c:	2000      	movs	r0, #0
}
 800857e:	b00b      	add	sp, #44	; 0x2c
 8008580:	f85d fb04 	ldr.w	pc, [sp], #4

08008584 <LmHandlerRequestClass>:
{
 8008584:	b510      	push	{r4, lr}
 8008586:	b08a      	sub	sp, #40	; 0x28
 8008588:	4604      	mov	r4, r0
    if (LoRaMacIsBusy() == true)
 800858a:	f002 fdd3 	bl	800b134 <LoRaMacIsBusy>
 800858e:	2800      	cmp	r0, #0
 8008590:	d13d      	bne.n	800860e <LmHandlerRequestClass+0x8a>
    if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 8008592:	f7ff ffe5 	bl	8008560 <LmHandlerJoinStatus>
 8008596:	2801      	cmp	r0, #1
 8008598:	d13c      	bne.n	8008614 <LmHandlerRequestClass+0x90>
    mibReq.Type = MIB_DEVICE_CLASS;
 800859a:	2300      	movs	r3, #0
 800859c:	f88d 3004 	strb.w	r3, [sp, #4]
    if ( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 80085a0:	a801      	add	r0, sp, #4
 80085a2:	f003 f855 	bl	800b650 <LoRaMacMibGetRequestConfirm>
 80085a6:	2800      	cmp	r0, #0
 80085a8:	d137      	bne.n	800861a <LmHandlerRequestClass+0x96>
    currentClass = mibReq.Param.Class;
 80085aa:	f89d 3008 	ldrb.w	r3, [sp, #8]
    if( currentClass != newClass )
 80085ae:	42a3      	cmp	r3, r4
 80085b0:	d036      	beq.n	8008620 <LmHandlerRequestClass+0x9c>
        switch( newClass )
 80085b2:	2c01      	cmp	r4, #1
 80085b4:	d036      	beq.n	8008624 <LmHandlerRequestClass+0xa0>
 80085b6:	2c02      	cmp	r4, #2
 80085b8:	d017      	beq.n	80085ea <LmHandlerRequestClass+0x66>
 80085ba:	b114      	cbz	r4, 80085c2 <LmHandlerRequestClass+0x3e>
 80085bc:	2000      	movs	r0, #0
}
 80085be:	b00a      	add	sp, #40	; 0x28
 80085c0:	bd10      	pop	{r4, pc}
                if( currentClass != CLASS_A )
 80085c2:	b90b      	cbnz	r3, 80085c8 <LmHandlerRequestClass+0x44>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 80085c4:	2000      	movs	r0, #0
 80085c6:	e7fa      	b.n	80085be <LmHandlerRequestClass+0x3a>
                    mibReq.Param.Class = newClass;
 80085c8:	f88d 4008 	strb.w	r4, [sp, #8]
                    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 80085cc:	a801      	add	r0, sp, #4
 80085ce:	f003 f95b 	bl	800b888 <LoRaMacMibSetRequestConfirm>
 80085d2:	bb50      	cbnz	r0, 800862a <LmHandlerRequestClass+0xa6>
                        DisplayClassUpdate(newClass);
 80085d4:	4620      	mov	r0, r4
 80085d6:	f7ff feab 	bl	8008330 <DisplayClassUpdate>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 80085da:	4b1a      	ldr	r3, [pc, #104]	; (8008644 <LmHandlerRequestClass+0xc0>)
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085e0:	b333      	cbz	r3, 8008630 <LmHandlerRequestClass+0xac>
                            LmHandlerCallbacks->OnClassChange( newClass );
 80085e2:	4620      	mov	r0, r4
 80085e4:	4798      	blx	r3
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 80085e6:	2000      	movs	r0, #0
 80085e8:	e7e9      	b.n	80085be <LmHandlerRequestClass+0x3a>
                if( currentClass != CLASS_A )
 80085ea:	bb1b      	cbnz	r3, 8008634 <LmHandlerRequestClass+0xb0>
                    mibReq.Param.Class = newClass;
 80085ec:	f88d 4008 	strb.w	r4, [sp, #8]
                    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 80085f0:	a801      	add	r0, sp, #4
 80085f2:	f003 f949 	bl	800b888 <LoRaMacMibSetRequestConfirm>
 80085f6:	bb00      	cbnz	r0, 800863a <LmHandlerRequestClass+0xb6>
                        DisplayClassUpdate(newClass);
 80085f8:	4620      	mov	r0, r4
 80085fa:	f7ff fe99 	bl	8008330 <DisplayClassUpdate>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 80085fe:	4b11      	ldr	r3, [pc, #68]	; (8008644 <LmHandlerRequestClass+0xc0>)
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008604:	b1e3      	cbz	r3, 8008640 <LmHandlerRequestClass+0xbc>
                            LmHandlerCallbacks->OnClassChange( newClass );
 8008606:	4620      	mov	r0, r4
 8008608:	4798      	blx	r3
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800860a:	2000      	movs	r0, #0
 800860c:	e7d7      	b.n	80085be <LmHandlerRequestClass+0x3a>
        return LORAMAC_HANDLER_BUSY_ERROR;
 800860e:	f06f 0001 	mvn.w	r0, #1
 8008612:	e7d4      	b.n	80085be <LmHandlerRequestClass+0x3a>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8008614:	f06f 0002 	mvn.w	r0, #2
 8008618:	e7d1      	b.n	80085be <LmHandlerRequestClass+0x3a>
        return LORAMAC_HANDLER_ERROR;
 800861a:	f04f 30ff 	mov.w	r0, #4294967295
 800861e:	e7ce      	b.n	80085be <LmHandlerRequestClass+0x3a>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8008620:	2000      	movs	r0, #0
 8008622:	e7cc      	b.n	80085be <LmHandlerRequestClass+0x3a>
                errorStatus = LORAMAC_HANDLER_ERROR;
 8008624:	f04f 30ff 	mov.w	r0, #4294967295
 8008628:	e7c9      	b.n	80085be <LmHandlerRequestClass+0x3a>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800862a:	f04f 30ff 	mov.w	r0, #4294967295
 800862e:	e7c6      	b.n	80085be <LmHandlerRequestClass+0x3a>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8008630:	2000      	movs	r0, #0
 8008632:	e7c4      	b.n	80085be <LmHandlerRequestClass+0x3a>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 8008634:	f04f 30ff 	mov.w	r0, #4294967295
 8008638:	e7c1      	b.n	80085be <LmHandlerRequestClass+0x3a>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800863a:	f04f 30ff 	mov.w	r0, #4294967295
 800863e:	e7be      	b.n	80085be <LmHandlerRequestClass+0x3a>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8008640:	2000      	movs	r0, #0
 8008642:	e7bc      	b.n	80085be <LmHandlerRequestClass+0x3a>
 8008644:	200007c0 	.word	0x200007c0

08008648 <LmHandlerJoin>:
{
 8008648:	b500      	push	{lr}
 800864a:	b08f      	sub	sp, #60	; 0x3c
    if ( mode == ACTIVATION_TYPE_OTAA )
 800864c:	2802      	cmp	r0, #2
 800864e:	d021      	beq.n	8008694 <LmHandlerJoin+0x4c>
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 8008650:	4b1d      	ldr	r3, [pc, #116]	; (80086c8 <LmHandlerJoin+0x80>)
 8008652:	2201      	movs	r2, #1
 8008654:	709a      	strb	r2, [r3, #2]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 8008656:	4a1d      	ldr	r2, [pc, #116]	; (80086cc <LmHandlerJoin+0x84>)
 8008658:	f992 2003 	ldrsb.w	r2, [r2, #3]
 800865c:	701a      	strb	r2, [r3, #0]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800865e:	2200      	movs	r2, #0
 8008660:	705a      	strb	r2, [r3, #1]
        if (CtxRestoreDone == false)
 8008662:	4b1b      	ldr	r3, [pc, #108]	; (80086d0 <LmHandlerJoin+0x88>)
 8008664:	781b      	ldrb	r3, [r3, #0]
 8008666:	b32b      	cbz	r3, 80086b4 <LmHandlerJoin+0x6c>
        LoRaMacStart();
 8008668:	f002 ff84 	bl	800b574 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 800866c:	2301      	movs	r3, #1
 800866e:	f88d 3014 	strb.w	r3, [sp, #20]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 8008672:	f88d 3018 	strb.w	r3, [sp, #24]
        LoRaMacMibSetRequestConfirm( &mibReq );
 8008676:	a805      	add	r0, sp, #20
 8008678:	f003 f906 	bl	800b888 <LoRaMacMibSetRequestConfirm>
        LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800867c:	4b15      	ldr	r3, [pc, #84]	; (80086d4 <LmHandlerJoin+0x8c>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	69db      	ldr	r3, [r3, #28]
 8008682:	4811      	ldr	r0, [pc, #68]	; (80086c8 <LmHandlerJoin+0x80>)
 8008684:	4798      	blx	r3
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 8008686:	4b11      	ldr	r3, [pc, #68]	; (80086cc <LmHandlerJoin+0x84>)
 8008688:	7858      	ldrb	r0, [r3, #1]
 800868a:	f7ff ff7b 	bl	8008584 <LmHandlerRequestClass>
}
 800868e:	b00f      	add	sp, #60	; 0x3c
 8008690:	f85d fb04 	ldr.w	pc, [sp], #4
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 8008694:	4b0c      	ldr	r3, [pc, #48]	; (80086c8 <LmHandlerJoin+0x80>)
 8008696:	2202      	movs	r2, #2
 8008698:	709a      	strb	r2, [r3, #2]
        LoRaMacStart();
 800869a:	f002 ff6b 	bl	800b574 <LoRaMacStart>
        mlmeReq.Type = MLME_JOIN;
 800869e:	2301      	movs	r3, #1
 80086a0:	f88d 3000 	strb.w	r3, [sp]
        mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 80086a4:	4b09      	ldr	r3, [pc, #36]	; (80086cc <LmHandlerJoin+0x84>)
 80086a6:	78db      	ldrb	r3, [r3, #3]
 80086a8:	f88d 3004 	strb.w	r3, [sp, #4]
        LoRaMacMlmeRequest( &mlmeReq );
 80086ac:	4668      	mov	r0, sp
 80086ae:	f003 fb67 	bl	800bd80 <LoRaMacMlmeRequest>
 80086b2:	e7ec      	b.n	800868e <LmHandlerJoin+0x46>
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 80086b4:	2327      	movs	r3, #39	; 0x27
 80086b6:	f88d 3014 	strb.w	r3, [sp, #20]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 80086ba:	4b07      	ldr	r3, [pc, #28]	; (80086d8 <LmHandlerJoin+0x90>)
 80086bc:	9306      	str	r3, [sp, #24]
            LoRaMacMibSetRequestConfirm(&mibReq);
 80086be:	a805      	add	r0, sp, #20
 80086c0:	f003 f8e2 	bl	800b888 <LoRaMacMibSetRequestConfirm>
 80086c4:	e7d0      	b.n	8008668 <LmHandlerJoin+0x20>
 80086c6:	bf00      	nop
 80086c8:	20000074 	.word	0x20000074
 80086cc:	200007d8 	.word	0x200007d8
 80086d0:	200007be 	.word	0x200007be
 80086d4:	200007c0 	.word	0x200007c0
 80086d8:	01000300 	.word	0x01000300

080086dc <LmHandlerSend>:
{
 80086dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80086de:	b087      	sub	sp, #28
 80086e0:	4604      	mov	r4, r0
 80086e2:	460f      	mov	r7, r1
 80086e4:	4615      	mov	r5, r2
 80086e6:	461e      	mov	r6, r3
    if (LoRaMacIsBusy() == true)
 80086e8:	f002 fd24 	bl	800b134 <LoRaMacIsBusy>
 80086ec:	2800      	cmp	r0, #0
 80086ee:	d16c      	bne.n	80087ca <LmHandlerSend+0xee>
    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 80086f0:	f7ff ff36 	bl	8008560 <LmHandlerJoinStatus>
 80086f4:	2801      	cmp	r0, #1
 80086f6:	d13d      	bne.n	8008774 <LmHandlerSend+0x98>
    if( ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == true ) && ( appData->Port != LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->Port ) && ( appData->Port != 0 ) )
 80086f8:	4b39      	ldr	r3, [pc, #228]	; (80087e0 <LmHandlerSend+0x104>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	68db      	ldr	r3, [r3, #12]
 80086fe:	4798      	blx	r3
 8008700:	b138      	cbz	r0, 8008712 <LmHandlerSend+0x36>
 8008702:	7823      	ldrb	r3, [r4, #0]
 8008704:	4a36      	ldr	r2, [pc, #216]	; (80087e0 <LmHandlerSend+0x104>)
 8008706:	6812      	ldr	r2, [r2, #0]
 8008708:	7812      	ldrb	r2, [r2, #0]
 800870a:	4293      	cmp	r3, r2
 800870c:	d001      	beq.n	8008712 <LmHandlerSend+0x36>
 800870e:	2b00      	cmp	r3, #0
 8008710:	d15e      	bne.n	80087d0 <LmHandlerSend+0xf4>
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 8008712:	4b34      	ldr	r3, [pc, #208]	; (80087e4 <LmHandlerSend+0x108>)
 8008714:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8008718:	f88d 3012 	strb.w	r3, [sp, #18]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800871c:	4669      	mov	r1, sp
 800871e:	7860      	ldrb	r0, [r4, #1]
 8008720:	f002 ff30 	bl	800b584 <LoRaMacQueryTxPossible>
 8008724:	b368      	cbz	r0, 8008782 <LmHandlerSend+0xa6>
        TxParams.MsgType = LORAMAC_HANDLER_UNCONFIRMED_MSG;
 8008726:	2200      	movs	r2, #0
 8008728:	4b2f      	ldr	r3, [pc, #188]	; (80087e8 <LmHandlerSend+0x10c>)
 800872a:	709a      	strb	r2, [r3, #2]
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800872c:	f88d 2004 	strb.w	r2, [sp, #4]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 8008730:	9203      	str	r2, [sp, #12]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 8008732:	f8ad 2010 	strh.w	r2, [sp, #16]
    TxParams.AppData = *appData;
 8008736:	4a2c      	ldr	r2, [pc, #176]	; (80087e8 <LmHandlerSend+0x10c>)
 8008738:	f102 0c0c 	add.w	ip, r2, #12
 800873c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008740:	e88c 0003 	stmia.w	ip, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 8008744:	4b27      	ldr	r3, [pc, #156]	; (80087e4 <LmHandlerSend+0x108>)
 8008746:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800874a:	7113      	strb	r3, [r2, #4]
    status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 800874c:	4631      	mov	r1, r6
 800874e:	a801      	add	r0, sp, #4
 8008750:	f003 fbec 	bl	800bf2c <LoRaMacMcpsRequest>
    if (nextTxIn != NULL)
 8008754:	b10d      	cbz	r5, 800875a <LmHandlerSend+0x7e>
        *nextTxIn = mcpsReq.ReqReturn.DutyCycleWaitTime;
 8008756:	9b05      	ldr	r3, [sp, #20]
 8008758:	602b      	str	r3, [r5, #0]
    switch (status)
 800875a:	2811      	cmp	r0, #17
 800875c:	d832      	bhi.n	80087c4 <LmHandlerSend+0xe8>
 800875e:	e8df f000 	tbb	[pc, r0]
 8008762:	3a26      	.short	0x3a26
 8008764:	31313131 	.word	0x31313131
 8008768:	31312831 	.word	0x31312831
 800876c:	31312e31 	.word	0x31312e31
 8008770:	2b3a3a3a 	.word	0x2b3a3a3a
        LmHandlerJoin(JoinParams.Mode);
 8008774:	4b1d      	ldr	r3, [pc, #116]	; (80087ec <LmHandlerSend+0x110>)
 8008776:	7898      	ldrb	r0, [r3, #2]
 8008778:	f7ff ff66 	bl	8008648 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800877c:	f06f 0002 	mvn.w	r0, #2
 8008780:	e02b      	b.n	80087da <LmHandlerSend+0xfe>
        TxParams.MsgType = isTxConfirmed;
 8008782:	4b19      	ldr	r3, [pc, #100]	; (80087e8 <LmHandlerSend+0x10c>)
 8008784:	709f      	strb	r7, [r3, #2]
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 8008786:	7823      	ldrb	r3, [r4, #0]
 8008788:	f88d 3008 	strb.w	r3, [sp, #8]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800878c:	7863      	ldrb	r3, [r4, #1]
 800878e:	f8ad 3010 	strh.w	r3, [sp, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 8008792:	6863      	ldr	r3, [r4, #4]
 8008794:	9303      	str	r3, [sp, #12]
        if( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG )
 8008796:	b91f      	cbnz	r7, 80087a0 <LmHandlerSend+0xc4>
            mcpsReq.Type = MCPS_UNCONFIRMED;
 8008798:	2300      	movs	r3, #0
 800879a:	f88d 3004 	strb.w	r3, [sp, #4]
 800879e:	e7ca      	b.n	8008736 <LmHandlerSend+0x5a>
            mcpsReq.Type = MCPS_CONFIRMED;
 80087a0:	2301      	movs	r3, #1
 80087a2:	f88d 3004 	strb.w	r3, [sp, #4]
            mcpsReq.Req.Confirmed.NbTrials = 8;
 80087a6:	2308      	movs	r3, #8
 80087a8:	f88d 3013 	strb.w	r3, [sp, #19]
 80087ac:	e7c3      	b.n	8008736 <LmHandlerSend+0x5a>
    switch (status)
 80087ae:	2000      	movs	r0, #0
 80087b0:	e013      	b.n	80087da <LmHandlerSend+0xfe>
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 80087b2:	f06f 0002 	mvn.w	r0, #2
            break;
 80087b6:	e010      	b.n	80087da <LmHandlerSend+0xfe>
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 80087b8:	f06f 0004 	mvn.w	r0, #4
            break;
 80087bc:	e00d      	b.n	80087da <LmHandlerSend+0xfe>
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 80087be:	f06f 0005 	mvn.w	r0, #5
            break;
 80087c2:	e00a      	b.n	80087da <LmHandlerSend+0xfe>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 80087c4:	f04f 30ff 	mov.w	r0, #4294967295
            break;
 80087c8:	e007      	b.n	80087da <LmHandlerSend+0xfe>
        return LORAMAC_HANDLER_BUSY_ERROR;
 80087ca:	f06f 0001 	mvn.w	r0, #1
 80087ce:	e004      	b.n	80087da <LmHandlerSend+0xfe>
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
 80087d0:	f06f 0003 	mvn.w	r0, #3
 80087d4:	e001      	b.n	80087da <LmHandlerSend+0xfe>
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 80087d6:	f06f 0001 	mvn.w	r0, #1
}
 80087da:	b007      	add	sp, #28
 80087dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087de:	bf00      	nop
 80087e0:	200007c4 	.word	0x200007c4
 80087e4:	200007d8 	.word	0x200007d8
 80087e8:	2000080c 	.word	0x2000080c
 80087ec:	20000074 	.word	0x20000074

080087f0 <MlmeIndication>:
{
 80087f0:	b510      	push	{r4, lr}
 80087f2:	b082      	sub	sp, #8
 80087f4:	4604      	mov	r4, r0
    RxParams.IsMcpsIndication = 0;
 80087f6:	4b17      	ldr	r3, [pc, #92]	; (8008854 <MlmeIndication+0x64>)
 80087f8:	2200      	movs	r2, #0
 80087fa:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 80087fc:	7842      	ldrb	r2, [r0, #1]
 80087fe:	705a      	strb	r2, [r3, #1]
    RxParams.Rssi = RxStatus->Rssi;
 8008800:	f9b1 0000 	ldrsh.w	r0, [r1]
 8008804:	70d8      	strb	r0, [r3, #3]
    RxParams.Snr = RxStatus->Snr;
 8008806:	f991 0002 	ldrsb.w	r0, [r1, #2]
 800880a:	7118      	strb	r0, [r3, #4]
    RxParams.RxSlot = RxStatus->RxSlot;
 800880c:	f991 1003 	ldrsb.w	r1, [r1, #3]
 8008810:	7319      	strb	r1, [r3, #12]
    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_BEACON_LOCKED )
 8008812:	2a0e      	cmp	r2, #14
 8008814:	d005      	beq.n	8008822 <MlmeIndication+0x32>
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 8008816:	4b10      	ldr	r3, [pc, #64]	; (8008858 <MlmeIndication+0x68>)
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800881c:	490d      	ldr	r1, [pc, #52]	; (8008854 <MlmeIndication+0x64>)
 800881e:	2000      	movs	r0, #0
 8008820:	4798      	blx	r3
    switch( mlmeIndication->MlmeIndication )
 8008822:	7823      	ldrb	r3, [r4, #0]
 8008824:	2b07      	cmp	r3, #7
 8008826:	d001      	beq.n	800882c <MlmeIndication+0x3c>
}
 8008828:	b002      	add	sp, #8
 800882a:	bd10      	pop	{r4, pc}
            LmHandlerAppData_t appData =
 800882c:	2300      	movs	r3, #0
 800882e:	f88d 3000 	strb.w	r3, [sp]
 8008832:	f88d 3001 	strb.w	r3, [sp, #1]
 8008836:	9301      	str	r3, [sp, #4]
            if( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == false )
 8008838:	4b08      	ldr	r3, [pc, #32]	; (800885c <MlmeIndication+0x6c>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	68db      	ldr	r3, [r3, #12]
 800883e:	4798      	blx	r3
 8008840:	2800      	cmp	r0, #0
 8008842:	d1f1      	bne.n	8008828 <MlmeIndication+0x38>
                LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true );
 8008844:	2301      	movs	r3, #1
 8008846:	2200      	movs	r2, #0
 8008848:	4611      	mov	r1, r2
 800884a:	4668      	mov	r0, sp
 800884c:	f7ff ff46 	bl	80086dc <LmHandlerSend>
}
 8008850:	e7ea      	b.n	8008828 <MlmeIndication+0x38>
 8008852:	bf00      	nop
 8008854:	20000084 	.word	0x20000084
 8008858:	200007c0 	.word	0x200007c0
 800885c:	200007c4 	.word	0x200007c4

08008860 <LmHandlerGetCurrentClass>:
    if (deviceClass == NULL)
 8008860:	b170      	cbz	r0, 8008880 <LmHandlerGetCurrentClass+0x20>
{
 8008862:	b510      	push	{r4, lr}
 8008864:	b08a      	sub	sp, #40	; 0x28
 8008866:	4604      	mov	r4, r0
    mibReq.Type = MIB_DEVICE_CLASS;
 8008868:	2300      	movs	r3, #0
 800886a:	f88d 3004 	strb.w	r3, [sp, #4]
    if (LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK)
 800886e:	a801      	add	r0, sp, #4
 8008870:	f002 feee 	bl	800b650 <LoRaMacMibGetRequestConfirm>
 8008874:	b938      	cbnz	r0, 8008886 <LmHandlerGetCurrentClass+0x26>
    *deviceClass = mibReq.Param.Class;
 8008876:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800887a:	7023      	strb	r3, [r4, #0]
}
 800887c:	b00a      	add	sp, #40	; 0x28
 800887e:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 8008880:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008884:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 8008886:	f04f 30ff 	mov.w	r0, #4294967295
 800888a:	e7f7      	b.n	800887c <LmHandlerGetCurrentClass+0x1c>

0800888c <McpsIndication>:
{
 800888c:	b530      	push	{r4, r5, lr}
 800888e:	b087      	sub	sp, #28
 8008890:	460b      	mov	r3, r1
    DeviceClass_t deviceClass = CLASS_A;
 8008892:	2200      	movs	r2, #0
 8008894:	f88d 200f 	strb.w	r2, [sp, #15]
    RxParams.IsMcpsIndication = 1;
 8008898:	4922      	ldr	r1, [pc, #136]	; (8008924 <McpsIndication+0x98>)
 800889a:	2201      	movs	r2, #1
 800889c:	700a      	strb	r2, [r1, #0]
    RxParams.Status = mcpsIndication->Status;
 800889e:	7842      	ldrb	r2, [r0, #1]
 80088a0:	704a      	strb	r2, [r1, #1]
    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 80088a2:	bb62      	cbnz	r2, 80088fe <McpsIndication+0x72>
 80088a4:	4604      	mov	r4, r0
    RxParams.Datarate = mcpsIndication->RxDatarate;
 80088a6:	f990 2004 	ldrsb.w	r2, [r0, #4]
 80088aa:	708a      	strb	r2, [r1, #2]
    RxParams.Rssi = RxStatus->Rssi;
 80088ac:	f9b3 2000 	ldrsh.w	r2, [r3]
 80088b0:	70ca      	strb	r2, [r1, #3]
    RxParams.Snr = RxStatus->Snr;
 80088b2:	f993 2002 	ldrsb.w	r2, [r3, #2]
 80088b6:	710a      	strb	r2, [r1, #4]
    RxParams.RxSlot = RxStatus->RxSlot;
 80088b8:	f993 3003 	ldrsb.w	r3, [r3, #3]
 80088bc:	730b      	strb	r3, [r1, #12]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 80088be:	6903      	ldr	r3, [r0, #16]
 80088c0:	608b      	str	r3, [r1, #8]
    appData.Port = mcpsIndication->Port;
 80088c2:	78c3      	ldrb	r3, [r0, #3]
 80088c4:	f88d 3010 	strb.w	r3, [sp, #16]
    appData.BufferSize = mcpsIndication->BufferSize;
 80088c8:	7b03      	ldrb	r3, [r0, #12]
 80088ca:	f88d 3011 	strb.w	r3, [sp, #17]
    appData.Buffer = mcpsIndication->Buffer;
 80088ce:	6883      	ldr	r3, [r0, #8]
 80088d0:	9305      	str	r3, [sp, #20]
    LmHandlerCallbacks->OnRxData(&appData, &RxParams);
 80088d2:	4d15      	ldr	r5, [pc, #84]	; (8008928 <McpsIndication+0x9c>)
 80088d4:	682b      	ldr	r3, [r5, #0]
 80088d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088d8:	a804      	add	r0, sp, #16
 80088da:	4798      	blx	r3
    if ((LmHandlerCallbacks->OnSysTimeUpdate != NULL) && (mcpsIndication->DeviceTimeAnsReceived == true))
 80088dc:	682b      	ldr	r3, [r5, #0]
 80088de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088e0:	b113      	cbz	r3, 80088e8 <McpsIndication+0x5c>
 80088e2:	7e22      	ldrb	r2, [r4, #24]
 80088e4:	b102      	cbz	r2, 80088e8 <McpsIndication+0x5c>
        LmHandlerCallbacks->OnSysTimeUpdate( );
 80088e6:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 80088e8:	4621      	mov	r1, r4
 80088ea:	2001      	movs	r0, #1
 80088ec:	f7ff fcac 	bl	8008248 <LmHandlerPackagesNotify>
    LmHandlerGetCurrentClass(&deviceClass);
 80088f0:	f10d 000f 	add.w	r0, sp, #15
 80088f4:	f7ff ffb4 	bl	8008860 <LmHandlerGetCurrentClass>
    if ((mcpsIndication->FramePending == true) && (deviceClass == CLASS_A))
 80088f8:	7963      	ldrb	r3, [r4, #5]
 80088fa:	2b01      	cmp	r3, #1
 80088fc:	d001      	beq.n	8008902 <McpsIndication+0x76>
}
 80088fe:	b007      	add	sp, #28
 8008900:	bd30      	pop	{r4, r5, pc}
    if ((mcpsIndication->FramePending == true) && (deviceClass == CLASS_A))
 8008902:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d1f9      	bne.n	80088fe <McpsIndication+0x72>
        LmHandlerAppData_t appData =
 800890a:	2100      	movs	r1, #0
 800890c:	f88d 1004 	strb.w	r1, [sp, #4]
 8008910:	f88d 1005 	strb.w	r1, [sp, #5]
 8008914:	9102      	str	r1, [sp, #8]
        LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true);
 8008916:	2301      	movs	r3, #1
 8008918:	460a      	mov	r2, r1
 800891a:	a801      	add	r0, sp, #4
 800891c:	f7ff fede 	bl	80086dc <LmHandlerSend>
 8008920:	e7ed      	b.n	80088fe <McpsIndication+0x72>
 8008922:	bf00      	nop
 8008924:	20000084 	.word	0x20000084
 8008928:	200007c0 	.word	0x200007c0

0800892c <LmHandlerGetTxDatarate>:
    if (txDatarate == NULL)
 800892c:	b180      	cbz	r0, 8008950 <LmHandlerGetTxDatarate+0x24>
{
 800892e:	b510      	push	{r4, lr}
 8008930:	b08a      	sub	sp, #40	; 0x28
 8008932:	4604      	mov	r4, r0
    mibGet.Type = MIB_CHANNELS_DATARATE;
 8008934:	231f      	movs	r3, #31
 8008936:	f88d 3004 	strb.w	r3, [sp, #4]
    if (LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK)
 800893a:	a801      	add	r0, sp, #4
 800893c:	f002 fe88 	bl	800b650 <LoRaMacMibGetRequestConfirm>
 8008940:	b948      	cbnz	r0, 8008956 <LmHandlerGetTxDatarate+0x2a>
    *txDatarate = mibGet.Param.ChannelsDatarate;
 8008942:	f99d 3008 	ldrsb.w	r3, [sp, #8]
 8008946:	7023      	strb	r3, [r4, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 8008948:	4a04      	ldr	r2, [pc, #16]	; (800895c <LmHandlerGetTxDatarate+0x30>)
 800894a:	70d3      	strb	r3, [r2, #3]
}
 800894c:	b00a      	add	sp, #40	; 0x28
 800894e:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 8008950:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008954:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 8008956:	f04f 30ff 	mov.w	r0, #4294967295
 800895a:	e7f7      	b.n	800894c <LmHandlerGetTxDatarate+0x20>
 800895c:	200007d8 	.word	0x200007d8

08008960 <MlmeConfirm>:
{
 8008960:	b510      	push	{r4, lr}
 8008962:	b08a      	sub	sp, #40	; 0x28
 8008964:	4604      	mov	r4, r0
    TxParams.IsMcpsConfirm = 0;
 8008966:	481d      	ldr	r0, [pc, #116]	; (80089dc <MlmeConfirm+0x7c>)
 8008968:	2300      	movs	r3, #0
 800896a:	7003      	strb	r3, [r0, #0]
    TxParams.Status = mlmeConfirm->Status;
 800896c:	7863      	ldrb	r3, [r4, #1]
 800896e:	7043      	strb	r3, [r0, #1]
    LmHandlerCallbacks->OnTxData( &TxParams );
 8008970:	4b1b      	ldr	r3, [pc, #108]	; (80089e0 <MlmeConfirm+0x80>)
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	6a1b      	ldr	r3, [r3, #32]
 8008976:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 8008978:	4621      	mov	r1, r4
 800897a:	2002      	movs	r0, #2
 800897c:	f7ff fc64 	bl	8008248 <LmHandlerPackagesNotify>
    switch( mlmeConfirm->MlmeRequest )
 8008980:	7823      	ldrb	r3, [r4, #0]
 8008982:	2b01      	cmp	r3, #1
 8008984:	d003      	beq.n	800898e <MlmeConfirm+0x2e>
 8008986:	2b04      	cmp	r3, #4
 8008988:	d020      	beq.n	80089cc <MlmeConfirm+0x6c>
}
 800898a:	b00a      	add	sp, #40	; 0x28
 800898c:	bd10      	pop	{r4, pc}
            mibReq.Type = MIB_DEV_ADDR;
 800898e:	2306      	movs	r3, #6
 8008990:	f88d 3004 	strb.w	r3, [sp, #4]
            LoRaMacMibGetRequestConfirm( &mibReq );
 8008994:	a801      	add	r0, sp, #4
 8008996:	f002 fe5b 	bl	800b650 <LoRaMacMibGetRequestConfirm>
            CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800899a:	9a02      	ldr	r2, [sp, #8]
 800899c:	4b11      	ldr	r3, [pc, #68]	; (80089e4 <MlmeConfirm+0x84>)
 800899e:	615a      	str	r2, [r3, #20]
            LmHandlerGetTxDatarate( &JoinParams.Datarate );
 80089a0:	4811      	ldr	r0, [pc, #68]	; (80089e8 <MlmeConfirm+0x88>)
 80089a2:	f7ff ffc3 	bl	800892c <LmHandlerGetTxDatarate>
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 80089a6:	7863      	ldrb	r3, [r4, #1]
 80089a8:	b143      	cbz	r3, 80089bc <MlmeConfirm+0x5c>
                JoinParams.Status = LORAMAC_HANDLER_ERROR;
 80089aa:	4b0f      	ldr	r3, [pc, #60]	; (80089e8 <MlmeConfirm+0x88>)
 80089ac:	22ff      	movs	r2, #255	; 0xff
 80089ae:	705a      	strb	r2, [r3, #1]
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 80089b0:	4b0b      	ldr	r3, [pc, #44]	; (80089e0 <MlmeConfirm+0x80>)
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	69db      	ldr	r3, [r3, #28]
 80089b6:	480c      	ldr	r0, [pc, #48]	; (80089e8 <MlmeConfirm+0x88>)
 80089b8:	4798      	blx	r3
        break;
 80089ba:	e7e6      	b.n	800898a <MlmeConfirm+0x2a>
                JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 80089bc:	4b0a      	ldr	r3, [pc, #40]	; (80089e8 <MlmeConfirm+0x88>)
 80089be:	2200      	movs	r2, #0
 80089c0:	705a      	strb	r2, [r3, #1]
                LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 80089c2:	4b0a      	ldr	r3, [pc, #40]	; (80089ec <MlmeConfirm+0x8c>)
 80089c4:	7858      	ldrb	r0, [r3, #1]
 80089c6:	f7ff fddd 	bl	8008584 <LmHandlerRequestClass>
 80089ca:	e7f1      	b.n	80089b0 <MlmeConfirm+0x50>
            RxParams.LinkCheck = true;
 80089cc:	4b08      	ldr	r3, [pc, #32]	; (80089f0 <MlmeConfirm+0x90>)
 80089ce:	2201      	movs	r2, #1
 80089d0:	735a      	strb	r2, [r3, #13]
            RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 80089d2:	7a22      	ldrb	r2, [r4, #8]
 80089d4:	739a      	strb	r2, [r3, #14]
            RxParams.NbGateways = mlmeConfirm->NbGateways;
 80089d6:	7a62      	ldrb	r2, [r4, #9]
 80089d8:	73da      	strb	r2, [r3, #15]
}
 80089da:	e7d6      	b.n	800898a <MlmeConfirm+0x2a>
 80089dc:	2000080c 	.word	0x2000080c
 80089e0:	200007c0 	.word	0x200007c0
 80089e4:	2000005c 	.word	0x2000005c
 80089e8:	20000074 	.word	0x20000074
 80089ec:	200007d8 	.word	0x200007d8
 80089f0:	20000084 	.word	0x20000084

080089f4 <LmHandlerPackageRegister>:
    switch( id )
 80089f4:	b9e0      	cbnz	r0, 8008a30 <LmHandlerPackageRegister+0x3c>
{
 80089f6:	b538      	push	{r3, r4, r5, lr}
 80089f8:	460c      	mov	r4, r1
 80089fa:	4605      	mov	r5, r0
            package = LmhpCompliancePackageFactory( );
 80089fc:	f000 fa20 	bl	8008e40 <LmhpCompliancePackageFactory>
    if( package != NULL )
 8008a00:	b198      	cbz	r0, 8008a2a <LmHandlerPackageRegister+0x36>
        LmHandlerPackages[id] = package;
 8008a02:	4a0d      	ldr	r2, [pc, #52]	; (8008a38 <LmHandlerPackageRegister+0x44>)
 8008a04:	f842 0025 	str.w	r0, [r2, r5, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 8008a08:	4a0c      	ldr	r2, [pc, #48]	; (8008a3c <LmHandlerPackageRegister+0x48>)
 8008a0a:	6242      	str	r2, [r0, #36]	; 0x24
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
 8008a0c:	4a0c      	ldr	r2, [pc, #48]	; (8008a40 <LmHandlerPackageRegister+0x4c>)
 8008a0e:	6282      	str	r2, [r0, #40]	; 0x28
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 8008a10:	4a0c      	ldr	r2, [pc, #48]	; (8008a44 <LmHandlerPackageRegister+0x50>)
 8008a12:	62c2      	str	r2, [r0, #44]	; 0x2c
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 8008a14:	4a0c      	ldr	r2, [pc, #48]	; (8008a48 <LmHandlerPackageRegister+0x54>)
 8008a16:	6812      	ldr	r2, [r2, #0]
 8008a18:	6912      	ldr	r2, [r2, #16]
 8008a1a:	6142      	str	r2, [r0, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 8008a1c:	6843      	ldr	r3, [r0, #4]
 8008a1e:	22f2      	movs	r2, #242	; 0xf2
 8008a20:	490a      	ldr	r1, [pc, #40]	; (8008a4c <LmHandlerPackageRegister+0x58>)
 8008a22:	4620      	mov	r0, r4
 8008a24:	4798      	blx	r3
        return LORAMAC_HANDLER_SUCCESS;
 8008a26:	2000      	movs	r0, #0
}
 8008a28:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_HANDLER_ERROR;
 8008a2a:	f04f 30ff 	mov.w	r0, #4294967295
 8008a2e:	e7fb      	b.n	8008a28 <LmHandlerPackageRegister+0x34>
 8008a30:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008a34:	4770      	bx	lr
 8008a36:	bf00      	nop
 8008a38:	200007c4 	.word	0x200007c4
 8008a3c:	08008649 	.word	0x08008649
 8008a40:	080086dd 	.word	0x080086dd
 8008a44:	08008375 	.word	0x08008375
 8008a48:	200007c0 	.word	0x200007c0
 8008a4c:	200006cc 	.word	0x200006cc

08008a50 <LmHandlerInit>:
{
 8008a50:	b508      	push	{r3, lr}
    LmHandlerCallbacks = handlerCallbacks;
 8008a52:	4b0f      	ldr	r3, [pc, #60]	; (8008a90 <LmHandlerInit+0x40>)
 8008a54:	6018      	str	r0, [r3, #0]
    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 8008a56:	4b0f      	ldr	r3, [pc, #60]	; (8008a94 <LmHandlerInit+0x44>)
 8008a58:	4a0f      	ldr	r2, [pc, #60]	; (8008a98 <LmHandlerInit+0x48>)
 8008a5a:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 8008a5c:	4a0f      	ldr	r2, [pc, #60]	; (8008a9c <LmHandlerInit+0x4c>)
 8008a5e:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 8008a60:	4a0f      	ldr	r2, [pc, #60]	; (8008aa0 <LmHandlerInit+0x50>)
 8008a62:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 8008a64:	4a0f      	ldr	r2, [pc, #60]	; (8008aa4 <LmHandlerInit+0x54>)
 8008a66:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 8008a68:	6802      	ldr	r2, [r0, #0]
 8008a6a:	4b0f      	ldr	r3, [pc, #60]	; (8008aa8 <LmHandlerInit+0x58>)
 8008a6c:	601a      	str	r2, [r3, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 8008a6e:	6842      	ldr	r2, [r0, #4]
 8008a70:	605a      	str	r2, [r3, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 8008a72:	6882      	ldr	r2, [r0, #8]
 8008a74:	609a      	str	r2, [r3, #8]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 8008a76:	4a0d      	ldr	r2, [pc, #52]	; (8008aac <LmHandlerInit+0x5c>)
 8008a78:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 8008a7a:	6902      	ldr	r2, [r0, #16]
 8008a7c:	611a      	str	r2, [r3, #16]
    if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 8008a7e:	490c      	ldr	r1, [pc, #48]	; (8008ab0 <LmHandlerInit+0x60>)
 8008a80:	2000      	movs	r0, #0
 8008a82:	f7ff ffb7 	bl	80089f4 <LmHandlerPackageRegister>
 8008a86:	b900      	cbnz	r0, 8008a8a <LmHandlerInit+0x3a>
}
 8008a88:	bd08      	pop	{r3, pc}
        return LORAMAC_HANDLER_ERROR;
 8008a8a:	f04f 30ff 	mov.w	r0, #4294967295
 8008a8e:	e7fb      	b.n	8008a88 <LmHandlerInit+0x38>
 8008a90:	200007c0 	.word	0x200007c0
 8008a94:	200007fc 	.word	0x200007fc
 8008a98:	080082b5 	.word	0x080082b5
 8008a9c:	0800888d 	.word	0x0800888d
 8008aa0:	08008961 	.word	0x08008961
 8008aa4:	080087f1 	.word	0x080087f1
 8008aa8:	200007e8 	.word	0x200007e8
 8008aac:	0800d16d 	.word	0x0800d16d
 8008ab0:	20000078 	.word	0x20000078

08008ab4 <LmhpComplianceInit>:
    return &LmhpCompliancePackage;
}

static void LmhpComplianceInit( void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize )
{
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 8008ab4:	4603      	mov	r3, r0
 8008ab6:	b140      	cbz	r0, 8008aca <LmhpComplianceInit+0x16>
 8008ab8:	b139      	cbz	r1, 8008aca <LmhpComplianceInit+0x16>
    {
        LmhpComplianceParams = ( LmhpComplianceParams_t* )params;
 8008aba:	4807      	ldr	r0, [pc, #28]	; (8008ad8 <LmhpComplianceInit+0x24>)
 8008abc:	6003      	str	r3, [r0, #0]
        ComplianceTestState.DataBuffer = dataBuffer;
 8008abe:	4b07      	ldr	r3, [pc, #28]	; (8008adc <LmhpComplianceInit+0x28>)
 8008ac0:	6099      	str	r1, [r3, #8]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 8008ac2:	715a      	strb	r2, [r3, #5]
        ComplianceTestState.Initialized = true;
 8008ac4:	2201      	movs	r2, #1
 8008ac6:	701a      	strb	r2, [r3, #0]
 8008ac8:	4770      	bx	lr
    }
    else
    {
        LmhpComplianceParams = NULL;
 8008aca:	2300      	movs	r3, #0
 8008acc:	4a02      	ldr	r2, [pc, #8]	; (8008ad8 <LmhpComplianceInit+0x24>)
 8008ace:	6013      	str	r3, [r2, #0]
        ComplianceTestState.Initialized = false;
 8008ad0:	4a02      	ldr	r2, [pc, #8]	; (8008adc <LmhpComplianceInit+0x28>)
 8008ad2:	7013      	strb	r3, [r2, #0]
    }
}
 8008ad4:	4770      	bx	lr
 8008ad6:	bf00      	nop
 8008ad8:	20000850 	.word	0x20000850
 8008adc:	20000824 	.word	0x20000824

08008ae0 <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
    return ComplianceTestState.Initialized;
}
 8008ae0:	4b01      	ldr	r3, [pc, #4]	; (8008ae8 <LmhpComplianceIsInitialized+0x8>)
 8008ae2:	7818      	ldrb	r0, [r3, #0]
 8008ae4:	4770      	bx	lr
 8008ae6:	bf00      	nop
 8008ae8:	20000824 	.word	0x20000824

08008aec <LmhpComplianceIsRunning>:

static bool LmhpComplianceIsRunning( void )
{
    if( ComplianceTestState.Initialized == false )
 8008aec:	4b02      	ldr	r3, [pc, #8]	; (8008af8 <LmhpComplianceIsRunning+0xc>)
 8008aee:	7818      	ldrb	r0, [r3, #0]
 8008af0:	b100      	cbz	r0, 8008af4 <LmhpComplianceIsRunning+0x8>
    {
        return false;
    }

    return ComplianceTestState.IsRunning;
 8008af2:	7858      	ldrb	r0, [r3, #1]
}
 8008af4:	4770      	bx	lr
 8008af6:	bf00      	nop
 8008af8:	20000824 	.word	0x20000824

08008afc <LmhpComplianceOnMcpsConfirm>:

static void LmhpComplianceOnMcpsConfirm(McpsConfirm_t *mcpsConfirm)
{
    if (ComplianceTestState.Initialized == false)
 8008afc:	4b08      	ldr	r3, [pc, #32]	; (8008b20 <LmhpComplianceOnMcpsConfirm+0x24>)
 8008afe:	781b      	ldrb	r3, [r3, #0]
 8008b00:	b12b      	cbz	r3, 8008b0e <LmhpComplianceOnMcpsConfirm+0x12>
    {
        return;
    }

    if ((ComplianceTestState.IsRunning == true) &&
 8008b02:	4b07      	ldr	r3, [pc, #28]	; (8008b20 <LmhpComplianceOnMcpsConfirm+0x24>)
 8008b04:	785b      	ldrb	r3, [r3, #1]
 8008b06:	b113      	cbz	r3, 8008b0e <LmhpComplianceOnMcpsConfirm+0x12>
        (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 8008b08:	7803      	ldrb	r3, [r0, #0]
    if ((ComplianceTestState.IsRunning == true) &&
 8008b0a:	2b01      	cmp	r3, #1
 8008b0c:	d000      	beq.n	8008b10 <LmhpComplianceOnMcpsConfirm+0x14>
        (mcpsConfirm->AckReceived != 0))
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
    }
}
 8008b0e:	4770      	bx	lr
        (mcpsConfirm->AckReceived != 0))
 8008b10:	7903      	ldrb	r3, [r0, #4]
        (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d0fb      	beq.n	8008b0e <LmhpComplianceOnMcpsConfirm+0x12>
        ComplianceTestState.DownLinkCounter++;
 8008b16:	4a02      	ldr	r2, [pc, #8]	; (8008b20 <LmhpComplianceOnMcpsConfirm+0x24>)
 8008b18:	8993      	ldrh	r3, [r2, #12]
 8008b1a:	3301      	adds	r3, #1
 8008b1c:	8193      	strh	r3, [r2, #12]
 8008b1e:	e7f6      	b.n	8008b0e <LmhpComplianceOnMcpsConfirm+0x12>
 8008b20:	20000824 	.word	0x20000824

08008b24 <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
    if( ComplianceTestState.Initialized == false )
 8008b24:	4b08      	ldr	r3, [pc, #32]	; (8008b48 <LmhpComplianceOnMlmeConfirm+0x24>)
 8008b26:	781b      	ldrb	r3, [r3, #0]
 8008b28:	b12b      	cbz	r3, 8008b36 <LmhpComplianceOnMlmeConfirm+0x12>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 8008b2a:	4b07      	ldr	r3, [pc, #28]	; (8008b48 <LmhpComplianceOnMlmeConfirm+0x24>)
 8008b2c:	785b      	ldrb	r3, [r3, #1]
 8008b2e:	b113      	cbz	r3, 8008b36 <LmhpComplianceOnMlmeConfirm+0x12>
    {
        return;
    }

    if( mlmeConfirm->MlmeRequest == MLME_LINK_CHECK )
 8008b30:	7803      	ldrb	r3, [r0, #0]
 8008b32:	2b04      	cmp	r3, #4
 8008b34:	d000      	beq.n	8008b38 <LmhpComplianceOnMlmeConfirm+0x14>
    {
        ComplianceTestState.LinkCheck = true;
        ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
        ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
    }
}
 8008b36:	4770      	bx	lr
        ComplianceTestState.LinkCheck = true;
 8008b38:	4b03      	ldr	r3, [pc, #12]	; (8008b48 <LmhpComplianceOnMlmeConfirm+0x24>)
 8008b3a:	2201      	movs	r2, #1
 8008b3c:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
 8008b3e:	7a02      	ldrb	r2, [r0, #8]
 8008b40:	73da      	strb	r2, [r3, #15]
        ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
 8008b42:	7a42      	ldrb	r2, [r0, #9]
 8008b44:	741a      	strb	r2, [r3, #16]
 8008b46:	e7f6      	b.n	8008b36 <LmhpComplianceOnMlmeConfirm+0x12>
 8008b48:	20000824 	.word	0x20000824

08008b4c <LmhpComplianceProcess>:
}

static void LmhpComplianceProcess( void )
{
    /* Nothing to process */
}
 8008b4c:	4770      	bx	lr
	...

08008b50 <LmhpComplianceTxProcess>:
    if( ComplianceTestState.Initialized == false )
 8008b50:	4b23      	ldr	r3, [pc, #140]	; (8008be0 <LmhpComplianceTxProcess+0x90>)
 8008b52:	781b      	ldrb	r3, [r3, #0]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d03e      	beq.n	8008bd6 <LmhpComplianceTxProcess+0x86>
    if( ComplianceTestState.IsRunning == false )
 8008b58:	4b21      	ldr	r3, [pc, #132]	; (8008be0 <LmhpComplianceTxProcess+0x90>)
 8008b5a:	785b      	ldrb	r3, [r3, #1]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d03d      	beq.n	8008bdc <LmhpComplianceTxProcess+0x8c>
{
 8008b60:	b530      	push	{r4, r5, lr}
 8008b62:	b083      	sub	sp, #12
    if( ComplianceTestState.LinkCheck == true )
 8008b64:	4b1e      	ldr	r3, [pc, #120]	; (8008be0 <LmhpComplianceTxProcess+0x90>)
 8008b66:	7b9b      	ldrb	r3, [r3, #14]
 8008b68:	b313      	cbz	r3, 8008bb0 <LmhpComplianceTxProcess+0x60>
        ComplianceTestState.LinkCheck = false;
 8008b6a:	4b1d      	ldr	r3, [pc, #116]	; (8008be0 <LmhpComplianceTxProcess+0x90>)
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DataBufferSize = 3;
 8008b70:	2203      	movs	r2, #3
 8008b72:	719a      	strb	r2, [r3, #6]
        ComplianceTestState.DataBuffer[0] = 5;
 8008b74:	689a      	ldr	r2, [r3, #8]
 8008b76:	2105      	movs	r1, #5
 8008b78:	7011      	strb	r1, [r2, #0]
        ComplianceTestState.DataBuffer[1] = ComplianceTestState.DemodMargin;
 8008b7a:	7bd9      	ldrb	r1, [r3, #15]
 8008b7c:	7051      	strb	r1, [r2, #1]
        ComplianceTestState.DataBuffer[2] = ComplianceTestState.NbGateways;
 8008b7e:	7c19      	ldrb	r1, [r3, #16]
 8008b80:	7091      	strb	r1, [r2, #2]
        ComplianceTestState.State = 1;
 8008b82:	2201      	movs	r2, #1
 8008b84:	709a      	strb	r2, [r3, #2]
    LmHandlerAppData_t appData =
 8008b86:	23e0      	movs	r3, #224	; 0xe0
 8008b88:	f88d 3000 	strb.w	r3, [sp]
        .BufferSize = ComplianceTestState.DataBufferSize,
 8008b8c:	4c14      	ldr	r4, [pc, #80]	; (8008be0 <LmhpComplianceTxProcess+0x90>)
 8008b8e:	79a3      	ldrb	r3, [r4, #6]
    LmHandlerAppData_t appData =
 8008b90:	f88d 3001 	strb.w	r3, [sp, #1]
        .Buffer = ComplianceTestState.DataBuffer,
 8008b94:	68a3      	ldr	r3, [r4, #8]
    LmHandlerAppData_t appData =
 8008b96:	9301      	str	r3, [sp, #4]
    TimerStart( &ComplianceTxNextPacketTimer );
 8008b98:	4812      	ldr	r0, [pc, #72]	; (8008be4 <LmhpComplianceTxProcess+0x94>)
 8008b9a:	f009 f9d5 	bl	8011f48 <UTIL_TIMER_Start>
    return LmhpCompliancePackage.OnSendRequest( &appData, ( LmHandlerMsgTypes_t )ComplianceTestState.IsTxConfirmed, NULL, true );
 8008b9e:	4b12      	ldr	r3, [pc, #72]	; (8008be8 <LmhpComplianceTxProcess+0x98>)
 8008ba0:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8008ba2:	2301      	movs	r3, #1
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	78e1      	ldrb	r1, [r4, #3]
 8008ba8:	4668      	mov	r0, sp
 8008baa:	47a8      	blx	r5
}
 8008bac:	b003      	add	sp, #12
 8008bae:	bd30      	pop	{r4, r5, pc}
        switch( ComplianceTestState.State )
 8008bb0:	4b0b      	ldr	r3, [pc, #44]	; (8008be0 <LmhpComplianceTxProcess+0x90>)
 8008bb2:	789b      	ldrb	r3, [r3, #2]
 8008bb4:	2b01      	cmp	r3, #1
 8008bb6:	d005      	beq.n	8008bc4 <LmhpComplianceTxProcess+0x74>
 8008bb8:	2b04      	cmp	r3, #4
 8008bba:	d1e4      	bne.n	8008b86 <LmhpComplianceTxProcess+0x36>
            ComplianceTestState.State = 1;
 8008bbc:	4b08      	ldr	r3, [pc, #32]	; (8008be0 <LmhpComplianceTxProcess+0x90>)
 8008bbe:	2201      	movs	r2, #1
 8008bc0:	709a      	strb	r2, [r3, #2]
            break;
 8008bc2:	e7e0      	b.n	8008b86 <LmhpComplianceTxProcess+0x36>
            ComplianceTestState.DataBufferSize = 2;
 8008bc4:	4b06      	ldr	r3, [pc, #24]	; (8008be0 <LmhpComplianceTxProcess+0x90>)
 8008bc6:	2202      	movs	r2, #2
 8008bc8:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DataBuffer[0] = ComplianceTestState.DownLinkCounter >> 8;
 8008bca:	899a      	ldrh	r2, [r3, #12]
 8008bcc:	689b      	ldr	r3, [r3, #8]
 8008bce:	0a11      	lsrs	r1, r2, #8
 8008bd0:	7019      	strb	r1, [r3, #0]
            ComplianceTestState.DataBuffer[1] = ComplianceTestState.DownLinkCounter;
 8008bd2:	705a      	strb	r2, [r3, #1]
            break;
 8008bd4:	e7d7      	b.n	8008b86 <LmhpComplianceTxProcess+0x36>
        return LORAMAC_HANDLER_ERROR;
 8008bd6:	f04f 30ff 	mov.w	r0, #4294967295
 8008bda:	4770      	bx	lr
        return LORAMAC_HANDLER_SUCCESS;
 8008bdc:	2000      	movs	r0, #0
}
 8008bde:	4770      	bx	lr
 8008be0:	20000824 	.word	0x20000824
 8008be4:	20000838 	.word	0x20000838
 8008be8:	20000094 	.word	0x20000094

08008bec <LmhpComplianceOnMcpsIndication>:
    if( ComplianceTestState.Initialized == false )
 8008bec:	4b8d      	ldr	r3, [pc, #564]	; (8008e24 <LmhpComplianceOnMcpsIndication+0x238>)
 8008bee:	781b      	ldrb	r3, [r3, #0]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	f000 8116 	beq.w	8008e22 <LmhpComplianceOnMcpsIndication+0x236>
    if( mcpsIndication->RxData == false )
 8008bf6:	7b43      	ldrb	r3, [r0, #13]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	f000 8112 	beq.w	8008e22 <LmhpComplianceOnMcpsIndication+0x236>
    if ((ComplianceTestState.IsRunning == true) &&
 8008bfe:	4b89      	ldr	r3, [pc, #548]	; (8008e24 <LmhpComplianceOnMcpsIndication+0x238>)
 8008c00:	785b      	ldrb	r3, [r3, #1]
 8008c02:	b12b      	cbz	r3, 8008c10 <LmhpComplianceOnMcpsIndication+0x24>
        (mcpsIndication->AckReceived == 0))
 8008c04:	7b82      	ldrb	r2, [r0, #14]
    if ((ComplianceTestState.IsRunning == true) &&
 8008c06:	b91a      	cbnz	r2, 8008c10 <LmhpComplianceOnMcpsIndication+0x24>
        ComplianceTestState.DownLinkCounter++;
 8008c08:	4986      	ldr	r1, [pc, #536]	; (8008e24 <LmhpComplianceOnMcpsIndication+0x238>)
 8008c0a:	898a      	ldrh	r2, [r1, #12]
 8008c0c:	3201      	adds	r2, #1
 8008c0e:	818a      	strh	r2, [r1, #12]
    if( mcpsIndication->Port != COMPLIANCE_PORT )
 8008c10:	78c2      	ldrb	r2, [r0, #3]
 8008c12:	2ae0      	cmp	r2, #224	; 0xe0
 8008c14:	f040 8105 	bne.w	8008e22 <LmhpComplianceOnMcpsIndication+0x236>
{
 8008c18:	b510      	push	{r4, lr}
 8008c1a:	b08c      	sub	sp, #48	; 0x30
    if( ComplianceTestState.IsRunning == false )
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d140      	bne.n	8008ca2 <LmhpComplianceOnMcpsIndication+0xb6>
        if( ( mcpsIndication->BufferSize == 4 ) &&
 8008c20:	7b03      	ldrb	r3, [r0, #12]
 8008c22:	2b04      	cmp	r3, #4
 8008c24:	d001      	beq.n	8008c2a <LmhpComplianceOnMcpsIndication+0x3e>
}
 8008c26:	b00c      	add	sp, #48	; 0x30
 8008c28:	bd10      	pop	{r4, pc}
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 8008c2a:	6883      	ldr	r3, [r0, #8]
 8008c2c:	781a      	ldrb	r2, [r3, #0]
        if( ( mcpsIndication->BufferSize == 4 ) &&
 8008c2e:	2a01      	cmp	r2, #1
 8008c30:	d1f9      	bne.n	8008c26 <LmhpComplianceOnMcpsIndication+0x3a>
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 8008c32:	785a      	ldrb	r2, [r3, #1]
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 8008c34:	2a01      	cmp	r2, #1
 8008c36:	d1f6      	bne.n	8008c26 <LmhpComplianceOnMcpsIndication+0x3a>
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 8008c38:	789a      	ldrb	r2, [r3, #2]
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 8008c3a:	2a01      	cmp	r2, #1
 8008c3c:	d1f3      	bne.n	8008c26 <LmhpComplianceOnMcpsIndication+0x3a>
            ( mcpsIndication->Buffer[3] == 0x01 ) )
 8008c3e:	78db      	ldrb	r3, [r3, #3]
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 8008c40:	2b01      	cmp	r3, #1
 8008c42:	d1f0      	bne.n	8008c26 <LmhpComplianceOnMcpsIndication+0x3a>
            ComplianceTestState.IsTxConfirmed = false;
 8008c44:	4b77      	ldr	r3, [pc, #476]	; (8008e24 <LmhpComplianceOnMcpsIndication+0x238>)
 8008c46:	2400      	movs	r4, #0
 8008c48:	70dc      	strb	r4, [r3, #3]
            ComplianceTestState.Port = 224;
 8008c4a:	22e0      	movs	r2, #224	; 0xe0
 8008c4c:	711a      	strb	r2, [r3, #4]
            ComplianceTestState.DataBufferSize = 2;
 8008c4e:	2202      	movs	r2, #2
 8008c50:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DownLinkCounter = 0;
 8008c52:	819c      	strh	r4, [r3, #12]
            ComplianceTestState.LinkCheck = false;
 8008c54:	739c      	strb	r4, [r3, #14]
            ComplianceTestState.DemodMargin = 0;
 8008c56:	73dc      	strb	r4, [r3, #15]
            ComplianceTestState.NbGateways = 0;
 8008c58:	741c      	strb	r4, [r3, #16]
            ComplianceTestState.IsRunning = true;
 8008c5a:	2201      	movs	r2, #1
 8008c5c:	705a      	strb	r2, [r3, #1]
            ComplianceTestState.State = 1;
 8008c5e:	709a      	strb	r2, [r3, #2]
            mibReq.Type = MIB_ADR;
 8008c60:	2304      	movs	r3, #4
 8008c62:	f88d 300c 	strb.w	r3, [sp, #12]
            mibReq.Param.AdrEnable = true;
 8008c66:	f88d 2010 	strb.w	r2, [sp, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8008c6a:	a803      	add	r0, sp, #12
 8008c6c:	f002 fe0c 	bl	800b888 <LoRaMacMibSetRequestConfirm>
            LoRaMacTestSetDutyCycleOn( false );
 8008c70:	4620      	mov	r0, r4
 8008c72:	f003 fa17 	bl	800c0a4 <LoRaMacTestSetDutyCycleOn>
            if( LmhpComplianceParams->StopPeripherals != NULL )
 8008c76:	4b6c      	ldr	r3, [pc, #432]	; (8008e28 <LmhpComplianceOnMcpsIndication+0x23c>)
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	685b      	ldr	r3, [r3, #4]
 8008c7c:	b103      	cbz	r3, 8008c80 <LmhpComplianceOnMcpsIndication+0x94>
                LmhpComplianceParams->StopPeripherals( );
 8008c7e:	4798      	blx	r3
            TimerInit( &ComplianceTxNextPacketTimer, OnComplianceTxNextPacketTimerEvent );
 8008c80:	4c6a      	ldr	r4, [pc, #424]	; (8008e2c <LmhpComplianceOnMcpsIndication+0x240>)
 8008c82:	2200      	movs	r2, #0
 8008c84:	9200      	str	r2, [sp, #0]
 8008c86:	4b6a      	ldr	r3, [pc, #424]	; (8008e30 <LmhpComplianceOnMcpsIndication+0x244>)
 8008c88:	f04f 31ff 	mov.w	r1, #4294967295
 8008c8c:	4620      	mov	r0, r4
 8008c8e:	f009 f8a3 	bl	8011dd8 <UTIL_TIMER_Create>
            TimerSetValue( &ComplianceTxNextPacketTimer, COMPLIANCE_TX_DUTYCYCLE );
 8008c92:	f241 3188 	movw	r1, #5000	; 0x1388
 8008c96:	4620      	mov	r0, r4
 8008c98:	f009 f99c 	bl	8011fd4 <UTIL_TIMER_SetPeriod>
            LmhpComplianceTxProcess( );
 8008c9c:	f7ff ff58 	bl	8008b50 <LmhpComplianceTxProcess>
 8008ca0:	e7c1      	b.n	8008c26 <LmhpComplianceOnMcpsIndication+0x3a>
        ComplianceTestState.State = mcpsIndication->Buffer[0];
 8008ca2:	6882      	ldr	r2, [r0, #8]
 8008ca4:	7813      	ldrb	r3, [r2, #0]
 8008ca6:	495f      	ldr	r1, [pc, #380]	; (8008e24 <LmhpComplianceOnMcpsIndication+0x238>)
 8008ca8:	708b      	strb	r3, [r1, #2]
        switch( ComplianceTestState.State )
 8008caa:	2b0a      	cmp	r3, #10
 8008cac:	d8bb      	bhi.n	8008c26 <LmhpComplianceOnMcpsIndication+0x3a>
 8008cae:	e8df f003 	tbb	[pc, r3]
 8008cb2:	2206      	.short	0x2206
 8008cb4:	47312b26 	.word	0x47312b26
 8008cb8:	a49d6d4e 	.word	0xa49d6d4e
 8008cbc:	ae          	.byte	0xae
 8008cbd:	00          	.byte	0x00
                TimerStop( &ComplianceTxNextPacketTimer );
 8008cbe:	485b      	ldr	r0, [pc, #364]	; (8008e2c <LmhpComplianceOnMcpsIndication+0x240>)
 8008cc0:	f009 f8e8 	bl	8011e94 <UTIL_TIMER_Stop>
                ComplianceTestState.DownLinkCounter = 0;
 8008cc4:	4b57      	ldr	r3, [pc, #348]	; (8008e24 <LmhpComplianceOnMcpsIndication+0x238>)
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	819a      	strh	r2, [r3, #12]
                ComplianceTestState.IsRunning = false;
 8008cca:	705a      	strb	r2, [r3, #1]
                mibReq.Type = MIB_ADR;
 8008ccc:	2304      	movs	r3, #4
 8008cce:	f88d 300c 	strb.w	r3, [sp, #12]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 8008cd2:	4c55      	ldr	r4, [pc, #340]	; (8008e28 <LmhpComplianceOnMcpsIndication+0x23c>)
 8008cd4:	6823      	ldr	r3, [r4, #0]
 8008cd6:	781b      	ldrb	r3, [r3, #0]
 8008cd8:	f88d 3010 	strb.w	r3, [sp, #16]
                LoRaMacMibSetRequestConfirm( &mibReq );
 8008cdc:	a803      	add	r0, sp, #12
 8008cde:	f002 fdd3 	bl	800b888 <LoRaMacMibSetRequestConfirm>
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 8008ce2:	6823      	ldr	r3, [r4, #0]
 8008ce4:	7858      	ldrb	r0, [r3, #1]
 8008ce6:	f003 f9dd 	bl	800c0a4 <LoRaMacTestSetDutyCycleOn>
                if( LmhpComplianceParams->StartPeripherals != NULL )
 8008cea:	6823      	ldr	r3, [r4, #0]
 8008cec:	689b      	ldr	r3, [r3, #8]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d099      	beq.n	8008c26 <LmhpComplianceOnMcpsIndication+0x3a>
                    LmhpComplianceParams->StartPeripherals( );
 8008cf2:	4798      	blx	r3
            break;
 8008cf4:	e797      	b.n	8008c26 <LmhpComplianceOnMcpsIndication+0x3a>
            ComplianceTestState.DataBufferSize = 2;
 8008cf6:	4b4b      	ldr	r3, [pc, #300]	; (8008e24 <LmhpComplianceOnMcpsIndication+0x238>)
 8008cf8:	2202      	movs	r2, #2
 8008cfa:	719a      	strb	r2, [r3, #6]
            break;
 8008cfc:	e793      	b.n	8008c26 <LmhpComplianceOnMcpsIndication+0x3a>
            ComplianceTestState.IsTxConfirmed = true;
 8008cfe:	4b49      	ldr	r3, [pc, #292]	; (8008e24 <LmhpComplianceOnMcpsIndication+0x238>)
 8008d00:	2201      	movs	r2, #1
 8008d02:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.State = 1;
 8008d04:	709a      	strb	r2, [r3, #2]
            break;
 8008d06:	e78e      	b.n	8008c26 <LmhpComplianceOnMcpsIndication+0x3a>
            ComplianceTestState.IsTxConfirmed = false;
 8008d08:	4b46      	ldr	r3, [pc, #280]	; (8008e24 <LmhpComplianceOnMcpsIndication+0x238>)
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.State = 1;
 8008d0e:	2201      	movs	r2, #1
 8008d10:	709a      	strb	r2, [r3, #2]
            break;
 8008d12:	e788      	b.n	8008c26 <LmhpComplianceOnMcpsIndication+0x3a>
            ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 8008d14:	7b01      	ldrb	r1, [r0, #12]
 8008d16:	4b43      	ldr	r3, [pc, #268]	; (8008e24 <LmhpComplianceOnMcpsIndication+0x238>)
 8008d18:	7199      	strb	r1, [r3, #6]
            ComplianceTestState.DataBuffer[0] = 4;
 8008d1a:	689c      	ldr	r4, [r3, #8]
 8008d1c:	2304      	movs	r3, #4
 8008d1e:	7023      	strb	r3, [r4, #0]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 8008d20:	2301      	movs	r3, #1
 8008d22:	4a40      	ldr	r2, [pc, #256]	; (8008e24 <LmhpComplianceOnMcpsIndication+0x238>)
 8008d24:	7952      	ldrb	r2, [r2, #5]
 8008d26:	428a      	cmp	r2, r1
 8008d28:	bf28      	it	cs
 8008d2a:	460a      	movcs	r2, r1
 8008d2c:	429a      	cmp	r2, r3
 8008d2e:	f67f af7a 	bls.w	8008c26 <LmhpComplianceOnMcpsIndication+0x3a>
                ComplianceTestState.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 8008d32:	6882      	ldr	r2, [r0, #8]
 8008d34:	5cd2      	ldrb	r2, [r2, r3]
 8008d36:	3201      	adds	r2, #1
 8008d38:	54e2      	strb	r2, [r4, r3]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 8008d3a:	3301      	adds	r3, #1
 8008d3c:	b2db      	uxtb	r3, r3
 8008d3e:	e7f0      	b.n	8008d22 <LmhpComplianceOnMcpsIndication+0x136>
                mlmeReq.Type = MLME_LINK_CHECK;
 8008d40:	2304      	movs	r3, #4
 8008d42:	f88d 300c 	strb.w	r3, [sp, #12]
                LoRaMacMlmeRequest( &mlmeReq );
 8008d46:	a803      	add	r0, sp, #12
 8008d48:	f003 f81a 	bl	800bd80 <LoRaMacMlmeRequest>
            break;
 8008d4c:	e76b      	b.n	8008c26 <LmhpComplianceOnMcpsIndication+0x3a>
                TimerStop(&ComplianceTxNextPacketTimer);
 8008d4e:	4837      	ldr	r0, [pc, #220]	; (8008e2c <LmhpComplianceOnMcpsIndication+0x240>)
 8008d50:	f009 f8a0 	bl	8011e94 <UTIL_TIMER_Stop>
                ComplianceTestState.DownLinkCounter = 0;
 8008d54:	4b33      	ldr	r3, [pc, #204]	; (8008e24 <LmhpComplianceOnMcpsIndication+0x238>)
 8008d56:	2200      	movs	r2, #0
 8008d58:	819a      	strh	r2, [r3, #12]
                ComplianceTestState.IsRunning = false;
 8008d5a:	705a      	strb	r2, [r3, #1]
                mibReq.Type = MIB_ADR;
 8008d5c:	2304      	movs	r3, #4
 8008d5e:	f88d 300c 	strb.w	r3, [sp, #12]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 8008d62:	4c31      	ldr	r4, [pc, #196]	; (8008e28 <LmhpComplianceOnMcpsIndication+0x23c>)
 8008d64:	6823      	ldr	r3, [r4, #0]
 8008d66:	781b      	ldrb	r3, [r3, #0]
 8008d68:	f88d 3010 	strb.w	r3, [sp, #16]
                LoRaMacMibSetRequestConfirm( &mibReq );
 8008d6c:	a803      	add	r0, sp, #12
 8008d6e:	f002 fd8b 	bl	800b888 <LoRaMacMibSetRequestConfirm>
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 8008d72:	6823      	ldr	r3, [r4, #0]
 8008d74:	7858      	ldrb	r0, [r3, #1]
 8008d76:	f003 f995 	bl	800c0a4 <LoRaMacTestSetDutyCycleOn>
                if( LmhpComplianceParams->StartPeripherals != NULL )
 8008d7a:	6823      	ldr	r3, [r4, #0]
 8008d7c:	689b      	ldr	r3, [r3, #8]
 8008d7e:	b103      	cbz	r3, 8008d82 <LmhpComplianceOnMcpsIndication+0x196>
                    LmhpComplianceParams->StartPeripherals( );
 8008d80:	4798      	blx	r3
                LmhpCompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA );
 8008d82:	4b2c      	ldr	r3, [pc, #176]	; (8008e34 <LmhpComplianceOnMcpsIndication+0x248>)
 8008d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d86:	2002      	movs	r0, #2
 8008d88:	4798      	blx	r3
            break;
 8008d8a:	e74c      	b.n	8008c26 <LmhpComplianceOnMcpsIndication+0x3a>
                if( mcpsIndication->BufferSize == 3 )
 8008d8c:	7b03      	ldrb	r3, [r0, #12]
 8008d8e:	2b03      	cmp	r3, #3
 8008d90:	d008      	beq.n	8008da4 <LmhpComplianceOnMcpsIndication+0x1b8>
                else if( mcpsIndication->BufferSize == 7 )
 8008d92:	2b07      	cmp	r3, #7
 8008d94:	d010      	beq.n	8008db8 <LmhpComplianceOnMcpsIndication+0x1cc>
                LoRaMacMlmeRequest( &mlmeReq );
 8008d96:	a803      	add	r0, sp, #12
 8008d98:	f002 fff2 	bl	800bd80 <LoRaMacMlmeRequest>
                ComplianceTestState.State = 1;
 8008d9c:	4b21      	ldr	r3, [pc, #132]	; (8008e24 <LmhpComplianceOnMcpsIndication+0x238>)
 8008d9e:	2201      	movs	r2, #1
 8008da0:	709a      	strb	r2, [r3, #2]
            break;
 8008da2:	e740      	b.n	8008c26 <LmhpComplianceOnMcpsIndication+0x3a>
                    mlmeReq.Type = MLME_TXCW;
 8008da4:	2305      	movs	r3, #5
 8008da6:	f88d 300c 	strb.w	r3, [sp, #12]
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 8008daa:	7851      	ldrb	r1, [r2, #1]
 8008dac:	7893      	ldrb	r3, [r2, #2]
 8008dae:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8008db2:	f8ad 3010 	strh.w	r3, [sp, #16]
 8008db6:	e7ee      	b.n	8008d96 <LmhpComplianceOnMcpsIndication+0x1aa>
                    mlmeReq.Type = MLME_TXCW_1;
 8008db8:	2306      	movs	r3, #6
 8008dba:	f88d 300c 	strb.w	r3, [sp, #12]
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 8008dbe:	7851      	ldrb	r1, [r2, #1]
 8008dc0:	7893      	ldrb	r3, [r2, #2]
 8008dc2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8008dc6:	f8ad 3010 	strh.w	r3, [sp, #16]
                    mlmeReq.Req.TxCw.Frequency = ( uint32_t )( ( mcpsIndication->Buffer[3] << 16 ) | ( mcpsIndication->Buffer[4] << 8 ) | mcpsIndication->Buffer[5] ) * 100;
 8008dca:	78d1      	ldrb	r1, [r2, #3]
 8008dcc:	7913      	ldrb	r3, [r2, #4]
 8008dce:	021b      	lsls	r3, r3, #8
 8008dd0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008dd4:	7952      	ldrb	r2, [r2, #5]
 8008dd6:	4313      	orrs	r3, r2
 8008dd8:	2264      	movs	r2, #100	; 0x64
 8008dda:	fb02 f303 	mul.w	r3, r2, r3
 8008dde:	9305      	str	r3, [sp, #20]
                    mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 8008de0:	6883      	ldr	r3, [r0, #8]
 8008de2:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8008de6:	f88d 3018 	strb.w	r3, [sp, #24]
 8008dea:	e7d4      	b.n	8008d96 <LmhpComplianceOnMcpsIndication+0x1aa>
                mlmeReq.Type = MLME_DEVICE_TIME;
 8008dec:	230a      	movs	r3, #10
 8008dee:	f88d 300c 	strb.w	r3, [sp, #12]
                LoRaMacMlmeRequest( &mlmeReq );
 8008df2:	a803      	add	r0, sp, #12
 8008df4:	f002 ffc4 	bl	800bd80 <LoRaMacMlmeRequest>
            break;
 8008df8:	e715      	b.n	8008c26 <LmhpComplianceOnMcpsIndication+0x3a>
                mibReq.Type = MIB_DEVICE_CLASS;
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	f88d 300c 	strb.w	r3, [sp, #12]
                mibReq.Param.Class = ( DeviceClass_t )mcpsIndication->Buffer[1];;
 8008e00:	7853      	ldrb	r3, [r2, #1]
 8008e02:	f88d 3010 	strb.w	r3, [sp, #16]
                LoRaMacMibSetRequestConfirm( &mibReq );
 8008e06:	a803      	add	r0, sp, #12
 8008e08:	f002 fd3e 	bl	800b888 <LoRaMacMibSetRequestConfirm>
            break;
 8008e0c:	e70b      	b.n	8008c26 <LmhpComplianceOnMcpsIndication+0x3a>
                mlmeReq.Type = MLME_PING_SLOT_INFO;
 8008e0e:	230d      	movs	r3, #13
 8008e10:	f88d 300c 	strb.w	r3, [sp, #12]
                mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 8008e14:	7853      	ldrb	r3, [r2, #1]
 8008e16:	f88d 3010 	strb.w	r3, [sp, #16]
                LoRaMacMlmeRequest( &mlmeReq );
 8008e1a:	a803      	add	r0, sp, #12
 8008e1c:	f002 ffb0 	bl	800bd80 <LoRaMacMlmeRequest>
            break;
 8008e20:	e701      	b.n	8008c26 <LmhpComplianceOnMcpsIndication+0x3a>
 8008e22:	4770      	bx	lr
 8008e24:	20000824 	.word	0x20000824
 8008e28:	20000850 	.word	0x20000850
 8008e2c:	20000838 	.word	0x20000838
 8008e30:	08008e39 	.word	0x08008e39
 8008e34:	20000094 	.word	0x20000094

08008e38 <OnComplianceTxNextPacketTimerEvent>:

static void OnComplianceTxNextPacketTimerEvent( void* context )
{
 8008e38:	b508      	push	{r3, lr}
    LmhpComplianceTxProcess( );
 8008e3a:	f7ff fe89 	bl	8008b50 <LmhpComplianceTxProcess>
}
 8008e3e:	bd08      	pop	{r3, pc}

08008e40 <LmhpCompliancePackageFactory>:
}
 8008e40:	4800      	ldr	r0, [pc, #0]	; (8008e44 <LmhpCompliancePackageFactory+0x4>)
 8008e42:	4770      	bx	lr
 8008e44:	20000094 	.word	0x20000094

08008e48 <OnRadioRxError>:
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
}

static void OnRadioRxError( void )
{
 8008e48:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.RxError = 1;
 8008e4a:	4a06      	ldr	r2, [pc, #24]	; (8008e64 <OnRadioRxError+0x1c>)
 8008e4c:	7813      	ldrb	r3, [r2, #0]
 8008e4e:	f043 0302 	orr.w	r3, r3, #2
 8008e52:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8008e54:	4b04      	ldr	r3, [pc, #16]	; (8008e68 <OnRadioRxError+0x20>)
 8008e56:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8008e5a:	b113      	cbz	r3, 8008e62 <OnRadioRxError+0x1a>
 8008e5c:	691b      	ldr	r3, [r3, #16]
 8008e5e:	b103      	cbz	r3, 8008e62 <OnRadioRxError+0x1a>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8008e60:	4798      	blx	r3
    }
}
 8008e62:	bd08      	pop	{r3, pc}
 8008e64:	20000854 	.word	0x20000854
 8008e68:	20000858 	.word	0x20000858

08008e6c <UpdateRxSlotIdleState>:
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
}

static void UpdateRxSlotIdleState( void )
{
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8008e6c:	4b07      	ldr	r3, [pc, #28]	; (8008e8c <UpdateRxSlotIdleState+0x20>)
 8008e6e:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8008e72:	2b02      	cmp	r3, #2
 8008e74:	d004      	beq.n	8008e80 <UpdateRxSlotIdleState+0x14>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 8008e76:	4b06      	ldr	r3, [pc, #24]	; (8008e90 <UpdateRxSlotIdleState+0x24>)
 8008e78:	2206      	movs	r2, #6
 8008e7a:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
 8008e7e:	4770      	bx	lr
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 8008e80:	4b03      	ldr	r3, [pc, #12]	; (8008e90 <UpdateRxSlotIdleState+0x24>)
 8008e82:	2202      	movs	r2, #2
 8008e84:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
    }
}
 8008e88:	4770      	bx	lr
 8008e8a:	bf00      	nop
 8008e8c:	20000d60 	.word	0x20000d60
 8008e90:	20000858 	.word	0x20000858

08008e94 <LoRaMacEnableRequests>:
}


static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
    MacCtx.AllowRequests = requestState;
 8008e94:	4b01      	ldr	r3, [pc, #4]	; (8008e9c <LoRaMacEnableRequests+0x8>)
 8008e96:	f883 0482 	strb.w	r0, [r3, #1154]	; 0x482
}
 8008e9a:	4770      	bx	lr
 8008e9c:	20000858 	.word	0x20000858

08008ea0 <LoRaMacHandleIndicationEvents>:
        }
    }
}

static void LoRaMacHandleIndicationEvents( void )
{
 8008ea0:	b530      	push	{r4, r5, lr}
 8008ea2:	b089      	sub	sp, #36	; 0x24
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 8008ea4:	4b22      	ldr	r3, [pc, #136]	; (8008f30 <LoRaMacHandleIndicationEvents+0x90>)
 8008ea6:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8008eaa:	f013 0f08 	tst.w	r3, #8
 8008eae:	d00e      	beq.n	8008ece <LoRaMacHandleIndicationEvents+0x2e>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 8008eb0:	481f      	ldr	r0, [pc, #124]	; (8008f30 <LoRaMacHandleIndicationEvents+0x90>)
 8008eb2:	f890 3481 	ldrb.w	r3, [r0, #1153]	; 0x481
 8008eb6:	f36f 03c3 	bfc	r3, #3, #1
 8008eba:	f880 3481 	strb.w	r3, [r0, #1153]	; 0x481
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 8008ebe:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 8008ec2:	68db      	ldr	r3, [r3, #12]
 8008ec4:	f200 417c 	addw	r1, r0, #1148	; 0x47c
 8008ec8:	f500 608c 	add.w	r0, r0, #1120	; 0x460
 8008ecc:	4798      	blx	r3
    }

    if( MacCtx.MacFlags.Bits.MlmeSchedUplinkInd == 1 )
 8008ece:	4b18      	ldr	r3, [pc, #96]	; (8008f30 <LoRaMacHandleIndicationEvents+0x90>)
 8008ed0:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8008ed4:	f013 0f10 	tst.w	r3, #16
 8008ed8:	d013      	beq.n	8008f02 <LoRaMacHandleIndicationEvents+0x62>
    {
        MlmeIndication_t schduleUplinkIndication;
        schduleUplinkIndication.MlmeIndication = MLME_SCHEDULE_UPLINK;
 8008eda:	2307      	movs	r3, #7
 8008edc:	f88d 3004 	strb.w	r3, [sp, #4]
        schduleUplinkIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8008ee0:	2500      	movs	r5, #0
 8008ee2:	f88d 5005 	strb.w	r5, [sp, #5]

        MacCtx.MacPrimitives->MacMlmeIndication( &schduleUplinkIndication, &MacCtx.RxStatus );
 8008ee6:	4c12      	ldr	r4, [pc, #72]	; (8008f30 <LoRaMacHandleIndicationEvents+0x90>)
 8008ee8:	f8d4 3344 	ldr.w	r3, [r4, #836]	; 0x344
 8008eec:	68db      	ldr	r3, [r3, #12]
 8008eee:	f204 417c 	addw	r1, r4, #1148	; 0x47c
 8008ef2:	a801      	add	r0, sp, #4
 8008ef4:	4798      	blx	r3
        MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 0;
 8008ef6:	f894 3481 	ldrb.w	r3, [r4, #1153]	; 0x481
 8008efa:	f365 1304 	bfi	r3, r5, #4, #1
 8008efe:	f884 3481 	strb.w	r3, [r4, #1153]	; 0x481
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8008f02:	4b0b      	ldr	r3, [pc, #44]	; (8008f30 <LoRaMacHandleIndicationEvents+0x90>)
 8008f04:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8008f08:	f013 0f02 	tst.w	r3, #2
 8008f0c:	d00e      	beq.n	8008f2c <LoRaMacHandleIndicationEvents+0x8c>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 8008f0e:	4808      	ldr	r0, [pc, #32]	; (8008f30 <LoRaMacHandleIndicationEvents+0x90>)
 8008f10:	f890 3481 	ldrb.w	r3, [r0, #1153]	; 0x481
 8008f14:	f36f 0341 	bfc	r3, #1, #1
 8008f18:	f880 3481 	strb.w	r3, [r0, #1153]	; 0x481
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 8008f1c:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 8008f20:	685b      	ldr	r3, [r3, #4]
 8008f22:	f200 417c 	addw	r1, r0, #1148	; 0x47c
 8008f26:	f200 401c 	addw	r0, r0, #1052	; 0x41c
 8008f2a:	4798      	blx	r3
    }
}
 8008f2c:	b009      	add	sp, #36	; 0x24
 8008f2e:	bd30      	pop	{r4, r5, pc}
 8008f30:	20000858 	.word	0x20000858

08008f34 <LoRaMacCheckForRxAbort>:
}

static void LoRaMacCheckForRxAbort( void )
{
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 8008f34:	4b07      	ldr	r3, [pc, #28]	; (8008f54 <LoRaMacCheckForRxAbort+0x20>)
 8008f36:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8008f3a:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008f3e:	d008      	beq.n	8008f52 <LoRaMacCheckForRxAbort+0x1e>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 8008f40:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8008f44:	4a03      	ldr	r2, [pc, #12]	; (8008f54 <LoRaMacCheckForRxAbort+0x20>)
 8008f46:	f8c2 1340 	str.w	r1, [r2, #832]	; 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8008f4a:	f023 0382 	bic.w	r3, r3, #130	; 0x82
 8008f4e:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    }
}
 8008f52:	4770      	bx	lr
 8008f54:	20000858 	.word	0x20000858

08008f58 <SetMlmeScheduleUplinkIndication>:
    return false;
}

static void SetMlmeScheduleUplinkIndication( void )
{
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 8008f58:	4a03      	ldr	r2, [pc, #12]	; (8008f68 <SetMlmeScheduleUplinkIndication+0x10>)
 8008f5a:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8008f5e:	f043 0310 	orr.w	r3, r3, #16
 8008f62:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
}
 8008f66:	4770      	bx	lr
 8008f68:	20000858 	.word	0x20000858

08008f6c <CalculateBackOff>:

static void CalculateBackOff( void )
{
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 8008f6c:	4b06      	ldr	r3, [pc, #24]	; (8008f88 <CalculateBackOff+0x1c>)
 8008f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f70:	b94b      	cbnz	r3, 8008f86 <CalculateBackOff+0x1a>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 8008f72:	4a05      	ldr	r2, [pc, #20]	; (8008f88 <CalculateBackOff+0x1c>)
 8008f74:	f8b2 3102 	ldrh.w	r3, [r2, #258]	; 0x102
 8008f78:	4904      	ldr	r1, [pc, #16]	; (8008f8c <CalculateBackOff+0x20>)
 8008f7a:	f8d1 1418 	ldr.w	r1, [r1, #1048]	; 0x418
 8008f7e:	3b01      	subs	r3, #1
 8008f80:	fb01 f303 	mul.w	r3, r1, r3
 8008f84:	6313      	str	r3, [r2, #48]	; 0x30
    }
}
 8008f86:	4770      	bx	lr
 8008f88:	20000d60 	.word	0x20000d60
 8008f8c:	20000858 	.word	0x20000858

08008f90 <SetTxContinuousWave1>:

    return LORAMAC_STATUS_OK;
}

static LoRaMacStatus_t SetTxContinuousWave1( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 8008f90:	b508      	push	{r3, lr}
 8008f92:	4684      	mov	ip, r0
 8008f94:	4608      	mov	r0, r1
 8008f96:	4611      	mov	r1, r2
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8008f98:	4b06      	ldr	r3, [pc, #24]	; (8008fb4 <SetTxContinuousWave1+0x24>)
 8008f9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f9c:	4662      	mov	r2, ip
 8008f9e:	b249      	sxtb	r1, r1
 8008fa0:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8008fa2:	4a05      	ldr	r2, [pc, #20]	; (8008fb8 <SetTxContinuousWave1+0x28>)
 8008fa4:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 8008fa8:	f043 0302 	orr.w	r3, r3, #2
 8008fac:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
}
 8008fb0:	2000      	movs	r0, #0
 8008fb2:	bd08      	pop	{r3, pc}
 8008fb4:	08017b28 	.word	0x08017b28
 8008fb8:	20000858 	.word	0x20000858

08008fbc <GetNvmData>:

LoRaMacNvmData_t* GetNvmData( void )
{
    return &Nvm;
}
 8008fbc:	4800      	ldr	r0, [pc, #0]	; (8008fc0 <GetNvmData+0x4>)
 8008fbe:	4770      	bx	lr
 8008fc0:	20000d60 	.word	0x20000d60

08008fc4 <DetermineFrameType>:
    return LORAMAC_STATUS_OK;
}

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 8008fc4:	4602      	mov	r2, r0
 8008fc6:	b1f8      	cbz	r0, 8009008 <DetermineFrameType+0x44>
 8008fc8:	b301      	cbz	r1, 800900c <DetermineFrameType+0x48>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 8008fca:	7b03      	ldrb	r3, [r0, #12]
 8008fcc:	f013 030f 	ands.w	r3, r3, #15
 8008fd0:	d005      	beq.n	8008fde <DetermineFrameType+0x1a>
 8008fd2:	f890 0020 	ldrb.w	r0, [r0, #32]
 8008fd6:	b110      	cbz	r0, 8008fde <DetermineFrameType+0x1a>
    {
        *fType = FRAME_TYPE_A;
 8008fd8:	2000      	movs	r0, #0
 8008fda:	7008      	strb	r0, [r1, #0]
 8008fdc:	4770      	bx	lr
    }
    else if( macMsg->FRMPayloadSize == 0 )
 8008fde:	f892 0028 	ldrb.w	r0, [r2, #40]	; 0x28
 8008fe2:	b910      	cbnz	r0, 8008fea <DetermineFrameType+0x26>
    {
        *fType = FRAME_TYPE_B;
 8008fe4:	2301      	movs	r3, #1
 8008fe6:	700b      	strb	r3, [r1, #0]
 8008fe8:	4770      	bx	lr
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 8008fea:	b92b      	cbnz	r3, 8008ff8 <DetermineFrameType+0x34>
 8008fec:	f892 0020 	ldrb.w	r0, [r2, #32]
 8008ff0:	b910      	cbnz	r0, 8008ff8 <DetermineFrameType+0x34>
    {
        *fType = FRAME_TYPE_C;
 8008ff2:	2302      	movs	r3, #2
 8008ff4:	700b      	strb	r3, [r1, #0]
 8008ff6:	4770      	bx	lr
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 8008ff8:	b953      	cbnz	r3, 8009010 <DetermineFrameType+0x4c>
 8008ffa:	f892 2020 	ldrb.w	r2, [r2, #32]
 8008ffe:	b14a      	cbz	r2, 8009014 <DetermineFrameType+0x50>
    {
        *fType = FRAME_TYPE_D;
 8009000:	2203      	movs	r2, #3
 8009002:	700a      	strb	r2, [r1, #0]
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
    }

    return LORAMAC_STATUS_OK;
 8009004:	4618      	mov	r0, r3
        *fType = FRAME_TYPE_D;
 8009006:	4770      	bx	lr
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8009008:	2003      	movs	r0, #3
 800900a:	4770      	bx	lr
 800900c:	2003      	movs	r0, #3
 800900e:	4770      	bx	lr
        return LORAMAC_STATUS_ERROR;
 8009010:	2017      	movs	r0, #23
 8009012:	4770      	bx	lr
 8009014:	2017      	movs	r0, #23
}
 8009016:	4770      	bx	lr

08009018 <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
    // Unconfirmed uplink, when all retransmissions are done.
    if( MacCtx.ChannelsNbTransCounter >=
 8009018:	4b0f      	ldr	r3, [pc, #60]	; (8009058 <CheckRetransUnconfirmedUplink+0x40>)
 800901a:	f893 2410 	ldrb.w	r2, [r3, #1040]	; 0x410
        Nvm.MacGroup2.MacParams.ChannelsNbTrans )
 800901e:	4b0f      	ldr	r3, [pc, #60]	; (800905c <CheckRetransUnconfirmedUplink+0x44>)
 8009020:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
    if( MacCtx.ChannelsNbTransCounter >=
 8009024:	429a      	cmp	r2, r3
 8009026:	d20f      	bcs.n	8009048 <CheckRetransUnconfirmedUplink+0x30>
    {
        return true;
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8009028:	4b0b      	ldr	r3, [pc, #44]	; (8009058 <CheckRetransUnconfirmedUplink+0x40>)
 800902a:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800902e:	f013 0f02 	tst.w	r3, #2
 8009032:	d00b      	beq.n	800904c <CheckRetransUnconfirmedUplink+0x34>
    {
        // For Class A stop in each case
        if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8009034:	4b09      	ldr	r3, [pc, #36]	; (800905c <CheckRetransUnconfirmedUplink+0x44>)
 8009036:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800903a:	b14b      	cbz	r3, 8009050 <CheckRetransUnconfirmedUplink+0x38>
        {
            return true;
        }
        else
        {// For Class B & C stop only if the frame was received in RX1 window
            if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 800903c:	4b06      	ldr	r3, [pc, #24]	; (8009058 <CheckRetransUnconfirmedUplink+0x40>)
 800903e:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 8009042:	b13b      	cbz	r3, 8009054 <CheckRetransUnconfirmedUplink+0x3c>
            {
                return true;
            }
        }
    }
    return false;
 8009044:	2000      	movs	r0, #0
 8009046:	4770      	bx	lr
        return true;
 8009048:	2001      	movs	r0, #1
 800904a:	4770      	bx	lr
    return false;
 800904c:	2000      	movs	r0, #0
 800904e:	4770      	bx	lr
            return true;
 8009050:	2001      	movs	r0, #1
 8009052:	4770      	bx	lr
                return true;
 8009054:	2001      	movs	r0, #1
}
 8009056:	4770      	bx	lr
 8009058:	20000858 	.word	0x20000858
 800905c:	20000d60 	.word	0x20000d60

08009060 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
    // Confirmed uplink, when all retransmissions ( tries to get a ack ) are done.
    if( MacCtx.AckTimeoutRetriesCounter >=
 8009060:	4b0a      	ldr	r3, [pc, #40]	; (800908c <CheckRetransConfirmedUplink+0x2c>)
 8009062:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
        MacCtx.AckTimeoutRetries )
 8009066:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
    if( MacCtx.AckTimeoutRetriesCounter >=
 800906a:	429a      	cmp	r2, r3
 800906c:	d209      	bcs.n	8009082 <CheckRetransConfirmedUplink+0x22>
    {
        return true;
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800906e:	4b07      	ldr	r3, [pc, #28]	; (800908c <CheckRetransConfirmedUplink+0x2c>)
 8009070:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8009074:	f013 0f02 	tst.w	r3, #2
 8009078:	d005      	beq.n	8009086 <CheckRetransConfirmedUplink+0x26>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 800907a:	4b04      	ldr	r3, [pc, #16]	; (800908c <CheckRetransConfirmedUplink+0x2c>)
 800907c:	f893 043c 	ldrb.w	r0, [r3, #1084]	; 0x43c
 8009080:	4770      	bx	lr
        return true;
 8009082:	2001      	movs	r0, #1
 8009084:	4770      	bx	lr
        {
            return true;
        }
    }
    return false;
 8009086:	2000      	movs	r0, #0
}
 8009088:	4770      	bx	lr
 800908a:	bf00      	nop
 800908c:	20000858 	.word	0x20000858

08009090 <StopRetransmission>:

static bool StopRetransmission( void )
{
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8009090:	4b11      	ldr	r3, [pc, #68]	; (80090d8 <StopRetransmission+0x48>)
 8009092:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8009096:	f013 0f02 	tst.w	r3, #2
 800909a:	d004      	beq.n	80090a6 <StopRetransmission+0x16>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800909c:	4b0e      	ldr	r3, [pc, #56]	; (80090d8 <StopRetransmission+0x48>)
 800909e:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 80090a2:	2b01      	cmp	r3, #1
 80090a4:	d907      	bls.n	80090b6 <StopRetransmission+0x26>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 80090a6:	4b0d      	ldr	r3, [pc, #52]	; (80090dc <StopRetransmission+0x4c>)
 80090a8:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 80090ac:	b11b      	cbz	r3, 80090b6 <StopRetransmission+0x26>
        {
            Nvm.MacGroup1.AdrAckCounter++;
 80090ae:	4a0b      	ldr	r2, [pc, #44]	; (80090dc <StopRetransmission+0x4c>)
 80090b0:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80090b2:	3301      	adds	r3, #1
 80090b4:	6293      	str	r3, [r2, #40]	; 0x28
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 80090b6:	4b08      	ldr	r3, [pc, #32]	; (80090d8 <StopRetransmission+0x48>)
 80090b8:	2200      	movs	r2, #0
 80090ba:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    MacCtx.NodeAckRequested = false;
 80090be:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    MacCtx.AckTimeoutRetry = false;
 80090c2:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 80090c6:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 80090ca:	f022 0202 	bic.w	r2, r2, #2
 80090ce:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    return true;
}
 80090d2:	2001      	movs	r0, #1
 80090d4:	4770      	bx	lr
 80090d6:	bf00      	nop
 80090d8:	20000858 	.word	0x20000858
 80090dc:	20000d60 	.word	0x20000d60

080090e0 <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 80090e0:	b508      	push	{r3, lr}
    if( ( MacCtx.MacCallbacks != NULL ) &&
 80090e2:	4b04      	ldr	r3, [pc, #16]	; (80090f4 <CallNvmDataChangeCallback+0x14>)
 80090e4:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80090e8:	b113      	cbz	r3, 80090f0 <CallNvmDataChangeCallback+0x10>
        ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 80090ea:	68db      	ldr	r3, [r3, #12]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 80090ec:	b103      	cbz	r3, 80090f0 <CallNvmDataChangeCallback+0x10>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 80090ee:	4798      	blx	r3
    }
}
 80090f0:	bd08      	pop	{r3, pc}
 80090f2:	bf00      	nop
 80090f4:	20000858 	.word	0x20000858

080090f8 <IsRequestPending>:
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
}

static uint8_t IsRequestPending( void )
{
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 80090f8:	4b04      	ldr	r3, [pc, #16]	; (800910c <IsRequestPending+0x14>)
 80090fa:	f893 0481 	ldrb.w	r0, [r3, #1153]	; 0x481
 80090fe:	f010 0005 	ands.w	r0, r0, #5
 8009102:	d100      	bne.n	8009106 <IsRequestPending+0xe>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
    {
        return 1;
    }
    return 0;
}
 8009104:	4770      	bx	lr
        return 1;
 8009106:	2001      	movs	r0, #1
 8009108:	e7fc      	b.n	8009104 <IsRequestPending+0xc>
 800910a:	bf00      	nop
 800910c:	20000858 	.word	0x20000858

08009110 <AckTimeoutRetriesProcess>:
    if( MacCtx.AckTimeoutRetriesCounter < MacCtx.AckTimeoutRetries )
 8009110:	4a13      	ldr	r2, [pc, #76]	; (8009160 <AckTimeoutRetriesProcess+0x50>)
 8009112:	f892 3412 	ldrb.w	r3, [r2, #1042]	; 0x412
 8009116:	f892 2411 	ldrb.w	r2, [r2, #1041]	; 0x411
 800911a:	4293      	cmp	r3, r2
 800911c:	d207      	bcs.n	800912e <AckTimeoutRetriesProcess+0x1e>
        MacCtx.AckTimeoutRetriesCounter++;
 800911e:	3301      	adds	r3, #1
 8009120:	b2db      	uxtb	r3, r3
 8009122:	4a0f      	ldr	r2, [pc, #60]	; (8009160 <AckTimeoutRetriesProcess+0x50>)
 8009124:	f882 3412 	strb.w	r3, [r2, #1042]	; 0x412
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 8009128:	f013 0f01 	tst.w	r3, #1
 800912c:	d100      	bne.n	8009130 <AckTimeoutRetriesProcess+0x20>
 800912e:	4770      	bx	lr
{
 8009130:	b510      	push	{r4, lr}
 8009132:	b084      	sub	sp, #16
            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8009134:	2322      	movs	r3, #34	; 0x22
 8009136:	f88d 3008 	strb.w	r3, [sp, #8]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800913a:	4c0a      	ldr	r4, [pc, #40]	; (8009164 <AckTimeoutRetriesProcess+0x54>)
 800913c:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8009140:	f88d 300a 	strb.w	r3, [sp, #10]
            getPhy.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8009144:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
 8009148:	f88d 3009 	strb.w	r3, [sp, #9]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800914c:	a902      	add	r1, sp, #8
 800914e:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8009152:	f004 f816 	bl	800d182 <RegionGetPhyParam>
 8009156:	9001      	str	r0, [sp, #4]
            Nvm.MacGroup1.ChannelsDatarate = phyParam.Value;
 8009158:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
}
 800915c:	b004      	add	sp, #16
 800915e:	bd10      	pop	{r4, pc}
 8009160:	20000858 	.word	0x20000858
 8009164:	20000d60 	.word	0x20000d60

08009168 <GetMaxAppPayloadWithoutFOptsLength>:
{
 8009168:	b500      	push	{lr}
 800916a:	b085      	sub	sp, #20
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800916c:	4b0d      	ldr	r3, [pc, #52]	; (80091a4 <GetMaxAppPayloadWithoutFOptsLength+0x3c>)
 800916e:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 8009172:	f88d 200a 	strb.w	r2, [sp, #10]
    getPhy.Datarate = datarate;
 8009176:	f88d 0009 	strb.w	r0, [sp, #9]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 800917a:	220d      	movs	r2, #13
 800917c:	f88d 2008 	strb.w	r2, [sp, #8]
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 8009180:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009184:	b113      	cbz	r3, 800918c <GetMaxAppPayloadWithoutFOptsLength+0x24>
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8009186:	230e      	movs	r3, #14
 8009188:	f88d 3008 	strb.w	r3, [sp, #8]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800918c:	a902      	add	r1, sp, #8
 800918e:	4b05      	ldr	r3, [pc, #20]	; (80091a4 <GetMaxAppPayloadWithoutFOptsLength+0x3c>)
 8009190:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8009194:	f003 fff5 	bl	800d182 <RegionGetPhyParam>
 8009198:	9001      	str	r0, [sp, #4]
}
 800919a:	b2c0      	uxtb	r0, r0
 800919c:	b005      	add	sp, #20
 800919e:	f85d fb04 	ldr.w	pc, [sp], #4
 80091a2:	bf00      	nop
 80091a4:	20000d60 	.word	0x20000d60

080091a8 <ValidatePayloadLength>:
{
 80091a8:	b538      	push	{r3, r4, r5, lr}
 80091aa:	4605      	mov	r5, r0
 80091ac:	4614      	mov	r4, r2
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 80091ae:	4608      	mov	r0, r1
 80091b0:	f7ff ffda 	bl	8009168 <GetMaxAppPayloadWithoutFOptsLength>
 80091b4:	b283      	uxth	r3, r0
    payloadSize = ( lenN + fOptsLen );
 80091b6:	1962      	adds	r2, r4, r5
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 80091b8:	4293      	cmp	r3, r2
 80091ba:	d303      	bcc.n	80091c4 <ValidatePayloadLength+0x1c>
 80091bc:	2aff      	cmp	r2, #255	; 0xff
 80091be:	d903      	bls.n	80091c8 <ValidatePayloadLength+0x20>
    return false;
 80091c0:	2000      	movs	r0, #0
 80091c2:	e000      	b.n	80091c6 <ValidatePayloadLength+0x1e>
 80091c4:	2000      	movs	r0, #0
}
 80091c6:	bd38      	pop	{r3, r4, r5, pc}
        return true;
 80091c8:	2001      	movs	r0, #1
 80091ca:	e7fc      	b.n	80091c6 <ValidatePayloadLength+0x1e>

080091cc <ProcessRadioTxDone>:
{
 80091cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80091ce:	b08f      	sub	sp, #60	; 0x3c
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 80091d0:	4b39      	ldr	r3, [pc, #228]	; (80092b8 <ProcessRadioTxDone+0xec>)
 80091d2:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 80091d6:	2b02      	cmp	r3, #2
 80091d8:	d002      	beq.n	80091e0 <ProcessRadioTxDone+0x14>
        Radio.Sleep( );
 80091da:	4b38      	ldr	r3, [pc, #224]	; (80092bc <ProcessRadioTxDone+0xf0>)
 80091dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091de:	4798      	blx	r3
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 80091e0:	4c37      	ldr	r4, [pc, #220]	; (80092c0 <ProcessRadioTxDone+0xf4>)
 80091e2:	f504 7560 	add.w	r5, r4, #896	; 0x380
 80091e6:	f8d4 13b0 	ldr.w	r1, [r4, #944]	; 0x3b0
 80091ea:	4628      	mov	r0, r5
 80091ec:	f008 fef2 	bl	8011fd4 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 80091f0:	4628      	mov	r0, r5
 80091f2:	f008 fea9 	bl	8011f48 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 80091f6:	f504 7566 	add.w	r5, r4, #920	; 0x398
 80091fa:	f8d4 13b4 	ldr.w	r1, [r4, #948]	; 0x3b4
 80091fe:	4628      	mov	r0, r5
 8009200:	f008 fee8 	bl	8011fd4 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 8009204:	4628      	mov	r0, r5
 8009206:	f008 fe9f 	bl	8011f48 <UTIL_TIMER_Start>
    if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 800920a:	4b2b      	ldr	r3, [pc, #172]	; (80092b8 <ProcessRadioTxDone+0xec>)
 800920c:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8009210:	2b02      	cmp	r3, #2
 8009212:	d002      	beq.n	800921a <ProcessRadioTxDone+0x4e>
 8009214:	f894 3414 	ldrb.w	r3, [r4, #1044]	; 0x414
 8009218:	b1ab      	cbz	r3, 8009246 <ProcessRadioTxDone+0x7a>
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 800921a:	2316      	movs	r3, #22
 800921c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009220:	a90a      	add	r1, sp, #40	; 0x28
 8009222:	4b25      	ldr	r3, [pc, #148]	; (80092b8 <ProcessRadioTxDone+0xec>)
 8009224:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8009228:	f003 ffab 	bl	800d182 <RegionGetPhyParam>
 800922c:	9009      	str	r0, [sp, #36]	; 0x24
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800922e:	4c24      	ldr	r4, [pc, #144]	; (80092c0 <ProcessRadioTxDone+0xf4>)
 8009230:	f8d4 13b4 	ldr.w	r1, [r4, #948]	; 0x3b4
 8009234:	f504 747e 	add.w	r4, r4, #1016	; 0x3f8
 8009238:	4401      	add	r1, r0
 800923a:	4620      	mov	r0, r4
 800923c:	f008 feca 	bl	8011fd4 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.AckTimeoutTimer );
 8009240:	4620      	mov	r0, r4
 8009242:	f008 fe81 	bl	8011f48 <UTIL_TIMER_Start>
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 8009246:	4b1f      	ldr	r3, [pc, #124]	; (80092c4 <ProcessRadioTxDone+0xf8>)
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	4c1b      	ldr	r4, [pc, #108]	; (80092b8 <ProcessRadioTxDone+0xec>)
 800924c:	62e3      	str	r3, [r4, #44]	; 0x2c
    txDone.Channel = MacCtx.Channel;
 800924e:	4f1c      	ldr	r7, [pc, #112]	; (80092c0 <ProcessRadioTxDone+0xf4>)
 8009250:	f897 2415 	ldrb.w	r2, [r7, #1045]	; 0x415
 8009254:	f88d 2010 	strb.w	r2, [sp, #16]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 8009258:	9305      	str	r3, [sp, #20]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800925a:	ae0c      	add	r6, sp, #48	; 0x30
 800925c:	4630      	mov	r0, r6
 800925e:	f008 fd4d 	bl	8011cfc <SysTimeGetMcuTime>
 8009262:	ad02      	add	r5, sp, #8
 8009264:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8009268:	9300      	str	r3, [sp, #0]
 800926a:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 800926e:	e896 0006 	ldmia.w	r6, {r1, r2}
 8009272:	4628      	mov	r0, r5
 8009274:	f008 fcdf 	bl	8011c36 <SysTimeSub>
 8009278:	ab07      	add	r3, sp, #28
 800927a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800927e:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 8009282:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 8009286:	9306      	str	r3, [sp, #24]
    txDone.Joined  = true;
 8009288:	2301      	movs	r3, #1
 800928a:	f88d 3011 	strb.w	r3, [sp, #17]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800928e:	f894 3110 	ldrb.w	r3, [r4, #272]	; 0x110
 8009292:	b90b      	cbnz	r3, 8009298 <ProcessRadioTxDone+0xcc>
        txDone.Joined  = false;
 8009294:	f88d 3011 	strb.w	r3, [sp, #17]
    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 8009298:	a904      	add	r1, sp, #16
 800929a:	4b07      	ldr	r3, [pc, #28]	; (80092b8 <ProcessRadioTxDone+0xec>)
 800929c:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 80092a0:	f003 ff80 	bl	800d1a4 <RegionSetBandTxDone>
    if( MacCtx.NodeAckRequested == false )
 80092a4:	4b06      	ldr	r3, [pc, #24]	; (80092c0 <ProcessRadioTxDone+0xf4>)
 80092a6:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 80092aa:	b91b      	cbnz	r3, 80092b4 <ProcessRadioTxDone+0xe8>
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 80092ac:	4b04      	ldr	r3, [pc, #16]	; (80092c0 <ProcessRadioTxDone+0xf4>)
 80092ae:	2200      	movs	r2, #0
 80092b0:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
}
 80092b4:	b00f      	add	sp, #60	; 0x3c
 80092b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092b8:	20000d60 	.word	0x20000d60
 80092bc:	08017b28 	.word	0x08017b28
 80092c0:	20000858 	.word	0x20000858
 80092c4:	20001044 	.word	0x20001044

080092c8 <OnAckTimeoutTimerEvent>:
{
 80092c8:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.AckTimeoutTimer );
 80092ca:	4c10      	ldr	r4, [pc, #64]	; (800930c <OnAckTimeoutTimerEvent+0x44>)
 80092cc:	f504 707e 	add.w	r0, r4, #1016	; 0x3f8
 80092d0:	f008 fde0 	bl	8011e94 <UTIL_TIMER_Stop>
    if( MacCtx.NodeAckRequested == true )
 80092d4:	f894 3414 	ldrb.w	r3, [r4, #1044]	; 0x414
 80092d8:	b113      	cbz	r3, 80092e0 <OnAckTimeoutTimerEvent+0x18>
        MacCtx.AckTimeoutRetry = true;
 80092da:	2201      	movs	r2, #1
 80092dc:	f884 2413 	strb.w	r2, [r4, #1043]	; 0x413
    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 80092e0:	4b0b      	ldr	r3, [pc, #44]	; (8009310 <OnAckTimeoutTimerEvent+0x48>)
 80092e2:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 80092e6:	2b02      	cmp	r3, #2
 80092e8:	d007      	beq.n	80092fa <OnAckTimeoutTimerEvent+0x32>
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 80092ea:	4b08      	ldr	r3, [pc, #32]	; (800930c <OnAckTimeoutTimerEvent+0x44>)
 80092ec:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80092f0:	b113      	cbz	r3, 80092f8 <OnAckTimeoutTimerEvent+0x30>
 80092f2:	691b      	ldr	r3, [r3, #16]
 80092f4:	b103      	cbz	r3, 80092f8 <OnAckTimeoutTimerEvent+0x30>
        MacCtx.MacCallbacks->MacProcessNotify( );
 80092f6:	4798      	blx	r3
}
 80092f8:	bd10      	pop	{r4, pc}
        MacCtx.MacFlags.Bits.MacDone = 1;
 80092fa:	4a04      	ldr	r2, [pc, #16]	; (800930c <OnAckTimeoutTimerEvent+0x44>)
 80092fc:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8009300:	f043 0320 	orr.w	r3, r3, #32
 8009304:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 8009308:	e7ef      	b.n	80092ea <OnAckTimeoutTimerEvent+0x22>
 800930a:	bf00      	nop
 800930c:	20000858 	.word	0x20000858
 8009310:	20000d60 	.word	0x20000d60

08009314 <PrepareRxDoneAbort>:
{
 8009314:	b508      	push	{r3, lr}
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 8009316:	4b0e      	ldr	r3, [pc, #56]	; (8009350 <PrepareRxDoneAbort+0x3c>)
 8009318:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 800931c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009320:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    if( MacCtx.NodeAckRequested == true )
 8009324:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8009328:	b973      	cbnz	r3, 8009348 <PrepareRxDoneAbort+0x34>
    MacCtx.MacFlags.Bits.McpsInd = 1;
 800932a:	4b09      	ldr	r3, [pc, #36]	; (8009350 <PrepareRxDoneAbort+0x3c>)
 800932c:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
 8009330:	f042 0202 	orr.w	r2, r2, #2
 8009334:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
    MacCtx.MacFlags.Bits.MacDone = 1;
 8009338:	b2d2      	uxtb	r2, r2
 800933a:	f042 0220 	orr.w	r2, r2, #32
 800933e:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
    UpdateRxSlotIdleState( );
 8009342:	f7ff fd93 	bl	8008e6c <UpdateRxSlotIdleState>
}
 8009346:	bd08      	pop	{r3, pc}
        OnAckTimeoutTimerEvent( NULL );
 8009348:	2000      	movs	r0, #0
 800934a:	f7ff ffbd 	bl	80092c8 <OnAckTimeoutTimerEvent>
 800934e:	e7ec      	b.n	800932a <PrepareRxDoneAbort+0x16>
 8009350:	20000858 	.word	0x20000858

08009354 <LoRaMacCheckForBeaconAcquisition>:
{
 8009354:	b508      	push	{r3, lr}
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8009356:	200c      	movs	r0, #12
 8009358:	f003 f9b2 	bl	800c6c0 <LoRaMacConfirmQueueIsCmdActive>
 800935c:	b188      	cbz	r0, 8009382 <LoRaMacCheckForBeaconAcquisition+0x2e>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 800935e:	4b0b      	ldr	r3, [pc, #44]	; (800938c <LoRaMacCheckForBeaconAcquisition+0x38>)
 8009360:	f893 0481 	ldrb.w	r0, [r3, #1153]	; 0x481
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8009364:	f010 0f01 	tst.w	r0, #1
 8009368:	d10d      	bne.n	8009386 <LoRaMacCheckForBeaconAcquisition+0x32>
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800936a:	f010 0004 	ands.w	r0, r0, #4
 800936e:	d009      	beq.n	8009384 <LoRaMacCheckForBeaconAcquisition+0x30>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8009370:	461a      	mov	r2, r3
 8009372:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8009376:	f023 0302 	bic.w	r3, r3, #2
 800937a:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            return 0x01;
 800937e:	2001      	movs	r0, #1
 8009380:	e000      	b.n	8009384 <LoRaMacCheckForBeaconAcquisition+0x30>
    return 0x00;
 8009382:	2000      	movs	r0, #0
}
 8009384:	bd08      	pop	{r3, pc}
    return 0x00;
 8009386:	2000      	movs	r0, #0
 8009388:	e7fc      	b.n	8009384 <LoRaMacCheckForBeaconAcquisition+0x30>
 800938a:	bf00      	nop
 800938c:	20000858 	.word	0x20000858

08009390 <GetFCntDown>:
{
 8009390:	b538      	push	{r3, r4, r5, lr}
 8009392:	9c05      	ldr	r4, [sp, #20]
 8009394:	9d06      	ldr	r5, [sp, #24]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 8009396:	b302      	cbz	r2, 80093da <GetFCntDown+0x4a>
 8009398:	4694      	mov	ip, r2
 800939a:	b304      	cbz	r4, 80093de <GetFCntDown+0x4e>
 800939c:	b30d      	cbz	r5, 80093e2 <GetFCntDown+0x52>
    switch( addrID )
 800939e:	b188      	cbz	r0, 80093c4 <GetFCntDown+0x34>
 80093a0:	2801      	cmp	r0, #1
 80093a2:	d120      	bne.n	80093e6 <GetFCntDown+0x56>
            if( lrWanVersion.Fields.Minor == 1 )
 80093a4:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80093a8:	2a01      	cmp	r2, #1
 80093aa:	d002      	beq.n	80093b2 <GetFCntDown+0x22>
                *fCntID = FCNT_DOWN;
 80093ac:	2303      	movs	r3, #3
 80093ae:	7023      	strb	r3, [r4, #0]
 80093b0:	e00a      	b.n	80093c8 <GetFCntDown+0x38>
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 80093b2:	b121      	cbz	r1, 80093be <GetFCntDown+0x2e>
 80093b4:	2903      	cmp	r1, #3
 80093b6:	d002      	beq.n	80093be <GetFCntDown+0x2e>
                    *fCntID = N_FCNT_DOWN;
 80093b8:	2301      	movs	r3, #1
 80093ba:	7023      	strb	r3, [r4, #0]
 80093bc:	e004      	b.n	80093c8 <GetFCntDown+0x38>
                    *fCntID = A_FCNT_DOWN;
 80093be:	2302      	movs	r3, #2
 80093c0:	7023      	strb	r3, [r4, #0]
 80093c2:	e001      	b.n	80093c8 <GetFCntDown+0x38>
            *fCntID = MC_FCNT_DOWN_0;
 80093c4:	2304      	movs	r3, #4
 80093c6:	7023      	strb	r3, [r4, #0]
    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 80093c8:	462b      	mov	r3, r5
 80093ca:	f8bc 200e 	ldrh.w	r2, [ip, #14]
 80093ce:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 80093d2:	7820      	ldrb	r0, [r4, #0]
 80093d4:	f003 fb92 	bl	800cafc <LoRaMacCryptoGetFCntDown>
}
 80093d8:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 80093da:	200a      	movs	r0, #10
 80093dc:	e7fc      	b.n	80093d8 <GetFCntDown+0x48>
 80093de:	200a      	movs	r0, #10
 80093e0:	e7fa      	b.n	80093d8 <GetFCntDown+0x48>
 80093e2:	200a      	movs	r0, #10
 80093e4:	e7f8      	b.n	80093d8 <GetFCntDown+0x48>
    switch( addrID )
 80093e6:	2005      	movs	r0, #5
 80093e8:	e7f6      	b.n	80093d8 <GetFCntDown+0x48>

080093ea <RemoveMacCommands>:
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 80093ea:	2801      	cmp	r0, #1
 80093ec:	d900      	bls.n	80093f0 <RemoveMacCommands+0x6>
 80093ee:	4770      	bx	lr
{
 80093f0:	b508      	push	{r3, lr}
        if( request == MCPS_CONFIRMED )
 80093f2:	2a01      	cmp	r2, #1
 80093f4:	d105      	bne.n	8009402 <RemoveMacCommands+0x18>
            if( fCtrl.Bits.Ack == 1 )
 80093f6:	f011 0f20 	tst.w	r1, #32
 80093fa:	d004      	beq.n	8009406 <RemoveMacCommands+0x1c>
                LoRaMacCommandsRemoveStickyAnsCmds( );
 80093fc:	f002 fffc 	bl	800c3f8 <LoRaMacCommandsRemoveStickyAnsCmds>
 8009400:	e001      	b.n	8009406 <RemoveMacCommands+0x1c>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 8009402:	f002 fff9 	bl	800c3f8 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 8009406:	bd08      	pop	{r3, pc}

08009408 <ProcessMacCommands>:
{
 8009408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800940c:	b08f      	sub	sp, #60	; 0x3c
 800940e:	4605      	mov	r5, r0
 8009410:	460c      	mov	r4, r1
 8009412:	4616      	mov	r6, r2
 8009414:	4698      	mov	r8, r3
    uint8_t status = 0;
 8009416:	2700      	movs	r7, #0
 8009418:	f88d 702f 	strb.w	r7, [sp, #47]	; 0x2f
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800941c:	f8ad 702c 	strh.w	r7, [sp, #44]	; 0x2c
    while( macIndex < commandsSize )
 8009420:	42b4      	cmp	r4, r6
 8009422:	f080 82ca 	bcs.w	80099ba <ProcessMacCommands+0x5b2>
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 8009426:	5d28      	ldrb	r0, [r5, r4]
 8009428:	f003 f84e 	bl	800c4c8 <LoRaMacCommandsGetCmdSize>
 800942c:	4420      	add	r0, r4
 800942e:	42b0      	cmp	r0, r6
 8009430:	f300 82c3 	bgt.w	80099ba <ProcessMacCommands+0x5b2>
        switch( payload[macIndex++] )
 8009434:	f104 0901 	add.w	r9, r4, #1
 8009438:	fa5f f989 	uxtb.w	r9, r9
 800943c:	5d29      	ldrb	r1, [r5, r4]
 800943e:	3902      	subs	r1, #2
 8009440:	2911      	cmp	r1, #17
 8009442:	f200 82ba 	bhi.w	80099ba <ProcessMacCommands+0x5b2>
 8009446:	e8df f011 	tbh	[pc, r1, lsl #1]
 800944a:	0012      	.short	0x0012
 800944c:	00910029 	.word	0x00910029
 8009450:	00ef00a5 	.word	0x00ef00a5
 8009454:	01410107 	.word	0x01410107
 8009458:	01b1015a 	.word	0x01b1015a
 800945c:	02b802b8 	.word	0x02b802b8
 8009460:	02b801e4 	.word	0x02b801e4
 8009464:	024402b8 	.word	0x024402b8
 8009468:	027b025b 	.word	0x027b025b
 800946c:	0297      	.short	0x0297
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 800946e:	2004      	movs	r0, #4
 8009470:	f003 f926 	bl	800c6c0 <LoRaMacConfirmQueueIsCmdActive>
 8009474:	b908      	cbnz	r0, 800947a <ProcessMacCommands+0x72>
        switch( payload[macIndex++] )
 8009476:	464c      	mov	r4, r9
 8009478:	e7d2      	b.n	8009420 <ProcessMacCommands+0x18>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 800947a:	2104      	movs	r1, #4
 800947c:	2000      	movs	r0, #0
 800947e:	f003 f8d3 	bl	800c628 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 8009482:	1ca3      	adds	r3, r4, #2
 8009484:	b2db      	uxtb	r3, r3
 8009486:	f815 1009 	ldrb.w	r1, [r5, r9]
 800948a:	4ac4      	ldr	r2, [pc, #784]	; (800979c <ProcessMacCommands+0x394>)
 800948c:	f882 1454 	strb.w	r1, [r2, #1108]	; 0x454
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 8009490:	3403      	adds	r4, #3
 8009492:	b2e4      	uxtb	r4, r4
 8009494:	5ceb      	ldrb	r3, [r5, r3]
 8009496:	f882 3455 	strb.w	r3, [r2, #1109]	; 0x455
 800949a:	e7c1      	b.n	8009420 <ProcessMacCommands+0x18>
                int8_t linkAdrDatarate = DR_0;
 800949c:	2300      	movs	r3, #0
 800949e:	f88d 300a 	strb.w	r3, [sp, #10]
                int8_t linkAdrTxPower = TX_POWER_0;
 80094a2:	f88d 300b 	strb.w	r3, [sp, #11]
                uint8_t linkAdrNbRep = 0;
 80094a6:	f88d 300c 	strb.w	r3, [sp, #12]
                uint8_t linkAdrNbBytesParsed = 0;
 80094aa:	f88d 3014 	strb.w	r3, [sp, #20]
                if( adrBlockFound == false )
 80094ae:	b10f      	cbz	r7, 80094b4 <ProcessMacCommands+0xac>
                break;
 80094b0:	464c      	mov	r4, r9
 80094b2:	e7b5      	b.n	8009420 <ProcessMacCommands+0x18>
                    linkAdrReq.Payload = &payload[macIndex - 1];
 80094b4:	f109 33ff 	add.w	r3, r9, #4294967295
 80094b8:	442b      	add	r3, r5
 80094ba:	9308      	str	r3, [sp, #32]
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 80094bc:	eba6 0309 	sub.w	r3, r6, r9
 80094c0:	3301      	adds	r3, #1
 80094c2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
                    linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 80094c6:	48b6      	ldr	r0, [pc, #728]	; (80097a0 <ProcessMacCommands+0x398>)
 80094c8:	f890 30fe 	ldrb.w	r3, [r0, #254]	; 0xfe
 80094cc:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
                    linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80094d0:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 80094d4:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
                    linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 80094d8:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
 80094dc:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
                    linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 80094e0:	f990 3038 	ldrsb.w	r3, [r0, #56]	; 0x38
 80094e4:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
                    linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 80094e8:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 80094ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
                    linkAdrReq.Version = Nvm.MacGroup2.Version;
 80094f0:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 80094f4:	9307      	str	r3, [sp, #28]
                    status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 80094f6:	ab05      	add	r3, sp, #20
 80094f8:	9301      	str	r3, [sp, #4]
 80094fa:	ab03      	add	r3, sp, #12
 80094fc:	9300      	str	r3, [sp, #0]
 80094fe:	f10d 030b 	add.w	r3, sp, #11
 8009502:	f10d 020a 	add.w	r2, sp, #10
 8009506:	a907      	add	r1, sp, #28
 8009508:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 800950c:	f003 fe99 	bl	800d242 <RegionLinkAdrReq>
 8009510:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
                    if( ( status & 0x07 ) == 0x07 )
 8009514:	f000 0007 	and.w	r0, r0, #7
 8009518:	2807      	cmp	r0, #7
 800951a:	d001      	beq.n	8009520 <ProcessMacCommands+0x118>
{
 800951c:	2400      	movs	r4, #0
 800951e:	e015      	b.n	800954c <ProcessMacCommands+0x144>
                        Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 8009520:	4b9f      	ldr	r3, [pc, #636]	; (80097a0 <ProcessMacCommands+0x398>)
 8009522:	f89d 200a 	ldrb.w	r2, [sp, #10]
 8009526:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                        Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 800952a:	f89d 200b 	ldrb.w	r2, [sp, #11]
 800952e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                        Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 8009532:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8009536:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 800953a:	e7ef      	b.n	800951c <ProcessMacCommands+0x114>
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 800953c:	2201      	movs	r2, #1
 800953e:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
 8009542:	2003      	movs	r0, #3
 8009544:	f002 fef8 	bl	800c338 <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 8009548:	3401      	adds	r4, #1
 800954a:	b2e4      	uxtb	r4, r4
 800954c:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8009550:	4b94      	ldr	r3, [pc, #592]	; (80097a4 <ProcessMacCommands+0x39c>)
 8009552:	fba3 1302 	umull	r1, r3, r3, r2
 8009556:	ebb4 0f93 	cmp.w	r4, r3, lsr #2
 800955a:	d3ef      	bcc.n	800953c <ProcessMacCommands+0x134>
                    macIndex += linkAdrNbBytesParsed - 1;
 800955c:	eb02 0309 	add.w	r3, r2, r9
 8009560:	b2db      	uxtb	r3, r3
 8009562:	3b01      	subs	r3, #1
 8009564:	fa5f f983 	uxtb.w	r9, r3
                    adrBlockFound = true;
 8009568:	2701      	movs	r7, #1
 800956a:	e7a1      	b.n	80094b0 <ProcessMacCommands+0xa8>
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 800956c:	3402      	adds	r4, #2
 800956e:	b2e4      	uxtb	r4, r4
 8009570:	f815 3009 	ldrb.w	r3, [r5, r9]
 8009574:	f003 030f 	and.w	r3, r3, #15
 8009578:	4989      	ldr	r1, [pc, #548]	; (80097a0 <ProcessMacCommands+0x398>)
 800957a:	f881 30ff 	strb.w	r3, [r1, #255]	; 0xff
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 800957e:	2201      	movs	r2, #1
 8009580:	fa02 f303 	lsl.w	r3, r2, r3
 8009584:	f8a1 3102 	strh.w	r3, [r1, #258]	; 0x102
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 8009588:	2200      	movs	r2, #0
 800958a:	a90b      	add	r1, sp, #44	; 0x2c
 800958c:	2004      	movs	r0, #4
 800958e:	f002 fed3 	bl	800c338 <LoRaMacCommandsAddCmd>
                break;
 8009592:	e745      	b.n	8009420 <ProcessMacCommands+0x18>
                status = 0x07;
 8009594:	2307      	movs	r3, #7
 8009596:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 800959a:	f815 3009 	ldrb.w	r3, [r5, r9]
 800959e:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80095a2:	f88d 301d 	strb.w	r3, [sp, #29]
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 80095a6:	f915 3009 	ldrsb.w	r3, [r5, r9]
 80095aa:	f003 030f 	and.w	r3, r3, #15
 80095ae:	f88d 301c 	strb.w	r3, [sp, #28]
                macIndex++;
 80095b2:	1ca3      	adds	r3, r4, #2
 80095b4:	b2db      	uxtb	r3, r3
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 80095b6:	1ce1      	adds	r1, r4, #3
 80095b8:	b2c9      	uxtb	r1, r1
 80095ba:	5ceb      	ldrb	r3, [r5, r3]
 80095bc:	9308      	str	r3, [sp, #32]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80095be:	1d22      	adds	r2, r4, #4
 80095c0:	b2d2      	uxtb	r2, r2
 80095c2:	5c69      	ldrb	r1, [r5, r1]
 80095c4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80095c8:	9308      	str	r3, [sp, #32]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80095ca:	3405      	adds	r4, #5
 80095cc:	b2e4      	uxtb	r4, r4
 80095ce:	5caa      	ldrb	r2, [r5, r2]
 80095d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80095d4:	9308      	str	r3, [sp, #32]
                rxParamSetupReq.Frequency *= 100;
 80095d6:	2264      	movs	r2, #100	; 0x64
 80095d8:	fb02 f303 	mul.w	r3, r2, r3
 80095dc:	9308      	str	r3, [sp, #32]
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 80095de:	a907      	add	r1, sp, #28
 80095e0:	4b6f      	ldr	r3, [pc, #444]	; (80097a0 <ProcessMacCommands+0x398>)
 80095e2:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 80095e6:	f003 fe3e 	bl	800d266 <RegionRxParamSetupReq>
 80095ea:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
                if( ( status & 0x07 ) == 0x07 )
 80095ee:	f000 0307 	and.w	r3, r0, #7
 80095f2:	2b07      	cmp	r3, #7
 80095f4:	d009      	beq.n	800960a <ProcessMacCommands+0x202>
                macCmdPayload[0] = status;
 80095f6:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 80095fa:	2201      	movs	r2, #1
 80095fc:	a90b      	add	r1, sp, #44	; 0x2c
 80095fe:	2005      	movs	r0, #5
 8009600:	f002 fe9a 	bl	800c338 <LoRaMacCommandsAddCmd>
                SetMlmeScheduleUplinkIndication( );
 8009604:	f7ff fca8 	bl	8008f58 <SetMlmeScheduleUplinkIndication>
                break;
 8009608:	e70a      	b.n	8009420 <ProcessMacCommands+0x18>
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 800960a:	f89d 201c 	ldrb.w	r2, [sp, #28]
 800960e:	4b64      	ldr	r3, [pc, #400]	; (80097a0 <ProcessMacCommands+0x398>)
 8009610:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 8009614:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 8009618:	9a08      	ldr	r2, [sp, #32]
 800961a:	665a      	str	r2, [r3, #100]	; 0x64
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 800961c:	66da      	str	r2, [r3, #108]	; 0x6c
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 800961e:	f89d 201d 	ldrb.w	r2, [sp, #29]
 8009622:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 8009626:	e7e6      	b.n	80095f6 <ProcessMacCommands+0x1ee>
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 8009628:	4b5c      	ldr	r3, [pc, #368]	; (800979c <ProcessMacCommands+0x394>)
 800962a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800962e:	b17b      	cbz	r3, 8009650 <ProcessMacCommands+0x248>
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	b17b      	cbz	r3, 8009654 <ProcessMacCommands+0x24c>
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 8009634:	4798      	blx	r3
                macCmdPayload[0] = batteryLevel;
 8009636:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 800963a:	f008 033f 	and.w	r3, r8, #63	; 0x3f
 800963e:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 8009642:	2202      	movs	r2, #2
 8009644:	a90b      	add	r1, sp, #44	; 0x2c
 8009646:	2006      	movs	r0, #6
 8009648:	f002 fe76 	bl	800c338 <LoRaMacCommandsAddCmd>
        switch( payload[macIndex++] )
 800964c:	464c      	mov	r4, r9
                break;
 800964e:	e6e7      	b.n	8009420 <ProcessMacCommands+0x18>
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 8009650:	20ff      	movs	r0, #255	; 0xff
 8009652:	e7f0      	b.n	8009636 <ProcessMacCommands+0x22e>
 8009654:	20ff      	movs	r0, #255	; 0xff
 8009656:	e7ee      	b.n	8009636 <ProcessMacCommands+0x22e>
                status = 0x03;
 8009658:	2303      	movs	r3, #3
 800965a:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                newChannelReq.ChannelId = payload[macIndex++];
 800965e:	1ca3      	adds	r3, r4, #2
 8009660:	b2db      	uxtb	r3, r3
 8009662:	f915 2009 	ldrsb.w	r2, [r5, r9]
 8009666:	f88d 2018 	strb.w	r2, [sp, #24]
                newChannelReq.NewChannel = &chParam;
 800966a:	aa07      	add	r2, sp, #28
 800966c:	9205      	str	r2, [sp, #20]
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 800966e:	1ce2      	adds	r2, r4, #3
 8009670:	b2d2      	uxtb	r2, r2
 8009672:	5ceb      	ldrb	r3, [r5, r3]
 8009674:	9307      	str	r3, [sp, #28]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8009676:	1d21      	adds	r1, r4, #4
 8009678:	b2c9      	uxtb	r1, r1
 800967a:	5caa      	ldrb	r2, [r5, r2]
 800967c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009680:	9307      	str	r3, [sp, #28]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8009682:	1d62      	adds	r2, r4, #5
 8009684:	b2d2      	uxtb	r2, r2
 8009686:	5c69      	ldrb	r1, [r5, r1]
 8009688:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800968c:	9307      	str	r3, [sp, #28]
                chParam.Frequency *= 100;
 800968e:	2164      	movs	r1, #100	; 0x64
 8009690:	fb01 f303 	mul.w	r3, r1, r3
 8009694:	9307      	str	r3, [sp, #28]
                chParam.Rx1Frequency = 0;
 8009696:	2300      	movs	r3, #0
 8009698:	9308      	str	r3, [sp, #32]
                chParam.DrRange.Value = payload[macIndex++];
 800969a:	3406      	adds	r4, #6
 800969c:	b2e4      	uxtb	r4, r4
 800969e:	56ab      	ldrsb	r3, [r5, r2]
 80096a0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 80096a4:	a905      	add	r1, sp, #20
 80096a6:	4b3e      	ldr	r3, [pc, #248]	; (80097a0 <ProcessMacCommands+0x398>)
 80096a8:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 80096ac:	f003 fde4 	bl	800d278 <RegionNewChannelReq>
 80096b0:	b2c3      	uxtb	r3, r0
 80096b2:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                if( ( int8_t )status >= 0 )
 80096b6:	2800      	cmp	r0, #0
 80096b8:	f6ff aeb2 	blt.w	8009420 <ProcessMacCommands+0x18>
                    macCmdPayload[0] = status;
 80096bc:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 80096c0:	2201      	movs	r2, #1
 80096c2:	a90b      	add	r1, sp, #44	; 0x2c
 80096c4:	2007      	movs	r0, #7
 80096c6:	f002 fe37 	bl	800c338 <LoRaMacCommandsAddCmd>
                break;
 80096ca:	e6a9      	b.n	8009420 <ProcessMacCommands+0x18>
                uint8_t delay = payload[macIndex++] & 0x0F;
 80096cc:	3402      	adds	r4, #2
 80096ce:	b2e4      	uxtb	r4, r4
 80096d0:	f815 3009 	ldrb.w	r3, [r5, r9]
                if( delay == 0 )
 80096d4:	f013 030f 	ands.w	r3, r3, #15
 80096d8:	d100      	bne.n	80096dc <ProcessMacCommands+0x2d4>
                    delay++;
 80096da:	3301      	adds	r3, #1
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 80096dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80096e0:	fb02 f303 	mul.w	r3, r2, r3
 80096e4:	4a2e      	ldr	r2, [pc, #184]	; (80097a0 <ProcessMacCommands+0x398>)
 80096e6:	6513      	str	r3, [r2, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 80096e8:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80096ec:	6553      	str	r3, [r2, #84]	; 0x54
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 80096ee:	2200      	movs	r2, #0
 80096f0:	a90b      	add	r1, sp, #44	; 0x2c
 80096f2:	2008      	movs	r0, #8
 80096f4:	f002 fe20 	bl	800c338 <LoRaMacCommandsAddCmd>
                SetMlmeScheduleUplinkIndication( );
 80096f8:	f7ff fc2e 	bl	8008f58 <SetMlmeScheduleUplinkIndication>
                break;
 80096fc:	e690      	b.n	8009420 <ProcessMacCommands+0x18>
                uint8_t eirpDwellTime = payload[macIndex++];
 80096fe:	3402      	adds	r4, #2
 8009700:	b2e4      	uxtb	r4, r4
 8009702:	f815 3009 	ldrb.w	r3, [r5, r9]
                txParamSetupReq.UplinkDwellTime = 0;
 8009706:	2200      	movs	r2, #0
 8009708:	f88d 200c 	strb.w	r2, [sp, #12]
                txParamSetupReq.DownlinkDwellTime = 0;
 800970c:	f88d 200d 	strb.w	r2, [sp, #13]
                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 8009710:	f013 0f20 	tst.w	r3, #32
 8009714:	d002      	beq.n	800971c <ProcessMacCommands+0x314>
                    txParamSetupReq.DownlinkDwellTime = 1;
 8009716:	2201      	movs	r2, #1
 8009718:	f88d 200d 	strb.w	r2, [sp, #13]
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 800971c:	f013 0f10 	tst.w	r3, #16
 8009720:	d002      	beq.n	8009728 <ProcessMacCommands+0x320>
                    txParamSetupReq.UplinkDwellTime = 1;
 8009722:	2201      	movs	r2, #1
 8009724:	f88d 200c 	strb.w	r2, [sp, #12]
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 8009728:	f003 030f 	and.w	r3, r3, #15
 800972c:	f88d 300e 	strb.w	r3, [sp, #14]
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 8009730:	a903      	add	r1, sp, #12
 8009732:	4b1b      	ldr	r3, [pc, #108]	; (80097a0 <ProcessMacCommands+0x398>)
 8009734:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8009738:	f003 fda7 	bl	800d28a <RegionTxParamSetupReq>
 800973c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009740:	f43f ae6e 	beq.w	8009420 <ProcessMacCommands+0x18>
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 8009744:	f89d a00c 	ldrb.w	sl, [sp, #12]
 8009748:	f8df 9054 	ldr.w	r9, [pc, #84]	; 80097a0 <ProcessMacCommands+0x398>
 800974c:	f889 a074 	strb.w	sl, [r9, #116]	; 0x74
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 8009750:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8009754:	f889 3075 	strb.w	r3, [r9, #117]	; 0x75
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 8009758:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800975c:	4a12      	ldr	r2, [pc, #72]	; (80097a8 <ProcessMacCommands+0x3a0>)
 800975e:	5cd0      	ldrb	r0, [r2, r3]
 8009760:	f7f7 fb20 	bl	8000da4 <__aeabi_ui2f>
 8009764:	f8c9 0078 	str.w	r0, [r9, #120]	; 0x78
                    getPhy.Attribute = PHY_MIN_TX_DR;
 8009768:	2302      	movs	r3, #2
 800976a:	f88d 301c 	strb.w	r3, [sp, #28]
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800976e:	f88d a01e 	strb.w	sl, [sp, #30]
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009772:	a907      	add	r1, sp, #28
 8009774:	f899 0040 	ldrb.w	r0, [r9, #64]	; 0x40
 8009778:	f003 fd03 	bl	800d182 <RegionGetPhyParam>
 800977c:	9005      	str	r0, [sp, #20]
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 800977e:	b240      	sxtb	r0, r0
 8009780:	f999 3039 	ldrsb.w	r3, [r9, #57]	; 0x39
 8009784:	4298      	cmp	r0, r3
 8009786:	bfb8      	it	lt
 8009788:	4618      	movlt	r0, r3
 800978a:	f889 0039 	strb.w	r0, [r9, #57]	; 0x39
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 800978e:	2200      	movs	r2, #0
 8009790:	a90b      	add	r1, sp, #44	; 0x2c
 8009792:	2009      	movs	r0, #9
 8009794:	f002 fdd0 	bl	800c338 <LoRaMacCommandsAddCmd>
                break;
 8009798:	e642      	b.n	8009420 <ProcessMacCommands+0x18>
 800979a:	bf00      	nop
 800979c:	20000858 	.word	0x20000858
 80097a0:	20000d60 	.word	0x20000d60
 80097a4:	cccccccd 	.word	0xcccccccd
 80097a8:	08017580 	.word	0x08017580
                status = 0x03;
 80097ac:	2303      	movs	r3, #3
 80097ae:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                dlChannelReq.ChannelId = payload[macIndex++];
 80097b2:	1ca3      	adds	r3, r4, #2
 80097b4:	b2db      	uxtb	r3, r3
 80097b6:	f815 2009 	ldrb.w	r2, [r5, r9]
 80097ba:	f88d 201c 	strb.w	r2, [sp, #28]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 80097be:	1ce1      	adds	r1, r4, #3
 80097c0:	b2c9      	uxtb	r1, r1
 80097c2:	5ceb      	ldrb	r3, [r5, r3]
 80097c4:	9308      	str	r3, [sp, #32]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80097c6:	1d22      	adds	r2, r4, #4
 80097c8:	b2d2      	uxtb	r2, r2
 80097ca:	5c69      	ldrb	r1, [r5, r1]
 80097cc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80097d0:	9308      	str	r3, [sp, #32]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80097d2:	3405      	adds	r4, #5
 80097d4:	b2e4      	uxtb	r4, r4
 80097d6:	5caa      	ldrb	r2, [r5, r2]
 80097d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80097dc:	9308      	str	r3, [sp, #32]
                dlChannelReq.Rx1Frequency *= 100;
 80097de:	2264      	movs	r2, #100	; 0x64
 80097e0:	fb02 f303 	mul.w	r3, r2, r3
 80097e4:	9308      	str	r3, [sp, #32]
                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 80097e6:	a907      	add	r1, sp, #28
 80097e8:	4b75      	ldr	r3, [pc, #468]	; (80099c0 <ProcessMacCommands+0x5b8>)
 80097ea:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 80097ee:	f003 fd55 	bl	800d29c <RegionDlChannelReq>
 80097f2:	b2c3      	uxtb	r3, r0
 80097f4:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                if( ( int8_t )status >= 0 )
 80097f8:	2800      	cmp	r0, #0
 80097fa:	f6ff ae11 	blt.w	8009420 <ProcessMacCommands+0x18>
                    macCmdPayload[0] = status;
 80097fe:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 8009802:	2201      	movs	r2, #1
 8009804:	a90b      	add	r1, sp, #44	; 0x2c
 8009806:	200a      	movs	r0, #10
 8009808:	f002 fd96 	bl	800c338 <LoRaMacCommandsAddCmd>
                    SetMlmeScheduleUplinkIndication( );
 800980c:	f7ff fba4 	bl	8008f58 <SetMlmeScheduleUplinkIndication>
                break;
 8009810:	e606      	b.n	8009420 <ProcessMacCommands+0x18>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 8009812:	200a      	movs	r0, #10
 8009814:	f002 ff54 	bl	800c6c0 <LoRaMacConfirmQueueIsCmdActive>
 8009818:	b908      	cbnz	r0, 800981e <ProcessMacCommands+0x416>
        switch( payload[macIndex++] )
 800981a:	464c      	mov	r4, r9
 800981c:	e600      	b.n	8009420 <ProcessMacCommands+0x18>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 800981e:	210a      	movs	r1, #10
 8009820:	2000      	movs	r0, #0
 8009822:	f002 ff01 	bl	800c628 <LoRaMacConfirmQueueSetStatus>
                    SysTime_t gpsEpochTime = { 0 };
 8009826:	a903      	add	r1, sp, #12
 8009828:	2300      	movs	r3, #0
 800982a:	9303      	str	r3, [sp, #12]
 800982c:	9304      	str	r3, [sp, #16]
                    SysTime_t sysTime = { 0 };
 800982e:	f10d 0a14 	add.w	sl, sp, #20
 8009832:	9305      	str	r3, [sp, #20]
 8009834:	9306      	str	r3, [sp, #24]
                    SysTime_t sysTimeCurrent = { 0 };
 8009836:	f10d 0b1c 	add.w	fp, sp, #28
 800983a:	9307      	str	r3, [sp, #28]
 800983c:	9308      	str	r3, [sp, #32]
                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 800983e:	1ca0      	adds	r0, r4, #2
 8009840:	b2c0      	uxtb	r0, r0
 8009842:	f815 3009 	ldrb.w	r3, [r5, r9]
 8009846:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 8009848:	1ce2      	adds	r2, r4, #3
 800984a:	b2d2      	uxtb	r2, r2
 800984c:	5c28      	ldrb	r0, [r5, r0]
 800984e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8009852:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8009854:	1d20      	adds	r0, r4, #4
 8009856:	b2c0      	uxtb	r0, r0
 8009858:	5caa      	ldrb	r2, [r5, r2]
 800985a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800985e:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8009860:	1d62      	adds	r2, r4, #5
 8009862:	b2d2      	uxtb	r2, r2
 8009864:	5c28      	ldrb	r0, [r5, r0]
 8009866:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800986a:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 800986c:	3406      	adds	r4, #6
 800986e:	b2e4      	uxtb	r4, r4
 8009870:	5caa      	ldrb	r2, [r5, r2]
 8009872:	f8ad 2010 	strh.w	r2, [sp, #16]
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8009876:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800987a:	fb00 f202 	mul.w	r2, r0, r2
 800987e:	0a12      	lsrs	r2, r2, #8
 8009880:	f8ad 2010 	strh.w	r2, [sp, #16]
                    sysTime = gpsEpochTime;
 8009884:	c903      	ldmia	r1, {r0, r1}
 8009886:	e88a 0003 	stmia.w	sl, {r0, r1}
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 800988a:	4a4e      	ldr	r2, [pc, #312]	; (80099c4 <ProcessMacCommands+0x5bc>)
 800988c:	441a      	add	r2, r3
 800988e:	9205      	str	r2, [sp, #20]
                    sysTimeCurrent = SysTimeGet( );
 8009890:	4658      	mov	r0, fp
 8009892:	f008 fa11 	bl	8011cb8 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 8009896:	f8df 9130 	ldr.w	r9, [pc, #304]	; 80099c8 <ProcessMacCommands+0x5c0>
 800989a:	f8d9 333c 	ldr.w	r3, [r9, #828]	; 0x33c
 800989e:	9300      	str	r3, [sp, #0]
 80098a0:	f8d9 3338 	ldr.w	r3, [r9, #824]	; 0x338
 80098a4:	e89a 0006 	ldmia.w	sl, {r1, r2}
 80098a8:	a80c      	add	r0, sp, #48	; 0x30
 80098aa:	f008 f9c4 	bl	8011c36 <SysTimeSub>
 80098ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80098b0:	9300      	str	r3, [sp, #0]
 80098b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80098b4:	e89b 0006 	ldmia.w	fp, {r1, r2}
 80098b8:	4650      	mov	r0, sl
 80098ba:	f008 f99d 	bl	8011bf8 <SysTimeAdd>
                    SysTimeSet( sysTime );
 80098be:	e89a 0003 	ldmia.w	sl, {r0, r1}
 80098c2:	f008 f9d7 	bl	8011c74 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 80098c6:	f002 fc9f 	bl	800c208 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 80098ca:	2301      	movs	r3, #1
 80098cc:	f889 3434 	strb.w	r3, [r9, #1076]	; 0x434
 80098d0:	e5a6      	b.n	8009420 <ProcessMacCommands+0x18>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 80098d2:	200d      	movs	r0, #13
 80098d4:	f002 fef4 	bl	800c6c0 <LoRaMacConfirmQueueIsCmdActive>
 80098d8:	b908      	cbnz	r0, 80098de <ProcessMacCommands+0x4d6>
        switch( payload[macIndex++] )
 80098da:	464c      	mov	r4, r9
 80098dc:	e5a0      	b.n	8009420 <ProcessMacCommands+0x18>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 80098de:	210d      	movs	r1, #13
 80098e0:	2000      	movs	r0, #0
 80098e2:	f002 fea1 	bl	800c628 <LoRaMacConfirmQueueSetStatus>
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 80098e6:	4b38      	ldr	r3, [pc, #224]	; (80099c8 <ProcessMacCommands+0x5c0>)
 80098e8:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 80098ec:	3b04      	subs	r3, #4
 80098ee:	b2db      	uxtb	r3, r3
 80098f0:	2b01      	cmp	r3, #1
 80098f2:	d801      	bhi.n	80098f8 <ProcessMacCommands+0x4f0>
        switch( payload[macIndex++] )
 80098f4:	464c      	mov	r4, r9
 80098f6:	e593      	b.n	8009420 <ProcessMacCommands+0x18>
                        LoRaMacClassBPingSlotInfoAns( );
 80098f8:	f002 fc82 	bl	800c200 <LoRaMacClassBPingSlotInfoAns>
        switch( payload[macIndex++] )
 80098fc:	464c      	mov	r4, r9
 80098fe:	e58f      	b.n	8009420 <ProcessMacCommands+0x18>
                frequency = ( uint32_t )payload[macIndex++];
 8009900:	1ca2      	adds	r2, r4, #2
 8009902:	b2d2      	uxtb	r2, r2
 8009904:	f815 3009 	ldrb.w	r3, [r5, r9]
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 8009908:	1ce1      	adds	r1, r4, #3
 800990a:	b2c9      	uxtb	r1, r1
 800990c:	5caa      	ldrb	r2, [r5, r2]
 800990e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8009912:	1d22      	adds	r2, r4, #4
 8009914:	b2d2      	uxtb	r2, r2
 8009916:	5c69      	ldrb	r1, [r5, r1]
 8009918:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                datarate = payload[macIndex++] & 0x0F;
 800991c:	3405      	adds	r4, #5
 800991e:	b2e4      	uxtb	r4, r4
 8009920:	5ca8      	ldrb	r0, [r5, r2]
                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 8009922:	2164      	movs	r1, #100	; 0x64
 8009924:	fb03 f101 	mul.w	r1, r3, r1
 8009928:	f000 000f 	and.w	r0, r0, #15
 800992c:	f002 fc69 	bl	800c202 <LoRaMacClassBPingSlotChannelReq>
                macCmdPayload[0] = status;
 8009930:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 8009934:	2201      	movs	r2, #1
 8009936:	a90b      	add	r1, sp, #44	; 0x2c
 8009938:	2011      	movs	r0, #17
 800993a:	f002 fcfd 	bl	800c338 <LoRaMacCommandsAddCmd>
                break;
 800993e:	e56f      	b.n	8009420 <ProcessMacCommands+0x18>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 8009940:	200e      	movs	r0, #14
 8009942:	f002 febd 	bl	800c6c0 <LoRaMacConfirmQueueIsCmdActive>
 8009946:	b908      	cbnz	r0, 800994c <ProcessMacCommands+0x544>
        switch( payload[macIndex++] )
 8009948:	464c      	mov	r4, r9
 800994a:	e569      	b.n	8009420 <ProcessMacCommands+0x18>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 800994c:	210e      	movs	r1, #14
 800994e:	2000      	movs	r0, #0
 8009950:	f002 fe6a 	bl	800c628 <LoRaMacConfirmQueueSetStatus>
                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 8009954:	1ca2      	adds	r2, r4, #2
 8009956:	b2d2      	uxtb	r2, r2
 8009958:	f815 0009 	ldrb.w	r0, [r5, r9]
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 800995c:	1ce3      	adds	r3, r4, #3
 800995e:	b2db      	uxtb	r3, r3
 8009960:	f815 c002 	ldrb.w	ip, [r5, r2]
                    beaconTimingChannel = payload[macIndex++];
 8009964:	3404      	adds	r4, #4
 8009966:	b2e4      	uxtb	r4, r4
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8009968:	4a18      	ldr	r2, [pc, #96]	; (80099cc <ProcessMacCommands+0x5c4>)
 800996a:	6812      	ldr	r2, [r2, #0]
 800996c:	5ce9      	ldrb	r1, [r5, r3]
 800996e:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
 8009972:	f002 fc48 	bl	800c206 <LoRaMacClassBBeaconTimingAns>
 8009976:	e553      	b.n	8009420 <ProcessMacCommands+0x18>
                    frequency = ( uint32_t )payload[macIndex++];
 8009978:	1ca1      	adds	r1, r4, #2
 800997a:	b2c9      	uxtb	r1, r1
 800997c:	f815 3009 	ldrb.w	r3, [r5, r9]
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 8009980:	1ce2      	adds	r2, r4, #3
 8009982:	b2d2      	uxtb	r2, r2
 8009984:	5c69      	ldrb	r1, [r5, r1]
 8009986:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 800998a:	3404      	adds	r4, #4
 800998c:	b2e4      	uxtb	r4, r4
 800998e:	5caa      	ldrb	r2, [r5, r2]
 8009990:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 8009994:	2064      	movs	r0, #100	; 0x64
 8009996:	fb03 f000 	mul.w	r0, r3, r0
 800999a:	f002 fc36 	bl	800c20a <LoRaMacClassBBeaconFreqReq>
 800999e:	b140      	cbz	r0, 80099b2 <ProcessMacCommands+0x5aa>
                        macCmdPayload[0] = 1;
 80099a0:	2301      	movs	r3, #1
 80099a2:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 80099a6:	2201      	movs	r2, #1
 80099a8:	a90b      	add	r1, sp, #44	; 0x2c
 80099aa:	2013      	movs	r0, #19
 80099ac:	f002 fcc4 	bl	800c338 <LoRaMacCommandsAddCmd>
                break;
 80099b0:	e536      	b.n	8009420 <ProcessMacCommands+0x18>
                        macCmdPayload[0] = 0;
 80099b2:	2300      	movs	r3, #0
 80099b4:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 80099b8:	e7f5      	b.n	80099a6 <ProcessMacCommands+0x59e>
}
 80099ba:	b00f      	add	sp, #60	; 0x3c
 80099bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099c0:	20000d60 	.word	0x20000d60
 80099c4:	12d53d80 	.word	0x12d53d80
 80099c8:	20000858 	.word	0x20000858
 80099cc:	20001034 	.word	0x20001034

080099d0 <ProcessRadioRxDone>:
{
 80099d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80099d4:	b0a3      	sub	sp, #140	; 0x8c
    uint8_t *payload = RxDoneParams.Payload;
 80099d6:	4bbb      	ldr	r3, [pc, #748]	; (8009cc4 <ProcessRadioRxDone+0x2f4>)
 80099d8:	685e      	ldr	r6, [r3, #4]
    uint16_t size = RxDoneParams.Size;
 80099da:	891d      	ldrh	r5, [r3, #8]
    int16_t rssi = RxDoneParams.Rssi;
 80099dc:	f9b3 900a 	ldrsh.w	r9, [r3, #10]
    int8_t snr = RxDoneParams.Snr;
 80099e0:	f993 700c 	ldrsb.w	r7, [r3, #12]
    uint32_t downLinkCounter = 0;
 80099e4:	2300      	movs	r3, #0
 80099e6:	9306      	str	r3, [sp, #24]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 80099e8:	4ab7      	ldr	r2, [pc, #732]	; (8009cc8 <ProcessRadioRxDone+0x2f8>)
 80099ea:	f8d2 80cc 	ldr.w	r8, [r2, #204]	; 0xcc
    MacCtx.McpsConfirm.AckReceived = false;
 80099ee:	4cb7      	ldr	r4, [pc, #732]	; (8009ccc <ProcessRadioRxDone+0x2fc>)
 80099f0:	f884 343c 	strb.w	r3, [r4, #1084]	; 0x43c
    MacCtx.RxStatus.Rssi = rssi;
 80099f4:	f8a4 947c 	strh.w	r9, [r4, #1148]	; 0x47c
    MacCtx.RxStatus.Snr = snr;
 80099f8:	f884 747e 	strb.w	r7, [r4, #1150]	; 0x47e
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 80099fc:	f894 2480 	ldrb.w	r2, [r4, #1152]	; 0x480
 8009a00:	f884 247f 	strb.w	r2, [r4, #1151]	; 0x47f
    MacCtx.McpsIndication.Port = 0;
 8009a04:	f884 341f 	strb.w	r3, [r4, #1055]	; 0x41f
    MacCtx.McpsIndication.Multicast = 0;
 8009a08:	f884 341e 	strb.w	r3, [r4, #1054]	; 0x41e
    MacCtx.McpsIndication.FramePending = 0;
 8009a0c:	f884 3421 	strb.w	r3, [r4, #1057]	; 0x421
    MacCtx.McpsIndication.Buffer = NULL;
 8009a10:	f8c4 3424 	str.w	r3, [r4, #1060]	; 0x424
    MacCtx.McpsIndication.BufferSize = 0;
 8009a14:	f884 3428 	strb.w	r3, [r4, #1064]	; 0x428
    MacCtx.McpsIndication.RxData = false;
 8009a18:	f884 3429 	strb.w	r3, [r4, #1065]	; 0x429
    MacCtx.McpsIndication.AckReceived = false;
 8009a1c:	f884 342a 	strb.w	r3, [r4, #1066]	; 0x42a
    MacCtx.McpsIndication.DownLinkCounter = 0;
 8009a20:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8009a24:	f884 341c 	strb.w	r3, [r4, #1052]	; 0x41c
    MacCtx.McpsIndication.DevAddress = 0;
 8009a28:	f8c4 3430 	str.w	r3, [r4, #1072]	; 0x430
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 8009a2c:	f884 3434 	strb.w	r3, [r4, #1076]	; 0x434
    Radio.Sleep( );
 8009a30:	4ba7      	ldr	r3, [pc, #668]	; (8009cd0 <ProcessRadioRxDone+0x300>)
 8009a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a34:	4798      	blx	r3
    TimerStop( &MacCtx.RxWindowTimer2 );
 8009a36:	f504 7066 	add.w	r0, r4, #920	; 0x398
 8009a3a:	f008 fa2b 	bl	8011e94 <UTIL_TIMER_Stop>
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 8009a3e:	4629      	mov	r1, r5
 8009a40:	4630      	mov	r0, r6
 8009a42:	f002 fbca 	bl	800c1da <LoRaMacClassBRxBeacon>
 8009a46:	b998      	cbnz	r0, 8009a70 <ProcessRadioRxDone+0xa0>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8009a48:	4b9f      	ldr	r3, [pc, #636]	; (8009cc8 <ProcessRadioRxDone+0x2f8>)
 8009a4a:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8009a4e:	2b01      	cmp	r3, #1
 8009a50:	d013      	beq.n	8009a7a <ProcessRadioRxDone+0xaa>
    macHdr.Value = payload[pktHeaderLen++];
 8009a52:	7834      	ldrb	r4, [r6, #0]
    switch( macHdr.Bits.MType )
 8009a54:	0963      	lsrs	r3, r4, #5
 8009a56:	3b01      	subs	r3, #1
 8009a58:	2b06      	cmp	r3, #6
 8009a5a:	f200 827d 	bhi.w	8009f58 <ProcessRadioRxDone+0x588>
 8009a5e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8009a62:	0029      	.short	0x0029
 8009a64:	00aa027b 	.word	0x00aa027b
 8009a68:	00a6027b 	.word	0x00a6027b
 8009a6c:	0255027b 	.word	0x0255027b
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 8009a70:	f8a4 9472 	strh.w	r9, [r4, #1138]	; 0x472
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 8009a74:	f884 7474 	strb.w	r7, [r4, #1140]	; 0x474
        return;
 8009a78:	e283      	b.n	8009f82 <ProcessRadioRxDone+0x5b2>
        if( LoRaMacClassBIsPingExpected( ) == true )
 8009a7a:	f002 fbb2 	bl	800c1e2 <LoRaMacClassBIsPingExpected>
 8009a7e:	b150      	cbz	r0, 8009a96 <ProcessRadioRxDone+0xc6>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8009a80:	2000      	movs	r0, #0
 8009a82:	f002 fba3 	bl	800c1cc <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 8009a86:	2000      	movs	r0, #0
 8009a88:	f002 fba5 	bl	800c1d6 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 8009a8c:	4b8f      	ldr	r3, [pc, #572]	; (8009ccc <ProcessRadioRxDone+0x2fc>)
 8009a8e:	2204      	movs	r2, #4
 8009a90:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
 8009a94:	e7dd      	b.n	8009a52 <ProcessRadioRxDone+0x82>
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8009a96:	f002 fba6 	bl	800c1e6 <LoRaMacClassBIsMulticastExpected>
 8009a9a:	2800      	cmp	r0, #0
 8009a9c:	d0d9      	beq.n	8009a52 <ProcessRadioRxDone+0x82>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8009a9e:	2000      	movs	r0, #0
 8009aa0:	f002 fb95 	bl	800c1ce <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8009aa4:	2000      	movs	r0, #0
 8009aa6:	f002 fb97 	bl	800c1d8 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 8009aaa:	4b88      	ldr	r3, [pc, #544]	; (8009ccc <ProcessRadioRxDone+0x2fc>)
 8009aac:	2205      	movs	r2, #5
 8009aae:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
 8009ab2:	e7ce      	b.n	8009a52 <ProcessRadioRxDone+0x82>
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 8009ab4:	2d10      	cmp	r5, #16
 8009ab6:	d95d      	bls.n	8009b74 <ProcessRadioRxDone+0x1a4>
            macMsgJoinAccept.Buffer = payload;
 8009ab8:	9607      	str	r6, [sp, #28]
            macMsgJoinAccept.BufSize = size;
 8009aba:	b2ed      	uxtb	r5, r5
 8009abc:	f88d 5020 	strb.w	r5, [sp, #32]
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 8009ac0:	4b81      	ldr	r3, [pc, #516]	; (8009cc8 <ProcessRadioRxDone+0x2f8>)
 8009ac2:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d15b      	bne.n	8009b82 <ProcessRadioRxDone+0x1b2>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 8009aca:	f005 fcd9 	bl	800f480 <SecureElementGetJoinEui>
 8009ace:	4601      	mov	r1, r0
 8009ad0:	aa07      	add	r2, sp, #28
 8009ad2:	20ff      	movs	r0, #255	; 0xff
 8009ad4:	f003 f980 	bl	800cdd8 <LoRaMacCryptoHandleJoinAccept>
            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 8009ad8:	2800      	cmp	r0, #0
 8009ada:	d15e      	bne.n	8009b9a <ProcessRadioRxDone+0x1ca>
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 8009adc:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
 8009ae0:	4b79      	ldr	r3, [pc, #484]	; (8009cc8 <ProcessRadioRxDone+0x2f8>)
 8009ae2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 8009ae6:	f89d 1026 	ldrb.w	r1, [sp, #38]	; 0x26
 8009aea:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8009aee:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 8009af2:	f89d 1027 	ldrb.w	r1, [sp, #39]	; 0x27
 8009af6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8009afa:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 8009afe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009b00:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 8009b04:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 8009b08:	f3c2 1102 	ubfx	r1, r2, #4, #3
 8009b0c:	f883 1061 	strb.w	r1, [r3, #97]	; 0x61
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8009b10:	f3c2 0203 	ubfx	r2, r2, #0, #4
 8009b14:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8009b18:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 8009b1c:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 8009b20:	651a      	str	r2, [r3, #80]	; 0x50
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 8009b22:	b90a      	cbnz	r2, 8009b28 <ProcessRadioRxDone+0x158>
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 8009b24:	2201      	movs	r2, #1
 8009b26:	651a      	str	r2, [r3, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 8009b28:	4c67      	ldr	r4, [pc, #412]	; (8009cc8 <ProcessRadioRxDone+0x2f8>)
 8009b2a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009b2c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009b30:	fb02 f303 	mul.w	r3, r2, r3
 8009b34:	6523      	str	r3, [r4, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 8009b36:	4413      	add	r3, r2
 8009b38:	6563      	str	r3, [r4, #84]	; 0x54
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
                applyCFList.Payload = macMsgJoinAccept.CFList;
 8009b40:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 8009b44:	9320      	str	r3, [sp, #128]	; 0x80
                applyCFList.Size = size - 17;
 8009b46:	3d11      	subs	r5, #17
 8009b48:	f88d 5084 	strb.w	r5, [sp, #132]	; 0x84
                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 8009b4c:	a920      	add	r1, sp, #128	; 0x80
 8009b4e:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8009b52:	f003 fb42 	bl	800d1da <RegionApplyCFList>
                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 8009b56:	2302      	movs	r3, #2
 8009b58:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8009b5c:	2001      	movs	r0, #1
 8009b5e:	f002 fdaf 	bl	800c6c0 <LoRaMacConfirmQueueIsCmdActive>
 8009b62:	b9a8      	cbnz	r0, 8009b90 <ProcessRadioRxDone+0x1c0>
            MacCtx.MacFlags.Bits.MlmeInd = 1;
 8009b64:	4a59      	ldr	r2, [pc, #356]	; (8009ccc <ProcessRadioRxDone+0x2fc>)
 8009b66:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8009b6a:	f043 0308 	orr.w	r3, r3, #8
 8009b6e:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            break;
 8009b72:	e1e5      	b.n	8009f40 <ProcessRadioRxDone+0x570>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009b74:	4b55      	ldr	r3, [pc, #340]	; (8009ccc <ProcessRadioRxDone+0x2fc>)
 8009b76:	2201      	movs	r2, #1
 8009b78:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 8009b7c:	f7ff fbca 	bl	8009314 <PrepareRxDoneAbort>
                return;
 8009b80:	e1ff      	b.n	8009f82 <ProcessRadioRxDone+0x5b2>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009b82:	4b52      	ldr	r3, [pc, #328]	; (8009ccc <ProcessRadioRxDone+0x2fc>)
 8009b84:	2201      	movs	r2, #1
 8009b86:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 8009b8a:	f7ff fbc3 	bl	8009314 <PrepareRxDoneAbort>
                return;
 8009b8e:	e1f8      	b.n	8009f82 <ProcessRadioRxDone+0x5b2>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 8009b90:	2101      	movs	r1, #1
 8009b92:	2000      	movs	r0, #0
 8009b94:	f002 fd48 	bl	800c628 <LoRaMacConfirmQueueSetStatus>
 8009b98:	e7e4      	b.n	8009b64 <ProcessRadioRxDone+0x194>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8009b9a:	2001      	movs	r0, #1
 8009b9c:	f002 fd90 	bl	800c6c0 <LoRaMacConfirmQueueIsCmdActive>
 8009ba0:	2800      	cmp	r0, #0
 8009ba2:	d0df      	beq.n	8009b64 <ProcessRadioRxDone+0x194>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 8009ba4:	2101      	movs	r1, #1
 8009ba6:	2007      	movs	r0, #7
 8009ba8:	f002 fd3e 	bl	800c628 <LoRaMacConfirmQueueSetStatus>
 8009bac:	e7da      	b.n	8009b64 <ProcessRadioRxDone+0x194>
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 8009bae:	4b47      	ldr	r3, [pc, #284]	; (8009ccc <ProcessRadioRxDone+0x2fc>)
 8009bb0:	2201      	movs	r2, #1
 8009bb2:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009bb6:	4b44      	ldr	r3, [pc, #272]	; (8009cc8 <ProcessRadioRxDone+0x2f8>)
 8009bb8:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 8009bbc:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 8009bc0:	4a42      	ldr	r2, [pc, #264]	; (8009ccc <ProcessRadioRxDone+0x2fc>)
 8009bc2:	f992 2420 	ldrsb.w	r2, [r2, #1056]	; 0x420
 8009bc6:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 8009bca:	220d      	movs	r2, #13
 8009bcc:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 8009bd0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009bd4:	b113      	cbz	r3, 8009bdc <ProcessRadioRxDone+0x20c>
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8009bd6:	230e      	movs	r3, #14
 8009bd8:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009bdc:	a91e      	add	r1, sp, #120	; 0x78
 8009bde:	4b3a      	ldr	r3, [pc, #232]	; (8009cc8 <ProcessRadioRxDone+0x2f8>)
 8009be0:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8009be4:	f003 facd 	bl	800d182 <RegionGetPhyParam>
 8009be8:	901d      	str	r0, [sp, #116]	; 0x74
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 8009bea:	f1a5 030d 	sub.w	r3, r5, #13
 8009bee:	b21b      	sxth	r3, r3
 8009bf0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009bf4:	b200      	sxth	r0, r0
 8009bf6:	4283      	cmp	r3, r0
 8009bf8:	dc01      	bgt.n	8009bfe <ProcessRadioRxDone+0x22e>
 8009bfa:	2d0b      	cmp	r5, #11
 8009bfc:	d806      	bhi.n	8009c0c <ProcessRadioRxDone+0x23c>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009bfe:	4b33      	ldr	r3, [pc, #204]	; (8009ccc <ProcessRadioRxDone+0x2fc>)
 8009c00:	2201      	movs	r2, #1
 8009c02:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 8009c06:	f7ff fb85 	bl	8009314 <PrepareRxDoneAbort>
                return;
 8009c0a:	e1ba      	b.n	8009f82 <ProcessRadioRxDone+0x5b2>
            macMsgData.Buffer = payload;
 8009c0c:	9611      	str	r6, [sp, #68]	; 0x44
            macMsgData.BufSize = size;
 8009c0e:	f88d 5048 	strb.w	r5, [sp, #72]	; 0x48
            macMsgData.FRMPayload = MacCtx.RxPayload;
 8009c12:	4b30      	ldr	r3, [pc, #192]	; (8009cd4 <ProcessRadioRxDone+0x304>)
 8009c14:	931a      	str	r3, [sp, #104]	; 0x68
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 8009c16:	23ff      	movs	r3, #255	; 0xff
 8009c18:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 8009c1c:	a811      	add	r0, sp, #68	; 0x44
 8009c1e:	f003 f9a1 	bl	800cf64 <LoRaMacParserData>
 8009c22:	2800      	cmp	r0, #0
 8009c24:	d147      	bne.n	8009cb6 <ProcessRadioRxDone+0x2e6>
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 8009c26:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009c28:	4b28      	ldr	r3, [pc, #160]	; (8009ccc <ProcessRadioRxDone+0x2fc>)
 8009c2a:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 8009c2e:	f10d 0116 	add.w	r1, sp, #22
 8009c32:	a811      	add	r0, sp, #68	; 0x44
 8009c34:	f7ff f9c6 	bl	8008fc4 <DetermineFrameType>
 8009c38:	4605      	mov	r5, r0
 8009c3a:	2800      	cmp	r0, #0
 8009c3c:	d14c      	bne.n	8009cd8 <ProcessRadioRxDone+0x308>
            downLinkCounter = 0;
 8009c3e:	2300      	movs	r3, #0
 8009c40:	9306      	str	r3, [sp, #24]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8009c42:	4603      	mov	r3, r0
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d04e      	beq.n	8009ce6 <ProcessRadioRxDone+0x316>
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 8009c48:	f04f 0901 	mov.w	r9, #1
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 8009c4c:	2d01      	cmp	r5, #1
 8009c4e:	d108      	bne.n	8009c62 <ProcessRadioRxDone+0x292>
 8009c50:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8009c54:	2b03      	cmp	r3, #3
 8009c56:	d172      	bne.n	8009d3e <ProcessRadioRxDone+0x36e>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 8009c58:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8009c5c:	f013 0f60 	tst.w	r3, #96	; 0x60
 8009c60:	d16d      	bne.n	8009d3e <ProcessRadioRxDone+0x36e>
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 8009c62:	2315      	movs	r3, #21
 8009c64:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009c68:	4e17      	ldr	r6, [pc, #92]	; (8009cc8 <ProcessRadioRxDone+0x2f8>)
 8009c6a:	a91e      	add	r1, sp, #120	; 0x78
 8009c6c:	f896 0040 	ldrb.w	r0, [r6, #64]	; 0x40
 8009c70:	f003 fa87 	bl	800d182 <RegionGetPhyParam>
 8009c74:	901d      	str	r0, [sp, #116]	; 0x74
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, phyParam.Value, &fCntID, &downLinkCounter );
 8009c76:	ab06      	add	r3, sp, #24
 8009c78:	9302      	str	r3, [sp, #8]
 8009c7a:	f10d 0317 	add.w	r3, sp, #23
 8009c7e:	9301      	str	r3, [sp, #4]
 8009c80:	b280      	uxth	r0, r0
 8009c82:	9000      	str	r0, [sp, #0]
 8009c84:	f8d6 310c 	ldr.w	r3, [r6, #268]	; 0x10c
 8009c88:	aa11      	add	r2, sp, #68	; 0x44
 8009c8a:	f89d 1016 	ldrb.w	r1, [sp, #22]
 8009c8e:	4648      	mov	r0, r9
 8009c90:	f7ff fb7e 	bl	8009390 <GetFCntDown>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8009c94:	2800      	cmp	r0, #0
 8009c96:	d072      	beq.n	8009d7e <ProcessRadioRxDone+0x3ae>
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 8009c98:	2807      	cmp	r0, #7
 8009c9a:	d057      	beq.n	8009d4c <ProcessRadioRxDone+0x37c>
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 8009c9c:	2808      	cmp	r0, #8
 8009c9e:	d069      	beq.n	8009d74 <ProcessRadioRxDone+0x3a4>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009ca0:	4b0a      	ldr	r3, [pc, #40]	; (8009ccc <ProcessRadioRxDone+0x2fc>)
 8009ca2:	2201      	movs	r2, #1
 8009ca4:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8009ca8:	4b08      	ldr	r3, [pc, #32]	; (8009ccc <ProcessRadioRxDone+0x2fc>)
 8009caa:	9a06      	ldr	r2, [sp, #24]
 8009cac:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
                PrepareRxDoneAbort( );
 8009cb0:	f7ff fb30 	bl	8009314 <PrepareRxDoneAbort>
                return;
 8009cb4:	e165      	b.n	8009f82 <ProcessRadioRxDone+0x5b2>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009cb6:	4b05      	ldr	r3, [pc, #20]	; (8009ccc <ProcessRadioRxDone+0x2fc>)
 8009cb8:	2201      	movs	r2, #1
 8009cba:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 8009cbe:	f7ff fb29 	bl	8009314 <PrepareRxDoneAbort>
                return;
 8009cc2:	e15e      	b.n	8009f82 <ProcessRadioRxDone+0x5b2>
 8009cc4:	20001034 	.word	0x20001034
 8009cc8:	20000d60 	.word	0x20000d60
 8009ccc:	20000858 	.word	0x20000858
 8009cd0:	08017b28 	.word	0x08017b28
 8009cd4:	20000a90 	.word	0x20000a90
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009cd8:	4bad      	ldr	r3, [pc, #692]	; (8009f90 <ProcessRadioRxDone+0x5c0>)
 8009cda:	2201      	movs	r2, #1
 8009cdc:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 8009ce0:	f7ff fb18 	bl	8009314 <PrepareRxDoneAbort>
                return;
 8009ce4:	e14d      	b.n	8009f82 <ProcessRadioRxDone+0x5b2>
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	4aaa      	ldr	r2, [pc, #680]	; (8009f94 <ProcessRadioRxDone+0x5c4>)
 8009cea:	212c      	movs	r1, #44	; 0x2c
 8009cec:	fb01 2203 	mla	r2, r1, r3, r2
 8009cf0:	f8d2 20d4 	ldr.w	r2, [r2, #212]	; 0xd4
 8009cf4:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009cf6:	428a      	cmp	r2, r1
 8009cf8:	d002      	beq.n	8009d00 <ProcessRadioRxDone+0x330>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8009cfa:	3301      	adds	r3, #1
 8009cfc:	b2db      	uxtb	r3, r3
 8009cfe:	e7a1      	b.n	8009c44 <ProcessRadioRxDone+0x274>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 8009d00:	49a4      	ldr	r1, [pc, #656]	; (8009f94 <ProcessRadioRxDone+0x5c4>)
 8009d02:	262c      	movs	r6, #44	; 0x2c
 8009d04:	fb06 1103 	mla	r1, r6, r3, r1
 8009d08:	f891 10d2 	ldrb.w	r1, [r1, #210]	; 0xd2
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 8009d0c:	2900      	cmp	r1, #0
 8009d0e:	d0f4      	beq.n	8009cfa <ProcessRadioRxDone+0x32a>
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 8009d10:	4ba0      	ldr	r3, [pc, #640]	; (8009f94 <ProcessRadioRxDone+0x5c4>)
 8009d12:	fb06 3000 	mla	r0, r6, r0, r3
 8009d16:	f890 90d3 	ldrb.w	r9, [r0, #211]	; 0xd3
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 8009d1a:	f8d0 10f0 	ldr.w	r1, [r0, #240]	; 0xf0
 8009d1e:	6809      	ldr	r1, [r1, #0]
 8009d20:	9106      	str	r1, [sp, #24]
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8009d22:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8009d26:	2b02      	cmp	r3, #2
 8009d28:	d002      	beq.n	8009d30 <ProcessRadioRxDone+0x360>
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 8009d2a:	4690      	mov	r8, r2
                    multicast = 1;
 8009d2c:	2501      	movs	r5, #1
 8009d2e:	e78d      	b.n	8009c4c <ProcessRadioRxDone+0x27c>
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 8009d30:	4b97      	ldr	r3, [pc, #604]	; (8009f90 <ProcessRadioRxDone+0x5c0>)
 8009d32:	2103      	movs	r1, #3
 8009d34:	f883 147f 	strb.w	r1, [r3, #1151]	; 0x47f
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 8009d38:	4690      	mov	r8, r2
                    multicast = 1;
 8009d3a:	2501      	movs	r5, #1
 8009d3c:	e786      	b.n	8009c4c <ProcessRadioRxDone+0x27c>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009d3e:	4b94      	ldr	r3, [pc, #592]	; (8009f90 <ProcessRadioRxDone+0x5c0>)
 8009d40:	2201      	movs	r2, #1
 8009d42:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 8009d46:	f7ff fae5 	bl	8009314 <PrepareRxDoneAbort>
                return;
 8009d4a:	e11a      	b.n	8009f82 <ProcessRadioRxDone+0x5b2>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 8009d4c:	4b90      	ldr	r3, [pc, #576]	; (8009f90 <ProcessRadioRxDone+0x5c0>)
 8009d4e:	2208      	movs	r2, #8
 8009d50:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                    if( ( Nvm.MacGroup2.Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( Nvm.MacGroup1.LastRxMic == macMsgData.MIC ) )
 8009d54:	f896 310e 	ldrb.w	r3, [r6, #270]	; 0x10e
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d1a5      	bne.n	8009ca8 <ProcessRadioRxDone+0x2d8>
 8009d5c:	f004 04e0 	and.w	r4, r4, #224	; 0xe0
 8009d60:	2ca0      	cmp	r4, #160	; 0xa0
 8009d62:	d1a1      	bne.n	8009ca8 <ProcessRadioRxDone+0x2d8>
 8009d64:	6b72      	ldr	r2, [r6, #52]	; 0x34
 8009d66:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8009d68:	429a      	cmp	r2, r3
 8009d6a:	d19d      	bne.n	8009ca8 <ProcessRadioRxDone+0x2d8>
                        Nvm.MacGroup1.SrvAckRequested = true;
 8009d6c:	2201      	movs	r2, #1
 8009d6e:	f886 203a 	strb.w	r2, [r6, #58]	; 0x3a
 8009d72:	e799      	b.n	8009ca8 <ProcessRadioRxDone+0x2d8>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 8009d74:	4b86      	ldr	r3, [pc, #536]	; (8009f90 <ProcessRadioRxDone+0x5c0>)
 8009d76:	220a      	movs	r2, #10
 8009d78:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
 8009d7c:	e794      	b.n	8009ca8 <ProcessRadioRxDone+0x2d8>
            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 8009d7e:	ab11      	add	r3, sp, #68	; 0x44
 8009d80:	9300      	str	r3, [sp, #0]
 8009d82:	9b06      	ldr	r3, [sp, #24]
 8009d84:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8009d88:	4641      	mov	r1, r8
 8009d8a:	4648      	mov	r0, r9
 8009d8c:	f002 ff78 	bl	800cc80 <LoRaMacCryptoUnsecureMessage>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8009d90:	2800      	cmp	r0, #0
 8009d92:	d13a      	bne.n	8009e0a <ProcessRadioRxDone+0x43a>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8009d94:	4b7e      	ldr	r3, [pc, #504]	; (8009f90 <ProcessRadioRxDone+0x5c0>)
 8009d96:	2100      	movs	r1, #0
 8009d98:	f883 141d 	strb.w	r1, [r3, #1053]	; 0x41d
            MacCtx.McpsIndication.Multicast = multicast;
 8009d9c:	f883 541e 	strb.w	r5, [r3, #1054]	; 0x41e
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 8009da0:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8009da4:	f3c2 1000 	ubfx	r0, r2, #4, #1
 8009da8:	f883 0421 	strb.w	r0, [r3, #1057]	; 0x421
            MacCtx.McpsIndication.Buffer = NULL;
 8009dac:	f8c3 1424 	str.w	r1, [r3, #1060]	; 0x424
            MacCtx.McpsIndication.BufferSize = 0;
 8009db0:	f883 1428 	strb.w	r1, [r3, #1064]	; 0x428
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8009db4:	9806      	ldr	r0, [sp, #24]
 8009db6:	f8c3 042c 	str.w	r0, [r3, #1068]	; 0x42c
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 8009dba:	f3c2 1240 	ubfx	r2, r2, #5, #1
 8009dbe:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8009dc2:	f883 1439 	strb.w	r1, [r3, #1081]	; 0x439
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 8009dc6:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8009dca:	f893 047f 	ldrb.w	r0, [r3, #1151]	; 0x47f
 8009dce:	2801      	cmp	r0, #1
 8009dd0:	d929      	bls.n	8009e26 <ProcessRadioRxDone+0x456>
            if( multicast == 1 )
 8009dd2:	2d01      	cmp	r5, #1
 8009dd4:	d02a      	beq.n	8009e2c <ProcessRadioRxDone+0x45c>
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 8009dd6:	f004 04e0 	and.w	r4, r4, #224	; 0xe0
 8009dda:	2ca0      	cmp	r4, #160	; 0xa0
 8009ddc:	d02b      	beq.n	8009e36 <ProcessRadioRxDone+0x466>
                    Nvm.MacGroup1.SrvAckRequested = false;
 8009dde:	2300      	movs	r3, #0
 8009de0:	4a6c      	ldr	r2, [pc, #432]	; (8009f94 <ProcessRadioRxDone+0x5c4>)
 8009de2:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8009de6:	4a6a      	ldr	r2, [pc, #424]	; (8009f90 <ProcessRadioRxDone+0x5c0>)
 8009de8:	f882 341c 	strb.w	r3, [r2, #1052]	; 0x41c
            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 8009dec:	4b68      	ldr	r3, [pc, #416]	; (8009f90 <ProcessRadioRxDone+0x5c0>)
 8009dee:	f893 2438 	ldrb.w	r2, [r3, #1080]	; 0x438
 8009df2:	f89d 1050 	ldrb.w	r1, [sp, #80]	; 0x50
 8009df6:	f7ff faf8 	bl	80093ea <RemoveMacCommands>
            switch( fType )
 8009dfa:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8009dfe:	2b03      	cmp	r3, #3
 8009e00:	d87d      	bhi.n	8009efe <ProcessRadioRxDone+0x52e>
 8009e02:	e8df f003 	tbb	[pc, r3]
 8009e06:	4a27      	.short	0x4a27
 8009e08:	6c5c      	.short	0x6c5c
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 8009e0a:	2802      	cmp	r0, #2
 8009e0c:	d006      	beq.n	8009e1c <ProcessRadioRxDone+0x44c>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 8009e0e:	4b60      	ldr	r3, [pc, #384]	; (8009f90 <ProcessRadioRxDone+0x5c0>)
 8009e10:	220c      	movs	r2, #12
 8009e12:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 8009e16:	f7ff fa7d 	bl	8009314 <PrepareRxDoneAbort>
                return;
 8009e1a:	e0b2      	b.n	8009f82 <ProcessRadioRxDone+0x5b2>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 8009e1c:	4b5c      	ldr	r3, [pc, #368]	; (8009f90 <ProcessRadioRxDone+0x5c0>)
 8009e1e:	220b      	movs	r2, #11
 8009e20:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
 8009e24:	e7f7      	b.n	8009e16 <ProcessRadioRxDone+0x446>
                Nvm.MacGroup1.AdrAckCounter = 0;
 8009e26:	4b5b      	ldr	r3, [pc, #364]	; (8009f94 <ProcessRadioRxDone+0x5c4>)
 8009e28:	6299      	str	r1, [r3, #40]	; 0x28
 8009e2a:	e7d2      	b.n	8009dd2 <ProcessRadioRxDone+0x402>
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 8009e2c:	4b58      	ldr	r3, [pc, #352]	; (8009f90 <ProcessRadioRxDone+0x5c0>)
 8009e2e:	2202      	movs	r2, #2
 8009e30:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 8009e34:	e7da      	b.n	8009dec <ProcessRadioRxDone+0x41c>
                    Nvm.MacGroup1.SrvAckRequested = true;
 8009e36:	4b57      	ldr	r3, [pc, #348]	; (8009f94 <ProcessRadioRxDone+0x5c4>)
 8009e38:	2201      	movs	r2, #1
 8009e3a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 8009e3e:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 8009e42:	b913      	cbnz	r3, 8009e4a <ProcessRadioRxDone+0x47a>
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 8009e44:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009e46:	4b53      	ldr	r3, [pc, #332]	; (8009f94 <ProcessRadioRxDone+0x5c4>)
 8009e48:	635a      	str	r2, [r3, #52]	; 0x34
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 8009e4a:	4b51      	ldr	r3, [pc, #324]	; (8009f90 <ProcessRadioRxDone+0x5c0>)
 8009e4c:	2201      	movs	r2, #1
 8009e4e:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 8009e52:	e7cb      	b.n	8009dec <ProcessRadioRxDone+0x41c>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 8009e54:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8009e58:	4c4d      	ldr	r4, [pc, #308]	; (8009f90 <ProcessRadioRxDone+0x5c0>)
 8009e5a:	f894 347f 	ldrb.w	r3, [r4, #1151]	; 0x47f
 8009e5e:	9300      	str	r3, [sp, #0]
 8009e60:	463b      	mov	r3, r7
 8009e62:	f002 020f 	and.w	r2, r2, #15
 8009e66:	2100      	movs	r1, #0
 8009e68:	a815      	add	r0, sp, #84	; 0x54
 8009e6a:	f7ff facd 	bl	8009408 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8009e6e:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8009e72:	f884 341f 	strb.w	r3, [r4, #1055]	; 0x41f
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 8009e76:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8009e78:	f8c4 3424 	str.w	r3, [r4, #1060]	; 0x424
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 8009e7c:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
 8009e80:	f884 3428 	strb.w	r3, [r4, #1064]	; 0x428
                    MacCtx.McpsIndication.RxData = true;
 8009e84:	2301      	movs	r3, #1
 8009e86:	f884 3429 	strb.w	r3, [r4, #1065]	; 0x429
            MacCtx.MacFlags.Bits.McpsInd = 1;
 8009e8a:	4a41      	ldr	r2, [pc, #260]	; (8009f90 <ProcessRadioRxDone+0x5c0>)
 8009e8c:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8009e90:	f043 0302 	orr.w	r3, r3, #2
 8009e94:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            break;
 8009e98:	e052      	b.n	8009f40 <ProcessRadioRxDone+0x570>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 8009e9a:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8009e9e:	4c3c      	ldr	r4, [pc, #240]	; (8009f90 <ProcessRadioRxDone+0x5c0>)
 8009ea0:	f894 347f 	ldrb.w	r3, [r4, #1151]	; 0x47f
 8009ea4:	9300      	str	r3, [sp, #0]
 8009ea6:	463b      	mov	r3, r7
 8009ea8:	f002 020f 	and.w	r2, r2, #15
 8009eac:	2100      	movs	r1, #0
 8009eae:	a815      	add	r0, sp, #84	; 0x54
 8009eb0:	f7ff faaa 	bl	8009408 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8009eb4:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8009eb8:	f884 341f 	strb.w	r3, [r4, #1055]	; 0x41f
                    break;
 8009ebc:	e7e5      	b.n	8009e8a <ProcessRadioRxDone+0x4ba>
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 8009ebe:	4c34      	ldr	r4, [pc, #208]	; (8009f90 <ProcessRadioRxDone+0x5c0>)
 8009ec0:	f894 347f 	ldrb.w	r3, [r4, #1151]	; 0x47f
 8009ec4:	9300      	str	r3, [sp, #0]
 8009ec6:	463b      	mov	r3, r7
 8009ec8:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 8009ecc:	2100      	movs	r1, #0
 8009ece:	981a      	ldr	r0, [sp, #104]	; 0x68
 8009ed0:	f7ff fa9a 	bl	8009408 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8009ed4:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8009ed8:	f884 341f 	strb.w	r3, [r4, #1055]	; 0x41f
                    break;
 8009edc:	e7d5      	b.n	8009e8a <ProcessRadioRxDone+0x4ba>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8009ede:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8009ee2:	4b2b      	ldr	r3, [pc, #172]	; (8009f90 <ProcessRadioRxDone+0x5c0>)
 8009ee4:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 8009ee8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009eea:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 8009eee:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 8009ef2:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
                    MacCtx.McpsIndication.RxData = true;
 8009ef6:	2201      	movs	r2, #1
 8009ef8:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
                    break;
 8009efc:	e7c5      	b.n	8009e8a <ProcessRadioRxDone+0x4ba>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009efe:	4b24      	ldr	r3, [pc, #144]	; (8009f90 <ProcessRadioRxDone+0x5c0>)
 8009f00:	2201      	movs	r2, #1
 8009f02:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                    PrepareRxDoneAbort( );
 8009f06:	f7ff fa05 	bl	8009314 <PrepareRxDoneAbort>
                    break;
 8009f0a:	e7be      	b.n	8009e8a <ProcessRadioRxDone+0x4ba>
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 8009f0c:	1e6a      	subs	r2, r5, #1
 8009f0e:	4c20      	ldr	r4, [pc, #128]	; (8009f90 <ProcessRadioRxDone+0x5c0>)
 8009f10:	f504 770e 	add.w	r7, r4, #568	; 0x238
 8009f14:	b292      	uxth	r2, r2
 8009f16:	1c71      	adds	r1, r6, #1
 8009f18:	4638      	mov	r0, r7
 8009f1a:	f005 fae2 	bl	800f4e2 <memcpy1>
            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 8009f1e:	2303      	movs	r3, #3
 8009f20:	f884 341c 	strb.w	r3, [r4, #1052]	; 0x41c
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8009f24:	2300      	movs	r3, #0
 8009f26:	f884 341d 	strb.w	r3, [r4, #1053]	; 0x41d
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 8009f2a:	f8c4 7424 	str.w	r7, [r4, #1060]	; 0x424
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 8009f2e:	3d01      	subs	r5, #1
 8009f30:	f884 5428 	strb.w	r5, [r4, #1064]	; 0x428
            MacCtx.MacFlags.Bits.McpsInd = 1;
 8009f34:	f894 3481 	ldrb.w	r3, [r4, #1153]	; 0x481
 8009f38:	f043 0302 	orr.w	r3, r3, #2
 8009f3c:	f884 3481 	strb.w	r3, [r4, #1153]	; 0x481
    if( MacCtx.NodeAckRequested == true )
 8009f40:	4b13      	ldr	r3, [pc, #76]	; (8009f90 <ProcessRadioRxDone+0x5c0>)
 8009f42:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8009f46:	b173      	cbz	r3, 8009f66 <ProcessRadioRxDone+0x596>
        if( MacCtx.McpsConfirm.AckReceived == true )
 8009f48:	4b11      	ldr	r3, [pc, #68]	; (8009f90 <ProcessRadioRxDone+0x5c0>)
 8009f4a:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 8009f4e:	b17b      	cbz	r3, 8009f70 <ProcessRadioRxDone+0x5a0>
            OnAckTimeoutTimerEvent( NULL );
 8009f50:	2000      	movs	r0, #0
 8009f52:	f7ff f9b9 	bl	80092c8 <OnAckTimeoutTimerEvent>
 8009f56:	e00b      	b.n	8009f70 <ProcessRadioRxDone+0x5a0>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009f58:	4b0d      	ldr	r3, [pc, #52]	; (8009f90 <ProcessRadioRxDone+0x5c0>)
 8009f5a:	2201      	movs	r2, #1
 8009f5c:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            PrepareRxDoneAbort( );
 8009f60:	f7ff f9d8 	bl	8009314 <PrepareRxDoneAbort>
            break;
 8009f64:	e7ec      	b.n	8009f40 <ProcessRadioRxDone+0x570>
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8009f66:	4b0b      	ldr	r3, [pc, #44]	; (8009f94 <ProcessRadioRxDone+0x5c4>)
 8009f68:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8009f6c:	2b02      	cmp	r3, #2
 8009f6e:	d00b      	beq.n	8009f88 <ProcessRadioRxDone+0x5b8>
    MacCtx.MacFlags.Bits.MacDone = 1;
 8009f70:	4a07      	ldr	r2, [pc, #28]	; (8009f90 <ProcessRadioRxDone+0x5c0>)
 8009f72:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8009f76:	f043 0320 	orr.w	r3, r3, #32
 8009f7a:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    UpdateRxSlotIdleState( );
 8009f7e:	f7fe ff75 	bl	8008e6c <UpdateRxSlotIdleState>
}
 8009f82:	b023      	add	sp, #140	; 0x8c
 8009f84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            OnAckTimeoutTimerEvent( NULL );
 8009f88:	2000      	movs	r0, #0
 8009f8a:	f7ff f99d 	bl	80092c8 <OnAckTimeoutTimerEvent>
 8009f8e:	e7ef      	b.n	8009f70 <ProcessRadioRxDone+0x5a0>
 8009f90:	20000858 	.word	0x20000858
 8009f94:	20000d60 	.word	0x20000d60

08009f98 <ProcessRadioTxTimeout>:
{
 8009f98:	b510      	push	{r4, lr}
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8009f9a:	4b0f      	ldr	r3, [pc, #60]	; (8009fd8 <ProcessRadioTxTimeout+0x40>)
 8009f9c:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8009fa0:	2b02      	cmp	r3, #2
 8009fa2:	d002      	beq.n	8009faa <ProcessRadioTxTimeout+0x12>
        Radio.Sleep( );
 8009fa4:	4b0d      	ldr	r3, [pc, #52]	; (8009fdc <ProcessRadioTxTimeout+0x44>)
 8009fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fa8:	4798      	blx	r3
    UpdateRxSlotIdleState( );
 8009faa:	f7fe ff5f 	bl	8008e6c <UpdateRxSlotIdleState>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 8009fae:	4c0c      	ldr	r4, [pc, #48]	; (8009fe0 <ProcessRadioTxTimeout+0x48>)
 8009fb0:	2002      	movs	r0, #2
 8009fb2:	f884 0439 	strb.w	r0, [r4, #1081]	; 0x439
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 8009fb6:	f002 fb65 	bl	800c684 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 8009fba:	f894 3414 	ldrb.w	r3, [r4, #1044]	; 0x414
 8009fbe:	b113      	cbz	r3, 8009fc6 <ProcessRadioTxTimeout+0x2e>
        MacCtx.AckTimeoutRetry = true;
 8009fc0:	2201      	movs	r2, #1
 8009fc2:	f884 2413 	strb.w	r2, [r4, #1043]	; 0x413
    MacCtx.MacFlags.Bits.MacDone = 1;
 8009fc6:	4a06      	ldr	r2, [pc, #24]	; (8009fe0 <ProcessRadioTxTimeout+0x48>)
 8009fc8:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8009fcc:	f043 0320 	orr.w	r3, r3, #32
 8009fd0:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
}
 8009fd4:	bd10      	pop	{r4, pc}
 8009fd6:	bf00      	nop
 8009fd8:	20000d60 	.word	0x20000d60
 8009fdc:	08017b28 	.word	0x08017b28
 8009fe0:	20000858 	.word	0x20000858

08009fe4 <CheckForClassBCollision>:
{
 8009fe4:	b508      	push	{r3, lr}
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8009fe6:	f002 f8fa 	bl	800c1de <LoRaMacClassBIsBeaconExpected>
 8009fea:	b978      	cbnz	r0, 800a00c <CheckForClassBCollision+0x28>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8009fec:	4b09      	ldr	r3, [pc, #36]	; (800a014 <CheckForClassBCollision+0x30>)
 8009fee:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8009ff2:	2b01      	cmp	r3, #1
 8009ff4:	d001      	beq.n	8009ffa <CheckForClassBCollision+0x16>
    return LORAMAC_STATUS_OK;
 8009ff6:	2000      	movs	r0, #0
}
 8009ff8:	bd08      	pop	{r3, pc}
        if( LoRaMacClassBIsPingExpected( ) == true )
 8009ffa:	f002 f8f2 	bl	800c1e2 <LoRaMacClassBIsPingExpected>
 8009ffe:	b938      	cbnz	r0, 800a010 <CheckForClassBCollision+0x2c>
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800a000:	f002 f8f1 	bl	800c1e6 <LoRaMacClassBIsMulticastExpected>
 800a004:	2800      	cmp	r0, #0
 800a006:	d0f7      	beq.n	8009ff8 <CheckForClassBCollision+0x14>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800a008:	200f      	movs	r0, #15
 800a00a:	e7f5      	b.n	8009ff8 <CheckForClassBCollision+0x14>
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 800a00c:	200e      	movs	r0, #14
 800a00e:	e7f3      	b.n	8009ff8 <CheckForClassBCollision+0x14>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800a010:	200f      	movs	r0, #15
 800a012:	e7f1      	b.n	8009ff8 <CheckForClassBCollision+0x14>
 800a014:	20000d60 	.word	0x20000d60

0800a018 <HandleRadioRxErrorTimeout>:
{
 800a018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a01a:	4605      	mov	r5, r0
 800a01c:	460c      	mov	r4, r1
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800a01e:	4b37      	ldr	r3, [pc, #220]	; (800a0fc <HandleRadioRxErrorTimeout+0xe4>)
 800a020:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800a024:	2b02      	cmp	r3, #2
 800a026:	d002      	beq.n	800a02e <HandleRadioRxErrorTimeout+0x16>
        Radio.Sleep( );
 800a028:	4b35      	ldr	r3, [pc, #212]	; (800a100 <HandleRadioRxErrorTimeout+0xe8>)
 800a02a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a02c:	4798      	blx	r3
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800a02e:	f002 f8d6 	bl	800c1de <LoRaMacClassBIsBeaconExpected>
 800a032:	4606      	mov	r6, r0
 800a034:	bb00      	cbnz	r0, 800a078 <HandleRadioRxErrorTimeout+0x60>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800a036:	4b31      	ldr	r3, [pc, #196]	; (800a0fc <HandleRadioRxErrorTimeout+0xe4>)
 800a038:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800a03c:	2b01      	cmp	r3, #1
 800a03e:	d022      	beq.n	800a086 <HandleRadioRxErrorTimeout+0x6e>
    if( classBRx == false )
 800a040:	b9be      	cbnz	r6, 800a072 <HandleRadioRxErrorTimeout+0x5a>
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800a042:	4b30      	ldr	r3, [pc, #192]	; (800a104 <HandleRadioRxErrorTimeout+0xec>)
 800a044:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d13f      	bne.n	800a0cc <HandleRadioRxErrorTimeout+0xb4>
            if( MacCtx.NodeAckRequested == true )
 800a04c:	4b2d      	ldr	r3, [pc, #180]	; (800a104 <HandleRadioRxErrorTimeout+0xec>)
 800a04e:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800a052:	b113      	cbz	r3, 800a05a <HandleRadioRxErrorTimeout+0x42>
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 800a054:	4b2b      	ldr	r3, [pc, #172]	; (800a104 <HandleRadioRxErrorTimeout+0xec>)
 800a056:	f883 5439 	strb.w	r5, [r3, #1081]	; 0x439
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 800a05a:	4628      	mov	r0, r5
 800a05c:	f002 fb12 	bl	800c684 <LoRaMacConfirmQueueSetStatusCmn>
            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 800a060:	4b26      	ldr	r3, [pc, #152]	; (800a0fc <HandleRadioRxErrorTimeout+0xe4>)
 800a062:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800a064:	f007 fee0 	bl	8011e28 <UTIL_TIMER_GetElapsedTime>
 800a068:	4b26      	ldr	r3, [pc, #152]	; (800a104 <HandleRadioRxErrorTimeout+0xec>)
 800a06a:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 800a06e:	4298      	cmp	r0, r3
 800a070:	d220      	bcs.n	800a0b4 <HandleRadioRxErrorTimeout+0x9c>
    UpdateRxSlotIdleState( );
 800a072:	f7fe fefb 	bl	8008e6c <UpdateRxSlotIdleState>
}
 800a076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 800a078:	2002      	movs	r0, #2
 800a07a:	f002 f8a6 	bl	800c1ca <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 800a07e:	2000      	movs	r0, #0
 800a080:	f002 f8a8 	bl	800c1d4 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 800a084:	e7d7      	b.n	800a036 <HandleRadioRxErrorTimeout+0x1e>
        if( LoRaMacClassBIsPingExpected( ) == true )
 800a086:	f002 f8ac 	bl	800c1e2 <LoRaMacClassBIsPingExpected>
 800a08a:	4607      	mov	r7, r0
 800a08c:	b950      	cbnz	r0, 800a0a4 <HandleRadioRxErrorTimeout+0x8c>
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800a08e:	f002 f8aa 	bl	800c1e6 <LoRaMacClassBIsMulticastExpected>
 800a092:	2800      	cmp	r0, #0
 800a094:	d0d4      	beq.n	800a040 <HandleRadioRxErrorTimeout+0x28>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800a096:	2000      	movs	r0, #0
 800a098:	f002 f899 	bl	800c1ce <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800a09c:	2000      	movs	r0, #0
 800a09e:	f002 f89b 	bl	800c1d8 <LoRaMacClassBMulticastSlotTimerEvent>
    if( classBRx == false )
 800a0a2:	e7e6      	b.n	800a072 <HandleRadioRxErrorTimeout+0x5a>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800a0a4:	2000      	movs	r0, #0
 800a0a6:	f002 f891 	bl	800c1cc <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800a0aa:	2000      	movs	r0, #0
 800a0ac:	f002 f893 	bl	800c1d6 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 800a0b0:	463e      	mov	r6, r7
 800a0b2:	e7ec      	b.n	800a08e <HandleRadioRxErrorTimeout+0x76>
                TimerStop( &MacCtx.RxWindowTimer2 );
 800a0b4:	4c13      	ldr	r4, [pc, #76]	; (800a104 <HandleRadioRxErrorTimeout+0xec>)
 800a0b6:	f504 7066 	add.w	r0, r4, #920	; 0x398
 800a0ba:	f007 feeb 	bl	8011e94 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800a0be:	f894 3481 	ldrb.w	r3, [r4, #1153]	; 0x481
 800a0c2:	f043 0320 	orr.w	r3, r3, #32
 800a0c6:	f884 3481 	strb.w	r3, [r4, #1153]	; 0x481
 800a0ca:	e7d2      	b.n	800a072 <HandleRadioRxErrorTimeout+0x5a>
            if( MacCtx.NodeAckRequested == true )
 800a0cc:	4b0d      	ldr	r3, [pc, #52]	; (800a104 <HandleRadioRxErrorTimeout+0xec>)
 800a0ce:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800a0d2:	b113      	cbz	r3, 800a0da <HandleRadioRxErrorTimeout+0xc2>
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 800a0d4:	4b0b      	ldr	r3, [pc, #44]	; (800a104 <HandleRadioRxErrorTimeout+0xec>)
 800a0d6:	f883 4439 	strb.w	r4, [r3, #1081]	; 0x439
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 800a0da:	4620      	mov	r0, r4
 800a0dc:	f002 fad2 	bl	800c684 <LoRaMacConfirmQueueSetStatusCmn>
            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800a0e0:	4b06      	ldr	r3, [pc, #24]	; (800a0fc <HandleRadioRxErrorTimeout+0xe4>)
 800a0e2:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800a0e6:	2b02      	cmp	r3, #2
 800a0e8:	d0c3      	beq.n	800a072 <HandleRadioRxErrorTimeout+0x5a>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800a0ea:	4a06      	ldr	r2, [pc, #24]	; (800a104 <HandleRadioRxErrorTimeout+0xec>)
 800a0ec:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800a0f0:	f043 0320 	orr.w	r3, r3, #32
 800a0f4:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 800a0f8:	e7bb      	b.n	800a072 <HandleRadioRxErrorTimeout+0x5a>
 800a0fa:	bf00      	nop
 800a0fc:	20000d60 	.word	0x20000d60
 800a100:	08017b28 	.word	0x08017b28
 800a104:	20000858 	.word	0x20000858

0800a108 <ProcessRadioRxError>:
{
 800a108:	b508      	push	{r3, lr}
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 800a10a:	2106      	movs	r1, #6
 800a10c:	2005      	movs	r0, #5
 800a10e:	f7ff ff83 	bl	800a018 <HandleRadioRxErrorTimeout>
}
 800a112:	bd08      	pop	{r3, pc}

0800a114 <ProcessRadioRxTimeout>:
{
 800a114:	b508      	push	{r3, lr}
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800a116:	2104      	movs	r1, #4
 800a118:	2003      	movs	r0, #3
 800a11a:	f7ff ff7d 	bl	800a018 <HandleRadioRxErrorTimeout>
}
 800a11e:	bd08      	pop	{r3, pc}

0800a120 <LoRaMacHandleIrqEvents>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a120:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800a124:	b672      	cpsid	i
    events = LoRaMacRadioEvents;
 800a126:	4a14      	ldr	r2, [pc, #80]	; (800a178 <LoRaMacHandleIrqEvents+0x58>)
 800a128:	6813      	ldr	r3, [r2, #0]
    LoRaMacRadioEvents.Value = 0;
 800a12a:	2000      	movs	r0, #0
 800a12c:	6010      	str	r0, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a12e:	f381 8810 	msr	PRIMASK, r1
    if( events.Value != 0 )
 800a132:	b303      	cbz	r3, 800a176 <LoRaMacHandleIrqEvents+0x56>
{
 800a134:	b510      	push	{r4, lr}
        if( events.Events.TxDone == 1 )
 800a136:	b2dc      	uxtb	r4, r3
 800a138:	f013 0f10 	tst.w	r3, #16
 800a13c:	d10c      	bne.n	800a158 <LoRaMacHandleIrqEvents+0x38>
        if( events.Events.RxDone == 1 )
 800a13e:	f014 0f08 	tst.w	r4, #8
 800a142:	d10c      	bne.n	800a15e <LoRaMacHandleIrqEvents+0x3e>
        if( events.Events.TxTimeout == 1 )
 800a144:	f014 0f04 	tst.w	r4, #4
 800a148:	d10c      	bne.n	800a164 <LoRaMacHandleIrqEvents+0x44>
        if( events.Events.RxError == 1 )
 800a14a:	f014 0f02 	tst.w	r4, #2
 800a14e:	d10c      	bne.n	800a16a <LoRaMacHandleIrqEvents+0x4a>
        if( events.Events.RxTimeout == 1 )
 800a150:	f014 0f01 	tst.w	r4, #1
 800a154:	d10c      	bne.n	800a170 <LoRaMacHandleIrqEvents+0x50>
}
 800a156:	bd10      	pop	{r4, pc}
            ProcessRadioTxDone( );
 800a158:	f7ff f838 	bl	80091cc <ProcessRadioTxDone>
 800a15c:	e7ef      	b.n	800a13e <LoRaMacHandleIrqEvents+0x1e>
            ProcessRadioRxDone( );
 800a15e:	f7ff fc37 	bl	80099d0 <ProcessRadioRxDone>
 800a162:	e7ef      	b.n	800a144 <LoRaMacHandleIrqEvents+0x24>
            ProcessRadioTxTimeout( );
 800a164:	f7ff ff18 	bl	8009f98 <ProcessRadioTxTimeout>
 800a168:	e7ef      	b.n	800a14a <LoRaMacHandleIrqEvents+0x2a>
            ProcessRadioRxError( );
 800a16a:	f7ff ffcd 	bl	800a108 <ProcessRadioRxError>
 800a16e:	e7ef      	b.n	800a150 <LoRaMacHandleIrqEvents+0x30>
            ProcessRadioRxTimeout( );
 800a170:	f7ff ffd0 	bl	800a114 <ProcessRadioRxTimeout>
}
 800a174:	e7ef      	b.n	800a156 <LoRaMacHandleIrqEvents+0x36>
 800a176:	4770      	bx	lr
 800a178:	20000854 	.word	0x20000854

0800a17c <LoRaMacHandleMlmeRequest>:
{
 800a17c:	b508      	push	{r3, lr}
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800a17e:	4b16      	ldr	r3, [pc, #88]	; (800a1d8 <LoRaMacHandleMlmeRequest+0x5c>)
 800a180:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800a184:	f013 0f04 	tst.w	r3, #4
 800a188:	d100      	bne.n	800a18c <LoRaMacHandleMlmeRequest+0x10>
}
 800a18a:	bd08      	pop	{r3, pc}
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800a18c:	2001      	movs	r0, #1
 800a18e:	f002 fa97 	bl	800c6c0 <LoRaMacConfirmQueueIsCmdActive>
 800a192:	b178      	cbz	r0, 800a1b4 <LoRaMacHandleMlmeRequest+0x38>
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 800a194:	2001      	movs	r0, #1
 800a196:	f002 fa5d 	bl	800c654 <LoRaMacConfirmQueueGetStatus>
 800a19a:	b918      	cbnz	r0, 800a1a4 <LoRaMacHandleMlmeRequest+0x28>
                MacCtx.ChannelsNbTransCounter = 0;
 800a19c:	4b0e      	ldr	r3, [pc, #56]	; (800a1d8 <LoRaMacHandleMlmeRequest+0x5c>)
 800a19e:	2200      	movs	r2, #0
 800a1a0:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800a1a4:	4a0c      	ldr	r2, [pc, #48]	; (800a1d8 <LoRaMacHandleMlmeRequest+0x5c>)
 800a1a6:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 800a1aa:	f023 0302 	bic.w	r3, r3, #2
 800a1ae:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
 800a1b2:	e7ea      	b.n	800a18a <LoRaMacHandleMlmeRequest+0xe>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 800a1b4:	2005      	movs	r0, #5
 800a1b6:	f002 fa83 	bl	800c6c0 <LoRaMacConfirmQueueIsCmdActive>
 800a1ba:	b138      	cbz	r0, 800a1cc <LoRaMacHandleMlmeRequest+0x50>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800a1bc:	4a06      	ldr	r2, [pc, #24]	; (800a1d8 <LoRaMacHandleMlmeRequest+0x5c>)
 800a1be:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 800a1c2:	f023 0302 	bic.w	r3, r3, #2
 800a1c6:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
}
 800a1ca:	e7de      	b.n	800a18a <LoRaMacHandleMlmeRequest+0xe>
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 800a1cc:	2006      	movs	r0, #6
 800a1ce:	f002 fa77 	bl	800c6c0 <LoRaMacConfirmQueueIsCmdActive>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 800a1d2:	2800      	cmp	r0, #0
 800a1d4:	d0d9      	beq.n	800a18a <LoRaMacHandleMlmeRequest+0xe>
 800a1d6:	e7f1      	b.n	800a1bc <LoRaMacHandleMlmeRequest+0x40>
 800a1d8:	20000858 	.word	0x20000858

0800a1dc <AckTimeoutRetriesFinalize>:
    if( MacCtx.McpsConfirm.AckReceived == false )
 800a1dc:	4b14      	ldr	r3, [pc, #80]	; (800a230 <AckTimeoutRetriesFinalize+0x54>)
 800a1de:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 800a1e2:	b12b      	cbz	r3, 800a1f0 <AckTimeoutRetriesFinalize+0x14>
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 800a1e4:	4b12      	ldr	r3, [pc, #72]	; (800a230 <AckTimeoutRetriesFinalize+0x54>)
 800a1e6:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 800a1ea:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
 800a1ee:	4770      	bx	lr
{
 800a1f0:	b500      	push	{lr}
 800a1f2:	b085      	sub	sp, #20
        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 800a1f4:	2302      	movs	r3, #2
 800a1f6:	f88d 300c 	strb.w	r3, [sp, #12]
        params.NvmGroup1 = &Nvm.RegionGroup1;
 800a1fa:	4b0e      	ldr	r3, [pc, #56]	; (800a234 <AckTimeoutRetriesFinalize+0x58>)
 800a1fc:	f503 72ec 	add.w	r2, r3, #472	; 0x1d8
 800a200:	9201      	str	r2, [sp, #4]
        params.NvmGroup2 = &Nvm.RegionGroup2;
 800a202:	f503 72fa 	add.w	r2, r3, #500	; 0x1f4
 800a206:	9202      	str	r2, [sp, #8]
        RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800a208:	a901      	add	r1, sp, #4
 800a20a:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800a20e:	f002 ffd1 	bl	800d1b4 <RegionInitDefaults>
        MacCtx.NodeAckRequested = false;
 800a212:	4b07      	ldr	r3, [pc, #28]	; (800a230 <AckTimeoutRetriesFinalize+0x54>)
 800a214:	2200      	movs	r2, #0
 800a216:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
        MacCtx.McpsConfirm.AckReceived = false;
 800a21a:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 800a21e:	4b04      	ldr	r3, [pc, #16]	; (800a230 <AckTimeoutRetriesFinalize+0x54>)
 800a220:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 800a224:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
}
 800a228:	b005      	add	sp, #20
 800a22a:	f85d fb04 	ldr.w	pc, [sp], #4
 800a22e:	bf00      	nop
 800a230:	20000858 	.word	0x20000858
 800a234:	20000d60 	.word	0x20000d60

0800a238 <SerializeTxFrame>:
{
 800a238:	b508      	push	{r3, lr}
    switch( MacCtx.TxMsg.Type )
 800a23a:	4b0f      	ldr	r3, [pc, #60]	; (800a278 <SerializeTxFrame+0x40>)
 800a23c:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800a240:	b11b      	cbz	r3, 800a24a <SerializeTxFrame+0x12>
 800a242:	2b04      	cmp	r3, #4
 800a244:	d00a      	beq.n	800a25c <SerializeTxFrame+0x24>
 800a246:	2003      	movs	r0, #3
}
 800a248:	bd08      	pop	{r3, pc}
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800a24a:	480c      	ldr	r0, [pc, #48]	; (800a27c <SerializeTxFrame+0x44>)
 800a24c:	f002 fee9 	bl	800d022 <LoRaMacSerializerJoinRequest>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800a250:	b968      	cbnz	r0, 800a26e <SerializeTxFrame+0x36>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800a252:	4b09      	ldr	r3, [pc, #36]	; (800a278 <SerializeTxFrame+0x40>)
 800a254:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 800a258:	801a      	strh	r2, [r3, #0]
            break;
 800a25a:	e7f5      	b.n	800a248 <SerializeTxFrame+0x10>
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 800a25c:	4807      	ldr	r0, [pc, #28]	; (800a27c <SerializeTxFrame+0x44>)
 800a25e:	f002 ff16 	bl	800d08e <LoRaMacSerializerData>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800a262:	b930      	cbnz	r0, 800a272 <SerializeTxFrame+0x3a>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800a264:	4b04      	ldr	r3, [pc, #16]	; (800a278 <SerializeTxFrame+0x40>)
 800a266:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 800a26a:	801a      	strh	r2, [r3, #0]
            break;
 800a26c:	e7ec      	b.n	800a248 <SerializeTxFrame+0x10>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800a26e:	2011      	movs	r0, #17
 800a270:	e7ea      	b.n	800a248 <SerializeTxFrame+0x10>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800a272:	2011      	movs	r0, #17
 800a274:	e7e8      	b.n	800a248 <SerializeTxFrame+0x10>
 800a276:	bf00      	nop
 800a278:	20000858 	.word	0x20000858
 800a27c:	20000960 	.word	0x20000960

0800a280 <ComputeRxWindowParameters>:
{
 800a280:	b570      	push	{r4, r5, r6, lr}
 800a282:	b082      	sub	sp, #8
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800a284:	4c1d      	ldr	r4, [pc, #116]	; (800a2fc <ComputeRxWindowParameters+0x7c>)
 800a286:	f894 6040 	ldrb.w	r6, [r4, #64]	; 0x40
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 800a28a:	f994 3061 	ldrsb.w	r3, [r4, #97]	; 0x61
 800a28e:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
 800a292:	f894 1075 	ldrb.w	r1, [r4, #117]	; 0x75
 800a296:	4630      	mov	r0, r6
 800a298:	f003 f829 	bl	800d2ee <RegionApplyDrOffset>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800a29c:	4d18      	ldr	r5, [pc, #96]	; (800a300 <ComputeRxWindowParameters+0x80>)
 800a29e:	f505 736e 	add.w	r3, r5, #952	; 0x3b8
 800a2a2:	9300      	str	r3, [sp, #0]
 800a2a4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800a2a6:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 800a2aa:	b241      	sxtb	r1, r0
 800a2ac:	4630      	mov	r0, r6
 800a2ae:	f002 ffa5 	bl	800d1fc <RegionComputeRxWindowParameters>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800a2b2:	f505 7373 	add.w	r3, r5, #972	; 0x3cc
 800a2b6:	9300      	str	r3, [sp, #0]
 800a2b8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800a2ba:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 800a2be:	f994 1068 	ldrsb.w	r1, [r4, #104]	; 0x68
 800a2c2:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a2c6:	f002 ff99 	bl	800d1fc <RegionComputeRxWindowParameters>
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800a2ca:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800a2cc:	f8d5 13c4 	ldr.w	r1, [r5, #964]	; 0x3c4
 800a2d0:	440b      	add	r3, r1
 800a2d2:	f8c5 33b0 	str.w	r3, [r5, #944]	; 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800a2d6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a2d8:	f8d5 23d8 	ldr.w	r2, [r5, #984]	; 0x3d8
 800a2dc:	4413      	add	r3, r2
 800a2de:	f8c5 33b4 	str.w	r3, [r5, #948]	; 0x3b4
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800a2e2:	f894 3110 	ldrb.w	r3, [r4, #272]	; 0x110
 800a2e6:	b93b      	cbnz	r3, 800a2f8 <ComputeRxWindowParameters+0x78>
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800a2e8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a2ea:	4419      	add	r1, r3
 800a2ec:	f8c5 13b0 	str.w	r1, [r5, #944]	; 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800a2f0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800a2f2:	440a      	add	r2, r1
 800a2f4:	f8c5 23b4 	str.w	r2, [r5, #948]	; 0x3b4
}
 800a2f8:	b002      	add	sp, #8
 800a2fa:	bd70      	pop	{r4, r5, r6, pc}
 800a2fc:	20000d60 	.word	0x20000d60
 800a300:	20000858 	.word	0x20000858

0800a304 <VerifyTxFrame>:
{
 800a304:	b510      	push	{r4, lr}
 800a306:	b082      	sub	sp, #8
    size_t macCmdsSize = 0;
 800a308:	2300      	movs	r3, #0
 800a30a:	9301      	str	r3, [sp, #4]
    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800a30c:	4b0d      	ldr	r3, [pc, #52]	; (800a344 <VerifyTxFrame+0x40>)
 800a30e:	f893 4110 	ldrb.w	r4, [r3, #272]	; 0x110
 800a312:	b914      	cbnz	r4, 800a31a <VerifyTxFrame+0x16>
}
 800a314:	4620      	mov	r0, r4
 800a316:	b002      	add	sp, #8
 800a318:	bd10      	pop	{r4, pc}
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800a31a:	a801      	add	r0, sp, #4
 800a31c:	f002 f880 	bl	800c420 <LoRaMacCommandsGetSizeSerializedCmds>
 800a320:	4604      	mov	r4, r0
 800a322:	b968      	cbnz	r0, 800a340 <VerifyTxFrame+0x3c>
        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 800a324:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800a328:	4b06      	ldr	r3, [pc, #24]	; (800a344 <VerifyTxFrame+0x40>)
 800a32a:	f993 1039 	ldrsb.w	r1, [r3, #57]	; 0x39
 800a32e:	4b06      	ldr	r3, [pc, #24]	; (800a348 <VerifyTxFrame+0x44>)
 800a330:	f893 0237 	ldrb.w	r0, [r3, #567]	; 0x237
 800a334:	f7fe ff38 	bl	80091a8 <ValidatePayloadLength>
 800a338:	2800      	cmp	r0, #0
 800a33a:	d1eb      	bne.n	800a314 <VerifyTxFrame+0x10>
            return LORAMAC_STATUS_LENGTH_ERROR;
 800a33c:	2408      	movs	r4, #8
 800a33e:	e7e9      	b.n	800a314 <VerifyTxFrame+0x10>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800a340:	2413      	movs	r4, #19
 800a342:	e7e7      	b.n	800a314 <VerifyTxFrame+0x10>
 800a344:	20000d60 	.word	0x20000d60
 800a348:	20000858 	.word	0x20000858

0800a34c <SecureFrame>:
{
 800a34c:	b530      	push	{r4, r5, lr}
 800a34e:	b083      	sub	sp, #12
    uint32_t fCntUp = 0;
 800a350:	2300      	movs	r3, #0
 800a352:	9301      	str	r3, [sp, #4]
    switch( MacCtx.TxMsg.Type )
 800a354:	4b1a      	ldr	r3, [pc, #104]	; (800a3c0 <SecureFrame+0x74>)
 800a356:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800a35a:	b133      	cbz	r3, 800a36a <SecureFrame+0x1e>
 800a35c:	4605      	mov	r5, r0
 800a35e:	460c      	mov	r4, r1
 800a360:	2b04      	cmp	r3, #4
 800a362:	d00b      	beq.n	800a37c <SecureFrame+0x30>
 800a364:	2003      	movs	r0, #3
}
 800a366:	b003      	add	sp, #12
 800a368:	bd30      	pop	{r4, r5, pc}
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800a36a:	4816      	ldr	r0, [pc, #88]	; (800a3c4 <SecureFrame+0x78>)
 800a36c:	f002 fc18 	bl	800cba0 <LoRaMacCryptoPrepareJoinRequest>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800a370:	bb00      	cbnz	r0, 800a3b4 <SecureFrame+0x68>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800a372:	4b13      	ldr	r3, [pc, #76]	; (800a3c0 <SecureFrame+0x74>)
 800a374:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 800a378:	801a      	strh	r2, [r3, #0]
            break;
 800a37a:	e7f4      	b.n	800a366 <SecureFrame+0x1a>
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800a37c:	a801      	add	r0, sp, #4
 800a37e:	f002 fbb1 	bl	800cae4 <LoRaMacCryptoGetFCntUp>
 800a382:	b9c8      	cbnz	r0, 800a3b8 <SecureFrame+0x6c>
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 800a384:	4b0e      	ldr	r3, [pc, #56]	; (800a3c0 <SecureFrame+0x74>)
 800a386:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 800a38a:	b923      	cbnz	r3, 800a396 <SecureFrame+0x4a>
 800a38c:	4b0c      	ldr	r3, [pc, #48]	; (800a3c0 <SecureFrame+0x74>)
 800a38e:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 800a392:	2b01      	cmp	r3, #1
 800a394:	d902      	bls.n	800a39c <SecureFrame+0x50>
                fCntUp -= 1;
 800a396:	9b01      	ldr	r3, [sp, #4]
 800a398:	3b01      	subs	r3, #1
 800a39a:	9301      	str	r3, [sp, #4]
            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 800a39c:	4b09      	ldr	r3, [pc, #36]	; (800a3c4 <SecureFrame+0x78>)
 800a39e:	4622      	mov	r2, r4
 800a3a0:	4629      	mov	r1, r5
 800a3a2:	9801      	ldr	r0, [sp, #4]
 800a3a4:	f002 fc28 	bl	800cbf8 <LoRaMacCryptoSecureMessage>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800a3a8:	b940      	cbnz	r0, 800a3bc <SecureFrame+0x70>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800a3aa:	4b05      	ldr	r3, [pc, #20]	; (800a3c0 <SecureFrame+0x74>)
 800a3ac:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 800a3b0:	801a      	strh	r2, [r3, #0]
            break;
 800a3b2:	e7d8      	b.n	800a366 <SecureFrame+0x1a>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800a3b4:	2011      	movs	r0, #17
 800a3b6:	e7d6      	b.n	800a366 <SecureFrame+0x1a>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800a3b8:	2012      	movs	r0, #18
 800a3ba:	e7d4      	b.n	800a366 <SecureFrame+0x1a>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800a3bc:	2011      	movs	r0, #17
 800a3be:	e7d2      	b.n	800a366 <SecureFrame+0x1a>
 800a3c0:	20000858 	.word	0x20000858
 800a3c4:	20000960 	.word	0x20000960

0800a3c8 <SendFrameOnChannel>:
{
 800a3c8:	b570      	push	{r4, r5, r6, lr}
 800a3ca:	b086      	sub	sp, #24
 800a3cc:	4606      	mov	r6, r0
    int8_t txPower = 0;
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	f88d 3007 	strb.w	r3, [sp, #7]
    txConfig.Channel = channel;
 800a3d4:	f88d 0008 	strb.w	r0, [sp, #8]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800a3d8:	4d33      	ldr	r5, [pc, #204]	; (800a4a8 <SendFrameOnChannel+0xe0>)
 800a3da:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
 800a3de:	f88d 3009 	strb.w	r3, [sp, #9]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800a3e2:	f995 3038 	ldrsb.w	r3, [r5, #56]	; 0x38
 800a3e6:	f88d 300a 	strb.w	r3, [sp, #10]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 800a3ea:	6fab      	ldr	r3, [r5, #120]	; 0x78
 800a3ec:	9303      	str	r3, [sp, #12]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800a3ee:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 800a3f0:	9304      	str	r3, [sp, #16]
    txConfig.PktLen = MacCtx.PktBufferLen;
 800a3f2:	4c2e      	ldr	r4, [pc, #184]	; (800a4ac <SendFrameOnChannel+0xe4>)
 800a3f4:	8823      	ldrh	r3, [r4, #0]
 800a3f6:	f8ad 3014 	strh.w	r3, [sp, #20]
    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 800a3fa:	f504 6383 	add.w	r3, r4, #1048	; 0x418
 800a3fe:	f10d 0207 	add.w	r2, sp, #7
 800a402:	a902      	add	r1, sp, #8
 800a404:	f895 0040 	ldrb.w	r0, [r5, #64]	; 0x40
 800a408:	f002 ff0f 	bl	800d22a <RegionTxConfig>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a40c:	2301      	movs	r3, #1
 800a40e:	f884 3439 	strb.w	r3, [r4, #1081]	; 0x439
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800a412:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
 800a416:	f884 343a 	strb.w	r3, [r4, #1082]	; 0x43a
    MacCtx.McpsConfirm.TxPower = txPower;
 800a41a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a41e:	f884 343b 	strb.w	r3, [r4, #1083]	; 0x43b
    MacCtx.McpsConfirm.Channel = channel;
 800a422:	f8c4 6448 	str.w	r6, [r4, #1096]	; 0x448
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800a426:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
 800a42a:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800a42e:	f8c4 3450 	str.w	r3, [r4, #1104]	; 0x450
    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 800a432:	f001 feda 	bl	800c1ea <LoRaMacClassBIsBeaconModeActive>
 800a436:	bb58      	cbnz	r0, 800a490 <SendFrameOnChannel+0xc8>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800a438:	4b1b      	ldr	r3, [pc, #108]	; (800a4a8 <SendFrameOnChannel+0xe0>)
 800a43a:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800a43e:	2b01      	cmp	r3, #1
 800a440:	d02e      	beq.n	800a4a0 <SendFrameOnChannel+0xd8>
    LoRaMacClassBHaltBeaconing( );
 800a442:	f001 fed5 	bl	800c1f0 <LoRaMacClassBHaltBeaconing>
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 800a446:	4b18      	ldr	r3, [pc, #96]	; (800a4a8 <SendFrameOnChannel+0xe0>)
 800a448:	f993 0039 	ldrsb.w	r0, [r3, #57]	; 0x39
 800a44c:	4b17      	ldr	r3, [pc, #92]	; (800a4ac <SendFrameOnChannel+0xe4>)
 800a44e:	f893 1415 	ldrb.w	r1, [r3, #1045]	; 0x415
 800a452:	b2c0      	uxtb	r0, r0
 800a454:	f7ff ff7a 	bl	800a34c <SecureFrame>
    if( status != LORAMAC_STATUS_OK )
 800a458:	4604      	mov	r4, r0
 800a45a:	b9b0      	cbnz	r0, 800a48a <SendFrameOnChannel+0xc2>
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800a45c:	4b13      	ldr	r3, [pc, #76]	; (800a4ac <SendFrameOnChannel+0xe4>)
 800a45e:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 800a462:	f042 0202 	orr.w	r2, r2, #2
 800a466:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    if( MacCtx.NodeAckRequested == false )
 800a46a:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800a46e:	b92b      	cbnz	r3, 800a47c <SendFrameOnChannel+0xb4>
        MacCtx.ChannelsNbTransCounter++;
 800a470:	4a0e      	ldr	r2, [pc, #56]	; (800a4ac <SendFrameOnChannel+0xe4>)
 800a472:	f892 3410 	ldrb.w	r3, [r2, #1040]	; 0x410
 800a476:	3301      	adds	r3, #1
 800a478:	f882 3410 	strb.w	r3, [r2, #1040]	; 0x410
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 800a47c:	4b0c      	ldr	r3, [pc, #48]	; (800a4b0 <SendFrameOnChannel+0xe8>)
 800a47e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a480:	480a      	ldr	r0, [pc, #40]	; (800a4ac <SendFrameOnChannel+0xe4>)
 800a482:	f830 1b02 	ldrh.w	r1, [r0], #2
 800a486:	b2c9      	uxtb	r1, r1
 800a488:	4798      	blx	r3
}
 800a48a:	4620      	mov	r0, r4
 800a48c:	b006      	add	sp, #24
 800a48e:	bd70      	pop	{r4, r5, r6, pc}
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 800a490:	f8d4 0418 	ldr.w	r0, [r4, #1048]	; 0x418
 800a494:	f001 febb 	bl	800c20e <LoRaMacClassBIsUplinkCollision>
        if( collisionTime > 0 )
 800a498:	2800      	cmp	r0, #0
 800a49a:	d0cd      	beq.n	800a438 <SendFrameOnChannel+0x70>
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 800a49c:	2410      	movs	r4, #16
 800a49e:	e7f4      	b.n	800a48a <SendFrameOnChannel+0xc2>
        LoRaMacClassBStopRxSlots( );
 800a4a0:	f001 feb7 	bl	800c212 <LoRaMacClassBStopRxSlots>
 800a4a4:	e7cd      	b.n	800a442 <SendFrameOnChannel+0x7a>
 800a4a6:	bf00      	nop
 800a4a8:	20000d60 	.word	0x20000d60
 800a4ac:	20000858 	.word	0x20000858
 800a4b0:	08017b28 	.word	0x08017b28

0800a4b4 <ScheduleTx>:
{
 800a4b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4b8:	b08c      	sub	sp, #48	; 0x30
 800a4ba:	4605      	mov	r5, r0
    status = CheckForClassBCollision( );
 800a4bc:	f7ff fd92 	bl	8009fe4 <CheckForClassBCollision>
    if( status != LORAMAC_STATUS_OK )
 800a4c0:	4604      	mov	r4, r0
 800a4c2:	b118      	cbz	r0, 800a4cc <ScheduleTx+0x18>
}
 800a4c4:	4620      	mov	r0, r4
 800a4c6:	b00c      	add	sp, #48	; 0x30
 800a4c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    CalculateBackOff( );
 800a4cc:	f7fe fd4e 	bl	8008f6c <CalculateBackOff>
    status = SerializeTxFrame( );
 800a4d0:	f7ff feb2 	bl	800a238 <SerializeTxFrame>
    if( status != LORAMAC_STATUS_OK )
 800a4d4:	4604      	mov	r4, r0
 800a4d6:	2800      	cmp	r0, #0
 800a4d8:	d1f4      	bne.n	800a4c4 <ScheduleTx+0x10>
    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 800a4da:	4e36      	ldr	r6, [pc, #216]	; (800a5b4 <ScheduleTx+0x100>)
 800a4dc:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800a4de:	9304      	str	r3, [sp, #16]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800a4e0:	f996 3039 	ldrsb.w	r3, [r6, #57]	; 0x39
 800a4e4:	f88d 3018 	strb.w	r3, [sp, #24]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 800a4e8:	f896 3100 	ldrb.w	r3, [r6, #256]	; 0x100
 800a4ec:	f88d 301a 	strb.w	r3, [sp, #26]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800a4f0:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800a4f4:	4640      	mov	r0, r8
 800a4f6:	f007 fc01 	bl	8011cfc <SysTimeGetMcuTime>
 800a4fa:	af02      	add	r7, sp, #8
 800a4fc:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 800a500:	9300      	str	r3, [sp, #0]
 800a502:	f8d6 3104 	ldr.w	r3, [r6, #260]	; 0x104
 800a506:	e898 0006 	ldmia.w	r8, {r1, r2}
 800a50a:	4638      	mov	r0, r7
 800a50c:	f007 fb93 	bl	8011c36 <SysTimeSub>
 800a510:	ab07      	add	r3, sp, #28
 800a512:	e897 0003 	ldmia.w	r7, {r0, r1}
 800a516:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 800a51a:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800a51c:	9305      	str	r3, [sp, #20]
    nextChan.LastTxIsJoinRequest = false;
 800a51e:	2300      	movs	r3, #0
 800a520:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    nextChan.Joined = true;
 800a524:	2301      	movs	r3, #1
 800a526:	f88d 3019 	strb.w	r3, [sp, #25]
    nextChan.PktLen = MacCtx.PktBufferLen;
 800a52a:	4b23      	ldr	r3, [pc, #140]	; (800a5b8 <ScheduleTx+0x104>)
 800a52c:	881b      	ldrh	r3, [r3, #0]
 800a52e:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800a532:	f896 3110 	ldrb.w	r3, [r6, #272]	; 0x110
 800a536:	b92b      	cbnz	r3, 800a544 <ScheduleTx+0x90>
        nextChan.LastTxIsJoinRequest = true;
 800a538:	2301      	movs	r3, #1
 800a53a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        nextChan.Joined = false;
 800a53e:	2300      	movs	r3, #0
 800a540:	f88d 3019 	strb.w	r3, [sp, #25]
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 800a544:	4a1c      	ldr	r2, [pc, #112]	; (800a5b8 <ScheduleTx+0x104>)
 800a546:	481b      	ldr	r0, [pc, #108]	; (800a5b4 <ScheduleTx+0x100>)
 800a548:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a54c:	9300      	str	r3, [sp, #0]
 800a54e:	f202 4384 	addw	r3, r2, #1156	; 0x484
 800a552:	f202 4215 	addw	r2, r2, #1045	; 0x415
 800a556:	a904      	add	r1, sp, #16
 800a558:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 800a55c:	f002 feb2 	bl	800d2c4 <RegionNextChannel>
    if( status != LORAMAC_STATUS_OK )
 800a560:	b1b0      	cbz	r0, 800a590 <ScheduleTx+0xdc>
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 800a562:	280b      	cmp	r0, #11
 800a564:	d122      	bne.n	800a5ac <ScheduleTx+0xf8>
 800a566:	b31d      	cbz	r5, 800a5b0 <ScheduleTx+0xfc>
            if( MacCtx.DutyCycleWaitTime != 0 )
 800a568:	4b13      	ldr	r3, [pc, #76]	; (800a5b8 <ScheduleTx+0x104>)
 800a56a:	f8d3 1484 	ldr.w	r1, [r3, #1156]	; 0x484
 800a56e:	2900      	cmp	r1, #0
 800a570:	d0a8      	beq.n	800a4c4 <ScheduleTx+0x10>
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 800a572:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 800a576:	f042 0220 	orr.w	r2, r2, #32
 800a57a:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 800a57e:	f503 755a 	add.w	r5, r3, #872	; 0x368
 800a582:	4628      	mov	r0, r5
 800a584:	f007 fd26 	bl	8011fd4 <UTIL_TIMER_SetPeriod>
                TimerStart( &MacCtx.TxDelayedTimer );
 800a588:	4628      	mov	r0, r5
 800a58a:	f007 fcdd 	bl	8011f48 <UTIL_TIMER_Start>
            return LORAMAC_STATUS_OK;
 800a58e:	e799      	b.n	800a4c4 <ScheduleTx+0x10>
    ComputeRxWindowParameters( );
 800a590:	f7ff fe76 	bl	800a280 <ComputeRxWindowParameters>
    status = VerifyTxFrame( );
 800a594:	f7ff feb6 	bl	800a304 <VerifyTxFrame>
    if( status != LORAMAC_STATUS_OK )
 800a598:	4604      	mov	r4, r0
 800a59a:	2800      	cmp	r0, #0
 800a59c:	d192      	bne.n	800a4c4 <ScheduleTx+0x10>
    return SendFrameOnChannel( MacCtx.Channel );
 800a59e:	4b06      	ldr	r3, [pc, #24]	; (800a5b8 <ScheduleTx+0x104>)
 800a5a0:	f893 0415 	ldrb.w	r0, [r3, #1045]	; 0x415
 800a5a4:	f7ff ff10 	bl	800a3c8 <SendFrameOnChannel>
 800a5a8:	4604      	mov	r4, r0
 800a5aa:	e78b      	b.n	800a4c4 <ScheduleTx+0x10>
            return status;
 800a5ac:	4604      	mov	r4, r0
 800a5ae:	e789      	b.n	800a4c4 <ScheduleTx+0x10>
 800a5b0:	4604      	mov	r4, r0
 800a5b2:	e787      	b.n	800a4c4 <ScheduleTx+0x10>
 800a5b4:	20000d60 	.word	0x20000d60
 800a5b8:	20000858 	.word	0x20000858

0800a5bc <OnTxDelayedTimerEvent>:
{
 800a5bc:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.TxDelayedTimer );
 800a5be:	4c11      	ldr	r4, [pc, #68]	; (800a604 <OnTxDelayedTimerEvent+0x48>)
 800a5c0:	f504 705a 	add.w	r0, r4, #872	; 0x368
 800a5c4:	f007 fc66 	bl	8011e94 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800a5c8:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 800a5cc:	f023 0320 	bic.w	r3, r3, #32
 800a5d0:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
    switch( ScheduleTx( true ) )
 800a5d4:	2001      	movs	r0, #1
 800a5d6:	f7ff ff6d 	bl	800a4b4 <ScheduleTx>
 800a5da:	b108      	cbz	r0, 800a5e0 <OnTxDelayedTimerEvent+0x24>
 800a5dc:	280b      	cmp	r0, #11
 800a5de:	d100      	bne.n	800a5e2 <OnTxDelayedTimerEvent+0x26>
}
 800a5e0:	bd10      	pop	{r4, pc}
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800a5e2:	4b09      	ldr	r3, [pc, #36]	; (800a608 <OnTxDelayedTimerEvent+0x4c>)
 800a5e4:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 800a5e8:	f884 243a 	strb.w	r2, [r4, #1082]	; 0x43a
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 800a5ec:	f894 2412 	ldrb.w	r2, [r4, #1042]	; 0x412
 800a5f0:	f884 243d 	strb.w	r2, [r4, #1085]	; 0x43d
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 800a5f4:	2009      	movs	r0, #9
 800a5f6:	f884 0439 	strb.w	r0, [r4, #1081]	; 0x439
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 800a5fa:	f002 f843 	bl	800c684 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 800a5fe:	f7fe fd47 	bl	8009090 <StopRetransmission>
}
 800a602:	e7ed      	b.n	800a5e0 <OnTxDelayedTimerEvent+0x24>
 800a604:	20000858 	.word	0x20000858
 800a608:	20000d60 	.word	0x20000d60

0800a60c <LoRaMacHandleMcpsRequest>:
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800a60c:	4b23      	ldr	r3, [pc, #140]	; (800a69c <LoRaMacHandleMcpsRequest+0x90>)
 800a60e:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800a612:	f013 0f01 	tst.w	r3, #1
 800a616:	d040      	beq.n	800a69a <LoRaMacHandleMcpsRequest+0x8e>
{
 800a618:	b510      	push	{r4, lr}
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800a61a:	4b20      	ldr	r3, [pc, #128]	; (800a69c <LoRaMacHandleMcpsRequest+0x90>)
 800a61c:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 800a620:	b12b      	cbz	r3, 800a62e <LoRaMacHandleMcpsRequest+0x22>
 800a622:	2b03      	cmp	r3, #3
 800a624:	d003      	beq.n	800a62e <LoRaMacHandleMcpsRequest+0x22>
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800a626:	2b01      	cmp	r3, #1
 800a628:	d007      	beq.n	800a63a <LoRaMacHandleMcpsRequest+0x2e>
        bool waitForRetransmission = false;
 800a62a:	2400      	movs	r4, #0
 800a62c:	e003      	b.n	800a636 <LoRaMacHandleMcpsRequest+0x2a>
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 800a62e:	f7fe fcf3 	bl	8009018 <CheckRetransUnconfirmedUplink>
 800a632:	4604      	mov	r4, r0
        if( stopRetransmission == true )
 800a634:	b9a4      	cbnz	r4, 800a660 <LoRaMacHandleMcpsRequest+0x54>
        else if( waitForRetransmission == false )
 800a636:	b31c      	cbz	r4, 800a680 <LoRaMacHandleMcpsRequest+0x74>
}
 800a638:	bd10      	pop	{r4, pc}
            if( MacCtx.AckTimeoutRetry == true )
 800a63a:	4b18      	ldr	r3, [pc, #96]	; (800a69c <LoRaMacHandleMcpsRequest+0x90>)
 800a63c:	f893 3413 	ldrb.w	r3, [r3, #1043]	; 0x413
 800a640:	b1e3      	cbz	r3, 800a67c <LoRaMacHandleMcpsRequest+0x70>
                stopRetransmission = CheckRetransConfirmedUplink( );
 800a642:	f7fe fd0d 	bl	8009060 <CheckRetransConfirmedUplink>
 800a646:	4604      	mov	r4, r0
                if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800a648:	4b15      	ldr	r3, [pc, #84]	; (800a6a0 <LoRaMacHandleMcpsRequest+0x94>)
 800a64a:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d1f0      	bne.n	800a634 <LoRaMacHandleMcpsRequest+0x28>
                    if( stopRetransmission == false )
 800a652:	b910      	cbnz	r0, 800a65a <LoRaMacHandleMcpsRequest+0x4e>
                        AckTimeoutRetriesProcess( );
 800a654:	f7fe fd5c 	bl	8009110 <AckTimeoutRetriesProcess>
 800a658:	e7ec      	b.n	800a634 <LoRaMacHandleMcpsRequest+0x28>
                        AckTimeoutRetriesFinalize( );
 800a65a:	f7ff fdbf 	bl	800a1dc <AckTimeoutRetriesFinalize>
 800a65e:	e7e9      	b.n	800a634 <LoRaMacHandleMcpsRequest+0x28>
            TimerStop( &MacCtx.TxDelayedTimer );
 800a660:	4c0e      	ldr	r4, [pc, #56]	; (800a69c <LoRaMacHandleMcpsRequest+0x90>)
 800a662:	f504 705a 	add.w	r0, r4, #872	; 0x368
 800a666:	f007 fc15 	bl	8011e94 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800a66a:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 800a66e:	f023 0320 	bic.w	r3, r3, #32
 800a672:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
            StopRetransmission( );
 800a676:	f7fe fd0b 	bl	8009090 <StopRetransmission>
 800a67a:	e7dd      	b.n	800a638 <LoRaMacHandleMcpsRequest+0x2c>
                waitForRetransmission = true;
 800a67c:	2401      	movs	r4, #1
 800a67e:	e7da      	b.n	800a636 <LoRaMacHandleMcpsRequest+0x2a>
            MacCtx.MacFlags.Bits.MacDone = 0;
 800a680:	4b06      	ldr	r3, [pc, #24]	; (800a69c <LoRaMacHandleMcpsRequest+0x90>)
 800a682:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
 800a686:	f36f 1245 	bfc	r2, #5, #1
 800a68a:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
            MacCtx.AckTimeoutRetry = false;
 800a68e:	2000      	movs	r0, #0
 800a690:	f883 0413 	strb.w	r0, [r3, #1043]	; 0x413
            OnTxDelayedTimerEvent( NULL );
 800a694:	f7ff ff92 	bl	800a5bc <OnTxDelayedTimerEvent>
}
 800a698:	e7ce      	b.n	800a638 <LoRaMacHandleMcpsRequest+0x2c>
 800a69a:	4770      	bx	lr
 800a69c:	20000858 	.word	0x20000858
 800a6a0:	20000d60 	.word	0x20000d60

0800a6a4 <LoRaMacHandleRequestEvents>:
{
 800a6a4:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState == LORAMAC_IDLE )
 800a6a6:	4b22      	ldr	r3, [pc, #136]	; (800a730 <LoRaMacHandleRequestEvents+0x8c>)
 800a6a8:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800a6ac:	bb7b      	cbnz	r3, 800a70e <LoRaMacHandleRequestEvents+0x6a>
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800a6ae:	4b20      	ldr	r3, [pc, #128]	; (800a730 <LoRaMacHandleRequestEvents+0x8c>)
 800a6b0:	f893 4481 	ldrb.w	r4, [r3, #1153]	; 0x481
 800a6b4:	f014 0501 	ands.w	r5, r4, #1
 800a6b8:	d005      	beq.n	800a6c6 <LoRaMacHandleRequestEvents+0x22>
            MacCtx.MacFlags.Bits.McpsReq = 0;
 800a6ba:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
 800a6be:	f36f 0200 	bfc	r2, #0, #1
 800a6c2:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800a6c6:	4b1a      	ldr	r3, [pc, #104]	; (800a730 <LoRaMacHandleRequestEvents+0x8c>)
 800a6c8:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800a6cc:	f013 0f04 	tst.w	r3, #4
 800a6d0:	d006      	beq.n	800a6e0 <LoRaMacHandleRequestEvents+0x3c>
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800a6d2:	4b17      	ldr	r3, [pc, #92]	; (800a730 <LoRaMacHandleRequestEvents+0x8c>)
 800a6d4:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
 800a6d8:	f36f 0282 	bfc	r2, #2, #1
 800a6dc:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800a6e0:	2001      	movs	r0, #1
 800a6e2:	f7fe fbd7 	bl	8008e94 <LoRaMacEnableRequests>
        if( reqEvents.Bits.McpsReq == 1 )
 800a6e6:	b135      	cbz	r5, 800a6f6 <LoRaMacHandleRequestEvents+0x52>
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800a6e8:	4811      	ldr	r0, [pc, #68]	; (800a730 <LoRaMacHandleRequestEvents+0x8c>)
 800a6ea:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	f500 6087 	add.w	r0, r0, #1080	; 0x438
 800a6f4:	4798      	blx	r3
        if( reqEvents.Bits.MlmeReq == 1 )
 800a6f6:	f014 0f04 	tst.w	r4, #4
 800a6fa:	d109      	bne.n	800a710 <LoRaMacHandleRequestEvents+0x6c>
        LoRaMacClassBResumeBeaconing( );
 800a6fc:	f001 fd79 	bl	800c1f2 <LoRaMacClassBResumeBeaconing>
        MacCtx.MacFlags.Bits.MacDone = 0;
 800a700:	4b0b      	ldr	r3, [pc, #44]	; (800a730 <LoRaMacHandleRequestEvents+0x8c>)
 800a702:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
 800a706:	f36f 1245 	bfc	r2, #5, #1
 800a70a:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
}
 800a70e:	bd38      	pop	{r3, r4, r5, pc}
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800a710:	4808      	ldr	r0, [pc, #32]	; (800a734 <LoRaMacHandleRequestEvents+0x90>)
 800a712:	f001 ffe1 	bl	800c6d8 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800a716:	f002 f811 	bl	800c73c <LoRaMacConfirmQueueGetCnt>
 800a71a:	2800      	cmp	r0, #0
 800a71c:	d0ee      	beq.n	800a6fc <LoRaMacHandleRequestEvents+0x58>
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800a71e:	4a04      	ldr	r2, [pc, #16]	; (800a730 <LoRaMacHandleRequestEvents+0x8c>)
 800a720:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800a724:	f043 0304 	orr.w	r3, r3, #4
 800a728:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 800a72c:	e7e6      	b.n	800a6fc <LoRaMacHandleRequestEvents+0x58>
 800a72e:	bf00      	nop
 800a730:	20000858 	.word	0x20000858
 800a734:	20000ca4 	.word	0x20000ca4

0800a738 <LoRaMacHandleScheduleUplinkEvent>:
    if( MacCtx.MacState == LORAMAC_IDLE )
 800a738:	4b0a      	ldr	r3, [pc, #40]	; (800a764 <LoRaMacHandleScheduleUplinkEvent+0x2c>)
 800a73a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800a73e:	b103      	cbz	r3, 800a742 <LoRaMacHandleScheduleUplinkEvent+0xa>
 800a740:	4770      	bx	lr
{
 800a742:	b500      	push	{lr}
 800a744:	b083      	sub	sp, #12
        bool isStickyMacCommandPending = false;
 800a746:	f88d 3007 	strb.w	r3, [sp, #7]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 800a74a:	f10d 0007 	add.w	r0, sp, #7
 800a74e:	f001 fea5 	bl	800c49c <LoRaMacCommandsStickyCmdsPending>
        if( isStickyMacCommandPending == true )
 800a752:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a756:	b913      	cbnz	r3, 800a75e <LoRaMacHandleScheduleUplinkEvent+0x26>
}
 800a758:	b003      	add	sp, #12
 800a75a:	f85d fb04 	ldr.w	pc, [sp], #4
            SetMlmeScheduleUplinkIndication( );
 800a75e:	f7fe fbfb 	bl	8008f58 <SetMlmeScheduleUplinkIndication>
}
 800a762:	e7f9      	b.n	800a758 <LoRaMacHandleScheduleUplinkEvent+0x20>
 800a764:	20000858 	.word	0x20000858

0800a768 <LoRaMacHandleNvm>:
{
 800a768:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState != LORAMAC_IDLE )
 800a76a:	4b30      	ldr	r3, [pc, #192]	; (800a82c <LoRaMacHandleNvm+0xc4>)
 800a76c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800a770:	b103      	cbz	r3, 800a774 <LoRaMacHandleNvm+0xc>
}
 800a772:	bd38      	pop	{r3, r4, r5, pc}
 800a774:	4604      	mov	r4, r0
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 800a776:	2124      	movs	r1, #36	; 0x24
 800a778:	f004 fed4 	bl	800f524 <Crc32>
    if( crc != nvmData->Crypto.Crc32 )
 800a77c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a77e:	4283      	cmp	r3, r0
 800a780:	d051      	beq.n	800a826 <LoRaMacHandleNvm+0xbe>
        nvmData->Crypto.Crc32 = crc;
 800a782:	6260      	str	r0, [r4, #36]	; 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 800a784:	2501      	movs	r5, #1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 800a786:	2114      	movs	r1, #20
 800a788:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800a78c:	f004 feca 	bl	800f524 <Crc32>
    if( crc != nvmData->MacGroup1.Crc32 )
 800a790:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a792:	4283      	cmp	r3, r0
 800a794:	d002      	beq.n	800a79c <LoRaMacHandleNvm+0x34>
        nvmData->MacGroup1.Crc32 = crc;
 800a796:	63e0      	str	r0, [r4, #60]	; 0x3c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 800a798:	f045 0502 	orr.w	r5, r5, #2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 800a79c:	21d4      	movs	r1, #212	; 0xd4
 800a79e:	f104 0040 	add.w	r0, r4, #64	; 0x40
 800a7a2:	f004 febf 	bl	800f524 <Crc32>
    if( crc != nvmData->MacGroup2.Crc32 )
 800a7a6:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 800a7aa:	4283      	cmp	r3, r0
 800a7ac:	d003      	beq.n	800a7b6 <LoRaMacHandleNvm+0x4e>
        nvmData->MacGroup2.Crc32 = crc;
 800a7ae:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 800a7b2:	f045 0504 	orr.w	r5, r5, #4
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 800a7b6:	21bc      	movs	r1, #188	; 0xbc
 800a7b8:	f504 708c 	add.w	r0, r4, #280	; 0x118
 800a7bc:	f004 feb2 	bl	800f524 <Crc32>
    if( crc != nvmData->SecureElement.Crc32 )
 800a7c0:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
 800a7c4:	4283      	cmp	r3, r0
 800a7c6:	d003      	beq.n	800a7d0 <LoRaMacHandleNvm+0x68>
        nvmData->SecureElement.Crc32 = crc;
 800a7c8:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 800a7cc:	f045 0508 	orr.w	r5, r5, #8
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 800a7d0:	2118      	movs	r1, #24
 800a7d2:	f504 70ec 	add.w	r0, r4, #472	; 0x1d8
 800a7d6:	f004 fea5 	bl	800f524 <Crc32>
    if( crc != nvmData->RegionGroup1.Crc32 )
 800a7da:	f8d4 31f0 	ldr.w	r3, [r4, #496]	; 0x1f0
 800a7de:	4283      	cmp	r3, r0
 800a7e0:	d003      	beq.n	800a7ea <LoRaMacHandleNvm+0x82>
        nvmData->RegionGroup1.Crc32 = crc;
 800a7e2:	f8c4 01f0 	str.w	r0, [r4, #496]	; 0x1f0
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 800a7e6:	f045 0510 	orr.w	r5, r5, #16
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 800a7ea:	21c4      	movs	r1, #196	; 0xc4
 800a7ec:	f504 70fa 	add.w	r0, r4, #500	; 0x1f4
 800a7f0:	f004 fe98 	bl	800f524 <Crc32>
    if( crc != nvmData->RegionGroup2.Crc32 )
 800a7f4:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800a7f8:	4283      	cmp	r3, r0
 800a7fa:	d003      	beq.n	800a804 <LoRaMacHandleNvm+0x9c>
        nvmData->RegionGroup2.Crc32 = crc;
 800a7fc:	f8c4 02b8 	str.w	r0, [r4, #696]	; 0x2b8
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 800a800:	f045 0520 	orr.w	r5, r5, #32
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 800a804:	2114      	movs	r1, #20
 800a806:	f504 702f 	add.w	r0, r4, #700	; 0x2bc
 800a80a:	f004 fe8b 	bl	800f524 <Crc32>
    if( crc != nvmData->ClassB.Crc32 )
 800a80e:	f8d4 32d0 	ldr.w	r3, [r4, #720]	; 0x2d0
 800a812:	4283      	cmp	r3, r0
 800a814:	d003      	beq.n	800a81e <LoRaMacHandleNvm+0xb6>
        nvmData->ClassB.Crc32 = crc;
 800a816:	f8c4 02d0 	str.w	r0, [r4, #720]	; 0x2d0
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 800a81a:	f045 0540 	orr.w	r5, r5, #64	; 0x40
    CallNvmDataChangeCallback( notifyFlags );
 800a81e:	4628      	mov	r0, r5
 800a820:	f7fe fc5e 	bl	80090e0 <CallNvmDataChangeCallback>
 800a824:	e7a5      	b.n	800a772 <LoRaMacHandleNvm+0xa>
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800a826:	2500      	movs	r5, #0
 800a828:	e7ad      	b.n	800a786 <LoRaMacHandleNvm+0x1e>
 800a82a:	bf00      	nop
 800a82c:	20000858 	.word	0x20000858

0800a830 <RestoreNvmData>:
    if( nvm == NULL )
 800a830:	2800      	cmp	r0, #0
 800a832:	d07a      	beq.n	800a92a <RestoreNvmData+0xfa>
{
 800a834:	b570      	push	{r4, r5, r6, lr}
 800a836:	4604      	mov	r4, r0
    if( MacCtx.MacState != LORAMAC_STOPPED )
 800a838:	4b3d      	ldr	r3, [pc, #244]	; (800a930 <RestoreNvmData+0x100>)
 800a83a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800a83e:	2b01      	cmp	r3, #1
 800a840:	d001      	beq.n	800a846 <RestoreNvmData+0x16>
        return LORAMAC_STATUS_BUSY;
 800a842:	2001      	movs	r0, #1
}
 800a844:	bd70      	pop	{r4, r5, r6, pc}
    crc = Crc32( ( uint8_t* ) &nvm->Crypto, sizeof( nvm->Crypto ) -
 800a846:	2124      	movs	r1, #36	; 0x24
 800a848:	f004 fe6c 	bl	800f524 <Crc32>
    if( crc == nvm->Crypto.Crc32 )
 800a84c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a84e:	4283      	cmp	r3, r0
 800a850:	d032      	beq.n	800a8b8 <RestoreNvmData+0x88>
    crc = Crc32( ( uint8_t* ) &nvm->MacGroup1, sizeof( nvm->MacGroup1 ) -
 800a852:	f104 0528 	add.w	r5, r4, #40	; 0x28
 800a856:	2114      	movs	r1, #20
 800a858:	4628      	mov	r0, r5
 800a85a:	f004 fe63 	bl	800f524 <Crc32>
    if( crc == nvm->MacGroup1.Crc32 )
 800a85e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a860:	4283      	cmp	r3, r0
 800a862:	d02f      	beq.n	800a8c4 <RestoreNvmData+0x94>
    crc = Crc32( ( uint8_t* ) &nvm->MacGroup2, sizeof( nvm->MacGroup2 ) -
 800a864:	f104 0540 	add.w	r5, r4, #64	; 0x40
 800a868:	21d4      	movs	r1, #212	; 0xd4
 800a86a:	4628      	mov	r0, r5
 800a86c:	f004 fe5a 	bl	800f524 <Crc32>
    if( crc == nvm->MacGroup2.Crc32 )
 800a870:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 800a874:	4283      	cmp	r3, r0
 800a876:	d02b      	beq.n	800a8d0 <RestoreNvmData+0xa0>
    crc = Crc32( ( uint8_t* ) &nvm->SecureElement, sizeof( nvm->SecureElement ) -
 800a878:	f504 758c 	add.w	r5, r4, #280	; 0x118
 800a87c:	21bc      	movs	r1, #188	; 0xbc
 800a87e:	4628      	mov	r0, r5
 800a880:	f004 fe50 	bl	800f524 <Crc32>
    if( crc == nvm->SecureElement.Crc32 )
 800a884:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
 800a888:	4283      	cmp	r3, r0
 800a88a:	d03b      	beq.n	800a904 <RestoreNvmData+0xd4>
    crc = Crc32( ( uint8_t* ) &nvm->RegionGroup1, sizeof( nvm->RegionGroup1 ) -
 800a88c:	f504 75ec 	add.w	r5, r4, #472	; 0x1d8
 800a890:	2118      	movs	r1, #24
 800a892:	4628      	mov	r0, r5
 800a894:	f004 fe46 	bl	800f524 <Crc32>
    if( crc == nvm->RegionGroup1.Crc32 )
 800a898:	f8d4 31f0 	ldr.w	r3, [r4, #496]	; 0x1f0
 800a89c:	4283      	cmp	r3, r0
 800a89e:	d037      	beq.n	800a910 <RestoreNvmData+0xe0>
    crc = Crc32( ( uint8_t* ) &nvm->ClassB, sizeof( nvm->ClassB ) -
 800a8a0:	f504 752f 	add.w	r5, r4, #700	; 0x2bc
 800a8a4:	2114      	movs	r1, #20
 800a8a6:	4628      	mov	r0, r5
 800a8a8:	f004 fe3c 	bl	800f524 <Crc32>
    if( crc == nvm->ClassB.Crc32 )
 800a8ac:	f8d4 32d0 	ldr.w	r3, [r4, #720]	; 0x2d0
 800a8b0:	4283      	cmp	r3, r0
 800a8b2:	d033      	beq.n	800a91c <RestoreNvmData+0xec>
    return LORAMAC_STATUS_OK;
 800a8b4:	2000      	movs	r0, #0
 800a8b6:	e7c5      	b.n	800a844 <RestoreNvmData+0x14>
        memcpy1( ( uint8_t* ) &Nvm.Crypto, ( uint8_t* ) &nvm->Crypto,
 800a8b8:	2228      	movs	r2, #40	; 0x28
 800a8ba:	4621      	mov	r1, r4
 800a8bc:	481d      	ldr	r0, [pc, #116]	; (800a934 <RestoreNvmData+0x104>)
 800a8be:	f004 fe10 	bl	800f4e2 <memcpy1>
 800a8c2:	e7c6      	b.n	800a852 <RestoreNvmData+0x22>
        memcpy1( ( uint8_t* ) &Nvm.MacGroup1, ( uint8_t* ) &nvm->MacGroup1,
 800a8c4:	2218      	movs	r2, #24
 800a8c6:	4629      	mov	r1, r5
 800a8c8:	481b      	ldr	r0, [pc, #108]	; (800a938 <RestoreNvmData+0x108>)
 800a8ca:	f004 fe0a 	bl	800f4e2 <memcpy1>
 800a8ce:	e7c9      	b.n	800a864 <RestoreNvmData+0x34>
        memcpy1( ( uint8_t* ) &Nvm.MacGroup2, ( uint8_t* ) &nvm->MacGroup2,
 800a8d0:	4e18      	ldr	r6, [pc, #96]	; (800a934 <RestoreNvmData+0x104>)
 800a8d2:	22d8      	movs	r2, #216	; 0xd8
 800a8d4:	4629      	mov	r1, r5
 800a8d6:	f106 0040 	add.w	r0, r6, #64	; 0x40
 800a8da:	f004 fe02 	bl	800f4e2 <memcpy1>
        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800a8de:	4b14      	ldr	r3, [pc, #80]	; (800a930 <RestoreNvmData+0x100>)
 800a8e0:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 800a8e4:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800a8e8:	6ef2      	ldr	r2, [r6, #108]	; 0x6c
 800a8ea:	f8c3 23e4 	str.w	r2, [r3, #996]	; 0x3e4
        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800a8ee:	f896 2075 	ldrb.w	r2, [r6, #117]	; 0x75
 800a8f2:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
        MacCtx.RxWindowCConfig.RxContinuous = true;
 800a8f6:	2201      	movs	r2, #1
 800a8f8:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800a8fc:	2202      	movs	r2, #2
 800a8fe:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
 800a902:	e7b9      	b.n	800a878 <RestoreNvmData+0x48>
        memcpy1( ( uint8_t* ) &Nvm.SecureElement,( uint8_t* ) &nvm->SecureElement,
 800a904:	22c0      	movs	r2, #192	; 0xc0
 800a906:	4629      	mov	r1, r5
 800a908:	480c      	ldr	r0, [pc, #48]	; (800a93c <RestoreNvmData+0x10c>)
 800a90a:	f004 fdea 	bl	800f4e2 <memcpy1>
 800a90e:	e7bd      	b.n	800a88c <RestoreNvmData+0x5c>
        memcpy1( ( uint8_t* ) &Nvm.RegionGroup1,( uint8_t* ) &nvm->RegionGroup1,
 800a910:	221c      	movs	r2, #28
 800a912:	4629      	mov	r1, r5
 800a914:	480a      	ldr	r0, [pc, #40]	; (800a940 <RestoreNvmData+0x110>)
 800a916:	f004 fde4 	bl	800f4e2 <memcpy1>
 800a91a:	e7c1      	b.n	800a8a0 <RestoreNvmData+0x70>
        memcpy1( ( uint8_t* ) &Nvm.ClassB,( uint8_t* ) &nvm->ClassB,
 800a91c:	2218      	movs	r2, #24
 800a91e:	4629      	mov	r1, r5
 800a920:	4808      	ldr	r0, [pc, #32]	; (800a944 <RestoreNvmData+0x114>)
 800a922:	f004 fdde 	bl	800f4e2 <memcpy1>
    return LORAMAC_STATUS_OK;
 800a926:	2000      	movs	r0, #0
 800a928:	e78c      	b.n	800a844 <RestoreNvmData+0x14>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800a92a:	2003      	movs	r0, #3
}
 800a92c:	4770      	bx	lr
 800a92e:	bf00      	nop
 800a930:	20000858 	.word	0x20000858
 800a934:	20000d60 	.word	0x20000d60
 800a938:	20000d88 	.word	0x20000d88
 800a93c:	20000e78 	.word	0x20000e78
 800a940:	20000f38 	.word	0x20000f38
 800a944:	2000101c 	.word	0x2000101c

0800a948 <OpenContinuousRxCWindow>:
{
 800a948:	b570      	push	{r4, r5, r6, lr}
 800a94a:	b082      	sub	sp, #8
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 800a94c:	4c12      	ldr	r4, [pc, #72]	; (800a998 <OpenContinuousRxCWindow+0x50>)
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800a94e:	4d13      	ldr	r5, [pc, #76]	; (800a99c <OpenContinuousRxCWindow+0x54>)
 800a950:	f505 7678 	add.w	r6, r5, #992	; 0x3e0
 800a954:	9600      	str	r6, [sp, #0]
 800a956:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800a958:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 800a95c:	f994 1070 	ldrsb.w	r1, [r4, #112]	; 0x70
 800a960:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a964:	f002 fc4a 	bl	800d1fc <RegionComputeRxWindowParameters>
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800a968:	2302      	movs	r3, #2
 800a96a:	f885 33f3 	strb.w	r3, [r5, #1011]	; 0x3f3
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800a96e:	2301      	movs	r3, #1
 800a970:	f885 33f2 	strb.w	r3, [r5, #1010]	; 0x3f2
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800a974:	f505 6284 	add.w	r2, r5, #1056	; 0x420
 800a978:	4631      	mov	r1, r6
 800a97a:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a97e:	f002 fc49 	bl	800d214 <RegionRxConfig>
 800a982:	b138      	cbz	r0, 800a994 <OpenContinuousRxCWindow+0x4c>
        Radio.Rx( 0 ); // Continuous mode
 800a984:	4b06      	ldr	r3, [pc, #24]	; (800a9a0 <OpenContinuousRxCWindow+0x58>)
 800a986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a988:	2000      	movs	r0, #0
 800a98a:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 800a98c:	f895 23f3 	ldrb.w	r2, [r5, #1011]	; 0x3f3
 800a990:	f885 2480 	strb.w	r2, [r5, #1152]	; 0x480
}
 800a994:	b002      	add	sp, #8
 800a996:	bd70      	pop	{r4, r5, r6, pc}
 800a998:	20000d60 	.word	0x20000d60
 800a99c:	20000858 	.word	0x20000858
 800a9a0:	08017b28 	.word	0x08017b28

0800a9a4 <RxWindowSetup>:
{
 800a9a4:	b510      	push	{r4, lr}
 800a9a6:	460c      	mov	r4, r1
    TimerStop( rxTimer );
 800a9a8:	f007 fa74 	bl	8011e94 <UTIL_TIMER_Stop>
    Radio.Standby( );
 800a9ac:	4b0a      	ldr	r3, [pc, #40]	; (800a9d8 <RxWindowSetup+0x34>)
 800a9ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9b0:	4798      	blx	r3
    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800a9b2:	4a0a      	ldr	r2, [pc, #40]	; (800a9dc <RxWindowSetup+0x38>)
 800a9b4:	4621      	mov	r1, r4
 800a9b6:	4b0a      	ldr	r3, [pc, #40]	; (800a9e0 <RxWindowSetup+0x3c>)
 800a9b8:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800a9bc:	f002 fc2a 	bl	800d214 <RegionRxConfig>
 800a9c0:	b140      	cbz	r0, 800a9d4 <RxWindowSetup+0x30>
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 800a9c2:	4b05      	ldr	r3, [pc, #20]	; (800a9d8 <RxWindowSetup+0x34>)
 800a9c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9c6:	4a06      	ldr	r2, [pc, #24]	; (800a9e0 <RxWindowSetup+0x3c>)
 800a9c8:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 800a9ca:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 800a9cc:	7ce2      	ldrb	r2, [r4, #19]
 800a9ce:	4b05      	ldr	r3, [pc, #20]	; (800a9e4 <RxWindowSetup+0x40>)
 800a9d0:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
}
 800a9d4:	bd10      	pop	{r4, pc}
 800a9d6:	bf00      	nop
 800a9d8:	08017b28 	.word	0x08017b28
 800a9dc:	20000c78 	.word	0x20000c78
 800a9e0:	20000d60 	.word	0x20000d60
 800a9e4:	20000858 	.word	0x20000858

0800a9e8 <OnRxWindow2TimerEvent>:
{
 800a9e8:	b508      	push	{r3, lr}
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800a9ea:	4b11      	ldr	r3, [pc, #68]	; (800aa30 <OnRxWindow2TimerEvent+0x48>)
 800a9ec:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 800a9f0:	b903      	cbnz	r3, 800a9f4 <OnRxWindow2TimerEvent+0xc>
}
 800a9f2:	bd08      	pop	{r3, pc}
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800a9f4:	480e      	ldr	r0, [pc, #56]	; (800aa30 <OnRxWindow2TimerEvent+0x48>)
 800a9f6:	f890 3415 	ldrb.w	r3, [r0, #1045]	; 0x415
 800a9fa:	f880 33cc 	strb.w	r3, [r0, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800a9fe:	4b0d      	ldr	r3, [pc, #52]	; (800aa34 <OnRxWindow2TimerEvent+0x4c>)
 800aa00:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800aa02:	f8c0 23d0 	str.w	r2, [r0, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800aa06:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800aa0a:	f880 23dc 	strb.w	r2, [r0, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800aa0e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800aa12:	f880 33dd 	strb.w	r3, [r0, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 800aa16:	2300      	movs	r3, #0
 800aa18:	f880 33de 	strb.w	r3, [r0, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800aa1c:	2301      	movs	r3, #1
 800aa1e:	f880 33df 	strb.w	r3, [r0, #991]	; 0x3df
    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 800aa22:	f500 7173 	add.w	r1, r0, #972	; 0x3cc
 800aa26:	f500 7066 	add.w	r0, r0, #920	; 0x398
 800aa2a:	f7ff ffbb 	bl	800a9a4 <RxWindowSetup>
 800aa2e:	e7e0      	b.n	800a9f2 <OnRxWindow2TimerEvent+0xa>
 800aa30:	20000858 	.word	0x20000858
 800aa34:	20000d60 	.word	0x20000d60

0800aa38 <OnRxWindow1TimerEvent>:
{
 800aa38:	b508      	push	{r3, lr}
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 800aa3a:	480f      	ldr	r0, [pc, #60]	; (800aa78 <OnRxWindow1TimerEvent+0x40>)
 800aa3c:	f890 3415 	ldrb.w	r3, [r0, #1045]	; 0x415
 800aa40:	f880 33b8 	strb.w	r3, [r0, #952]	; 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 800aa44:	4b0d      	ldr	r3, [pc, #52]	; (800aa7c <OnRxWindow1TimerEvent+0x44>)
 800aa46:	f993 2061 	ldrsb.w	r2, [r3, #97]	; 0x61
 800aa4a:	f880 23bb 	strb.w	r2, [r0, #955]	; 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800aa4e:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800aa52:	f880 23c8 	strb.w	r2, [r0, #968]	; 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800aa56:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800aa5a:	f880 33c9 	strb.w	r3, [r0, #969]	; 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 800aa5e:	2300      	movs	r3, #0
 800aa60:	f880 33ca 	strb.w	r3, [r0, #970]	; 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 800aa64:	f880 33cb 	strb.w	r3, [r0, #971]	; 0x3cb
    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 800aa68:	f500 716e 	add.w	r1, r0, #952	; 0x3b8
 800aa6c:	f500 7060 	add.w	r0, r0, #896	; 0x380
 800aa70:	f7ff ff98 	bl	800a9a4 <RxWindowSetup>
}
 800aa74:	bd08      	pop	{r3, pc}
 800aa76:	bf00      	nop
 800aa78:	20000858 	.word	0x20000858
 800aa7c:	20000d60 	.word	0x20000d60

0800aa80 <OnRadioRxTimeout>:
{
 800aa80:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800aa82:	4a09      	ldr	r2, [pc, #36]	; (800aaa8 <OnRadioRxTimeout+0x28>)
 800aa84:	7813      	ldrb	r3, [r2, #0]
 800aa86:	f043 0301 	orr.w	r3, r3, #1
 800aa8a:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800aa8c:	4b07      	ldr	r3, [pc, #28]	; (800aaac <OnRadioRxTimeout+0x2c>)
 800aa8e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800aa92:	b113      	cbz	r3, 800aa9a <OnRadioRxTimeout+0x1a>
 800aa94:	691b      	ldr	r3, [r3, #16]
 800aa96:	b103      	cbz	r3, 800aa9a <OnRadioRxTimeout+0x1a>
        MacCtx.MacCallbacks->MacProcessNotify( );
 800aa98:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 800aa9a:	4b05      	ldr	r3, [pc, #20]	; (800aab0 <OnRadioRxTimeout+0x30>)
 800aa9c:	2201      	movs	r2, #1
 800aa9e:	2100      	movs	r1, #0
 800aaa0:	2002      	movs	r0, #2
 800aaa2:	f006 feb3 	bl	801180c <UTIL_ADV_TRACE_COND_FSend>
}
 800aaa6:	bd08      	pop	{r3, pc}
 800aaa8:	20000854 	.word	0x20000854
 800aaac:	20000858 	.word	0x20000858
 800aab0:	08017540 	.word	0x08017540

0800aab4 <OnRadioTxTimeout>:
{
 800aab4:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800aab6:	4a09      	ldr	r2, [pc, #36]	; (800aadc <OnRadioTxTimeout+0x28>)
 800aab8:	7813      	ldrb	r3, [r2, #0]
 800aaba:	f043 0304 	orr.w	r3, r3, #4
 800aabe:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800aac0:	4b07      	ldr	r3, [pc, #28]	; (800aae0 <OnRadioTxTimeout+0x2c>)
 800aac2:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800aac6:	b113      	cbz	r3, 800aace <OnRadioTxTimeout+0x1a>
 800aac8:	691b      	ldr	r3, [r3, #16]
 800aaca:	b103      	cbz	r3, 800aace <OnRadioTxTimeout+0x1a>
        MacCtx.MacCallbacks->MacProcessNotify( );
 800aacc:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 800aace:	4b05      	ldr	r3, [pc, #20]	; (800aae4 <OnRadioTxTimeout+0x30>)
 800aad0:	2201      	movs	r2, #1
 800aad2:	2100      	movs	r1, #0
 800aad4:	2002      	movs	r0, #2
 800aad6:	f006 fe99 	bl	801180c <UTIL_ADV_TRACE_COND_FSend>
}
 800aada:	bd08      	pop	{r3, pc}
 800aadc:	20000854 	.word	0x20000854
 800aae0:	20000858 	.word	0x20000858
 800aae4:	08017550 	.word	0x08017550

0800aae8 <OnRadioRxDone>:
{
 800aae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aaec:	4680      	mov	r8, r0
 800aaee:	460f      	mov	r7, r1
 800aaf0:	4616      	mov	r6, r2
 800aaf2:	461d      	mov	r5, r3
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800aaf4:	f007 f98e 	bl	8011e14 <UTIL_TIMER_GetCurrentTime>
 800aaf8:	4c0d      	ldr	r4, [pc, #52]	; (800ab30 <OnRadioRxDone+0x48>)
 800aafa:	6020      	str	r0, [r4, #0]
    RxDoneParams.Payload = payload;
 800aafc:	f8c4 8004 	str.w	r8, [r4, #4]
    RxDoneParams.Size = size;
 800ab00:	8127      	strh	r7, [r4, #8]
    RxDoneParams.Rssi = rssi;
 800ab02:	8166      	strh	r6, [r4, #10]
    RxDoneParams.Snr = snr;
 800ab04:	7325      	strb	r5, [r4, #12]
    LoRaMacRadioEvents.Events.RxDone = 1;
 800ab06:	4a0b      	ldr	r2, [pc, #44]	; (800ab34 <OnRadioRxDone+0x4c>)
 800ab08:	7813      	ldrb	r3, [r2, #0]
 800ab0a:	f043 0308 	orr.w	r3, r3, #8
 800ab0e:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800ab10:	4b09      	ldr	r3, [pc, #36]	; (800ab38 <OnRadioRxDone+0x50>)
 800ab12:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800ab16:	b113      	cbz	r3, 800ab1e <OnRadioRxDone+0x36>
 800ab18:	691b      	ldr	r3, [r3, #16]
 800ab1a:	b103      	cbz	r3, 800ab1e <OnRadioRxDone+0x36>
        MacCtx.MacCallbacks->MacProcessNotify( );
 800ab1c:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 800ab1e:	4b07      	ldr	r3, [pc, #28]	; (800ab3c <OnRadioRxDone+0x54>)
 800ab20:	2201      	movs	r2, #1
 800ab22:	2100      	movs	r1, #0
 800ab24:	2002      	movs	r0, #2
 800ab26:	f006 fe71 	bl	801180c <UTIL_ADV_TRACE_COND_FSend>
}
 800ab2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab2e:	bf00      	nop
 800ab30:	20001034 	.word	0x20001034
 800ab34:	20000854 	.word	0x20000854
 800ab38:	20000858 	.word	0x20000858
 800ab3c:	08017560 	.word	0x08017560

0800ab40 <OnRadioTxDone>:
{
 800ab40:	b530      	push	{r4, r5, lr}
 800ab42:	b083      	sub	sp, #12
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800ab44:	f007 f966 	bl	8011e14 <UTIL_TIMER_GetCurrentTime>
 800ab48:	4b0f      	ldr	r3, [pc, #60]	; (800ab88 <OnRadioTxDone+0x48>)
 800ab4a:	6018      	str	r0, [r3, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800ab4c:	4d0f      	ldr	r5, [pc, #60]	; (800ab8c <OnRadioTxDone+0x4c>)
 800ab4e:	466c      	mov	r4, sp
 800ab50:	4620      	mov	r0, r4
 800ab52:	f007 f8b1 	bl	8011cb8 <SysTimeGet>
 800ab56:	f505 734e 	add.w	r3, r5, #824	; 0x338
 800ab5a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800ab5e:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacRadioEvents.Events.TxDone = 1;
 800ab62:	4a0b      	ldr	r2, [pc, #44]	; (800ab90 <OnRadioTxDone+0x50>)
 800ab64:	7813      	ldrb	r3, [r2, #0]
 800ab66:	f043 0310 	orr.w	r3, r3, #16
 800ab6a:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800ab6c:	f8d5 3348 	ldr.w	r3, [r5, #840]	; 0x348
 800ab70:	b113      	cbz	r3, 800ab78 <OnRadioTxDone+0x38>
 800ab72:	691b      	ldr	r3, [r3, #16]
 800ab74:	b103      	cbz	r3, 800ab78 <OnRadioTxDone+0x38>
        MacCtx.MacCallbacks->MacProcessNotify( );
 800ab76:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 800ab78:	4b06      	ldr	r3, [pc, #24]	; (800ab94 <OnRadioTxDone+0x54>)
 800ab7a:	2201      	movs	r2, #1
 800ab7c:	2100      	movs	r1, #0
 800ab7e:	2002      	movs	r0, #2
 800ab80:	f006 fe44 	bl	801180c <UTIL_ADV_TRACE_COND_FSend>
}
 800ab84:	b003      	add	sp, #12
 800ab86:	bd30      	pop	{r4, r5, pc}
 800ab88:	20001044 	.word	0x20001044
 800ab8c:	20000858 	.word	0x20000858
 800ab90:	20000854 	.word	0x20000854
 800ab94:	08017570 	.word	0x08017570

0800ab98 <ResetMacParameters>:
{
 800ab98:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab9a:	b08f      	sub	sp, #60	; 0x3c
    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 800ab9c:	4c4d      	ldr	r4, [pc, #308]	; (800acd4 <ResetMacParameters+0x13c>)
 800ab9e:	2600      	movs	r6, #0
 800aba0:	f884 6110 	strb.w	r6, [r4, #272]	; 0x110
    Nvm.MacGroup1.AdrAckCounter = 0;
 800aba4:	62a6      	str	r6, [r4, #40]	; 0x28
    MacCtx.ChannelsNbTransCounter = 0;
 800aba6:	4d4c      	ldr	r5, [pc, #304]	; (800acd8 <ResetMacParameters+0x140>)
 800aba8:	f885 6410 	strb.w	r6, [r5, #1040]	; 0x410
    MacCtx.AckTimeoutRetries = 1;
 800abac:	2701      	movs	r7, #1
 800abae:	f885 7411 	strb.w	r7, [r5, #1041]	; 0x411
    MacCtx.AckTimeoutRetriesCounter = 1;
 800abb2:	f885 7412 	strb.w	r7, [r5, #1042]	; 0x412
    MacCtx.AckTimeoutRetry = false;
 800abb6:	f885 6413 	strb.w	r6, [r5, #1043]	; 0x413
    Nvm.MacGroup2.MaxDCycle = 0;
 800abba:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
    Nvm.MacGroup2.AggregatedDCycle = 1;
 800abbe:	f8a4 7102 	strh.w	r7, [r4, #258]	; 0x102
    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800abc2:	f994 30c4 	ldrsb.w	r3, [r4, #196]	; 0xc4
 800abc6:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800abca:	f994 30c5 	ldrsb.w	r3, [r4, #197]	; 0xc5
 800abce:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 800abd2:	f894 30a1 	ldrb.w	r3, [r4, #161]	; 0xa1
 800abd6:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 800abda:	f104 0364 	add.w	r3, r4, #100	; 0x64
 800abde:	f104 02a4 	add.w	r2, r4, #164	; 0xa4
 800abe2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800abe6:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 800abea:	f104 036c 	add.w	r3, r4, #108	; 0x6c
 800abee:	f104 02ac 	add.w	r2, r4, #172	; 0xac
 800abf2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800abf6:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 800abfa:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
 800abfe:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 800ac02:	f894 30b5 	ldrb.w	r3, [r4, #181]	; 0xb5
 800ac06:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 800ac0a:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
 800ac0e:	67a3      	str	r3, [r4, #120]	; 0x78
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 800ac10:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 800ac14:	67e3      	str	r3, [r4, #124]	; 0x7c
    MacCtx.NodeAckRequested = false;
 800ac16:	f885 6414 	strb.w	r6, [r5, #1044]	; 0x414
    Nvm.MacGroup1.SrvAckRequested = false;
 800ac1a:	f884 603a 	strb.w	r6, [r4, #58]	; 0x3a
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 800ac1e:	f88d 700c 	strb.w	r7, [sp, #12]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 800ac22:	f504 73ec 	add.w	r3, r4, #472	; 0x1d8
 800ac26:	9301      	str	r3, [sp, #4]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 800ac28:	f504 73fa 	add.w	r3, r4, #500	; 0x1f4
 800ac2c:	9302      	str	r3, [sp, #8]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800ac2e:	a901      	add	r1, sp, #4
 800ac30:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800ac34:	f002 fabe 	bl	800d1b4 <RegionInitDefaults>
    MacCtx.Channel = 0;
 800ac38:	f885 6415 	strb.w	r6, [r5, #1045]	; 0x415
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800ac3c:	f885 63cc 	strb.w	r6, [r5, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800ac40:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ac42:	f8c5 33d0 	str.w	r3, [r5, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800ac46:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 800ac4a:	f885 33dc 	strb.w	r3, [r5, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800ac4e:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 800ac52:	f885 33dd 	strb.w	r3, [r5, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 800ac56:	f885 63de 	strb.w	r6, [r5, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800ac5a:	f885 73df 	strb.w	r7, [r5, #991]	; 0x3df
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800ac5e:	f505 7478 	add.w	r4, r5, #992	; 0x3e0
 800ac62:	f505 7c73 	add.w	ip, r5, #972	; 0x3cc
 800ac66:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ac6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ac6c:	f8dc 3000 	ldr.w	r3, [ip]
 800ac70:	6023      	str	r3, [r4, #0]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800ac72:	f885 73f2 	strb.w	r7, [r5, #1010]	; 0x3f2
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800ac76:	2302      	movs	r3, #2
 800ac78:	f885 33f3 	strb.w	r3, [r5, #1011]	; 0x3f3
    classBCallbacks.GetTemperatureLevel = NULL;
 800ac7c:	960c      	str	r6, [sp, #48]	; 0x30
    classBCallbacks.MacProcessNotify = NULL;
 800ac7e:	960d      	str	r6, [sp, #52]	; 0x34
    if( MacCtx.MacCallbacks != NULL )
 800ac80:	f8d5 3348 	ldr.w	r3, [r5, #840]	; 0x348
 800ac84:	b11b      	cbz	r3, 800ac8e <ResetMacParameters+0xf6>
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 800ac86:	685a      	ldr	r2, [r3, #4]
 800ac88:	920c      	str	r2, [sp, #48]	; 0x30
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 800ac8a:	691b      	ldr	r3, [r3, #16]
 800ac8c:	930d      	str	r3, [sp, #52]	; 0x34
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 800ac8e:	4b12      	ldr	r3, [pc, #72]	; (800acd8 <ResetMacParameters+0x140>)
 800ac90:	f503 628c 	add.w	r2, r3, #1120	; 0x460
 800ac94:	9204      	str	r2, [sp, #16]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 800ac96:	f203 421c 	addw	r2, r3, #1052	; 0x41c
 800ac9a:	9205      	str	r2, [sp, #20]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 800ac9c:	f203 424c 	addw	r2, r3, #1100	; 0x44c
 800aca0:	9206      	str	r2, [sp, #24]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 800aca2:	f203 4381 	addw	r3, r3, #1153	; 0x481
 800aca6:	9307      	str	r3, [sp, #28]
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 800aca8:	4a0a      	ldr	r2, [pc, #40]	; (800acd4 <ResetMacParameters+0x13c>)
 800acaa:	f102 03cc 	add.w	r3, r2, #204	; 0xcc
 800acae:	9308      	str	r3, [sp, #32]
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 800acb0:	f102 0340 	add.w	r3, r2, #64	; 0x40
 800acb4:	9309      	str	r3, [sp, #36]	; 0x24
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 800acb6:	f102 0344 	add.w	r3, r2, #68	; 0x44
 800acba:	930a      	str	r3, [sp, #40]	; 0x28
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 800acbc:	f102 03d0 	add.w	r3, r2, #208	; 0xd0
 800acc0:	930b      	str	r3, [sp, #44]	; 0x2c
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 800acc2:	f502 722f 	add.w	r2, r2, #700	; 0x2bc
 800acc6:	a90c      	add	r1, sp, #48	; 0x30
 800acc8:	a804      	add	r0, sp, #16
 800acca:	f001 fa7d 	bl	800c1c8 <LoRaMacClassBInit>
}
 800acce:	b00f      	add	sp, #60	; 0x3c
 800acd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800acd2:	bf00      	nop
 800acd4:	20000d60 	.word	0x20000d60
 800acd8:	20000858 	.word	0x20000858

0800acdc <SwitchClass>:
{
 800acdc:	b570      	push	{r4, r5, r6, lr}
 800acde:	4604      	mov	r4, r0
    switch( Nvm.MacGroup2.DeviceClass )
 800ace0:	4b3e      	ldr	r3, [pc, #248]	; (800addc <SwitchClass+0x100>)
 800ace2:	f893 50fc 	ldrb.w	r5, [r3, #252]	; 0xfc
 800ace6:	2d01      	cmp	r5, #1
 800ace8:	d064      	beq.n	800adb4 <SwitchClass+0xd8>
 800acea:	2d02      	cmp	r5, #2
 800acec:	d06a      	beq.n	800adc4 <SwitchClass+0xe8>
 800acee:	b10d      	cbz	r5, 800acf4 <SwitchClass+0x18>
 800acf0:	2003      	movs	r0, #3
}
 800acf2:	bd70      	pop	{r4, r5, r6, pc}
            if( deviceClass == CLASS_A )
 800acf4:	b930      	cbnz	r0, 800ad04 <SwitchClass+0x28>
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800acf6:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 800acfa:	3364      	adds	r3, #100	; 0x64
 800acfc:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ad00:	e882 0003 	stmia.w	r2, {r0, r1}
            if( deviceClass == CLASS_B )
 800ad04:	2c01      	cmp	r4, #1
 800ad06:	d021      	beq.n	800ad4c <SwitchClass+0x70>
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ad08:	2003      	movs	r0, #3
            if( deviceClass == CLASS_C )
 800ad0a:	2c02      	cmp	r4, #2
 800ad0c:	d1f1      	bne.n	800acf2 <SwitchClass+0x16>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800ad0e:	4b33      	ldr	r3, [pc, #204]	; (800addc <SwitchClass+0x100>)
 800ad10:	f883 40fc 	strb.w	r4, [r3, #252]	; 0xfc
                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800ad14:	4e32      	ldr	r6, [pc, #200]	; (800ade0 <SwitchClass+0x104>)
 800ad16:	f506 7478 	add.w	r4, r6, #992	; 0x3e0
 800ad1a:	f506 7c73 	add.w	ip, r6, #972	; 0x3cc
 800ad1e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ad22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ad24:	f8dc 3000 	ldr.w	r3, [ip]
 800ad28:	6023      	str	r3, [r4, #0]
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800ad2a:	2302      	movs	r3, #2
 800ad2c:	f886 33f3 	strb.w	r3, [r6, #1011]	; 0x3f3
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800ad30:	2300      	movs	r3, #0
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	dd13      	ble.n	800ad5e <SwitchClass+0x82>
                MacCtx.NodeAckRequested = false;
 800ad36:	4b2a      	ldr	r3, [pc, #168]	; (800ade0 <SwitchClass+0x104>)
 800ad38:	2200      	movs	r2, #0
 800ad3a:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
                Radio.Sleep( );
 800ad3e:	4b29      	ldr	r3, [pc, #164]	; (800ade4 <SwitchClass+0x108>)
 800ad40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad42:	4798      	blx	r3
                OpenContinuousRxCWindow( );
 800ad44:	f7ff fe00 	bl	800a948 <OpenContinuousRxCWindow>
                status = LORAMAC_STATUS_OK;
 800ad48:	4628      	mov	r0, r5
 800ad4a:	e7d2      	b.n	800acf2 <SwitchClass+0x16>
                status = LoRaMacClassBSwitchClass( deviceClass );
 800ad4c:	4620      	mov	r0, r4
 800ad4e:	f001 fa51 	bl	800c1f4 <LoRaMacClassBSwitchClass>
                if( status == LORAMAC_STATUS_OK )
 800ad52:	2800      	cmp	r0, #0
 800ad54:	d1d9      	bne.n	800ad0a <SwitchClass+0x2e>
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 800ad56:	4b21      	ldr	r3, [pc, #132]	; (800addc <SwitchClass+0x100>)
 800ad58:	f883 40fc 	strb.w	r4, [r3, #252]	; 0xfc
 800ad5c:	e7d5      	b.n	800ad0a <SwitchClass+0x2e>
                    if( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true )
 800ad5e:	4618      	mov	r0, r3
 800ad60:	4a1e      	ldr	r2, [pc, #120]	; (800addc <SwitchClass+0x100>)
 800ad62:	212c      	movs	r1, #44	; 0x2c
 800ad64:	fb01 2203 	mla	r2, r1, r3, r2
 800ad68:	f892 20d2 	ldrb.w	r2, [r2, #210]	; 0xd2
 800ad6c:	b912      	cbnz	r2, 800ad74 <SwitchClass+0x98>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800ad6e:	3301      	adds	r3, #1
 800ad70:	b25b      	sxtb	r3, r3
 800ad72:	e7de      	b.n	800ad32 <SwitchClass+0x56>
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 800ad74:	4a19      	ldr	r2, [pc, #100]	; (800addc <SwitchClass+0x100>)
 800ad76:	fb01 2000 	mla	r0, r1, r0, r2
 800ad7a:	f8d0 10e8 	ldr.w	r1, [r0, #232]	; 0xe8
 800ad7e:	66d1      	str	r1, [r2, #108]	; 0x6c
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 800ad80:	f890 30ec 	ldrb.w	r3, [r0, #236]	; 0xec
 800ad84:	f882 3070 	strb.w	r3, [r2, #112]	; 0x70
                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800ad88:	4b15      	ldr	r3, [pc, #84]	; (800ade0 <SwitchClass+0x104>)
 800ad8a:	f893 0415 	ldrb.w	r0, [r3, #1045]	; 0x415
 800ad8e:	f883 03e0 	strb.w	r0, [r3, #992]	; 0x3e0
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800ad92:	f8c3 13e4 	str.w	r1, [r3, #996]	; 0x3e4
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800ad96:	f892 1075 	ldrb.w	r1, [r2, #117]	; 0x75
 800ad9a:	f883 13f0 	strb.w	r1, [r3, #1008]	; 0x3f0
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800ad9e:	f892 2080 	ldrb.w	r2, [r2, #128]	; 0x80
 800ada2:	f883 23f1 	strb.w	r2, [r3, #1009]	; 0x3f1
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800ada6:	2203      	movs	r2, #3
 800ada8:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 800adac:	2201      	movs	r2, #1
 800adae:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
                        break;
 800adb2:	e7c0      	b.n	800ad36 <SwitchClass+0x5a>
            status = LoRaMacClassBSwitchClass( deviceClass );
 800adb4:	f001 fa1e 	bl	800c1f4 <LoRaMacClassBSwitchClass>
            if( status == LORAMAC_STATUS_OK )
 800adb8:	2800      	cmp	r0, #0
 800adba:	d19a      	bne.n	800acf2 <SwitchClass+0x16>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800adbc:	4b07      	ldr	r3, [pc, #28]	; (800addc <SwitchClass+0x100>)
 800adbe:	f883 40fc 	strb.w	r4, [r3, #252]	; 0xfc
 800adc2:	e796      	b.n	800acf2 <SwitchClass+0x16>
            if( deviceClass == CLASS_A )
 800adc4:	b938      	cbnz	r0, 800add6 <SwitchClass+0xfa>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800adc6:	4b05      	ldr	r3, [pc, #20]	; (800addc <SwitchClass+0x100>)
 800adc8:	f883 00fc 	strb.w	r0, [r3, #252]	; 0xfc
                Radio.Sleep( );
 800adcc:	4b05      	ldr	r3, [pc, #20]	; (800ade4 <SwitchClass+0x108>)
 800adce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800add0:	4798      	blx	r3
                status = LORAMAC_STATUS_OK;
 800add2:	4620      	mov	r0, r4
 800add4:	e78d      	b.n	800acf2 <SwitchClass+0x16>
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800add6:	2003      	movs	r0, #3
 800add8:	e78b      	b.n	800acf2 <SwitchClass+0x16>
 800adda:	bf00      	nop
 800addc:	20000d60 	.word	0x20000d60
 800ade0:	20000858 	.word	0x20000858
 800ade4:	08017b28 	.word	0x08017b28

0800ade8 <SendReJoinReq>:
{
 800ade8:	b538      	push	{r3, r4, r5, lr}
    switch( joinReqType )
 800adea:	28ff      	cmp	r0, #255	; 0xff
 800adec:	d003      	beq.n	800adf6 <SendReJoinReq+0xe>
    bool allowDelayedTx = true;
 800adee:	2001      	movs	r0, #1
    status = ScheduleTx( allowDelayedTx );
 800adf0:	f7ff fb60 	bl	800a4b4 <ScheduleTx>
}
 800adf4:	bd38      	pop	{r3, r4, r5, pc}
            SwitchClass( CLASS_A );
 800adf6:	2000      	movs	r0, #0
 800adf8:	f7ff ff70 	bl	800acdc <SwitchClass>
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 800adfc:	4d0e      	ldr	r5, [pc, #56]	; (800ae38 <SendReJoinReq+0x50>)
 800adfe:	2400      	movs	r4, #0
 800ae00:	f885 4104 	strb.w	r4, [r5, #260]	; 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 800ae04:	1cab      	adds	r3, r5, #2
 800ae06:	f8c5 3108 	str.w	r3, [r5, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800ae0a:	23ff      	movs	r3, #255	; 0xff
 800ae0c:	f885 310c 	strb.w	r3, [r5, #268]	; 0x10c
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 800ae10:	f885 410d 	strb.w	r4, [r5, #269]	; 0x10d
            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 800ae14:	f004 fb34 	bl	800f480 <SecureElementGetJoinEui>
 800ae18:	4601      	mov	r1, r0
 800ae1a:	2208      	movs	r2, #8
 800ae1c:	f505 7087 	add.w	r0, r5, #270	; 0x10e
 800ae20:	f004 fb5f 	bl	800f4e2 <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 800ae24:	f004 fb16 	bl	800f454 <SecureElementGetDevEui>
 800ae28:	4601      	mov	r1, r0
 800ae2a:	2208      	movs	r2, #8
 800ae2c:	f505 708b 	add.w	r0, r5, #278	; 0x116
 800ae30:	f004 fb57 	bl	800f4e2 <memcpy1>
            allowDelayedTx = false;
 800ae34:	4620      	mov	r0, r4
            break;
 800ae36:	e7db      	b.n	800adf0 <SendReJoinReq+0x8>
 800ae38:	20000858 	.word	0x20000858

0800ae3c <SetTxContinuousWave>:
{
 800ae3c:	b510      	push	{r4, lr}
 800ae3e:	b084      	sub	sp, #16
    continuousWave.Channel = MacCtx.Channel;
 800ae40:	4c10      	ldr	r4, [pc, #64]	; (800ae84 <SetTxContinuousWave+0x48>)
 800ae42:	f894 3415 	ldrb.w	r3, [r4, #1045]	; 0x415
 800ae46:	f88d 3000 	strb.w	r3, [sp]
    continuousWave.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800ae4a:	4b0f      	ldr	r3, [pc, #60]	; (800ae88 <SetTxContinuousWave+0x4c>)
 800ae4c:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 800ae50:	f88d 2001 	strb.w	r2, [sp, #1]
    continuousWave.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800ae54:	f993 2038 	ldrsb.w	r2, [r3, #56]	; 0x38
 800ae58:	f88d 2002 	strb.w	r2, [sp, #2]
    continuousWave.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 800ae5c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800ae5e:	9201      	str	r2, [sp, #4]
    continuousWave.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800ae60:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800ae62:	9202      	str	r2, [sp, #8]
    continuousWave.Timeout = timeout;
 800ae64:	f8ad 000c 	strh.w	r0, [sp, #12]
    RegionSetContinuousWave( Nvm.MacGroup2.Region, &continuousWave );
 800ae68:	4669      	mov	r1, sp
 800ae6a:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800ae6e:	f002 fa36 	bl	800d2de <RegionSetContinuousWave>
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800ae72:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 800ae76:	f043 0302 	orr.w	r3, r3, #2
 800ae7a:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
}
 800ae7e:	2000      	movs	r0, #0
 800ae80:	b004      	add	sp, #16
 800ae82:	bd10      	pop	{r4, pc}
 800ae84:	20000858 	.word	0x20000858
 800ae88:	20000d60 	.word	0x20000d60

0800ae8c <PrepareFrame>:
{
 800ae8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ae90:	b083      	sub	sp, #12
 800ae92:	4605      	mov	r5, r0
 800ae94:	460e      	mov	r6, r1
 800ae96:	4617      	mov	r7, r2
 800ae98:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
    MacCtx.PktBufferLen = 0;
 800ae9c:	4959      	ldr	r1, [pc, #356]	; (800b004 <PrepareFrame+0x178>)
 800ae9e:	2200      	movs	r2, #0
 800aea0:	800a      	strh	r2, [r1, #0]
    MacCtx.NodeAckRequested = false;
 800aea2:	f881 2414 	strb.w	r2, [r1, #1044]	; 0x414
    uint32_t fCntUp = 0;
 800aea6:	9201      	str	r2, [sp, #4]
    size_t macCmdsSize = 0;
 800aea8:	9200      	str	r2, [sp, #0]
    if( fBuffer == NULL )
 800aeaa:	4698      	mov	r8, r3
 800aeac:	b1cb      	cbz	r3, 800aee2 <PrepareFrame+0x56>
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 800aeae:	f8df 9154 	ldr.w	r9, [pc, #340]	; 800b004 <PrepareFrame+0x178>
 800aeb2:	4622      	mov	r2, r4
 800aeb4:	4641      	mov	r1, r8
 800aeb6:	f509 709c 	add.w	r0, r9, #312	; 0x138
 800aeba:	f004 fb12 	bl	800f4e2 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 800aebe:	b2e0      	uxtb	r0, r4
 800aec0:	f889 0237 	strb.w	r0, [r9, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 800aec4:	782b      	ldrb	r3, [r5, #0]
 800aec6:	f889 3002 	strb.w	r3, [r9, #2]
    switch( macHdr->Bits.MType )
 800aeca:	782b      	ldrb	r3, [r5, #0]
 800aecc:	095b      	lsrs	r3, r3, #5
 800aece:	2b04      	cmp	r3, #4
 800aed0:	d009      	beq.n	800aee6 <PrepareFrame+0x5a>
 800aed2:	2b07      	cmp	r3, #7
 800aed4:	d079      	beq.n	800afca <PrepareFrame+0x13e>
 800aed6:	2b02      	cmp	r3, #2
 800aed8:	d009      	beq.n	800aeee <PrepareFrame+0x62>
 800aeda:	2002      	movs	r0, #2
}
 800aedc:	b003      	add	sp, #12
 800aede:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        fBufferSize = 0;
 800aee2:	4614      	mov	r4, r2
 800aee4:	e7e3      	b.n	800aeae <PrepareFrame+0x22>
            MacCtx.NodeAckRequested = true;
 800aee6:	4b47      	ldr	r3, [pc, #284]	; (800b004 <PrepareFrame+0x178>)
 800aee8:	2201      	movs	r2, #1
 800aeea:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 800aeee:	4b45      	ldr	r3, [pc, #276]	; (800b004 <PrepareFrame+0x178>)
 800aef0:	2204      	movs	r2, #4
 800aef2:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 800aef6:	1c9a      	adds	r2, r3, #2
 800aef8:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800aefc:	22ff      	movs	r2, #255	; 0xff
 800aefe:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 800af02:	782a      	ldrb	r2, [r5, #0]
 800af04:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 800af08:	f883 7128 	strb.w	r7, [r3, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 800af0c:	4a3e      	ldr	r2, [pc, #248]	; (800b008 <PrepareFrame+0x17c>)
 800af0e:	f8d2 20cc 	ldr.w	r2, [r2, #204]	; 0xcc
 800af12:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800af16:	7832      	ldrb	r2, [r6, #0]
 800af18:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 800af1c:	f883 0130 	strb.w	r0, [r3, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 800af20:	f503 729c 	add.w	r2, r3, #312	; 0x138
 800af24:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800af28:	a801      	add	r0, sp, #4
 800af2a:	f001 fddb 	bl	800cae4 <LoRaMacCryptoGetFCntUp>
 800af2e:	2800      	cmp	r0, #0
 800af30:	d15c      	bne.n	800afec <PrepareFrame+0x160>
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 800af32:	9a01      	ldr	r2, [sp, #4]
 800af34:	4b33      	ldr	r3, [pc, #204]	; (800b004 <PrepareFrame+0x178>)
 800af36:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116
            MacCtx.McpsConfirm.NbRetries = 0;
 800af3a:	2100      	movs	r1, #0
 800af3c:	f883 143d 	strb.w	r1, [r3, #1085]	; 0x43d
            MacCtx.McpsConfirm.AckReceived = false;
 800af40:	f883 143c 	strb.w	r1, [r3, #1084]	; 0x43c
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 800af44:	f8c3 2444 	str.w	r2, [r3, #1092]	; 0x444
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800af48:	4668      	mov	r0, sp
 800af4a:	f001 fa69 	bl	800c420 <LoRaMacCommandsGetSizeSerializedCmds>
 800af4e:	2800      	cmp	r0, #0
 800af50:	d14e      	bne.n	800aff0 <PrepareFrame+0x164>
            if( macCmdsSize > 0 )
 800af52:	9b00      	ldr	r3, [sp, #0]
 800af54:	2b00      	cmp	r3, #0
 800af56:	d0c1      	beq.n	800aedc <PrepareFrame+0x50>
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 800af58:	4b2b      	ldr	r3, [pc, #172]	; (800b008 <PrepareFrame+0x17c>)
 800af5a:	f993 0039 	ldrsb.w	r0, [r3, #57]	; 0x39
 800af5e:	f7fe f903 	bl	8009168 <GetMaxAppPayloadWithoutFOptsLength>
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800af62:	4b28      	ldr	r3, [pc, #160]	; (800b004 <PrepareFrame+0x178>)
 800af64:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 800af68:	b113      	cbz	r3, 800af70 <PrepareFrame+0xe4>
 800af6a:	9a00      	ldr	r2, [sp, #0]
 800af6c:	2a0f      	cmp	r2, #15
 800af6e:	d915      	bls.n	800af9c <PrepareFrame+0x110>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800af70:	b113      	cbz	r3, 800af78 <PrepareFrame+0xec>
 800af72:	9b00      	ldr	r3, [sp, #0]
 800af74:	2b0f      	cmp	r3, #15
 800af76:	d821      	bhi.n	800afbc <PrepareFrame+0x130>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800af78:	4a24      	ldr	r2, [pc, #144]	; (800b00c <PrepareFrame+0x180>)
 800af7a:	4669      	mov	r1, sp
 800af7c:	f001 fa5c 	bl	800c438 <LoRaMacCommandsSerializeCmds>
 800af80:	2800      	cmp	r0, #0
 800af82:	d13b      	bne.n	800affc <PrepareFrame+0x170>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 800af84:	4b1f      	ldr	r3, [pc, #124]	; (800b004 <PrepareFrame+0x178>)
 800af86:	2200      	movs	r2, #0
 800af88:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 800af8c:	f503 6291 	add.w	r2, r3, #1160	; 0x488
 800af90:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 800af94:	9a00      	ldr	r2, [sp, #0]
 800af96:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
 800af9a:	e79f      	b.n	800aedc <PrepareFrame+0x50>
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 800af9c:	4a1c      	ldr	r2, [pc, #112]	; (800b010 <PrepareFrame+0x184>)
 800af9e:	4669      	mov	r1, sp
 800afa0:	200f      	movs	r0, #15
 800afa2:	f001 fa49 	bl	800c438 <LoRaMacCommandsSerializeCmds>
 800afa6:	bb28      	cbnz	r0, 800aff4 <PrepareFrame+0x168>
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 800afa8:	7833      	ldrb	r3, [r6, #0]
 800afaa:	9a00      	ldr	r2, [sp, #0]
 800afac:	f362 0303 	bfi	r3, r2, #0, #4
 800afb0:	7033      	strb	r3, [r6, #0]
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800afb2:	b2da      	uxtb	r2, r3
 800afb4:	4b13      	ldr	r3, [pc, #76]	; (800b004 <PrepareFrame+0x178>)
 800afb6:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
 800afba:	e78f      	b.n	800aedc <PrepareFrame+0x50>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800afbc:	4a13      	ldr	r2, [pc, #76]	; (800b00c <PrepareFrame+0x180>)
 800afbe:	4669      	mov	r1, sp
 800afc0:	f001 fa3a 	bl	800c438 <LoRaMacCommandsSerializeCmds>
 800afc4:	b1c0      	cbz	r0, 800aff8 <PrepareFrame+0x16c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800afc6:	2013      	movs	r0, #19
 800afc8:	e788      	b.n	800aedc <PrepareFrame+0x50>
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 800afca:	f1b8 0f00 	cmp.w	r8, #0
 800afce:	d017      	beq.n	800b000 <PrepareFrame+0x174>
 800afd0:	2800      	cmp	r0, #0
 800afd2:	d083      	beq.n	800aedc <PrepareFrame+0x50>
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 800afd4:	4c0b      	ldr	r4, [pc, #44]	; (800b004 <PrepareFrame+0x178>)
 800afd6:	b282      	uxth	r2, r0
 800afd8:	4641      	mov	r1, r8
 800afda:	1ce0      	adds	r0, r4, #3
 800afdc:	f004 fa81 	bl	800f4e2 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 800afe0:	f894 3237 	ldrb.w	r3, [r4, #567]	; 0x237
 800afe4:	3301      	adds	r3, #1
 800afe6:	8023      	strh	r3, [r4, #0]
    return LORAMAC_STATUS_OK;
 800afe8:	2000      	movs	r0, #0
 800afea:	e777      	b.n	800aedc <PrepareFrame+0x50>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800afec:	2012      	movs	r0, #18
 800afee:	e775      	b.n	800aedc <PrepareFrame+0x50>
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800aff0:	2013      	movs	r0, #19
 800aff2:	e773      	b.n	800aedc <PrepareFrame+0x50>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800aff4:	2013      	movs	r0, #19
 800aff6:	e771      	b.n	800aedc <PrepareFrame+0x50>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 800aff8:	200a      	movs	r0, #10
 800affa:	e76f      	b.n	800aedc <PrepareFrame+0x50>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800affc:	2013      	movs	r0, #19
 800affe:	e76d      	b.n	800aedc <PrepareFrame+0x50>
    return LORAMAC_STATUS_OK;
 800b000:	2000      	movs	r0, #0
 800b002:	e76b      	b.n	800aedc <PrepareFrame+0x50>
 800b004:	20000858 	.word	0x20000858
 800b008:	20000d60 	.word	0x20000d60
 800b00c:	20000ce0 	.word	0x20000ce0
 800b010:	20000970 	.word	0x20000970

0800b014 <Send>:
{
 800b014:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b018:	b08a      	sub	sp, #40	; 0x28
 800b01a:	4617      	mov	r7, r2
 800b01c:	4698      	mov	r8, r3
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 800b01e:	4c43      	ldr	r4, [pc, #268]	; (800b12c <Send+0x118>)
 800b020:	f994 a039 	ldrsb.w	sl, [r4, #57]	; 0x39
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 800b024:	f994 9038 	ldrsb.w	r9, [r4, #56]	; 0x38
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800b028:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800b02a:	9208      	str	r2, [sp, #32]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800b02c:	f894 3110 	ldrb.w	r3, [r4, #272]	; 0x110
 800b030:	2b00      	cmp	r3, #0
 800b032:	d079      	beq.n	800b128 <Send+0x114>
 800b034:	4605      	mov	r5, r0
 800b036:	460e      	mov	r6, r1
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 800b038:	f894 30ff 	ldrb.w	r3, [r4, #255]	; 0xff
 800b03c:	b90b      	cbnz	r3, 800b042 <Send+0x2e>
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 800b03e:	2100      	movs	r1, #0
 800b040:	6321      	str	r1, [r4, #48]	; 0x30
    fCtrl.Value = 0;
 800b042:	2300      	movs	r3, #0
 800b044:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 800b048:	4838      	ldr	r0, [pc, #224]	; (800b12c <Send+0x118>)
 800b04a:	f890 10fe 	ldrb.w	r1, [r0, #254]	; 0xfe
 800b04e:	f361 13c7 	bfi	r3, r1, #7, #1
 800b052:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800b056:	f890 30fc 	ldrb.w	r3, [r0, #252]	; 0xfc
 800b05a:	2b01      	cmp	r3, #1
 800b05c:	d051      	beq.n	800b102 <Send+0xee>
    if( Nvm.MacGroup1.SrvAckRequested == true )
 800b05e:	4b33      	ldr	r3, [pc, #204]	; (800b12c <Send+0x118>)
 800b060:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800b064:	b12b      	cbz	r3, 800b072 <Send+0x5e>
        fCtrl.Bits.Ack = 1;
 800b066:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800b06a:	f043 0320 	orr.w	r3, r3, #32
 800b06e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    adrNext.Version = Nvm.MacGroup2.Version;
 800b072:	4c2e      	ldr	r4, [pc, #184]	; (800b12c <Send+0x118>)
 800b074:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 800b078:	9303      	str	r3, [sp, #12]
    adrNext.UpdateChanMask = true;
 800b07a:	2301      	movs	r3, #1
 800b07c:	f88d 3010 	strb.w	r3, [sp, #16]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 800b080:	f88d 1011 	strb.w	r1, [sp, #17]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800b084:	9205      	str	r2, [sp, #20]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800b086:	4b2a      	ldr	r3, [pc, #168]	; (800b130 <Send+0x11c>)
 800b088:	f8b3 23f4 	ldrh.w	r2, [r3, #1012]	; 0x3f4
 800b08c:	f8ad 2018 	strh.w	r2, [sp, #24]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 800b090:	f8b3 33f6 	ldrh.w	r3, [r3, #1014]	; 0x3f6
 800b094:	f8ad 301a 	strh.w	r3, [sp, #26]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800b098:	f88d a01c 	strb.w	sl, [sp, #28]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800b09c:	f88d 901d 	strb.w	r9, [sp, #29]
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800b0a0:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 800b0a4:	f88d 301e 	strb.w	r3, [sp, #30]
    adrNext.Region = Nvm.MacGroup2.Region;
 800b0a8:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800b0ac:	f88d 301f 	strb.w	r3, [sp, #31]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 800b0b0:	ab08      	add	r3, sp, #32
 800b0b2:	f104 0238 	add.w	r2, r4, #56	; 0x38
 800b0b6:	f104 0139 	add.w	r1, r4, #57	; 0x39
 800b0ba:	a803      	add	r0, sp, #12
 800b0bc:	f001 f87c 	bl	800c1b8 <LoRaMacAdrCalcNext>
 800b0c0:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800b0c4:	f360 1386 	bfi	r3, r0, #6, #1
 800b0c8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 800b0cc:	f8cd 8000 	str.w	r8, [sp]
 800b0d0:	463b      	mov	r3, r7
 800b0d2:	4632      	mov	r2, r6
 800b0d4:	a909      	add	r1, sp, #36	; 0x24
 800b0d6:	4628      	mov	r0, r5
 800b0d8:	f7ff fed8 	bl	800ae8c <PrepareFrame>
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 800b0dc:	4604      	mov	r4, r0
 800b0de:	b108      	cbz	r0, 800b0e4 <Send+0xd0>
 800b0e0:	280a      	cmp	r0, #10
 800b0e2:	d104      	bne.n	800b0ee <Send+0xda>
        status = ScheduleTx( allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 800b0e4:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 800b0e8:	f7ff f9e4 	bl	800a4b4 <ScheduleTx>
 800b0ec:	4604      	mov	r4, r0
    if( status != LORAMAC_STATUS_OK )
 800b0ee:	b17c      	cbz	r4, 800b110 <Send+0xfc>
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 800b0f0:	4b0e      	ldr	r3, [pc, #56]	; (800b12c <Send+0x118>)
 800b0f2:	f883 a039 	strb.w	sl, [r3, #57]	; 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 800b0f6:	f883 9038 	strb.w	r9, [r3, #56]	; 0x38
}
 800b0fa:	4620      	mov	r0, r4
 800b0fc:	b00a      	add	sp, #40	; 0x28
 800b0fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        fCtrl.Bits.FPending      = 1;
 800b102:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800b106:	f043 0310 	orr.w	r3, r3, #16
 800b10a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800b10e:	e7a6      	b.n	800b05e <Send+0x4a>
        Nvm.MacGroup1.SrvAckRequested = false;
 800b110:	4b06      	ldr	r3, [pc, #24]	; (800b12c <Send+0x118>)
 800b112:	2200      	movs	r2, #0
 800b114:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 800b118:	9a08      	ldr	r2, [sp, #32]
 800b11a:	629a      	str	r2, [r3, #40]	; 0x28
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 800b11c:	f001 f954 	bl	800c3c8 <LoRaMacCommandsRemoveNoneStickyCmds>
 800b120:	2800      	cmp	r0, #0
 800b122:	d0ea      	beq.n	800b0fa <Send+0xe6>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800b124:	2413      	movs	r4, #19
 800b126:	e7e8      	b.n	800b0fa <Send+0xe6>
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 800b128:	2407      	movs	r4, #7
 800b12a:	e7e6      	b.n	800b0fa <Send+0xe6>
 800b12c:	20000d60 	.word	0x20000d60
 800b130:	20000858 	.word	0x20000858

0800b134 <LoRaMacIsBusy>:
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800b134:	4b07      	ldr	r3, [pc, #28]	; (800b154 <LoRaMacIsBusy+0x20>)
 800b136:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800b13a:	b933      	cbnz	r3, 800b14a <LoRaMacIsBusy+0x16>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 800b13c:	4b05      	ldr	r3, [pc, #20]	; (800b154 <LoRaMacIsBusy+0x20>)
 800b13e:	f893 3482 	ldrb.w	r3, [r3, #1154]	; 0x482
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800b142:	2b01      	cmp	r3, #1
 800b144:	d003      	beq.n	800b14e <LoRaMacIsBusy+0x1a>
    return true;
 800b146:	2001      	movs	r0, #1
 800b148:	4770      	bx	lr
 800b14a:	2001      	movs	r0, #1
 800b14c:	4770      	bx	lr
        return false;
 800b14e:	2000      	movs	r0, #0
}
 800b150:	4770      	bx	lr
 800b152:	bf00      	nop
 800b154:	20000858 	.word	0x20000858

0800b158 <LoRaMacProcess>:
{
 800b158:	b508      	push	{r3, lr}
    LoRaMacHandleIrqEvents( );
 800b15a:	f7fe ffe1 	bl	800a120 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 800b15e:	f001 f859 	bl	800c214 <LoRaMacClassBProcess>
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800b162:	4b15      	ldr	r3, [pc, #84]	; (800b1b8 <LoRaMacProcess+0x60>)
 800b164:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800b168:	f013 0f20 	tst.w	r3, #32
 800b16c:	d107      	bne.n	800b17e <LoRaMacProcess+0x26>
    LoRaMacHandleIndicationEvents( );
 800b16e:	f7fd fe97 	bl	8008ea0 <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 800b172:	4b11      	ldr	r3, [pc, #68]	; (800b1b8 <LoRaMacProcess+0x60>)
 800b174:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 800b178:	2b02      	cmp	r3, #2
 800b17a:	d01a      	beq.n	800b1b2 <LoRaMacProcess+0x5a>
}
 800b17c:	bd08      	pop	{r3, pc}
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 800b17e:	2000      	movs	r0, #0
 800b180:	f7fd fe88 	bl	8008e94 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 800b184:	f7fd fed6 	bl	8008f34 <LoRaMacCheckForRxAbort>
        if( IsRequestPending( ) > 0 )
 800b188:	f7fd ffb6 	bl	80090f8 <IsRequestPending>
 800b18c:	b110      	cbz	r0, 800b194 <LoRaMacProcess+0x3c>
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 800b18e:	f7fe f8e1 	bl	8009354 <LoRaMacCheckForBeaconAcquisition>
        if( noTx == 0x00 )
 800b192:	b918      	cbnz	r0, 800b19c <LoRaMacProcess+0x44>
            LoRaMacHandleMlmeRequest( );
 800b194:	f7fe fff2 	bl	800a17c <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 800b198:	f7ff fa38 	bl	800a60c <LoRaMacHandleMcpsRequest>
        LoRaMacHandleRequestEvents( );
 800b19c:	f7ff fa82 	bl	800a6a4 <LoRaMacHandleRequestEvents>
        LoRaMacHandleScheduleUplinkEvent( );
 800b1a0:	f7ff faca 	bl	800a738 <LoRaMacHandleScheduleUplinkEvent>
        LoRaMacHandleNvm( &Nvm );
 800b1a4:	4805      	ldr	r0, [pc, #20]	; (800b1bc <LoRaMacProcess+0x64>)
 800b1a6:	f7ff fadf 	bl	800a768 <LoRaMacHandleNvm>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800b1aa:	2001      	movs	r0, #1
 800b1ac:	f7fd fe72 	bl	8008e94 <LoRaMacEnableRequests>
 800b1b0:	e7dd      	b.n	800b16e <LoRaMacProcess+0x16>
        OpenContinuousRxCWindow( );
 800b1b2:	f7ff fbc9 	bl	800a948 <OpenContinuousRxCWindow>
}
 800b1b6:	e7e1      	b.n	800b17c <LoRaMacProcess+0x24>
 800b1b8:	20000858 	.word	0x20000858
 800b1bc:	20000d60 	.word	0x20000d60

0800b1c0 <LoRaMacInitialization>:


LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 800b1c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1c4:	b08b      	sub	sp, #44	; 0x2c
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 800b1c6:	2800      	cmp	r0, #0
 800b1c8:	f000 81a0 	beq.w	800b50c <LoRaMacInitialization+0x34c>
 800b1cc:	460e      	mov	r6, r1
 800b1ce:	4691      	mov	r9, r2
 800b1d0:	4680      	mov	r8, r0
 800b1d2:	2900      	cmp	r1, #0
 800b1d4:	f000 819c 	beq.w	800b510 <LoRaMacInitialization+0x350>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 800b1d8:	6803      	ldr	r3, [r0, #0]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	f000 819a 	beq.w	800b514 <LoRaMacInitialization+0x354>
        ( primitives->MacMcpsIndication == NULL ) ||
 800b1e0:	6843      	ldr	r3, [r0, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	f000 8198 	beq.w	800b518 <LoRaMacInitialization+0x358>
        ( primitives->MacMlmeConfirm == NULL ) ||
 800b1e8:	6883      	ldr	r3, [r0, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	f000 8196 	beq.w	800b51c <LoRaMacInitialization+0x35c>
        ( primitives->MacMlmeIndication == NULL ) )
 800b1f0:	68c3      	ldr	r3, [r0, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	f000 8194 	beq.w	800b520 <LoRaMacInitialization+0x360>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 800b1f8:	4610      	mov	r0, r2
 800b1fa:	f001 ffbc 	bl	800d176 <RegionIsActive>
 800b1fe:	2800      	cmp	r0, #0
 800b200:	f000 8190 	beq.w	800b524 <LoRaMacInitialization+0x364>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 800b204:	4640      	mov	r0, r8
 800b206:	f001 f9c1 	bl	800c58c <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 800b20a:	4ccc      	ldr	r4, [pc, #816]	; (800b53c <LoRaMacInitialization+0x37c>)
 800b20c:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800b210:	2100      	movs	r1, #0
 800b212:	4620      	mov	r0, r4
 800b214:	f004 f97d 	bl	800f512 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 800b218:	4dc9      	ldr	r5, [pc, #804]	; (800b540 <LoRaMacInitialization+0x380>)
 800b21a:	f44f 62a1 	mov.w	r2, #1288	; 0x508
 800b21e:	2100      	movs	r1, #0
 800b220:	4628      	mov	r0, r5
 800b222:	f004 f976 	bl	800f512 <memset1>

    // Set non zero variables to its default value
    MacCtx.AckTimeoutRetriesCounter = 1;
 800b226:	f04f 0a01 	mov.w	sl, #1
 800b22a:	f885 a412 	strb.w	sl, [r5, #1042]	; 0x412
    MacCtx.AckTimeoutRetries = 1;
 800b22e:	f885 a411 	strb.w	sl, [r5, #1041]	; 0x411
    Nvm.MacGroup2.Region = region;
 800b232:	f884 9040 	strb.w	r9, [r4, #64]	; 0x40
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 800b236:	2700      	movs	r7, #0
 800b238:	f884 70fc 	strb.w	r7, [r4, #252]	; 0xfc
    Nvm.MacGroup2.MacParams.RepeaterSupport = false; /* ST_WORKAROUND: Keep repeater feature */
 800b23c:	f884 7080 	strb.w	r7, [r4, #128]	; 0x80

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 800b240:	4bc0      	ldr	r3, [pc, #768]	; (800b544 <LoRaMacInitialization+0x384>)
 800b242:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800b246:	230f      	movs	r3, #15
 800b248:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b24c:	a908      	add	r1, sp, #32
 800b24e:	4648      	mov	r0, r9
 800b250:	f001 ff97 	bl	800d182 <RegionGetPhyParam>
 800b254:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 800b256:	1bc0      	subs	r0, r0, r7
 800b258:	bf18      	it	ne
 800b25a:	2001      	movne	r0, #1
 800b25c:	f884 0100 	strb.w	r0, [r4, #256]	; 0x100

    getPhy.Attribute = PHY_DEF_TX_POWER;
 800b260:	f04f 0b0a 	mov.w	fp, #10
 800b264:	f88d b020 	strb.w	fp, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b268:	a908      	add	r1, sp, #32
 800b26a:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800b26e:	f001 ff88 	bl	800d182 <RegionGetPhyParam>
 800b272:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 800b274:	f884 00c4 	strb.w	r0, [r4, #196]	; 0xc4

    getPhy.Attribute = PHY_DEF_TX_DR;
 800b278:	f04f 0906 	mov.w	r9, #6
 800b27c:	f88d 9020 	strb.w	r9, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b280:	a908      	add	r1, sp, #32
 800b282:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800b286:	f001 ff7c 	bl	800d182 <RegionGetPhyParam>
 800b28a:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 800b28c:	f884 00c5 	strb.w	r0, [r4, #197]	; 0xc5

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 800b290:	2310      	movs	r3, #16
 800b292:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b296:	a908      	add	r1, sp, #32
 800b298:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800b29c:	f001 ff71 	bl	800d182 <RegionGetPhyParam>
 800b2a0:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 800b2a2:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 800b2a6:	2311      	movs	r3, #17
 800b2a8:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b2ac:	a908      	add	r1, sp, #32
 800b2ae:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800b2b2:	f001 ff66 	bl	800d182 <RegionGetPhyParam>
 800b2b6:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 800b2b8:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 800b2bc:	2312      	movs	r3, #18
 800b2be:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b2c2:	a908      	add	r1, sp, #32
 800b2c4:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800b2c8:	f001 ff5b 	bl	800d182 <RegionGetPhyParam>
 800b2cc:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 800b2ce:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 800b2d2:	2313      	movs	r3, #19
 800b2d4:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b2d8:	a908      	add	r1, sp, #32
 800b2da:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800b2de:	f001 ff50 	bl	800d182 <RegionGetPhyParam>
 800b2e2:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 800b2e4:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 800b2e8:	2314      	movs	r3, #20
 800b2ea:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b2ee:	a908      	add	r1, sp, #32
 800b2f0:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800b2f4:	f001 ff45 	bl	800d182 <RegionGetPhyParam>
 800b2f8:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 800b2fa:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 800b2fe:	2317      	movs	r3, #23
 800b300:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b304:	a908      	add	r1, sp, #32
 800b306:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800b30a:	f001 ff3a 	bl	800d182 <RegionGetPhyParam>
 800b30e:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 800b310:	f884 00a1 	strb.w	r0, [r4, #161]	; 0xa1

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 800b314:	2318      	movs	r3, #24
 800b316:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b31a:	a908      	add	r1, sp, #32
 800b31c:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800b320:	f001 ff2f 	bl	800d182 <RegionGetPhyParam>
 800b324:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 800b326:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 800b32a:	f8c4 00ac 	str.w	r0, [r4, #172]	; 0xac

    getPhy.Attribute = PHY_DEF_RX2_DR;
 800b32e:	2319      	movs	r3, #25
 800b330:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b334:	a908      	add	r1, sp, #32
 800b336:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800b33a:	f001 ff22 	bl	800d182 <RegionGetPhyParam>
 800b33e:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 800b340:	b2c0      	uxtb	r0, r0
 800b342:	f884 00a8 	strb.w	r0, [r4, #168]	; 0xa8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 800b346:	f884 00b0 	strb.w	r0, [r4, #176]	; 0xb0

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 800b34a:	231e      	movs	r3, #30
 800b34c:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b350:	a908      	add	r1, sp, #32
 800b352:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800b356:	f001 ff14 	bl	800d182 <RegionGetPhyParam>
 800b35a:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 800b35c:	f884 00b4 	strb.w	r0, [r4, #180]	; 0xb4

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 800b360:	231f      	movs	r3, #31
 800b362:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b366:	a908      	add	r1, sp, #32
 800b368:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800b36c:	f001 ff09 	bl	800d182 <RegionGetPhyParam>
 800b370:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 800b372:	f884 00b5 	strb.w	r0, [r4, #181]	; 0xb5

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 800b376:	2320      	movs	r3, #32
 800b378:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b37c:	eb0d 0103 	add.w	r1, sp, r3
 800b380:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800b384:	f001 fefd 	bl	800d182 <RegionGetPhyParam>
 800b388:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 800b38a:	9b07      	ldr	r3, [sp, #28]
 800b38c:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 800b390:	2321      	movs	r3, #33	; 0x21
 800b392:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b396:	a908      	add	r1, sp, #32
 800b398:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800b39c:	f001 fef1 	bl	800d182 <RegionGetPhyParam>
 800b3a0:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 800b3a2:	9b07      	ldr	r3, [sp, #28]
 800b3a4:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 800b3a8:	230b      	movs	r3, #11
 800b3aa:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b3ae:	a908      	add	r1, sp, #32
 800b3b0:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800b3b4:	f001 fee5 	bl	800d182 <RegionGetPhyParam>
 800b3b8:	9007      	str	r0, [sp, #28]
    MacCtx.AdrAckLimit = phyParam.Value;
 800b3ba:	f8a5 03f4 	strh.w	r0, [r5, #1012]	; 0x3f4

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 800b3be:	230c      	movs	r3, #12
 800b3c0:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b3c4:	a908      	add	r1, sp, #32
 800b3c6:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800b3ca:	f001 feda 	bl	800d182 <RegionGetPhyParam>
 800b3ce:	9007      	str	r0, [sp, #28]
    MacCtx.AdrAckDelay = phyParam.Value;
 800b3d0:	f8a5 03f6 	strh.w	r0, [r5, #1014]	; 0x3f6

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 800b3d4:	f884 a0a0 	strb.w	sl, [r4, #160]	; 0xa0
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 800b3d8:	f8c4 b084 	str.w	fp, [r4, #132]	; 0x84
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 800b3dc:	f884 9088 	strb.w	r9, [r4, #136]	; 0x88

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 800b3e0:	f8c4 b044 	str.w	fp, [r4, #68]	; 0x44
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 800b3e4:	f884 9048 	strb.w	r9, [r4, #72]	; 0x48
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 800b3e8:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800b3ec:	64e3      	str	r3, [r4, #76]	; 0x4c
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 800b3ee:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800b3f2:	6523      	str	r3, [r4, #80]	; 0x50
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 800b3f4:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800b3f8:	6563      	str	r3, [r4, #84]	; 0x54
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 800b3fa:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800b3fe:	65a3      	str	r3, [r4, #88]	; 0x58
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 800b400:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 800b404:	65e3      	str	r3, [r4, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 800b406:	f884 a060 	strb.w	sl, [r4, #96]	; 0x60

    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 800b40a:	f88d 7018 	strb.w	r7, [sp, #24]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 800b40e:	f504 73ec 	add.w	r3, r4, #472	; 0x1d8
 800b412:	9304      	str	r3, [sp, #16]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 800b414:	f504 73fa 	add.w	r3, r4, #500	; 0x1f4
 800b418:	9305      	str	r3, [sp, #20]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800b41a:	a904      	add	r1, sp, #16
 800b41c:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800b420:	f001 fec8 	bl	800d1b4 <RegionInitDefaults>

    MacCtx.MacCallbacks = callbacks;
 800b424:	f8c5 6348 	str.w	r6, [r5, #840]	; 0x348
    ResetMacParameters( );
 800b428:	f7ff fbb6 	bl	800ab98 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 800b42c:	f884 a0fd 	strb.w	sl, [r4, #253]	; 0xfd

    MacCtx.MacPrimitives = primitives;
 800b430:	f8c5 8344 	str.w	r8, [r5, #836]	; 0x344
    MacCtx.MacFlags.Value = 0;
 800b434:	f885 7481 	strb.w	r7, [r5, #1153]	; 0x481
    MacCtx.MacState = LORAMAC_STOPPED;
 800b438:	f8c5 a340 	str.w	sl, [r5, #832]	; 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 800b43c:	62e7      	str	r7, [r4, #44]	; 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 800b43e:	6327      	str	r7, [r4, #48]	; 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 800b440:	9700      	str	r7, [sp, #0]
 800b442:	4b41      	ldr	r3, [pc, #260]	; (800b548 <LoRaMacInitialization+0x388>)
 800b444:	463a      	mov	r2, r7
 800b446:	f04f 31ff 	mov.w	r1, #4294967295
 800b44a:	f505 705a 	add.w	r0, r5, #872	; 0x368
 800b44e:	f006 fcc3 	bl	8011dd8 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 800b452:	9700      	str	r7, [sp, #0]
 800b454:	4b3d      	ldr	r3, [pc, #244]	; (800b54c <LoRaMacInitialization+0x38c>)
 800b456:	463a      	mov	r2, r7
 800b458:	f04f 31ff 	mov.w	r1, #4294967295
 800b45c:	f505 7060 	add.w	r0, r5, #896	; 0x380
 800b460:	f006 fcba 	bl	8011dd8 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 800b464:	9700      	str	r7, [sp, #0]
 800b466:	4b3a      	ldr	r3, [pc, #232]	; (800b550 <LoRaMacInitialization+0x390>)
 800b468:	463a      	mov	r2, r7
 800b46a:	f04f 31ff 	mov.w	r1, #4294967295
 800b46e:	f505 7066 	add.w	r0, r5, #920	; 0x398
 800b472:	f006 fcb1 	bl	8011dd8 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 800b476:	9700      	str	r7, [sp, #0]
 800b478:	4b36      	ldr	r3, [pc, #216]	; (800b554 <LoRaMacInitialization+0x394>)
 800b47a:	463a      	mov	r2, r7
 800b47c:	f04f 31ff 	mov.w	r1, #4294967295
 800b480:	f505 707e 	add.w	r0, r5, #1016	; 0x3f8
 800b484:	f006 fca8 	bl	8011dd8 <UTIL_TIMER_Create>

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 800b488:	af02      	add	r7, sp, #8
 800b48a:	4638      	mov	r0, r7
 800b48c:	f006 fc36 	bl	8011cfc <SysTimeGetMcuTime>
 800b490:	f504 7382 	add.w	r3, r4, #260	; 0x104
 800b494:	e897 0003 	ldmia.w	r7, {r0, r1}
 800b498:	e883 0003 	stmia.w	r3, {r0, r1}

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 800b49c:	4b2e      	ldr	r3, [pc, #184]	; (800b558 <LoRaMacInitialization+0x398>)
 800b49e:	f8c5 334c 	str.w	r3, [r5, #844]	; 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 800b4a2:	4b2e      	ldr	r3, [pc, #184]	; (800b55c <LoRaMacInitialization+0x39c>)
 800b4a4:	f8c5 3354 	str.w	r3, [r5, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 800b4a8:	4b2d      	ldr	r3, [pc, #180]	; (800b560 <LoRaMacInitialization+0x3a0>)
 800b4aa:	f8c5 335c 	str.w	r3, [r5, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 800b4ae:	4b2d      	ldr	r3, [pc, #180]	; (800b564 <LoRaMacInitialization+0x3a4>)
 800b4b0:	f8c5 3350 	str.w	r3, [r5, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 800b4b4:	4b2c      	ldr	r3, [pc, #176]	; (800b568 <LoRaMacInitialization+0x3a8>)
 800b4b6:	f8c5 3358 	str.w	r3, [r5, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
 800b4ba:	4b2c      	ldr	r3, [pc, #176]	; (800b56c <LoRaMacInitialization+0x3ac>)
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	f505 7053 	add.w	r0, r5, #844	; 0x34c
 800b4c2:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement, callbacks->GetUniqueId ) != SECURE_ELEMENT_SUCCESS ) /* ST_WORKAROUND: Add unique ID callback as input parameter */
 800b4c4:	68b1      	ldr	r1, [r6, #8]
 800b4c6:	f504 708c 	add.w	r0, r4, #280	; 0x118
 800b4ca:	f003 fe13 	bl	800f0f4 <SecureElementInit>
 800b4ce:	bb70      	cbnz	r0, 800b52e <LoRaMacInitialization+0x36e>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 800b4d0:	4620      	mov	r0, r4
 800b4d2:	f001 fae7 	bl	800caa4 <LoRaMacCryptoInit>
 800b4d6:	bb60      	cbnz	r0, 800b532 <LoRaMacInitialization+0x372>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 800b4d8:	f000 ff20 	bl	800c31c <LoRaMacCommandsInit>
 800b4dc:	bb58      	cbnz	r0, 800b536 <LoRaMacInitialization+0x376>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 800b4de:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b4e2:	f001 fb45 	bl	800cb70 <LoRaMacCryptoSetMulticastReference>
 800b4e6:	4604      	mov	r4, r0
 800b4e8:	2800      	cmp	r0, #0
 800b4ea:	d141      	bne.n	800b570 <LoRaMacInitialization+0x3b0>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 800b4ec:	4d1f      	ldr	r5, [pc, #124]	; (800b56c <LoRaMacInitialization+0x3ac>)
 800b4ee:	696b      	ldr	r3, [r5, #20]
 800b4f0:	4798      	blx	r3
 800b4f2:	f003 ffe3 	bl	800f4bc <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800b4f6:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800b4f8:	4a10      	ldr	r2, [pc, #64]	; (800b53c <LoRaMacInitialization+0x37c>)
 800b4fa:	f892 00fd 	ldrb.w	r0, [r2, #253]	; 0xfd
 800b4fe:	4798      	blx	r3
    Radio.Sleep( );
 800b500:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800b502:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800b504:	4650      	mov	r0, sl
 800b506:	f7fd fcc5 	bl	8008e94 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 800b50a:	e00c      	b.n	800b526 <LoRaMacInitialization+0x366>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800b50c:	2403      	movs	r4, #3
 800b50e:	e00a      	b.n	800b526 <LoRaMacInitialization+0x366>
 800b510:	2403      	movs	r4, #3
 800b512:	e008      	b.n	800b526 <LoRaMacInitialization+0x366>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800b514:	2403      	movs	r4, #3
 800b516:	e006      	b.n	800b526 <LoRaMacInitialization+0x366>
 800b518:	2403      	movs	r4, #3
 800b51a:	e004      	b.n	800b526 <LoRaMacInitialization+0x366>
 800b51c:	2403      	movs	r4, #3
 800b51e:	e002      	b.n	800b526 <LoRaMacInitialization+0x366>
 800b520:	2403      	movs	r4, #3
 800b522:	e000      	b.n	800b526 <LoRaMacInitialization+0x366>
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 800b524:	2409      	movs	r4, #9
}
 800b526:	4620      	mov	r0, r4
 800b528:	b00b      	add	sp, #44	; 0x2c
 800b52a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800b52e:	2411      	movs	r4, #17
 800b530:	e7f9      	b.n	800b526 <LoRaMacInitialization+0x366>
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800b532:	2411      	movs	r4, #17
 800b534:	e7f7      	b.n	800b526 <LoRaMacInitialization+0x366>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800b536:	2413      	movs	r4, #19
 800b538:	e7f5      	b.n	800b526 <LoRaMacInitialization+0x366>
 800b53a:	bf00      	nop
 800b53c:	20000d60 	.word	0x20000d60
 800b540:	20000858 	.word	0x20000858
 800b544:	01000300 	.word	0x01000300
 800b548:	0800a5bd 	.word	0x0800a5bd
 800b54c:	0800aa39 	.word	0x0800aa39
 800b550:	0800a9e9 	.word	0x0800a9e9
 800b554:	080092c9 	.word	0x080092c9
 800b558:	0800ab41 	.word	0x0800ab41
 800b55c:	0800aae9 	.word	0x0800aae9
 800b560:	08008e49 	.word	0x08008e49
 800b564:	0800aab5 	.word	0x0800aab5
 800b568:	0800aa81 	.word	0x0800aa81
 800b56c:	08017b28 	.word	0x08017b28
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800b570:	2411      	movs	r4, #17
 800b572:	e7d8      	b.n	800b526 <LoRaMacInitialization+0x366>

0800b574 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
    MacCtx.MacState = LORAMAC_IDLE;
 800b574:	2000      	movs	r0, #0
 800b576:	4b02      	ldr	r3, [pc, #8]	; (800b580 <LoRaMacStart+0xc>)
 800b578:	f8c3 0340 	str.w	r0, [r3, #832]	; 0x340
    return LORAMAC_STATUS_OK;
}
 800b57c:	4770      	bx	lr
 800b57e:	bf00      	nop
 800b580:	20000858 	.word	0x20000858

0800b584 <LoRaMacQueryTxPossible>:
    }
    return LORAMAC_STATUS_BUSY;
}

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 800b584:	b530      	push	{r4, r5, lr}
 800b586:	b089      	sub	sp, #36	; 0x24
 800b588:	4604      	mov	r4, r0
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800b58a:	4b2f      	ldr	r3, [pc, #188]	; (800b648 <LoRaMacQueryTxPossible+0xc4>)
 800b58c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b58e:	9202      	str	r2, [sp, #8]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800b590:	f993 00c5 	ldrsb.w	r0, [r3, #197]	; 0xc5
 800b594:	f88d 0007 	strb.w	r0, [sp, #7]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800b598:	f993 30c4 	ldrsb.w	r3, [r3, #196]	; 0xc4
 800b59c:	f88d 3006 	strb.w	r3, [sp, #6]
    size_t macCmdsSize = 0;
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	9300      	str	r3, [sp, #0]

    if( txInfo == NULL )
 800b5a4:	2900      	cmp	r1, #0
 800b5a6:	d048      	beq.n	800b63a <LoRaMacQueryTxPossible+0xb6>
 800b5a8:	460d      	mov	r5, r1
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Setup ADR request
    adrNext.Version = Nvm.MacGroup2.Version;
 800b5aa:	4b27      	ldr	r3, [pc, #156]	; (800b648 <LoRaMacQueryTxPossible+0xc4>)
 800b5ac:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 800b5b0:	9103      	str	r1, [sp, #12]
    adrNext.UpdateChanMask = false;
 800b5b2:	2100      	movs	r1, #0
 800b5b4:	f88d 1010 	strb.w	r1, [sp, #16]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800b5b8:	f893 10fe 	ldrb.w	r1, [r3, #254]	; 0xfe
 800b5bc:	f88d 1011 	strb.w	r1, [sp, #17]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800b5c0:	9205      	str	r2, [sp, #20]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800b5c2:	4a22      	ldr	r2, [pc, #136]	; (800b64c <LoRaMacQueryTxPossible+0xc8>)
 800b5c4:	f8b2 13f4 	ldrh.w	r1, [r2, #1012]	; 0x3f4
 800b5c8:	f8ad 1018 	strh.w	r1, [sp, #24]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 800b5cc:	f8b2 23f6 	ldrh.w	r2, [r2, #1014]	; 0x3f6
 800b5d0:	f8ad 201a 	strh.w	r2, [sp, #26]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800b5d4:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 800b5d8:	f88d 201c 	strb.w	r2, [sp, #28]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800b5dc:	f993 2038 	ldrsb.w	r2, [r3, #56]	; 0x38
 800b5e0:	f88d 201d 	strb.w	r2, [sp, #29]
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800b5e4:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800b5e8:	f88d 201e 	strb.w	r2, [sp, #30]
    adrNext.Region = Nvm.MacGroup2.Region;
 800b5ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b5f0:	f88d 301f 	strb.w	r3, [sp, #31]

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 800b5f4:	ab02      	add	r3, sp, #8
 800b5f6:	f10d 0206 	add.w	r2, sp, #6
 800b5fa:	f10d 0107 	add.w	r1, sp, #7
 800b5fe:	a803      	add	r0, sp, #12
 800b600:	f000 fdda 	bl	800c1b8 <LoRaMacAdrCalcNext>

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800b604:	f99d 0007 	ldrsb.w	r0, [sp, #7]
 800b608:	f7fd fdae 	bl	8009168 <GetMaxAppPayloadWithoutFOptsLength>
 800b60c:	7068      	strb	r0, [r5, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800b60e:	4668      	mov	r0, sp
 800b610:	f000 ff06 	bl	800c420 <LoRaMacCommandsGetSizeSerializedCmds>
 800b614:	b998      	cbnz	r0, 800b63e <LoRaMacQueryTxPossible+0xba>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 800b616:	9b00      	ldr	r3, [sp, #0]
 800b618:	2b0f      	cmp	r3, #15
 800b61a:	d80a      	bhi.n	800b632 <LoRaMacQueryTxPossible+0xae>
 800b61c:	786a      	ldrb	r2, [r5, #1]
 800b61e:	4293      	cmp	r3, r2
 800b620:	d807      	bhi.n	800b632 <LoRaMacQueryTxPossible+0xae>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 800b622:	1ad3      	subs	r3, r2, r3
 800b624:	702b      	strb	r3, [r5, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 800b626:	9b00      	ldr	r3, [sp, #0]
 800b628:	441c      	add	r4, r3
 800b62a:	42a2      	cmp	r2, r4
 800b62c:	d309      	bcc.n	800b642 <LoRaMacQueryTxPossible+0xbe>
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
        return LORAMAC_STATUS_LENGTH_ERROR;
    }
}
 800b62e:	b009      	add	sp, #36	; 0x24
 800b630:	bd30      	pop	{r4, r5, pc}
        txInfo->MaxPossibleApplicationDataSize = 0;
 800b632:	2300      	movs	r3, #0
 800b634:	702b      	strb	r3, [r5, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 800b636:	2008      	movs	r0, #8
 800b638:	e7f9      	b.n	800b62e <LoRaMacQueryTxPossible+0xaa>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800b63a:	2003      	movs	r0, #3
 800b63c:	e7f7      	b.n	800b62e <LoRaMacQueryTxPossible+0xaa>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800b63e:	2013      	movs	r0, #19
 800b640:	e7f5      	b.n	800b62e <LoRaMacQueryTxPossible+0xaa>
           return LORAMAC_STATUS_LENGTH_ERROR;
 800b642:	2008      	movs	r0, #8
 800b644:	e7f3      	b.n	800b62e <LoRaMacQueryTxPossible+0xaa>
 800b646:	bf00      	nop
 800b648:	20000d60 	.word	0x20000d60
 800b64c:	20000858 	.word	0x20000858

0800b650 <LoRaMacMibGetRequestConfirm>:
{
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 800b650:	2800      	cmp	r0, #0
 800b652:	f000 810c 	beq.w	800b86e <LoRaMacMibGetRequestConfirm+0x21e>
{
 800b656:	b510      	push	{r4, lr}
 800b658:	b084      	sub	sp, #16
 800b65a:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    switch( mibGet->Type )
 800b65c:	7800      	ldrb	r0, [r0, #0]
 800b65e:	2828      	cmp	r0, #40	; 0x28
 800b660:	f200 8101 	bhi.w	800b866 <LoRaMacMibGetRequestConfirm+0x216>
 800b664:	e8df f010 	tbh	[pc, r0, lsl #1]
 800b668:	002f0029 	.word	0x002f0029
 800b66c:	003a0035 	.word	0x003a0035
 800b670:	0045003f 	.word	0x0045003f
 800b674:	00ff004b 	.word	0x00ff004b
 800b678:	00ff00ff 	.word	0x00ff00ff
 800b67c:	00ff00ff 	.word	0x00ff00ff
 800b680:	00ff00ff 	.word	0x00ff00ff
 800b684:	005100ff 	.word	0x005100ff
 800b688:	005d0057 	.word	0x005d0057
 800b68c:	0072006a 	.word	0x0072006a
 800b690:	0082007a 	.word	0x0082007a
 800b694:	008a0097 	.word	0x008a0097
 800b698:	00aa00a4 	.word	0x00aa00a4
 800b69c:	00b400af 	.word	0x00b400af
 800b6a0:	00be00b9 	.word	0x00be00b9
 800b6a4:	00c900c3 	.word	0x00c900c3
 800b6a8:	00cf00d5 	.word	0x00cf00d5
 800b6ac:	00e000db 	.word	0x00e000db
 800b6b0:	00f000e6 	.word	0x00f000e6
 800b6b4:	00ff00eb 	.word	0x00ff00eb
 800b6b8:	00f6      	.short	0x00f6
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 800b6ba:	4b6e      	ldr	r3, [pc, #440]	; (800b874 <LoRaMacMibGetRequestConfirm+0x224>)
 800b6bc:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800b6c0:	7123      	strb	r3, [r4, #4]
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
            break;
        }
    }
    return status;
}
 800b6c2:	b004      	add	sp, #16
 800b6c4:	bd10      	pop	{r4, pc}
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800b6c6:	4b6b      	ldr	r3, [pc, #428]	; (800b874 <LoRaMacMibGetRequestConfirm+0x224>)
 800b6c8:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800b6cc:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b6ce:	2000      	movs	r0, #0
            break;
 800b6d0:	e7f7      	b.n	800b6c2 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 800b6d2:	f003 febf 	bl	800f454 <SecureElementGetDevEui>
 800b6d6:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b6d8:	2000      	movs	r0, #0
            break;
 800b6da:	e7f2      	b.n	800b6c2 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 800b6dc:	f003 fed0 	bl	800f480 <SecureElementGetJoinEui>
 800b6e0:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b6e2:	2000      	movs	r0, #0
            break;
 800b6e4:	e7ed      	b.n	800b6c2 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 800b6e6:	4b63      	ldr	r3, [pc, #396]	; (800b874 <LoRaMacMibGetRequestConfirm+0x224>)
 800b6e8:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 800b6ec:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b6ee:	2000      	movs	r0, #0
            break;
 800b6f0:	e7e7      	b.n	800b6c2 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 800b6f2:	4b60      	ldr	r3, [pc, #384]	; (800b874 <LoRaMacMibGetRequestConfirm+0x224>)
 800b6f4:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800b6f8:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b6fa:	2000      	movs	r0, #0
            break;
 800b6fc:	e7e1      	b.n	800b6c2 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.DevAddr = Nvm.MacGroup2.DevAddr;
 800b6fe:	4b5d      	ldr	r3, [pc, #372]	; (800b874 <LoRaMacMibGetRequestConfirm+0x224>)
 800b700:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800b704:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b706:	2000      	movs	r0, #0
            break;
 800b708:	e7db      	b.n	800b6c2 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 800b70a:	4b5a      	ldr	r3, [pc, #360]	; (800b874 <LoRaMacMibGetRequestConfirm+0x224>)
 800b70c:	f893 30fd 	ldrb.w	r3, [r3, #253]	; 0xfd
 800b710:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b712:	2000      	movs	r0, #0
            break;
 800b714:	e7d5      	b.n	800b6c2 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800b716:	4b57      	ldr	r3, [pc, #348]	; (800b874 <LoRaMacMibGetRequestConfirm+0x224>)
 800b718:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b71c:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b71e:	2000      	movs	r0, #0
            break;
 800b720:	e7cf      	b.n	800b6c2 <LoRaMacMibGetRequestConfirm+0x72>
            getPhy.Attribute = PHY_CHANNELS;
 800b722:	231d      	movs	r3, #29
 800b724:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b728:	a902      	add	r1, sp, #8
 800b72a:	4b52      	ldr	r3, [pc, #328]	; (800b874 <LoRaMacMibGetRequestConfirm+0x224>)
 800b72c:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800b730:	f001 fd27 	bl	800d182 <RegionGetPhyParam>
 800b734:	9001      	str	r0, [sp, #4]
            mibGet->Param.ChannelList = phyParam.Channels;
 800b736:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b738:	2000      	movs	r0, #0
            break;
 800b73a:	e7c2      	b.n	800b6c2 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800b73c:	3404      	adds	r4, #4
 800b73e:	4b4e      	ldr	r3, [pc, #312]	; (800b878 <LoRaMacMibGetRequestConfirm+0x228>)
 800b740:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b744:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b748:	2000      	movs	r0, #0
            break;
 800b74a:	e7ba      	b.n	800b6c2 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 800b74c:	3404      	adds	r4, #4
 800b74e:	4b4b      	ldr	r3, [pc, #300]	; (800b87c <LoRaMacMibGetRequestConfirm+0x22c>)
 800b750:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b754:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b758:	2000      	movs	r0, #0
            break;
 800b75a:	e7b2      	b.n	800b6c2 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 800b75c:	3404      	adds	r4, #4
 800b75e:	4b48      	ldr	r3, [pc, #288]	; (800b880 <LoRaMacMibGetRequestConfirm+0x230>)
 800b760:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b764:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b768:	2000      	movs	r0, #0
            break;
 800b76a:	e7aa      	b.n	800b6c2 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 800b76c:	3404      	adds	r4, #4
 800b76e:	4b45      	ldr	r3, [pc, #276]	; (800b884 <LoRaMacMibGetRequestConfirm+0x234>)
 800b770:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b774:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b778:	2000      	movs	r0, #0
            break;
 800b77a:	e7a2      	b.n	800b6c2 <LoRaMacMibGetRequestConfirm+0x72>
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 800b77c:	231b      	movs	r3, #27
 800b77e:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b782:	a902      	add	r1, sp, #8
 800b784:	4b3b      	ldr	r3, [pc, #236]	; (800b874 <LoRaMacMibGetRequestConfirm+0x224>)
 800b786:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800b78a:	f001 fcfa 	bl	800d182 <RegionGetPhyParam>
 800b78e:	9001      	str	r0, [sp, #4]
            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 800b790:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b792:	2000      	movs	r0, #0
            break;
 800b794:	e795      	b.n	800b6c2 <LoRaMacMibGetRequestConfirm+0x72>
            getPhy.Attribute = PHY_CHANNELS_MASK;
 800b796:	231a      	movs	r3, #26
 800b798:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b79c:	a902      	add	r1, sp, #8
 800b79e:	4b35      	ldr	r3, [pc, #212]	; (800b874 <LoRaMacMibGetRequestConfirm+0x224>)
 800b7a0:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800b7a4:	f001 fced 	bl	800d182 <RegionGetPhyParam>
 800b7a8:	9001      	str	r0, [sp, #4]
            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 800b7aa:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b7ac:	2000      	movs	r0, #0
            break;
 800b7ae:	e788      	b.n	800b6c2 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800b7b0:	4b30      	ldr	r3, [pc, #192]	; (800b874 <LoRaMacMibGetRequestConfirm+0x224>)
 800b7b2:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800b7b6:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b7b8:	2000      	movs	r0, #0
            break;
 800b7ba:	e782      	b.n	800b6c2 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 800b7bc:	4b2d      	ldr	r3, [pc, #180]	; (800b874 <LoRaMacMibGetRequestConfirm+0x224>)
 800b7be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b7c0:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b7c2:	2000      	movs	r0, #0
            break;
 800b7c4:	e77d      	b.n	800b6c2 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 800b7c6:	4b2b      	ldr	r3, [pc, #172]	; (800b874 <LoRaMacMibGetRequestConfirm+0x224>)
 800b7c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7ca:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b7cc:	2000      	movs	r0, #0
            break;
 800b7ce:	e778      	b.n	800b6c2 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 800b7d0:	4b28      	ldr	r3, [pc, #160]	; (800b874 <LoRaMacMibGetRequestConfirm+0x224>)
 800b7d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7d4:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b7d6:	2000      	movs	r0, #0
            break;
 800b7d8:	e773      	b.n	800b6c2 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 800b7da:	4b26      	ldr	r3, [pc, #152]	; (800b874 <LoRaMacMibGetRequestConfirm+0x224>)
 800b7dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b7de:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b7e0:	2000      	movs	r0, #0
            break;
 800b7e2:	e76e      	b.n	800b6c2 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 800b7e4:	4b23      	ldr	r3, [pc, #140]	; (800b874 <LoRaMacMibGetRequestConfirm+0x224>)
 800b7e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b7e8:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b7ea:	2000      	movs	r0, #0
            break;
 800b7ec:	e769      	b.n	800b6c2 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800b7ee:	4b21      	ldr	r3, [pc, #132]	; (800b874 <LoRaMacMibGetRequestConfirm+0x224>)
 800b7f0:	f993 30c5 	ldrsb.w	r3, [r3, #197]	; 0xc5
 800b7f4:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b7f6:	2000      	movs	r0, #0
            break;
 800b7f8:	e763      	b.n	800b6c2 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800b7fa:	4b1e      	ldr	r3, [pc, #120]	; (800b874 <LoRaMacMibGetRequestConfirm+0x224>)
 800b7fc:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800b800:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b802:	2000      	movs	r0, #0
            break;
 800b804:	e75d      	b.n	800b6c2 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800b806:	4b1b      	ldr	r3, [pc, #108]	; (800b874 <LoRaMacMibGetRequestConfirm+0x224>)
 800b808:	f993 30c4 	ldrsb.w	r3, [r3, #196]	; 0xc4
 800b80c:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b80e:	2000      	movs	r0, #0
            break;
 800b810:	e757      	b.n	800b6c2 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800b812:	4b18      	ldr	r3, [pc, #96]	; (800b874 <LoRaMacMibGetRequestConfirm+0x224>)
 800b814:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 800b818:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b81a:	2000      	movs	r0, #0
            break;
 800b81c:	e751      	b.n	800b6c2 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 800b81e:	4b15      	ldr	r3, [pc, #84]	; (800b874 <LoRaMacMibGetRequestConfirm+0x224>)
 800b820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b822:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b824:	2000      	movs	r0, #0
            break;
 800b826:	e74c      	b.n	800b6c2 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 800b828:	4b12      	ldr	r3, [pc, #72]	; (800b874 <LoRaMacMibGetRequestConfirm+0x224>)
 800b82a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800b82e:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b830:	2000      	movs	r0, #0
            break;
 800b832:	e746      	b.n	800b6c2 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800b834:	4b0f      	ldr	r3, [pc, #60]	; (800b874 <LoRaMacMibGetRequestConfirm+0x224>)
 800b836:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b838:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b83a:	2000      	movs	r0, #0
            break;
 800b83c:	e741      	b.n	800b6c2 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.Contexts = GetNvmData( );
 800b83e:	f7fd fbbd 	bl	8008fbc <GetNvmData>
 800b842:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b844:	2000      	movs	r0, #0
            break;
 800b846:	e73c      	b.n	800b6c2 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 800b848:	4b0a      	ldr	r3, [pc, #40]	; (800b874 <LoRaMacMibGetRequestConfirm+0x224>)
 800b84a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800b84e:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b850:	2000      	movs	r0, #0
            break;
 800b852:	e736      	b.n	800b6c2 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 800b854:	4b07      	ldr	r3, [pc, #28]	; (800b874 <LoRaMacMibGetRequestConfirm+0x224>)
 800b856:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800b85a:	6063      	str	r3, [r4, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 800b85c:	f001 fd54 	bl	800d308 <RegionGetVersion>
 800b860:	60a0      	str	r0, [r4, #8]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b862:	2000      	movs	r0, #0
            break;
 800b864:	e72d      	b.n	800b6c2 <LoRaMacMibGetRequestConfirm+0x72>
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 800b866:	4620      	mov	r0, r4
 800b868:	f000 fcc6 	bl	800c1f8 <LoRaMacClassBMibGetRequestConfirm>
            break;
 800b86c:	e729      	b.n	800b6c2 <LoRaMacMibGetRequestConfirm+0x72>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800b86e:	2003      	movs	r0, #3
}
 800b870:	4770      	bx	lr
 800b872:	bf00      	nop
 800b874:	20000d60 	.word	0x20000d60
 800b878:	20000dc4 	.word	0x20000dc4
 800b87c:	20000e04 	.word	0x20000e04
 800b880:	20000dcc 	.word	0x20000dcc
 800b884:	20000e0c 	.word	0x20000e0c

0800b888 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 800b888:	b530      	push	{r4, r5, lr}
 800b88a:	b085      	sub	sp, #20
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 800b88c:	2800      	cmp	r0, #0
 800b88e:	f000 8244 	beq.w	800bd1a <LoRaMacMibSetRequestConfirm+0x492>
 800b892:	4605      	mov	r5, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 800b894:	4bb3      	ldr	r3, [pc, #716]	; (800bb64 <LoRaMacMibSetRequestConfirm+0x2dc>)
 800b896:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800b89a:	f013 0f02 	tst.w	r3, #2
 800b89e:	f040 823e 	bne.w	800bd1e <LoRaMacMibSetRequestConfirm+0x496>
    {
        return LORAMAC_STATUS_BUSY;
    }

    switch( mibSet->Type )
 800b8a2:	7804      	ldrb	r4, [r0, #0]
 800b8a4:	2c27      	cmp	r4, #39	; 0x27
 800b8a6:	f200 8234 	bhi.w	800bd12 <LoRaMacMibSetRequestConfirm+0x48a>
 800b8aa:	e8df f014 	tbh	[pc, r4, lsl #1]
 800b8ae:	0028      	.short	0x0028
 800b8b0:	0036002d 	.word	0x0036002d
 800b8b4:	0047003f 	.word	0x0047003f
 800b8b8:	0053004d 	.word	0x0053004d
 800b8bc:	00660059 	.word	0x00660059
 800b8c0:	00800073 	.word	0x00800073
 800b8c4:	009a008d 	.word	0x009a008d
 800b8c8:	00b400a7 	.word	0x00b400a7
 800b8cc:	00cc00c1 	.word	0x00cc00c1
 800b8d0:	00d20232 	.word	0x00d20232
 800b8d4:	011200f8 	.word	0x011200f8
 800b8d8:	01770140 	.word	0x01770140
 800b8dc:	01870167 	.word	0x01870167
 800b8e0:	01970192 	.word	0x01970192
 800b8e4:	01a1019c 	.word	0x01a1019c
 800b8e8:	01ab01a6 	.word	0x01ab01a6
 800b8ec:	01ed01c0 	.word	0x01ed01c0
 800b8f0:	020101d9 	.word	0x020101d9
 800b8f4:	02100208 	.word	0x02100208
 800b8f8:	021b0215 	.word	0x021b0215
 800b8fc:	0222      	.short	0x0222
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 800b8fe:	7900      	ldrb	r0, [r0, #4]
 800b900:	f7ff f9ec 	bl	800acdc <SwitchClass>
 800b904:	4604      	mov	r4, r0
            break;
 800b906:	e20b      	b.n	800bd20 <LoRaMacMibSetRequestConfirm+0x498>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 800b908:	7903      	ldrb	r3, [r0, #4]
 800b90a:	2b02      	cmp	r3, #2
 800b90c:	f000 820b 	beq.w	800bd26 <LoRaMacMibSetRequestConfirm+0x49e>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 800b910:	4a95      	ldr	r2, [pc, #596]	; (800bb68 <LoRaMacMibSetRequestConfirm+0x2e0>)
 800b912:	f882 3110 	strb.w	r3, [r2, #272]	; 0x110
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b916:	2400      	movs	r4, #0
 800b918:	e202      	b.n	800bd20 <LoRaMacMibSetRequestConfirm+0x498>
            }
            break;
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 800b91a:	6840      	ldr	r0, [r0, #4]
 800b91c:	f003 fd8c 	bl	800f438 <SecureElementSetDevEui>
 800b920:	4604      	mov	r4, r0
 800b922:	2800      	cmp	r0, #0
 800b924:	f000 81fc 	beq.w	800bd20 <LoRaMacMibSetRequestConfirm+0x498>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b928:	2403      	movs	r4, #3
 800b92a:	e1f9      	b.n	800bd20 <LoRaMacMibSetRequestConfirm+0x498>
            }
            break;
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 800b92c:	6840      	ldr	r0, [r0, #4]
 800b92e:	f003 fd97 	bl	800f460 <SecureElementSetJoinEui>
 800b932:	2800      	cmp	r0, #0
 800b934:	f040 81f4 	bne.w	800bd20 <LoRaMacMibSetRequestConfirm+0x498>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b938:	4604      	mov	r4, r0
 800b93a:	e1f1      	b.n	800bd20 <LoRaMacMibSetRequestConfirm+0x498>
            }
            break;
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 800b93c:	7902      	ldrb	r2, [r0, #4]
 800b93e:	4b8a      	ldr	r3, [pc, #552]	; (800bb68 <LoRaMacMibSetRequestConfirm+0x2e0>)
 800b940:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b944:	2400      	movs	r4, #0
            break;
 800b946:	e1eb      	b.n	800bd20 <LoRaMacMibSetRequestConfirm+0x498>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 800b948:	6842      	ldr	r2, [r0, #4]
 800b94a:	4b87      	ldr	r3, [pc, #540]	; (800bb68 <LoRaMacMibSetRequestConfirm+0x2e0>)
 800b94c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b950:	2400      	movs	r4, #0
            break;
 800b952:	e1e5      	b.n	800bd20 <LoRaMacMibSetRequestConfirm+0x498>
        }
        case MIB_DEV_ADDR:
        {
            Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 800b954:	6842      	ldr	r2, [r0, #4]
 800b956:	4b84      	ldr	r3, [pc, #528]	; (800bb68 <LoRaMacMibSetRequestConfirm+0x2e0>)
 800b958:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b95c:	2400      	movs	r4, #0
            break;
 800b95e:	e1df      	b.n	800bd20 <LoRaMacMibSetRequestConfirm+0x498>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 800b960:	6841      	ldr	r1, [r0, #4]
 800b962:	2900      	cmp	r1, #0
 800b964:	f000 81e1 	beq.w	800bd2a <LoRaMacMibSetRequestConfirm+0x4a2>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 800b968:	2000      	movs	r0, #0
 800b96a:	f001 fa19 	bl	800cda0 <LoRaMacCryptoSetKey>
 800b96e:	4604      	mov	r4, r0
 800b970:	2800      	cmp	r0, #0
 800b972:	f000 81d5 	beq.w	800bd20 <LoRaMacMibSetRequestConfirm+0x498>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800b976:	2411      	movs	r4, #17
 800b978:	e1d2      	b.n	800bd20 <LoRaMacMibSetRequestConfirm+0x498>
            }
            break;
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 800b97a:	6841      	ldr	r1, [r0, #4]
 800b97c:	2900      	cmp	r1, #0
 800b97e:	f000 81d6 	beq.w	800bd2e <LoRaMacMibSetRequestConfirm+0x4a6>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 800b982:	2001      	movs	r0, #1
 800b984:	f001 fa0c 	bl	800cda0 <LoRaMacCryptoSetKey>
 800b988:	4604      	mov	r4, r0
 800b98a:	2800      	cmp	r0, #0
 800b98c:	f000 81c8 	beq.w	800bd20 <LoRaMacMibSetRequestConfirm+0x498>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800b990:	2411      	movs	r4, #17
 800b992:	e1c5      	b.n	800bd20 <LoRaMacMibSetRequestConfirm+0x498>
            break;
        }
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 800b994:	6841      	ldr	r1, [r0, #4]
 800b996:	2900      	cmp	r1, #0
 800b998:	f000 81cb 	beq.w	800bd32 <LoRaMacMibSetRequestConfirm+0x4aa>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 800b99c:	2002      	movs	r0, #2
 800b99e:	f001 f9ff 	bl	800cda0 <LoRaMacCryptoSetKey>
 800b9a2:	4604      	mov	r4, r0
 800b9a4:	2800      	cmp	r0, #0
 800b9a6:	f000 81bb 	beq.w	800bd20 <LoRaMacMibSetRequestConfirm+0x498>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800b9aa:	2411      	movs	r4, #17
 800b9ac:	e1b8      	b.n	800bd20 <LoRaMacMibSetRequestConfirm+0x498>
            break;
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 800b9ae:	6841      	ldr	r1, [r0, #4]
 800b9b0:	2900      	cmp	r1, #0
 800b9b2:	f000 81c0 	beq.w	800bd36 <LoRaMacMibSetRequestConfirm+0x4ae>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 800b9b6:	2003      	movs	r0, #3
 800b9b8:	f001 f9f2 	bl	800cda0 <LoRaMacCryptoSetKey>
 800b9bc:	4604      	mov	r4, r0
 800b9be:	2800      	cmp	r0, #0
 800b9c0:	f000 81ae 	beq.w	800bd20 <LoRaMacMibSetRequestConfirm+0x498>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800b9c4:	2411      	movs	r4, #17
 800b9c6:	e1ab      	b.n	800bd20 <LoRaMacMibSetRequestConfirm+0x498>
            }
            break;
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 800b9c8:	6841      	ldr	r1, [r0, #4]
 800b9ca:	2900      	cmp	r1, #0
 800b9cc:	f000 81b5 	beq.w	800bd3a <LoRaMacMibSetRequestConfirm+0x4b2>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 800b9d0:	207f      	movs	r0, #127	; 0x7f
 800b9d2:	f001 f9e5 	bl	800cda0 <LoRaMacCryptoSetKey>
 800b9d6:	4604      	mov	r4, r0
 800b9d8:	2800      	cmp	r0, #0
 800b9da:	f000 81a1 	beq.w	800bd20 <LoRaMacMibSetRequestConfirm+0x498>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800b9de:	2411      	movs	r4, #17
 800b9e0:	e19e      	b.n	800bd20 <LoRaMacMibSetRequestConfirm+0x498>
            break;
        }
#if ( LORAMAC_MAX_MC_CTX > 0 ) /* ST_WORKAROUND: reduced LORAMAC_MAX_MC_CTX */
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 800b9e2:	6841      	ldr	r1, [r0, #4]
 800b9e4:	2900      	cmp	r1, #0
 800b9e6:	f000 81aa 	beq.w	800bd3e <LoRaMacMibSetRequestConfirm+0x4b6>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 800b9ea:	2080      	movs	r0, #128	; 0x80
 800b9ec:	f001 f9d8 	bl	800cda0 <LoRaMacCryptoSetKey>
 800b9f0:	4604      	mov	r4, r0
 800b9f2:	2800      	cmp	r0, #0
 800b9f4:	f000 8194 	beq.w	800bd20 <LoRaMacMibSetRequestConfirm+0x498>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800b9f8:	2411      	movs	r4, #17
 800b9fa:	e191      	b.n	800bd20 <LoRaMacMibSetRequestConfirm+0x498>
            }
            break;
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 800b9fc:	6841      	ldr	r1, [r0, #4]
 800b9fe:	2900      	cmp	r1, #0
 800ba00:	f000 819f 	beq.w	800bd42 <LoRaMacMibSetRequestConfirm+0x4ba>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 800ba04:	2081      	movs	r0, #129	; 0x81
 800ba06:	f001 f9cb 	bl	800cda0 <LoRaMacCryptoSetKey>
 800ba0a:	4604      	mov	r4, r0
 800ba0c:	2800      	cmp	r0, #0
 800ba0e:	f000 8187 	beq.w	800bd20 <LoRaMacMibSetRequestConfirm+0x498>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800ba12:	2411      	movs	r4, #17
 800ba14:	e184      	b.n	800bd20 <LoRaMacMibSetRequestConfirm+0x498>
            }
            break;
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 800ba16:	6841      	ldr	r1, [r0, #4]
 800ba18:	2900      	cmp	r1, #0
 800ba1a:	f000 8194 	beq.w	800bd46 <LoRaMacMibSetRequestConfirm+0x4be>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 800ba1e:	2082      	movs	r0, #130	; 0x82
 800ba20:	f001 f9be 	bl	800cda0 <LoRaMacCryptoSetKey>
 800ba24:	4604      	mov	r4, r0
 800ba26:	2800      	cmp	r0, #0
 800ba28:	f000 817a 	beq.w	800bd20 <LoRaMacMibSetRequestConfirm+0x498>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800ba2c:	2411      	movs	r4, #17
 800ba2e:	e177      	b.n	800bd20 <LoRaMacMibSetRequestConfirm+0x498>
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 800ba30:	7900      	ldrb	r0, [r0, #4]
 800ba32:	4b4d      	ldr	r3, [pc, #308]	; (800bb68 <LoRaMacMibSetRequestConfirm+0x2e0>)
 800ba34:	f883 00fd 	strb.w	r0, [r3, #253]	; 0xfd
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800ba38:	4c4c      	ldr	r4, [pc, #304]	; (800bb6c <LoRaMacMibSetRequestConfirm+0x2e4>)
 800ba3a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ba3c:	4798      	blx	r3
            /* ST_WORAROUND_BEGIN: Required to avoid keeping the radio active after init */
            Radio.Sleep( );
 800ba3e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ba40:	4798      	blx	r3
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ba42:	2400      	movs	r4, #0
            /* ST_WORKAROUND_END */
            break;
 800ba44:	e16c      	b.n	800bd20 <LoRaMacMibSetRequestConfirm+0x498>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 800ba46:	7902      	ldrb	r2, [r0, #4]
 800ba48:	4b47      	ldr	r3, [pc, #284]	; (800bb68 <LoRaMacMibSetRequestConfirm+0x2e0>)
 800ba4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ba4e:	2400      	movs	r4, #0
            break;
 800ba50:	e166      	b.n	800bd20 <LoRaMacMibSetRequestConfirm+0x498>
        }
        /* ST_WORKAROUND_END */
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800ba52:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800ba56:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800ba5a:	4b43      	ldr	r3, [pc, #268]	; (800bb68 <LoRaMacMibSetRequestConfirm+0x2e0>)
 800ba5c:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800ba60:	f88d 2005 	strb.w	r2, [sp, #5]
            /* ST_WORAROUND_BEGIN: Check also the Rx Frequency parameter */
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 800ba64:	2207      	movs	r2, #7
 800ba66:	a901      	add	r1, sp, #4
 800ba68:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800ba6c:	f001 fbaa 	bl	800d1c4 <RegionVerify>
 800ba70:	b908      	cbnz	r0, 800ba76 <LoRaMacMibSetRequestConfirm+0x1ee>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ba72:	2403      	movs	r4, #3
 800ba74:	e154      	b.n	800bd20 <LoRaMacMibSetRequestConfirm+0x498>
            }
            else
            {
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 800ba76:	686b      	ldr	r3, [r5, #4]
 800ba78:	9301      	str	r3, [sp, #4]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 800ba7a:	2200      	movs	r2, #0
 800ba7c:	a901      	add	r1, sp, #4
 800ba7e:	4b3a      	ldr	r3, [pc, #232]	; (800bb68 <LoRaMacMibSetRequestConfirm+0x2e0>)
 800ba80:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800ba84:	f001 fb9e 	bl	800d1c4 <RegionVerify>
 800ba88:	2800      	cmp	r0, #0
 800ba8a:	f000 815e 	beq.w	800bd4a <LoRaMacMibSetRequestConfirm+0x4c2>
                {
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
                }
                else
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 800ba8e:	4b38      	ldr	r3, [pc, #224]	; (800bb70 <LoRaMacMibSetRequestConfirm+0x2e8>)
 800ba90:	3504      	adds	r5, #4
 800ba92:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ba96:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ba9a:	2400      	movs	r4, #0
 800ba9c:	e140      	b.n	800bd20 <LoRaMacMibSetRequestConfirm+0x498>
            /* ST_WORKAROUND_END */
            break;
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800ba9e:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800baa2:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800baa6:	4b30      	ldr	r3, [pc, #192]	; (800bb68 <LoRaMacMibSetRequestConfirm+0x2e0>)
 800baa8:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800baac:	f88d 2005 	strb.w	r2, [sp, #5]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800bab0:	2207      	movs	r2, #7
 800bab2:	a901      	add	r1, sp, #4
 800bab4:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800bab8:	f001 fb84 	bl	800d1c4 <RegionVerify>
 800babc:	2800      	cmp	r0, #0
 800babe:	f000 8146 	beq.w	800bd4e <LoRaMacMibSetRequestConfirm+0x4c6>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 800bac2:	4b2c      	ldr	r3, [pc, #176]	; (800bb74 <LoRaMacMibSetRequestConfirm+0x2ec>)
 800bac4:	3504      	adds	r5, #4
 800bac6:	e895 0003 	ldmia.w	r5, {r0, r1}
 800baca:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bace:	2400      	movs	r4, #0
 800bad0:	e126      	b.n	800bd20 <LoRaMacMibSetRequestConfirm+0x498>
            }
            break;
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800bad2:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800bad6:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800bada:	4b23      	ldr	r3, [pc, #140]	; (800bb68 <LoRaMacMibSetRequestConfirm+0x2e0>)
 800badc:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800bae0:	f88d 2005 	strb.w	r2, [sp, #5]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800bae4:	2207      	movs	r2, #7
 800bae6:	a901      	add	r1, sp, #4
 800bae8:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800baec:	f001 fb6a 	bl	800d1c4 <RegionVerify>
 800baf0:	2800      	cmp	r0, #0
 800baf2:	f000 812e 	beq.w	800bd52 <LoRaMacMibSetRequestConfirm+0x4ca>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 800baf6:	4b1c      	ldr	r3, [pc, #112]	; (800bb68 <LoRaMacMibSetRequestConfirm+0x2e0>)
 800baf8:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 800bafc:	3504      	adds	r5, #4
 800bafe:	e895 0003 	ldmia.w	r5, {r0, r1}
 800bb02:	e882 0003 	stmia.w	r2, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 800bb06:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800bb0a:	2b02      	cmp	r3, #2
 800bb0c:	d001      	beq.n	800bb12 <LoRaMacMibSetRequestConfirm+0x28a>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bb0e:	2400      	movs	r4, #0
 800bb10:	e106      	b.n	800bd20 <LoRaMacMibSetRequestConfirm+0x498>
                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 800bb12:	f1a2 036c 	sub.w	r3, r2, #108	; 0x6c
 800bb16:	f893 4110 	ldrb.w	r4, [r3, #272]	; 0x110
 800bb1a:	2c00      	cmp	r4, #0
 800bb1c:	f000 8100 	beq.w	800bd20 <LoRaMacMibSetRequestConfirm+0x498>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 800bb20:	4b12      	ldr	r3, [pc, #72]	; (800bb6c <LoRaMacMibSetRequestConfirm+0x2e4>)
 800bb22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb24:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 800bb26:	f7fe ff0f 	bl	800a948 <OpenContinuousRxCWindow>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bb2a:	2400      	movs	r4, #0
 800bb2c:	e0f8      	b.n	800bd20 <LoRaMacMibSetRequestConfirm+0x498>
            }
            break;
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800bb2e:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800bb32:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800bb36:	4b0c      	ldr	r3, [pc, #48]	; (800bb68 <LoRaMacMibSetRequestConfirm+0x2e0>)
 800bb38:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800bb3c:	f88d 2005 	strb.w	r2, [sp, #5]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800bb40:	2207      	movs	r2, #7
 800bb42:	a901      	add	r1, sp, #4
 800bb44:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800bb48:	f001 fb3c 	bl	800d1c4 <RegionVerify>
 800bb4c:	2800      	cmp	r0, #0
 800bb4e:	f000 8102 	beq.w	800bd56 <LoRaMacMibSetRequestConfirm+0x4ce>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 800bb52:	4b09      	ldr	r3, [pc, #36]	; (800bb78 <LoRaMacMibSetRequestConfirm+0x2f0>)
 800bb54:	3504      	adds	r5, #4
 800bb56:	e895 0003 	ldmia.w	r5, {r0, r1}
 800bb5a:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bb5e:	2400      	movs	r4, #0
 800bb60:	e0de      	b.n	800bd20 <LoRaMacMibSetRequestConfirm+0x498>
 800bb62:	bf00      	nop
 800bb64:	20000858 	.word	0x20000858
 800bb68:	20000d60 	.word	0x20000d60
 800bb6c:	08017b28 	.word	0x08017b28
 800bb70:	20000dc4 	.word	0x20000dc4
 800bb74:	20000e04 	.word	0x20000e04
 800bb78:	20000e0c 	.word	0x20000e0c
            }
            break;
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 800bb7c:	6843      	ldr	r3, [r0, #4]
 800bb7e:	9302      	str	r3, [sp, #8]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 800bb80:	2301      	movs	r3, #1
 800bb82:	f88d 300c 	strb.w	r3, [sp, #12]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 800bb86:	a902      	add	r1, sp, #8
 800bb88:	4b7c      	ldr	r3, [pc, #496]	; (800bd7c <LoRaMacMibSetRequestConfirm+0x4f4>)
 800bb8a:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800bb8e:	f001 fb2c 	bl	800d1ea <RegionChanMaskSet>
 800bb92:	2800      	cmp	r0, #0
 800bb94:	f000 80e1 	beq.w	800bd5a <LoRaMacMibSetRequestConfirm+0x4d2>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bb98:	2400      	movs	r4, #0
 800bb9a:	e0c1      	b.n	800bd20 <LoRaMacMibSetRequestConfirm+0x498>
            }
            break;
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 800bb9c:	6843      	ldr	r3, [r0, #4]
 800bb9e:	9302      	str	r3, [sp, #8]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 800bba0:	2300      	movs	r3, #0
 800bba2:	f88d 300c 	strb.w	r3, [sp, #12]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 800bba6:	a902      	add	r1, sp, #8
 800bba8:	4b74      	ldr	r3, [pc, #464]	; (800bd7c <LoRaMacMibSetRequestConfirm+0x4f4>)
 800bbaa:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800bbae:	f001 fb1c 	bl	800d1ea <RegionChanMaskSet>
 800bbb2:	2800      	cmp	r0, #0
 800bbb4:	f000 80d3 	beq.w	800bd5e <LoRaMacMibSetRequestConfirm+0x4d6>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bbb8:	2400      	movs	r4, #0
 800bbba:	e0b1      	b.n	800bd20 <LoRaMacMibSetRequestConfirm+0x498>
            }
            break;
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 800bbbc:	7902      	ldrb	r2, [r0, #4]
 800bbbe:	1e53      	subs	r3, r2, #1
 800bbc0:	b2db      	uxtb	r3, r3
 800bbc2:	2b0e      	cmp	r3, #14
 800bbc4:	f200 80cd 	bhi.w	800bd62 <LoRaMacMibSetRequestConfirm+0x4da>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 800bbc8:	4b6c      	ldr	r3, [pc, #432]	; (800bd7c <LoRaMacMibSetRequestConfirm+0x4f4>)
 800bbca:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bbce:	2400      	movs	r4, #0
 800bbd0:	e0a6      	b.n	800bd20 <LoRaMacMibSetRequestConfirm+0x498>
            }
            break;
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 800bbd2:	6842      	ldr	r2, [r0, #4]
 800bbd4:	4b69      	ldr	r3, [pc, #420]	; (800bd7c <LoRaMacMibSetRequestConfirm+0x4f4>)
 800bbd6:	64da      	str	r2, [r3, #76]	; 0x4c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bbd8:	2400      	movs	r4, #0
            break;
 800bbda:	e0a1      	b.n	800bd20 <LoRaMacMibSetRequestConfirm+0x498>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 800bbdc:	6842      	ldr	r2, [r0, #4]
 800bbde:	4b67      	ldr	r3, [pc, #412]	; (800bd7c <LoRaMacMibSetRequestConfirm+0x4f4>)
 800bbe0:	651a      	str	r2, [r3, #80]	; 0x50
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bbe2:	2400      	movs	r4, #0
            break;
 800bbe4:	e09c      	b.n	800bd20 <LoRaMacMibSetRequestConfirm+0x498>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 800bbe6:	6842      	ldr	r2, [r0, #4]
 800bbe8:	4b64      	ldr	r3, [pc, #400]	; (800bd7c <LoRaMacMibSetRequestConfirm+0x4f4>)
 800bbea:	655a      	str	r2, [r3, #84]	; 0x54
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bbec:	2400      	movs	r4, #0
            break;
 800bbee:	e097      	b.n	800bd20 <LoRaMacMibSetRequestConfirm+0x498>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 800bbf0:	6842      	ldr	r2, [r0, #4]
 800bbf2:	4b62      	ldr	r3, [pc, #392]	; (800bd7c <LoRaMacMibSetRequestConfirm+0x4f4>)
 800bbf4:	659a      	str	r2, [r3, #88]	; 0x58
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bbf6:	2400      	movs	r4, #0
            break;
 800bbf8:	e092      	b.n	800bd20 <LoRaMacMibSetRequestConfirm+0x498>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 800bbfa:	6842      	ldr	r2, [r0, #4]
 800bbfc:	4b5f      	ldr	r3, [pc, #380]	; (800bd7c <LoRaMacMibSetRequestConfirm+0x4f4>)
 800bbfe:	65da      	str	r2, [r3, #92]	; 0x5c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bc00:	2400      	movs	r4, #0
            break;
 800bc02:	e08d      	b.n	800bd20 <LoRaMacMibSetRequestConfirm+0x498>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 800bc04:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800bc08:	f88d 3004 	strb.w	r3, [sp, #4]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 800bc0c:	2206      	movs	r2, #6
 800bc0e:	a901      	add	r1, sp, #4
 800bc10:	4b5a      	ldr	r3, [pc, #360]	; (800bd7c <LoRaMacMibSetRequestConfirm+0x4f4>)
 800bc12:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800bc16:	f001 fad5 	bl	800d1c4 <RegionVerify>
 800bc1a:	2800      	cmp	r0, #0
 800bc1c:	f000 80a3 	beq.w	800bd66 <LoRaMacMibSetRequestConfirm+0x4de>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 800bc20:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800bc24:	4b55      	ldr	r3, [pc, #340]	; (800bd7c <LoRaMacMibSetRequestConfirm+0x4f4>)
 800bc26:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bc2a:	2400      	movs	r4, #0
 800bc2c:	e078      	b.n	800bd20 <LoRaMacMibSetRequestConfirm+0x498>
            }
            break;
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 800bc2e:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800bc32:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800bc36:	4b51      	ldr	r3, [pc, #324]	; (800bd7c <LoRaMacMibSetRequestConfirm+0x4f4>)
 800bc38:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800bc3c:	f88d 2006 	strb.w	r2, [sp, #6]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 800bc40:	2205      	movs	r2, #5
 800bc42:	a901      	add	r1, sp, #4
 800bc44:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800bc48:	f001 fabc 	bl	800d1c4 <RegionVerify>
 800bc4c:	2800      	cmp	r0, #0
 800bc4e:	f000 808c 	beq.w	800bd6a <LoRaMacMibSetRequestConfirm+0x4e2>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 800bc52:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800bc56:	4b49      	ldr	r3, [pc, #292]	; (800bd7c <LoRaMacMibSetRequestConfirm+0x4f4>)
 800bc58:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bc5c:	2400      	movs	r4, #0
 800bc5e:	e05f      	b.n	800bd20 <LoRaMacMibSetRequestConfirm+0x498>
            }
            break;
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 800bc60:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800bc64:	f88d 3004 	strb.w	r3, [sp, #4]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 800bc68:	220a      	movs	r2, #10
 800bc6a:	a901      	add	r1, sp, #4
 800bc6c:	4b43      	ldr	r3, [pc, #268]	; (800bd7c <LoRaMacMibSetRequestConfirm+0x4f4>)
 800bc6e:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800bc72:	f001 faa7 	bl	800d1c4 <RegionVerify>
 800bc76:	2800      	cmp	r0, #0
 800bc78:	d079      	beq.n	800bd6e <LoRaMacMibSetRequestConfirm+0x4e6>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 800bc7a:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800bc7e:	4b3f      	ldr	r3, [pc, #252]	; (800bd7c <LoRaMacMibSetRequestConfirm+0x4f4>)
 800bc80:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bc84:	2400      	movs	r4, #0
 800bc86:	e04b      	b.n	800bd20 <LoRaMacMibSetRequestConfirm+0x498>
            }
            break;
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 800bc88:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800bc8c:	f88d 3004 	strb.w	r3, [sp, #4]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 800bc90:	2209      	movs	r2, #9
 800bc92:	a901      	add	r1, sp, #4
 800bc94:	4b39      	ldr	r3, [pc, #228]	; (800bd7c <LoRaMacMibSetRequestConfirm+0x4f4>)
 800bc96:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800bc9a:	f001 fa93 	bl	800d1c4 <RegionVerify>
 800bc9e:	2800      	cmp	r0, #0
 800bca0:	d067      	beq.n	800bd72 <LoRaMacMibSetRequestConfirm+0x4ea>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 800bca2:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800bca6:	4b35      	ldr	r3, [pc, #212]	; (800bd7c <LoRaMacMibSetRequestConfirm+0x4f4>)
 800bca8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bcac:	2400      	movs	r4, #0
 800bcae:	e037      	b.n	800bd20 <LoRaMacMibSetRequestConfirm+0x498>
            }
            break;
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 800bcb0:	6842      	ldr	r2, [r0, #4]
 800bcb2:	4b32      	ldr	r3, [pc, #200]	; (800bd7c <LoRaMacMibSetRequestConfirm+0x4f4>)
 800bcb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800bcb8:	645a      	str	r2, [r3, #68]	; 0x44
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bcba:	2400      	movs	r4, #0
            break;
 800bcbc:	e030      	b.n	800bd20 <LoRaMacMibSetRequestConfirm+0x498>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 800bcbe:	7902      	ldrb	r2, [r0, #4]
 800bcc0:	4b2e      	ldr	r3, [pc, #184]	; (800bd7c <LoRaMacMibSetRequestConfirm+0x4f4>)
 800bcc2:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
 800bcc6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bcca:	2400      	movs	r4, #0
            break;
 800bccc:	e028      	b.n	800bd20 <LoRaMacMibSetRequestConfirm+0x498>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 800bcce:	6842      	ldr	r2, [r0, #4]
 800bcd0:	4b2a      	ldr	r3, [pc, #168]	; (800bd7c <LoRaMacMibSetRequestConfirm+0x4f4>)
 800bcd2:	67da      	str	r2, [r3, #124]	; 0x7c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bcd4:	2400      	movs	r4, #0
            break;
 800bcd6:	e023      	b.n	800bd20 <LoRaMacMibSetRequestConfirm+0x498>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 800bcd8:	6842      	ldr	r2, [r0, #4]
 800bcda:	4b28      	ldr	r3, [pc, #160]	; (800bd7c <LoRaMacMibSetRequestConfirm+0x4f4>)
 800bcdc:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bce0:	2400      	movs	r4, #0
            break;
 800bce2:	e01d      	b.n	800bd20 <LoRaMacMibSetRequestConfirm+0x498>
        }
        case MIB_NVM_CTXS:
        {
            if( mibSet->Param.Contexts != 0 )
 800bce4:	6840      	ldr	r0, [r0, #4]
 800bce6:	2800      	cmp	r0, #0
 800bce8:	d045      	beq.n	800bd76 <LoRaMacMibSetRequestConfirm+0x4ee>
            {
                status = RestoreNvmData( mibSet->Param.Contexts );
 800bcea:	f7fe fda1 	bl	800a830 <RestoreNvmData>
 800bcee:	4604      	mov	r4, r0
 800bcf0:	e016      	b.n	800bd20 <LoRaMacMibSetRequestConfirm+0x498>
            }
            break;
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 800bcf2:	7983      	ldrb	r3, [r0, #6]
 800bcf4:	2b01      	cmp	r3, #1
 800bcf6:	d901      	bls.n	800bcfc <LoRaMacMibSetRequestConfirm+0x474>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800bcf8:	2403      	movs	r4, #3
 800bcfa:	e011      	b.n	800bd20 <LoRaMacMibSetRequestConfirm+0x498>
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 800bcfc:	6842      	ldr	r2, [r0, #4]
 800bcfe:	4b1f      	ldr	r3, [pc, #124]	; (800bd7c <LoRaMacMibSetRequestConfirm+0x4f4>)
 800bd00:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 800bd04:	6840      	ldr	r0, [r0, #4]
 800bd06:	f000 fee5 	bl	800cad4 <LoRaMacCryptoSetLrWanVersion>
 800bd0a:	4604      	mov	r4, r0
 800bd0c:	b140      	cbz	r0, 800bd20 <LoRaMacMibSetRequestConfirm+0x498>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800bd0e:	2411      	movs	r4, #17
 800bd10:	e006      	b.n	800bd20 <LoRaMacMibSetRequestConfirm+0x498>
            }
            break;
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 800bd12:	f000 fa73 	bl	800c1fc <LoRaMacMibClassBSetRequestConfirm>
 800bd16:	4604      	mov	r4, r0
            break;
 800bd18:	e002      	b.n	800bd20 <LoRaMacMibSetRequestConfirm+0x498>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800bd1a:	2403      	movs	r4, #3
 800bd1c:	e000      	b.n	800bd20 <LoRaMacMibSetRequestConfirm+0x498>
        return LORAMAC_STATUS_BUSY;
 800bd1e:	2401      	movs	r4, #1
        }
    }
    return status;
}
 800bd20:	4620      	mov	r0, r4
 800bd22:	b005      	add	sp, #20
 800bd24:	bd30      	pop	{r4, r5, pc}
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800bd26:	2403      	movs	r4, #3
 800bd28:	e7fa      	b.n	800bd20 <LoRaMacMibSetRequestConfirm+0x498>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800bd2a:	2403      	movs	r4, #3
 800bd2c:	e7f8      	b.n	800bd20 <LoRaMacMibSetRequestConfirm+0x498>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800bd2e:	2403      	movs	r4, #3
 800bd30:	e7f6      	b.n	800bd20 <LoRaMacMibSetRequestConfirm+0x498>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800bd32:	2403      	movs	r4, #3
 800bd34:	e7f4      	b.n	800bd20 <LoRaMacMibSetRequestConfirm+0x498>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800bd36:	2403      	movs	r4, #3
 800bd38:	e7f2      	b.n	800bd20 <LoRaMacMibSetRequestConfirm+0x498>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800bd3a:	2403      	movs	r4, #3
 800bd3c:	e7f0      	b.n	800bd20 <LoRaMacMibSetRequestConfirm+0x498>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800bd3e:	2403      	movs	r4, #3
 800bd40:	e7ee      	b.n	800bd20 <LoRaMacMibSetRequestConfirm+0x498>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800bd42:	2403      	movs	r4, #3
 800bd44:	e7ec      	b.n	800bd20 <LoRaMacMibSetRequestConfirm+0x498>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800bd46:	2403      	movs	r4, #3
 800bd48:	e7ea      	b.n	800bd20 <LoRaMacMibSetRequestConfirm+0x498>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 800bd4a:	2403      	movs	r4, #3
 800bd4c:	e7e8      	b.n	800bd20 <LoRaMacMibSetRequestConfirm+0x498>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800bd4e:	2403      	movs	r4, #3
 800bd50:	e7e6      	b.n	800bd20 <LoRaMacMibSetRequestConfirm+0x498>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800bd52:	2403      	movs	r4, #3
 800bd54:	e7e4      	b.n	800bd20 <LoRaMacMibSetRequestConfirm+0x498>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800bd56:	2403      	movs	r4, #3
 800bd58:	e7e2      	b.n	800bd20 <LoRaMacMibSetRequestConfirm+0x498>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800bd5a:	2403      	movs	r4, #3
 800bd5c:	e7e0      	b.n	800bd20 <LoRaMacMibSetRequestConfirm+0x498>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800bd5e:	2403      	movs	r4, #3
 800bd60:	e7de      	b.n	800bd20 <LoRaMacMibSetRequestConfirm+0x498>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800bd62:	2403      	movs	r4, #3
 800bd64:	e7dc      	b.n	800bd20 <LoRaMacMibSetRequestConfirm+0x498>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800bd66:	2403      	movs	r4, #3
 800bd68:	e7da      	b.n	800bd20 <LoRaMacMibSetRequestConfirm+0x498>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800bd6a:	2403      	movs	r4, #3
 800bd6c:	e7d8      	b.n	800bd20 <LoRaMacMibSetRequestConfirm+0x498>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800bd6e:	2403      	movs	r4, #3
 800bd70:	e7d6      	b.n	800bd20 <LoRaMacMibSetRequestConfirm+0x498>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800bd72:	2403      	movs	r4, #3
 800bd74:	e7d4      	b.n	800bd20 <LoRaMacMibSetRequestConfirm+0x498>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800bd76:	2403      	movs	r4, #3
 800bd78:	e7d2      	b.n	800bd20 <LoRaMacMibSetRequestConfirm+0x498>
 800bd7a:	bf00      	nop
 800bd7c:	20000d60 	.word	0x20000d60

0800bd80 <LoRaMacMlmeRequest>:
    }
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 800bd80:	b570      	push	{r4, r5, r6, lr}
 800bd82:	b082      	sub	sp, #8
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800bd84:	2300      	movs	r3, #0
 800bd86:	f8ad 3000 	strh.w	r3, [sp]

    if( mlmeRequest == NULL )
 800bd8a:	2800      	cmp	r0, #0
 800bd8c:	f000 80c5 	beq.w	800bf1a <LoRaMacMlmeRequest+0x19a>
 800bd90:	4605      	mov	r5, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    if( LoRaMacIsBusy( ) == true )
 800bd92:	f7ff f9cf 	bl	800b134 <LoRaMacIsBusy>
 800bd96:	b118      	cbz	r0, 800bda0 <LoRaMacMlmeRequest+0x20>
    {
        return LORAMAC_STATUS_BUSY;
 800bd98:	2401      	movs	r4, #1
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
    }
    return status;
}
 800bd9a:	4620      	mov	r0, r4
 800bd9c:	b002      	add	sp, #8
 800bd9e:	bd70      	pop	{r4, r5, r6, pc}
    if( LoRaMacConfirmQueueIsFull( ) == true )
 800bda0:	f000 fcd2 	bl	800c748 <LoRaMacConfirmQueueIsFull>
 800bda4:	b108      	cbz	r0, 800bdaa <LoRaMacMlmeRequest+0x2a>
        return LORAMAC_STATUS_BUSY;
 800bda6:	2401      	movs	r4, #1
 800bda8:	e7f7      	b.n	800bd9a <LoRaMacMlmeRequest+0x1a>
    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800bdaa:	f000 fcc7 	bl	800c73c <LoRaMacConfirmQueueGetCnt>
 800bdae:	b1f8      	cbz	r0, 800bdf0 <LoRaMacMlmeRequest+0x70>
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800bdb0:	4b5b      	ldr	r3, [pc, #364]	; (800bf20 <LoRaMacMlmeRequest+0x1a0>)
 800bdb2:	2101      	movs	r1, #1
 800bdb4:	f883 144d 	strb.w	r1, [r3, #1101]	; 0x44d
    MacCtx.MacFlags.Bits.MlmeReq = 1;
 800bdb8:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
 800bdbc:	f042 0204 	orr.w	r2, r2, #4
 800bdc0:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
    queueElement.Request = mlmeRequest->Type;
 800bdc4:	782b      	ldrb	r3, [r5, #0]
 800bdc6:	f88d 3004 	strb.w	r3, [sp, #4]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800bdca:	f88d 1005 	strb.w	r1, [sp, #5]
    queueElement.RestrictCommonReadyToHandle = false;
 800bdce:	2200      	movs	r2, #0
 800bdd0:	f88d 2007 	strb.w	r2, [sp, #7]
    switch( mlmeRequest->Type )
 800bdd4:	461c      	mov	r4, r3
 800bdd6:	3b01      	subs	r3, #1
 800bdd8:	2b0d      	cmp	r3, #13
 800bdda:	f200 8084 	bhi.w	800bee6 <LoRaMacMlmeRequest+0x166>
 800bdde:	e8df f003 	tbb	[pc, r3]
 800bde2:	820d      	.short	0x820d
 800bde4:	423d3382 	.word	0x423d3382
 800bde8:	4b828282 	.word	0x4b828282
 800bdec:	6a547382 	.word	0x6a547382
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 800bdf0:	2214      	movs	r2, #20
 800bdf2:	2100      	movs	r1, #0
 800bdf4:	484b      	ldr	r0, [pc, #300]	; (800bf24 <LoRaMacMlmeRequest+0x1a4>)
 800bdf6:	f003 fb8c 	bl	800f512 <memset1>
 800bdfa:	e7d9      	b.n	800bdb0 <LoRaMacMlmeRequest+0x30>
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 800bdfc:	4b48      	ldr	r3, [pc, #288]	; (800bf20 <LoRaMacMlmeRequest+0x1a0>)
 800bdfe:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800be02:	f013 0f20 	tst.w	r3, #32
 800be06:	d1c8      	bne.n	800bd9a <LoRaMacMlmeRequest+0x1a>
            ResetMacParameters( );
 800be08:	f7fe fec6 	bl	800ab98 <ResetMacParameters>
            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 800be0c:	4c46      	ldr	r4, [pc, #280]	; (800bf28 <LoRaMacMlmeRequest+0x1a8>)
 800be0e:	2200      	movs	r2, #0
 800be10:	f995 1004 	ldrsb.w	r1, [r5, #4]
 800be14:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800be18:	f001 fa49 	bl	800d2ae <RegionAlternateDr>
 800be1c:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 800be20:	2307      	movs	r3, #7
 800be22:	f88d 3005 	strb.w	r3, [sp, #5]
            status = SendReJoinReq( JOIN_REQ );
 800be26:	20ff      	movs	r0, #255	; 0xff
 800be28:	f7fe ffde 	bl	800ade8 <SendReJoinReq>
            if( status != LORAMAC_STATUS_OK )
 800be2c:	4604      	mov	r4, r0
 800be2e:	2800      	cmp	r0, #0
 800be30:	d05a      	beq.n	800bee8 <LoRaMacMlmeRequest+0x168>
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 800be32:	4e3d      	ldr	r6, [pc, #244]	; (800bf28 <LoRaMacMlmeRequest+0x1a8>)
 800be34:	2201      	movs	r2, #1
 800be36:	f995 1004 	ldrsb.w	r1, [r5, #4]
 800be3a:	f896 0040 	ldrb.w	r0, [r6, #64]	; 0x40
 800be3e:	f001 fa36 	bl	800d2ae <RegionAlternateDr>
 800be42:	f886 0039 	strb.w	r0, [r6, #57]	; 0x39
 800be46:	e04f      	b.n	800bee8 <LoRaMacMlmeRequest+0x168>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800be48:	2200      	movs	r2, #0
 800be4a:	4669      	mov	r1, sp
 800be4c:	2002      	movs	r0, #2
 800be4e:	f000 fa73 	bl	800c338 <LoRaMacCommandsAddCmd>
 800be52:	4604      	mov	r4, r0
 800be54:	2800      	cmp	r0, #0
 800be56:	d047      	beq.n	800bee8 <LoRaMacMlmeRequest+0x168>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800be58:	2413      	movs	r4, #19
 800be5a:	e045      	b.n	800bee8 <LoRaMacMlmeRequest+0x168>
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 800be5c:	88a8      	ldrh	r0, [r5, #4]
 800be5e:	f7fe ffed 	bl	800ae3c <SetTxContinuousWave>
 800be62:	4604      	mov	r4, r0
            break;
 800be64:	e040      	b.n	800bee8 <LoRaMacMlmeRequest+0x168>
            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 800be66:	f995 200c 	ldrsb.w	r2, [r5, #12]
 800be6a:	b2d2      	uxtb	r2, r2
 800be6c:	68a9      	ldr	r1, [r5, #8]
 800be6e:	88a8      	ldrh	r0, [r5, #4]
 800be70:	f7fd f88e 	bl	8008f90 <SetTxContinuousWave1>
 800be74:	4604      	mov	r4, r0
            break;
 800be76:	e037      	b.n	800bee8 <LoRaMacMlmeRequest+0x168>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800be78:	2200      	movs	r2, #0
 800be7a:	4669      	mov	r1, sp
 800be7c:	200d      	movs	r0, #13
 800be7e:	f000 fa5b 	bl	800c338 <LoRaMacCommandsAddCmd>
 800be82:	4604      	mov	r4, r0
 800be84:	b380      	cbz	r0, 800bee8 <LoRaMacMlmeRequest+0x168>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800be86:	2413      	movs	r4, #19
 800be88:	e02e      	b.n	800bee8 <LoRaMacMlmeRequest+0x168>
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 800be8a:	4b27      	ldr	r3, [pc, #156]	; (800bf28 <LoRaMacMlmeRequest+0x1a8>)
 800be8c:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800be90:	b10b      	cbz	r3, 800be96 <LoRaMacMlmeRequest+0x116>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800be92:	2402      	movs	r4, #2
 800be94:	e028      	b.n	800bee8 <LoRaMacMlmeRequest+0x168>
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 800be96:	792c      	ldrb	r4, [r5, #4]
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 800be98:	f004 0007 	and.w	r0, r4, #7
 800be9c:	f000 f9a7 	bl	800c1ee <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 800bea0:	f88d 4000 	strb.w	r4, [sp]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 800bea4:	2201      	movs	r2, #1
 800bea6:	4669      	mov	r1, sp
 800bea8:	2010      	movs	r0, #16
 800beaa:	f000 fa45 	bl	800c338 <LoRaMacCommandsAddCmd>
 800beae:	4604      	mov	r4, r0
 800beb0:	b1d0      	cbz	r0, 800bee8 <LoRaMacMlmeRequest+0x168>
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800beb2:	2413      	movs	r4, #19
 800beb4:	e018      	b.n	800bee8 <LoRaMacMlmeRequest+0x168>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800beb6:	2200      	movs	r2, #0
 800beb8:	4669      	mov	r1, sp
 800beba:	2012      	movs	r0, #18
 800bebc:	f000 fa3c 	bl	800c338 <LoRaMacCommandsAddCmd>
 800bec0:	4604      	mov	r4, r0
 800bec2:	b188      	cbz	r0, 800bee8 <LoRaMacMlmeRequest+0x168>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800bec4:	2413      	movs	r4, #19
 800bec6:	e00f      	b.n	800bee8 <LoRaMacMlmeRequest+0x168>
            queueElement.RestrictCommonReadyToHandle = true;
 800bec8:	2301      	movs	r3, #1
 800beca:	f88d 3007 	strb.w	r3, [sp, #7]
            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 800bece:	f000 f97f 	bl	800c1d0 <LoRaMacClassBIsAcquisitionInProgress>
 800bed2:	b108      	cbz	r0, 800bed8 <LoRaMacMlmeRequest+0x158>
                status = LORAMAC_STATUS_BUSY;
 800bed4:	2401      	movs	r4, #1
 800bed6:	e007      	b.n	800bee8 <LoRaMacMlmeRequest+0x168>
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 800bed8:	f000 f977 	bl	800c1ca <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 800bedc:	2000      	movs	r0, #0
 800bede:	f000 f979 	bl	800c1d4 <LoRaMacClassBBeaconTimerEvent>
                status = LORAMAC_STATUS_OK;
 800bee2:	2400      	movs	r4, #0
 800bee4:	e000      	b.n	800bee8 <LoRaMacMlmeRequest+0x168>
    switch( mlmeRequest->Type )
 800bee6:	2402      	movs	r4, #2
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800bee8:	4b0d      	ldr	r3, [pc, #52]	; (800bf20 <LoRaMacMlmeRequest+0x1a0>)
 800beea:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 800beee:	612b      	str	r3, [r5, #16]
    if( status != LORAMAC_STATUS_OK )
 800bef0:	b17c      	cbz	r4, 800bf12 <LoRaMacMlmeRequest+0x192>
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800bef2:	f000 fc23 	bl	800c73c <LoRaMacConfirmQueueGetCnt>
 800bef6:	2800      	cmp	r0, #0
 800bef8:	f47f af4f 	bne.w	800bd9a <LoRaMacMlmeRequest+0x1a>
            MacCtx.NodeAckRequested = false;
 800befc:	4b08      	ldr	r3, [pc, #32]	; (800bf20 <LoRaMacMlmeRequest+0x1a0>)
 800befe:	2100      	movs	r1, #0
 800bf00:	f883 1414 	strb.w	r1, [r3, #1044]	; 0x414
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800bf04:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
 800bf08:	f361 0282 	bfi	r2, r1, #2, #1
 800bf0c:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
 800bf10:	e743      	b.n	800bd9a <LoRaMacMlmeRequest+0x1a>
        LoRaMacConfirmQueueAdd( &queueElement );
 800bf12:	a801      	add	r0, sp, #4
 800bf14:	f000 fb4e 	bl	800c5b4 <LoRaMacConfirmQueueAdd>
 800bf18:	e73f      	b.n	800bd9a <LoRaMacMlmeRequest+0x1a>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800bf1a:	2403      	movs	r4, #3
 800bf1c:	e73d      	b.n	800bd9a <LoRaMacMlmeRequest+0x1a>
 800bf1e:	bf00      	nop
 800bf20:	20000858 	.word	0x20000858
 800bf24:	20000ca4 	.word	0x20000ca4
 800bf28:	20000d60 	.word	0x20000d60

0800bf2c <LoRaMacMcpsRequest>:
    /* ST_WORKAROUND_END */
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
    bool readyToSend = false;

    if( mcpsRequest == NULL )
 800bf2c:	2800      	cmp	r0, #0
 800bf2e:	f000 80b0 	beq.w	800c092 <LoRaMacMcpsRequest+0x166>
{
 800bf32:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf36:	b088      	sub	sp, #32
 800bf38:	460d      	mov	r5, r1
 800bf3a:	f04f 0800 	mov.w	r8, #0
 800bf3e:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    if( LoRaMacIsBusy( ) == true )
 800bf40:	f7ff f8f8 	bl	800b134 <LoRaMacIsBusy>
 800bf44:	4606      	mov	r6, r0
 800bf46:	b118      	cbz	r0, 800bf50 <LoRaMacMcpsRequest+0x24>
    {
        return LORAMAC_STATUS_BUSY;
 800bf48:	2001      	movs	r0, #1

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;

    return status;
}
 800bf4a:	b008      	add	sp, #32
 800bf4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    macHdr.Value = 0;
 800bf50:	4641      	mov	r1, r8
 800bf52:	f88d 8010 	strb.w	r8, [sp, #16]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 800bf56:	4f51      	ldr	r7, [pc, #324]	; (800c09c <LoRaMacMcpsRequest+0x170>)
 800bf58:	2214      	movs	r2, #20
 800bf5a:	f507 6087 	add.w	r0, r7, #1080	; 0x438
 800bf5e:	f003 fad8 	bl	800f512 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800bf62:	2301      	movs	r3, #1
 800bf64:	f887 3439 	strb.w	r3, [r7, #1081]	; 0x439
    MacCtx.AckTimeoutRetriesCounter = 1;
 800bf68:	f887 3412 	strb.w	r3, [r7, #1042]	; 0x412
    switch( mcpsRequest->Type )
 800bf6c:	7823      	ldrb	r3, [r4, #0]
 800bf6e:	2b01      	cmp	r3, #1
 800bf70:	d059      	beq.n	800c026 <LoRaMacMcpsRequest+0xfa>
 800bf72:	2b03      	cmp	r3, #3
 800bf74:	d06f      	beq.n	800c056 <LoRaMacMcpsRequest+0x12a>
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d042      	beq.n	800c000 <LoRaMacMcpsRequest+0xd4>
 800bf7a:	2700      	movs	r7, #0
 800bf7c:	46ba      	mov	sl, r7
 800bf7e:	46b9      	mov	r9, r7
    getPhy.Attribute = PHY_MIN_TX_DR;
 800bf80:	2302      	movs	r3, #2
 800bf82:	f88d 3018 	strb.w	r3, [sp, #24]
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800bf86:	4b46      	ldr	r3, [pc, #280]	; (800c0a0 <LoRaMacMcpsRequest+0x174>)
 800bf88:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800bf8c:	f88d 201a 	strb.w	r2, [sp, #26]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800bf90:	a906      	add	r1, sp, #24
 800bf92:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800bf96:	f001 f8f4 	bl	800d182 <RegionGetPhyParam>
 800bf9a:	9005      	str	r0, [sp, #20]
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 800bf9c:	b240      	sxtb	r0, r0
 800bf9e:	42b8      	cmp	r0, r7
 800bfa0:	bfb8      	it	lt
 800bfa2:	4638      	movlt	r0, r7
    if( readyToSend == true )
 800bfa4:	2e00      	cmp	r6, #0
 800bfa6:	d06e      	beq.n	800c086 <LoRaMacMcpsRequest+0x15a>
        if( Nvm.MacGroup2.AdrCtrlOn == false )
 800bfa8:	4b3d      	ldr	r3, [pc, #244]	; (800c0a0 <LoRaMacMcpsRequest+0x174>)
 800bfaa:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 800bfae:	b99b      	cbnz	r3, 800bfd8 <LoRaMacMcpsRequest+0xac>
            verify.DatarateParams.Datarate = datarate;
 800bfb0:	f88d 000c 	strb.w	r0, [sp, #12]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800bfb4:	4b3a      	ldr	r3, [pc, #232]	; (800c0a0 <LoRaMacMcpsRequest+0x174>)
 800bfb6:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800bfba:	f88d 200e 	strb.w	r2, [sp, #14]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 800bfbe:	2205      	movs	r2, #5
 800bfc0:	a903      	add	r1, sp, #12
 800bfc2:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800bfc6:	f001 f8fd 	bl	800d1c4 <RegionVerify>
 800bfca:	2800      	cmp	r0, #0
 800bfcc:	d063      	beq.n	800c096 <LoRaMacMcpsRequest+0x16a>
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 800bfce:	f99d 200c 	ldrsb.w	r2, [sp, #12]
 800bfd2:	4b33      	ldr	r3, [pc, #204]	; (800c0a0 <LoRaMacMcpsRequest+0x174>)
 800bfd4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 800bfd8:	9500      	str	r5, [sp, #0]
 800bfda:	4643      	mov	r3, r8
 800bfdc:	4652      	mov	r2, sl
 800bfde:	4649      	mov	r1, r9
 800bfe0:	a804      	add	r0, sp, #16
 800bfe2:	f7ff f817 	bl	800b014 <Send>
        if( status == LORAMAC_STATUS_OK )
 800bfe6:	2800      	cmp	r0, #0
 800bfe8:	d148      	bne.n	800c07c <LoRaMacMcpsRequest+0x150>
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 800bfea:	7822      	ldrb	r2, [r4, #0]
 800bfec:	4b2b      	ldr	r3, [pc, #172]	; (800c09c <LoRaMacMcpsRequest+0x170>)
 800bfee:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
            MacCtx.MacFlags.Bits.McpsReq = 1;
 800bff2:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
 800bff6:	f042 0201 	orr.w	r2, r2, #1
 800bffa:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
 800bffe:	e043      	b.n	800c088 <LoRaMacMcpsRequest+0x15c>
            MacCtx.AckTimeoutRetries = 1;
 800c000:	2601      	movs	r6, #1
 800c002:	f887 6411 	strb.w	r6, [r7, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 800c006:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800c00a:	2202      	movs	r2, #2
 800c00c:	f362 1347 	bfi	r3, r2, #5, #3
 800c010:	f88d 3010 	strb.w	r3, [sp, #16]
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
 800c014:	f894 9004 	ldrb.w	r9, [r4, #4]
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
 800c018:	f8d4 a008 	ldr.w	sl, [r4, #8]
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
 800c01c:	f8b4 800c 	ldrh.w	r8, [r4, #12]
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
 800c020:	f994 700e 	ldrsb.w	r7, [r4, #14]
            break;
 800c024:	e7ac      	b.n	800bf80 <LoRaMacMcpsRequest+0x54>
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 800c026:	7be3      	ldrb	r3, [r4, #15]
 800c028:	2b08      	cmp	r3, #8
 800c02a:	bf28      	it	cs
 800c02c:	2308      	movcs	r3, #8
 800c02e:	4a1b      	ldr	r2, [pc, #108]	; (800c09c <LoRaMacMcpsRequest+0x170>)
 800c030:	f882 3411 	strb.w	r3, [r2, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 800c034:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800c038:	2204      	movs	r2, #4
 800c03a:	f362 1347 	bfi	r3, r2, #5, #3
 800c03e:	f88d 3010 	strb.w	r3, [sp, #16]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 800c042:	f894 9004 	ldrb.w	r9, [r4, #4]
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 800c046:	f8d4 a008 	ldr.w	sl, [r4, #8]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 800c04a:	f8b4 800c 	ldrh.w	r8, [r4, #12]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 800c04e:	f994 700e 	ldrsb.w	r7, [r4, #14]
            readyToSend = true;
 800c052:	2601      	movs	r6, #1
            break;
 800c054:	e794      	b.n	800bf80 <LoRaMacMcpsRequest+0x54>
            MacCtx.AckTimeoutRetries = 1;
 800c056:	2601      	movs	r6, #1
 800c058:	4b10      	ldr	r3, [pc, #64]	; (800c09c <LoRaMacMcpsRequest+0x170>)
 800c05a:	f883 6411 	strb.w	r6, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 800c05e:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800c062:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 800c066:	f88d 3010 	strb.w	r3, [sp, #16]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 800c06a:	f8d4 a004 	ldr.w	sl, [r4, #4]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 800c06e:	f8b4 8008 	ldrh.w	r8, [r4, #8]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 800c072:	f994 700a 	ldrsb.w	r7, [r4, #10]
    uint8_t fPort = 0;
 800c076:	f04f 0900 	mov.w	r9, #0
            break;
 800c07a:	e781      	b.n	800bf80 <LoRaMacMcpsRequest+0x54>
            MacCtx.NodeAckRequested = false;
 800c07c:	4b07      	ldr	r3, [pc, #28]	; (800c09c <LoRaMacMcpsRequest+0x170>)
 800c07e:	2200      	movs	r2, #0
 800c080:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 800c084:	e000      	b.n	800c088 <LoRaMacMcpsRequest+0x15c>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800c086:	2002      	movs	r0, #2
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800c088:	4b04      	ldr	r3, [pc, #16]	; (800c09c <LoRaMacMcpsRequest+0x170>)
 800c08a:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 800c08e:	6123      	str	r3, [r4, #16]
    return status;
 800c090:	e75b      	b.n	800bf4a <LoRaMacMcpsRequest+0x1e>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800c092:	2003      	movs	r0, #3
}
 800c094:	4770      	bx	lr
                return LORAMAC_STATUS_PARAMETER_INVALID;
 800c096:	2003      	movs	r0, #3
 800c098:	e757      	b.n	800bf4a <LoRaMacMcpsRequest+0x1e>
 800c09a:	bf00      	nop
 800c09c:	20000858 	.word	0x20000858
 800c0a0:	20000d60 	.word	0x20000d60

0800c0a4 <LoRaMacTestSetDutyCycleOn>:
/* ST_WORKAROUND_END */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 800c0a4:	b510      	push	{r4, lr}
 800c0a6:	b082      	sub	sp, #8
 800c0a8:	4604      	mov	r4, r0
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 800c0aa:	f88d 0004 	strb.w	r0, [sp, #4]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 800c0ae:	220f      	movs	r2, #15
 800c0b0:	a901      	add	r1, sp, #4
 800c0b2:	4b05      	ldr	r3, [pc, #20]	; (800c0c8 <LoRaMacTestSetDutyCycleOn+0x24>)
 800c0b4:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800c0b8:	f001 f884 	bl	800d1c4 <RegionVerify>
 800c0bc:	b110      	cbz	r0, 800c0c4 <LoRaMacTestSetDutyCycleOn+0x20>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 800c0be:	4b02      	ldr	r3, [pc, #8]	; (800c0c8 <LoRaMacTestSetDutyCycleOn+0x24>)
 800c0c0:	f883 4100 	strb.w	r4, [r3, #256]	; 0x100
    }
}
 800c0c4:	b002      	add	sp, #8
 800c0c6:	bd10      	pop	{r4, pc}
 800c0c8:	20000d60 	.word	0x20000d60

0800c0cc <CalcNextV10X>:

#include "Region.h"
#include "LoRaMacAdr.h"

static bool CalcNextV10X( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 800c0cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0d0:	b089      	sub	sp, #36	; 0x24
 800c0d2:	460f      	mov	r7, r1
 800c0d4:	4616      	mov	r6, r2
 800c0d6:	461d      	mov	r5, r3
    bool adrAckReq = false;
    int8_t datarate = adrNext->Datarate;
 800c0d8:	f990 9010 	ldrsb.w	r9, [r0, #16]
    int8_t txPower = adrNext->TxPower;
 800c0dc:	f990 b011 	ldrsb.w	fp, [r0, #17]
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 800c0e0:	6883      	ldr	r3, [r0, #8]
 800c0e2:	602b      	str	r3, [r5, #0]

    if( adrNext->AdrEnabled == true )
 800c0e4:	f890 8005 	ldrb.w	r8, [r0, #5]
 800c0e8:	f1b8 0f00 	cmp.w	r8, #0
 800c0ec:	d107      	bne.n	800c0fe <CalcNextV10X+0x32>
                }
            }
        }
    }

    *drOut = datarate;
 800c0ee:	f887 9000 	strb.w	r9, [r7]
    *txPowOut = txPower;
 800c0f2:	f886 b000 	strb.w	fp, [r6]
    return adrAckReq;
}
 800c0f6:	4640      	mov	r0, r8
 800c0f8:	b009      	add	sp, #36	; 0x24
 800c0fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0fe:	4604      	mov	r4, r0
        getPhy.Attribute = PHY_MIN_TX_DR;
 800c100:	2302      	movs	r3, #2
 800c102:	f88d 3018 	strb.w	r3, [sp, #24]
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800c106:	7c83      	ldrb	r3, [r0, #18]
 800c108:	f88d 301a 	strb.w	r3, [sp, #26]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800c10c:	a906      	add	r1, sp, #24
 800c10e:	7cc0      	ldrb	r0, [r0, #19]
 800c110:	f001 f837 	bl	800d182 <RegionGetPhyParam>
 800c114:	9005      	str	r0, [sp, #20]
        minTxDatarate = phyParam.Value;
 800c116:	fa4f fa80 	sxtb.w	sl, r0
        datarate = MAX( datarate, minTxDatarate );
 800c11a:	464a      	mov	r2, r9
 800c11c:	45d1      	cmp	r9, sl
 800c11e:	bfb8      	it	lt
 800c120:	4652      	movlt	r2, sl
 800c122:	9201      	str	r2, [sp, #4]
        if( datarate == minTxDatarate )
 800c124:	45d1      	cmp	r9, sl
 800c126:	dc04      	bgt.n	800c132 <CalcNextV10X+0x66>
            *adrAckCounter = 0;
 800c128:	2300      	movs	r3, #0
 800c12a:	602b      	str	r3, [r5, #0]
        datarate = MAX( datarate, minTxDatarate );
 800c12c:	4691      	mov	r9, r2
            adrAckReq = false;
 800c12e:	4698      	mov	r8, r3
 800c130:	e7dd      	b.n	800c0ee <CalcNextV10X+0x22>
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 800c132:	68a2      	ldr	r2, [r4, #8]
 800c134:	89a3      	ldrh	r3, [r4, #12]
 800c136:	429a      	cmp	r2, r3
 800c138:	d201      	bcs.n	800c13e <CalcNextV10X+0x72>
                adrAckReq = false;
 800c13a:	f04f 0800 	mov.w	r8, #0
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 800c13e:	89e1      	ldrh	r1, [r4, #14]
 800c140:	440b      	add	r3, r1
 800c142:	429a      	cmp	r2, r3
 800c144:	d202      	bcs.n	800c14c <CalcNextV10X+0x80>
        datarate = MAX( datarate, minTxDatarate );
 800c146:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800c14a:	e7d0      	b.n	800c0ee <CalcNextV10X+0x22>
                getPhy.Attribute = PHY_MAX_TX_POWER;
 800c14c:	2308      	movs	r3, #8
 800c14e:	f88d 3018 	strb.w	r3, [sp, #24]
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800c152:	a906      	add	r1, sp, #24
 800c154:	7ce0      	ldrb	r0, [r4, #19]
 800c156:	f001 f814 	bl	800d182 <RegionGetPhyParam>
 800c15a:	9005      	str	r0, [sp, #20]
                txPower = phyParam.Value;
 800c15c:	fa4f fb80 	sxtb.w	fp, r0
                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 800c160:	68a3      	ldr	r3, [r4, #8]
 800c162:	89e2      	ldrh	r2, [r4, #14]
 800c164:	fbb3 f1f2 	udiv	r1, r3, r2
 800c168:	fb02 3311 	mls	r3, r2, r1, r3
 800c16c:	2b01      	cmp	r3, #1
 800c16e:	d002      	beq.n	800c176 <CalcNextV10X+0xaa>
        datarate = MAX( datarate, minTxDatarate );
 800c170:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800c174:	e7bb      	b.n	800c0ee <CalcNextV10X+0x22>
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 800c176:	2322      	movs	r3, #34	; 0x22
 800c178:	f88d 3018 	strb.w	r3, [sp, #24]
                    getPhy.Datarate = datarate;
 800c17c:	9b01      	ldr	r3, [sp, #4]
 800c17e:	f88d 3019 	strb.w	r3, [sp, #25]
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800c182:	7ca3      	ldrb	r3, [r4, #18]
 800c184:	f88d 301a 	strb.w	r3, [sp, #26]
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800c188:	a906      	add	r1, sp, #24
 800c18a:	7ce0      	ldrb	r0, [r4, #19]
 800c18c:	f000 fff9 	bl	800d182 <RegionGetPhyParam>
 800c190:	9005      	str	r0, [sp, #20]
                    datarate = phyParam.Value;
 800c192:	fa4f f980 	sxtb.w	r9, r0
                    if( datarate == minTxDatarate )
 800c196:	45ca      	cmp	sl, r9
 800c198:	d1a9      	bne.n	800c0ee <CalcNextV10X+0x22>
                        if( adrNext->UpdateChanMask == true )
 800c19a:	f894 8004 	ldrb.w	r8, [r4, #4]
 800c19e:	f1b8 0f00 	cmp.w	r8, #0
 800c1a2:	d0a4      	beq.n	800c0ee <CalcNextV10X+0x22>
                            params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 800c1a4:	2302      	movs	r3, #2
 800c1a6:	f88d 3010 	strb.w	r3, [sp, #16]
                            RegionInitDefaults( adrNext->Region, &params );
 800c1aa:	a902      	add	r1, sp, #8
 800c1ac:	7ce0      	ldrb	r0, [r4, #19]
 800c1ae:	f001 f801 	bl	800d1b4 <RegionInitDefaults>
                        adrAckReq = false;
 800c1b2:	f04f 0800 	mov.w	r8, #0
 800c1b6:	e79a      	b.n	800c0ee <CalcNextV10X+0x22>

0800c1b8 <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 800c1b8:	b510      	push	{r4, lr}
    if( adrNext->Version.Fields.Minor == 0 )
 800c1ba:	7884      	ldrb	r4, [r0, #2]
 800c1bc:	b10c      	cbz	r4, 800c1c2 <LoRaMacAdrCalcNext+0xa>
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
    }
    return false;
 800c1be:	2000      	movs	r0, #0
}
 800c1c0:	bd10      	pop	{r4, pc}
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
 800c1c2:	f7ff ff83 	bl	800c0cc <CalcNextV10X>
 800c1c6:	e7fb      	b.n	800c1c0 <LoRaMacAdrCalcNext+0x8>

0800c1c8 <LoRaMacClassBInit>:
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c1c8:	4770      	bx	lr

0800c1ca <LoRaMacClassBSetBeaconState>:
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c1ca:	4770      	bx	lr

0800c1cc <LoRaMacClassBSetPingSlotState>:
void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c1cc:	4770      	bx	lr

0800c1ce <LoRaMacClassBSetMulticastSlotState>:
void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c1ce:	4770      	bx	lr

0800c1d0 <LoRaMacClassBIsAcquisitionInProgress>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c1d0:	2000      	movs	r0, #0
 800c1d2:	4770      	bx	lr

0800c1d4 <LoRaMacClassBBeaconTimerEvent>:
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c1d4:	4770      	bx	lr

0800c1d6 <LoRaMacClassBPingSlotTimerEvent>:
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c1d6:	4770      	bx	lr

0800c1d8 <LoRaMacClassBMulticastSlotTimerEvent>:
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c1d8:	4770      	bx	lr

0800c1da <LoRaMacClassBRxBeacon>:
    }
    return beaconProcessed;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c1da:	2000      	movs	r0, #0
 800c1dc:	4770      	bx	lr

0800c1de <LoRaMacClassBIsBeaconExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c1de:	2000      	movs	r0, #0
 800c1e0:	4770      	bx	lr

0800c1e2 <LoRaMacClassBIsPingExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c1e2:	2000      	movs	r0, #0
 800c1e4:	4770      	bx	lr

0800c1e6 <LoRaMacClassBIsMulticastExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c1e6:	2000      	movs	r0, #0
 800c1e8:	4770      	bx	lr

0800c1ea <LoRaMacClassBIsBeaconModeActive>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c1ea:	2000      	movs	r0, #0
 800c1ec:	4770      	bx	lr

0800c1ee <LoRaMacClassBSetPingSlotInfo>:
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c1ee:	4770      	bx	lr

0800c1f0 <LoRaMacClassBHaltBeaconing>:

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c1f0:	4770      	bx	lr

0800c1f2 <LoRaMacClassBResumeBeaconing>:
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c1f2:	4770      	bx	lr

0800c1f4 <LoRaMacClassBSwitchClass>:
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c1f4:	2002      	movs	r0, #2
 800c1f6:	4770      	bx	lr

0800c1f8 <LoRaMacClassBMibGetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c1f8:	2002      	movs	r0, #2
 800c1fa:	4770      	bx	lr

0800c1fc <LoRaMacMibClassBSetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c1fc:	2002      	movs	r0, #2
 800c1fe:	4770      	bx	lr

0800c200 <LoRaMacClassBPingSlotInfoAns>:
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c200:	4770      	bx	lr

0800c202 <LoRaMacClassBPingSlotChannelReq>:

    return status;
#else
    return 0;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c202:	2000      	movs	r0, #0
 800c204:	4770      	bx	lr

0800c206 <LoRaMacClassBBeaconTimingAns>:

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c206:	4770      	bx	lr

0800c208 <LoRaMacClassBDeviceTimeAns>:
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c208:	4770      	bx	lr

0800c20a <LoRaMacClassBBeaconFreqReq>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c20a:	2000      	movs	r0, #0
 800c20c:	4770      	bx	lr

0800c20e <LoRaMacClassBIsUplinkCollision>:
    }
    return 0;
#else
    return 0;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c20e:	2000      	movs	r0, #0
 800c210:	4770      	bx	lr

0800c212 <LoRaMacClassBStopRxSlots>:
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c212:	4770      	bx	lr

0800c214 <LoRaMacClassBProcess>:
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c214:	4770      	bx	lr

0800c216 <IsSlotFree>:
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
    uint8_t* mem = ( uint8_t* )slot;

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800c216:	2300      	movs	r3, #0
 800c218:	2b0f      	cmp	r3, #15
 800c21a:	d804      	bhi.n	800c226 <IsSlotFree+0x10>
    {
        if( mem[size] != 0x00 )
 800c21c:	5cc2      	ldrb	r2, [r0, r3]
 800c21e:	b922      	cbnz	r2, 800c22a <IsSlotFree+0x14>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800c220:	3301      	adds	r3, #1
 800c222:	b29b      	uxth	r3, r3
 800c224:	e7f8      	b.n	800c218 <IsSlotFree+0x2>
        {
            return false;
        }
    }
    return true;
 800c226:	2001      	movs	r0, #1
 800c228:	4770      	bx	lr
            return false;
 800c22a:	2000      	movs	r0, #0
}
 800c22c:	4770      	bx	lr
	...

0800c230 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 800c230:	b538      	push	{r3, r4, r5, lr}
    uint8_t itr = 0;
 800c232:	2400      	movs	r4, #0

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 800c234:	0123      	lsls	r3, r4, #4
 800c236:	3308      	adds	r3, #8
 800c238:	4d06      	ldr	r5, [pc, #24]	; (800c254 <MallocNewMacCommandSlot+0x24>)
 800c23a:	441d      	add	r5, r3
 800c23c:	4628      	mov	r0, r5
 800c23e:	f7ff ffea 	bl	800c216 <IsSlotFree>
 800c242:	b920      	cbnz	r0, 800c24e <MallocNewMacCommandSlot+0x1e>
    {
        itr++;
 800c244:	3401      	adds	r4, #1
 800c246:	b2e4      	uxtb	r4, r4
        if( itr == NUM_OF_MAC_COMMANDS )
 800c248:	2c0f      	cmp	r4, #15
 800c24a:	d1f3      	bne.n	800c234 <MallocNewMacCommandSlot+0x4>
        {
            return NULL;
 800c24c:	2500      	movs	r5, #0
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
}
 800c24e:	4628      	mov	r0, r5
 800c250:	bd38      	pop	{r3, r4, r5, pc}
 800c252:	bf00      	nop
 800c254:	20001048 	.word	0x20001048

0800c258 <LinkedListInit>:
 * \param[IN]     list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
    if( list == NULL )
 800c258:	b120      	cbz	r0, 800c264 <LinkedListInit+0xc>
    {
        return false;
    }

    list->First = NULL;
 800c25a:	2200      	movs	r2, #0
 800c25c:	6002      	str	r2, [r0, #0]
    list->Last = NULL;
 800c25e:	6042      	str	r2, [r0, #4]

    return true;
 800c260:	2001      	movs	r0, #1
 800c262:	4770      	bx	lr
        return false;
 800c264:	2000      	movs	r0, #0
}
 800c266:	4770      	bx	lr

0800c268 <LinkedListAdd>:
 * \param[IN]     element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800c268:	4603      	mov	r3, r0
 800c26a:	b160      	cbz	r0, 800c286 <LinkedListAdd+0x1e>
 800c26c:	b169      	cbz	r1, 800c28a <LinkedListAdd+0x22>
    {
        return false;
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 800c26e:	6802      	ldr	r2, [r0, #0]
 800c270:	b13a      	cbz	r2, 800c282 <LinkedListAdd+0x1a>
    {
        list->First = element;
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 800c272:	685a      	ldr	r2, [r3, #4]
 800c274:	b102      	cbz	r2, 800c278 <LinkedListAdd+0x10>
    {
        list->Last->Next = element;
 800c276:	6011      	str	r1, [r2, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 800c278:	2200      	movs	r2, #0
 800c27a:	600a      	str	r2, [r1, #0]

    // Update the last entry of the list.
    list->Last = element;
 800c27c:	6059      	str	r1, [r3, #4]

    return true;
 800c27e:	2001      	movs	r0, #1
 800c280:	4770      	bx	lr
        list->First = element;
 800c282:	6001      	str	r1, [r0, #0]
 800c284:	e7f5      	b.n	800c272 <LinkedListAdd+0xa>
        return false;
 800c286:	2000      	movs	r0, #0
 800c288:	4770      	bx	lr
 800c28a:	2000      	movs	r0, #0
}
 800c28c:	4770      	bx	lr

0800c28e <LinkedListGetPrevious>:
 * \param[IN]     element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800c28e:	b160      	cbz	r0, 800c2aa <LinkedListGetPrevious+0x1c>
 800c290:	b161      	cbz	r1, 800c2ac <LinkedListGetPrevious+0x1e>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 800c292:	6800      	ldr	r0, [r0, #0]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 800c294:	4281      	cmp	r1, r0
 800c296:	d102      	bne.n	800c29e <LinkedListGetPrevious+0x10>
            curElement = curElement->Next;
        }
    }
    else
    {
        curElement = NULL;
 800c298:	2000      	movs	r0, #0
    }

    return curElement;
}
 800c29a:	4770      	bx	lr
            curElement = curElement->Next;
 800c29c:	4618      	mov	r0, r3
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 800c29e:	2800      	cmp	r0, #0
 800c2a0:	d0fb      	beq.n	800c29a <LinkedListGetPrevious+0xc>
 800c2a2:	6803      	ldr	r3, [r0, #0]
 800c2a4:	428b      	cmp	r3, r1
 800c2a6:	d1f9      	bne.n	800c29c <LinkedListGetPrevious+0xe>
 800c2a8:	4770      	bx	lr
 800c2aa:	4770      	bx	lr
        return NULL;
 800c2ac:	4608      	mov	r0, r1
 800c2ae:	4770      	bx	lr

0800c2b0 <LinkedListRemove>:
 * \param[IN]     element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800c2b0:	b1b8      	cbz	r0, 800c2e2 <LinkedListRemove+0x32>
{
 800c2b2:	b538      	push	{r3, r4, r5, lr}
 800c2b4:	460c      	mov	r4, r1
 800c2b6:	4605      	mov	r5, r0
    if( ( list == NULL ) || ( element == NULL ) )
 800c2b8:	b1a9      	cbz	r1, 800c2e6 <LinkedListRemove+0x36>
    {
        return false;
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 800c2ba:	f7ff ffe8 	bl	800c28e <LinkedListGetPrevious>

    if( list->First == element )
 800c2be:	682b      	ldr	r3, [r5, #0]
 800c2c0:	42a3      	cmp	r3, r4
 800c2c2:	d009      	beq.n	800c2d8 <LinkedListRemove+0x28>
    {
        list->First = element->Next;
    }

    if( list->Last == element )
 800c2c4:	686b      	ldr	r3, [r5, #4]
 800c2c6:	42a3      	cmp	r3, r4
 800c2c8:	d009      	beq.n	800c2de <LinkedListRemove+0x2e>
    {
        list->Last = PrevElement;
    }

    if( PrevElement != NULL )
 800c2ca:	b108      	cbz	r0, 800c2d0 <LinkedListRemove+0x20>
    {
        PrevElement->Next = element->Next;
 800c2cc:	6823      	ldr	r3, [r4, #0]
 800c2ce:	6003      	str	r3, [r0, #0]
    }

    element->Next = NULL;
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	6023      	str	r3, [r4, #0]

    return true;
 800c2d4:	2001      	movs	r0, #1
}
 800c2d6:	bd38      	pop	{r3, r4, r5, pc}
        list->First = element->Next;
 800c2d8:	6823      	ldr	r3, [r4, #0]
 800c2da:	602b      	str	r3, [r5, #0]
 800c2dc:	e7f2      	b.n	800c2c4 <LinkedListRemove+0x14>
        list->Last = PrevElement;
 800c2de:	6068      	str	r0, [r5, #4]
 800c2e0:	e7f3      	b.n	800c2ca <LinkedListRemove+0x1a>
        return false;
 800c2e2:	2000      	movs	r0, #0
}
 800c2e4:	4770      	bx	lr
        return false;
 800c2e6:	2000      	movs	r0, #0
 800c2e8:	e7f5      	b.n	800c2d6 <LinkedListRemove+0x26>

0800c2ea <IsSticky>:
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
    switch( cid )
 800c2ea:	2805      	cmp	r0, #5
 800c2ec:	d006      	beq.n	800c2fc <IsSticky+0x12>
 800c2ee:	d307      	bcc.n	800c300 <IsSticky+0x16>
 800c2f0:	3808      	subs	r0, #8
 800c2f2:	b2c0      	uxtb	r0, r0
 800c2f4:	2802      	cmp	r0, #2
 800c2f6:	d905      	bls.n	800c304 <IsSticky+0x1a>
        case MOTE_MAC_RX_PARAM_SETUP_ANS:
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
            return true;
        default:
            return false;
 800c2f8:	2000      	movs	r0, #0
 800c2fa:	4770      	bx	lr
    switch( cid )
 800c2fc:	2001      	movs	r0, #1
 800c2fe:	4770      	bx	lr
            return false;
 800c300:	2000      	movs	r0, #0
 800c302:	4770      	bx	lr
    switch( cid )
 800c304:	2001      	movs	r0, #1
    }
}
 800c306:	4770      	bx	lr

0800c308 <FreeMacCommandSlot>:
    if( slot == NULL )
 800c308:	b130      	cbz	r0, 800c318 <FreeMacCommandSlot+0x10>
{
 800c30a:	b508      	push	{r3, lr}
    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 800c30c:	2210      	movs	r2, #16
 800c30e:	2100      	movs	r1, #0
 800c310:	f003 f8ff 	bl	800f512 <memset1>
    return true;
 800c314:	2001      	movs	r0, #1
}
 800c316:	bd08      	pop	{r3, pc}
        return false;
 800c318:	2000      	movs	r0, #0
}
 800c31a:	4770      	bx	lr

0800c31c <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 800c31c:	b510      	push	{r4, lr}
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 800c31e:	4c05      	ldr	r4, [pc, #20]	; (800c334 <LoRaMacCommandsInit+0x18>)
 800c320:	22fc      	movs	r2, #252	; 0xfc
 800c322:	2100      	movs	r1, #0
 800c324:	4620      	mov	r0, r4
 800c326:	f003 f8f4 	bl	800f512 <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 800c32a:	4620      	mov	r0, r4
 800c32c:	f7ff ff94 	bl	800c258 <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
}
 800c330:	2000      	movs	r0, #0
 800c332:	bd10      	pop	{r4, pc}
 800c334:	20001048 	.word	0x20001048

0800c338 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
    if( payload == NULL )
 800c338:	b301      	cbz	r1, 800c37c <LoRaMacCommandsAddCmd+0x44>
{
 800c33a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c33c:	4605      	mov	r5, r0
 800c33e:	4614      	mov	r4, r2
 800c340:	460f      	mov	r7, r1
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 800c342:	f7ff ff75 	bl	800c230 <MallocNewMacCommandSlot>

    if( newCmd == NULL )
 800c346:	4606      	mov	r6, r0
 800c348:	b1d0      	cbz	r0, 800c380 <LoRaMacCommandsAddCmd+0x48>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 800c34a:	4601      	mov	r1, r0
 800c34c:	480e      	ldr	r0, [pc, #56]	; (800c388 <LoRaMacCommandsAddCmd+0x50>)
 800c34e:	f7ff ff8b 	bl	800c268 <LinkedListAdd>
 800c352:	b1b8      	cbz	r0, 800c384 <LoRaMacCommandsAddCmd+0x4c>
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    // Set Values
    newCmd->CID = cid;
 800c354:	7135      	strb	r5, [r6, #4]
    newCmd->PayloadSize = payloadSize;
 800c356:	60b4      	str	r4, [r6, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 800c358:	b2a2      	uxth	r2, r4
 800c35a:	4639      	mov	r1, r7
 800c35c:	1d70      	adds	r0, r6, #5
 800c35e:	f003 f8c0 	bl	800f4e2 <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 800c362:	4628      	mov	r0, r5
 800c364:	f7ff ffc1 	bl	800c2ea <IsSticky>
 800c368:	7330      	strb	r0, [r6, #12]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 800c36a:	4b07      	ldr	r3, [pc, #28]	; (800c388 <LoRaMacCommandsAddCmd+0x50>)
 800c36c:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 800c370:	4414      	add	r4, r2
 800c372:	3401      	adds	r4, #1
 800c374:	f8c3 40f8 	str.w	r4, [r3, #248]	; 0xf8

    return LORAMAC_COMMANDS_SUCCESS;
 800c378:	2000      	movs	r0, #0
}
 800c37a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800c37c:	2001      	movs	r0, #1
}
 800c37e:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 800c380:	2002      	movs	r0, #2
 800c382:	e7fa      	b.n	800c37a <LoRaMacCommandsAddCmd+0x42>
        return LORAMAC_COMMANDS_ERROR;
 800c384:	2005      	movs	r0, #5
 800c386:	e7f8      	b.n	800c37a <LoRaMacCommandsAddCmd+0x42>
 800c388:	20001048 	.word	0x20001048

0800c38c <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
    if( macCmd == NULL )
 800c38c:	b1a0      	cbz	r0, 800c3b8 <LoRaMacCommandsRemoveCmd+0x2c>
{
 800c38e:	b510      	push	{r4, lr}
 800c390:	4604      	mov	r4, r0
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 800c392:	4601      	mov	r1, r0
 800c394:	480b      	ldr	r0, [pc, #44]	; (800c3c4 <LoRaMacCommandsRemoveCmd+0x38>)
 800c396:	f7ff ff8b 	bl	800c2b0 <LinkedListRemove>
 800c39a:	b178      	cbz	r0, 800c3bc <LoRaMacCommandsRemoveCmd+0x30>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 800c39c:	68a1      	ldr	r1, [r4, #8]
 800c39e:	4a09      	ldr	r2, [pc, #36]	; (800c3c4 <LoRaMacCommandsRemoveCmd+0x38>)
 800c3a0:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
 800c3a4:	1a5b      	subs	r3, r3, r1
 800c3a6:	3b01      	subs	r3, #1
 800c3a8:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 800c3ac:	4620      	mov	r0, r4
 800c3ae:	f7ff ffab 	bl	800c308 <FreeMacCommandSlot>
 800c3b2:	b128      	cbz	r0, 800c3c0 <LoRaMacCommandsRemoveCmd+0x34>
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    return LORAMAC_COMMANDS_SUCCESS;
 800c3b4:	2000      	movs	r0, #0
}
 800c3b6:	bd10      	pop	{r4, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800c3b8:	2001      	movs	r0, #1
}
 800c3ba:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 800c3bc:	2003      	movs	r0, #3
 800c3be:	e7fa      	b.n	800c3b6 <LoRaMacCommandsRemoveCmd+0x2a>
        return LORAMAC_COMMANDS_ERROR;
 800c3c0:	2005      	movs	r0, #5
 800c3c2:	e7f8      	b.n	800c3b6 <LoRaMacCommandsRemoveCmd+0x2a>
 800c3c4:	20001048 	.word	0x20001048

0800c3c8 <LoRaMacCommandsRemoveNoneStickyCmds>:
{
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800c3c8:	4b0a      	ldr	r3, [pc, #40]	; (800c3f4 <LoRaMacCommandsRemoveNoneStickyCmds+0x2c>)
 800c3ca:	6818      	ldr	r0, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800c3cc:	b120      	cbz	r0, 800c3d8 <LoRaMacCommandsRemoveNoneStickyCmds+0x10>
    {
        if( curElement->IsSticky == false )
 800c3ce:	7b03      	ldrb	r3, [r0, #12]
 800c3d0:	b11b      	cbz	r3, 800c3da <LoRaMacCommandsRemoveNoneStickyCmds+0x12>
            LoRaMacCommandsRemoveCmd( curElement );
            curElement = nexElement;
        }
        else
        {
            curElement = curElement->Next;
 800c3d2:	6800      	ldr	r0, [r0, #0]
 800c3d4:	e7fa      	b.n	800c3cc <LoRaMacCommandsRemoveNoneStickyCmds+0x4>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800c3d6:	bd10      	pop	{r4, pc}
 800c3d8:	4770      	bx	lr
{
 800c3da:	b510      	push	{r4, lr}
            nexElement = curElement->Next;
 800c3dc:	6804      	ldr	r4, [r0, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 800c3de:	f7ff ffd5 	bl	800c38c <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 800c3e2:	4620      	mov	r0, r4
    while( curElement != NULL )
 800c3e4:	2800      	cmp	r0, #0
 800c3e6:	d0f6      	beq.n	800c3d6 <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        if( curElement->IsSticky == false )
 800c3e8:	7b03      	ldrb	r3, [r0, #12]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d0f6      	beq.n	800c3dc <LoRaMacCommandsRemoveNoneStickyCmds+0x14>
            curElement = curElement->Next;
 800c3ee:	6800      	ldr	r0, [r0, #0]
 800c3f0:	e7f8      	b.n	800c3e4 <LoRaMacCommandsRemoveNoneStickyCmds+0x1c>
 800c3f2:	bf00      	nop
 800c3f4:	20001048 	.word	0x20001048

0800c3f8 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 800c3f8:	b538      	push	{r3, r4, r5, lr}
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800c3fa:	4b08      	ldr	r3, [pc, #32]	; (800c41c <LoRaMacCommandsRemoveStickyAnsCmds+0x24>)
 800c3fc:	681c      	ldr	r4, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800c3fe:	e000      	b.n	800c402 <LoRaMacCommandsRemoveStickyAnsCmds+0xa>
{
 800c400:	462c      	mov	r4, r5
    while( curElement != NULL )
 800c402:	b14c      	cbz	r4, 800c418 <LoRaMacCommandsRemoveStickyAnsCmds+0x20>
    {
        nexElement = curElement->Next;
 800c404:	6825      	ldr	r5, [r4, #0]
        if( IsSticky( curElement->CID ) == true )
 800c406:	7920      	ldrb	r0, [r4, #4]
 800c408:	f7ff ff6f 	bl	800c2ea <IsSticky>
 800c40c:	2800      	cmp	r0, #0
 800c40e:	d0f7      	beq.n	800c400 <LoRaMacCommandsRemoveStickyAnsCmds+0x8>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 800c410:	4620      	mov	r0, r4
 800c412:	f7ff ffbb 	bl	800c38c <LoRaMacCommandsRemoveCmd>
 800c416:	e7f3      	b.n	800c400 <LoRaMacCommandsRemoveStickyAnsCmds+0x8>
        }
        curElement = nexElement;
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800c418:	2000      	movs	r0, #0
 800c41a:	bd38      	pop	{r3, r4, r5, pc}
 800c41c:	20001048 	.word	0x20001048

0800c420 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
    if( size == NULL )
 800c420:	b128      	cbz	r0, 800c42e <LoRaMacCommandsGetSizeSerializedCmds+0xe>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    *size = CommandsCtx.SerializedCmdsSize;
 800c422:	4a04      	ldr	r2, [pc, #16]	; (800c434 <LoRaMacCommandsGetSizeSerializedCmds+0x14>)
 800c424:	f8d2 20f8 	ldr.w	r2, [r2, #248]	; 0xf8
 800c428:	6002      	str	r2, [r0, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 800c42a:	2000      	movs	r0, #0
 800c42c:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_NPE;
 800c42e:	2001      	movs	r0, #1
}
 800c430:	4770      	bx	lr
 800c432:	bf00      	nop
 800c434:	20001048 	.word	0x20001048

0800c438 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 800c438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 800c43c:	4b16      	ldr	r3, [pc, #88]	; (800c498 <LoRaMacCommandsSerializeCmds+0x60>)
 800c43e:	681c      	ldr	r4, [r3, #0]
    MacCommand_t* nextElement;
    uint8_t itr = 0;

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 800c440:	b32a      	cbz	r2, 800c48e <LoRaMacCommandsSerializeCmds+0x56>
 800c442:	4607      	mov	r7, r0
 800c444:	4688      	mov	r8, r1
 800c446:	4616      	mov	r6, r2
 800c448:	b319      	cbz	r1, 800c492 <LoRaMacCommandsSerializeCmds+0x5a>
    uint8_t itr = 0;
 800c44a:	2100      	movs	r1, #0
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
 800c44c:	b194      	cbz	r4, 800c474 <LoRaMacCommandsSerializeCmds+0x3c>
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 800c44e:	1a7a      	subs	r2, r7, r1
 800c450:	68a3      	ldr	r3, [r4, #8]
 800c452:	3301      	adds	r3, #1
 800c454:	429a      	cmp	r2, r3
 800c456:	d30d      	bcc.n	800c474 <LoRaMacCommandsSerializeCmds+0x3c>
        {
            buffer[itr++] = curElement->CID;
 800c458:	1c4d      	adds	r5, r1, #1
 800c45a:	b2ed      	uxtb	r5, r5
 800c45c:	7923      	ldrb	r3, [r4, #4]
 800c45e:	5473      	strb	r3, [r6, r1]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 800c460:	8922      	ldrh	r2, [r4, #8]
 800c462:	1d61      	adds	r1, r4, #5
 800c464:	1970      	adds	r0, r6, r5
 800c466:	f003 f83c 	bl	800f4e2 <memcpy1>
            itr += curElement->PayloadSize;
 800c46a:	68a3      	ldr	r3, [r4, #8]
 800c46c:	441d      	add	r5, r3
 800c46e:	b2e9      	uxtb	r1, r5
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 800c470:	6824      	ldr	r4, [r4, #0]
 800c472:	e7eb      	b.n	800c44c <LoRaMacCommandsSerializeCmds+0x14>
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 800c474:	b12c      	cbz	r4, 800c482 <LoRaMacCommandsSerializeCmds+0x4a>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 800c476:	6825      	ldr	r5, [r4, #0]
        LoRaMacCommandsRemoveCmd( curElement );
 800c478:	4620      	mov	r0, r4
 800c47a:	f7ff ff87 	bl	800c38c <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 800c47e:	462c      	mov	r4, r5
 800c480:	e7f8      	b.n	800c474 <LoRaMacCommandsSerializeCmds+0x3c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 800c482:	4640      	mov	r0, r8
 800c484:	f7ff ffcc 	bl	800c420 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 800c488:	2000      	movs	r0, #0
}
 800c48a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800c48e:	2001      	movs	r0, #1
 800c490:	e7fb      	b.n	800c48a <LoRaMacCommandsSerializeCmds+0x52>
 800c492:	2001      	movs	r0, #1
 800c494:	e7f9      	b.n	800c48a <LoRaMacCommandsSerializeCmds+0x52>
 800c496:	bf00      	nop
 800c498:	20001048 	.word	0x20001048

0800c49c <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
    if( cmdsPending == NULL )
 800c49c:	4601      	mov	r1, r0
 800c49e:	b170      	cbz	r0, 800c4be <LoRaMacCommandsStickyCmdsPending+0x22>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    MacCommand_t* curElement;
    curElement = CommandsCtx.MacCommandList.First;
 800c4a0:	4b08      	ldr	r3, [pc, #32]	; (800c4c4 <LoRaMacCommandsStickyCmdsPending+0x28>)
 800c4a2:	681b      	ldr	r3, [r3, #0]

    *cmdsPending = false;
 800c4a4:	2200      	movs	r2, #0
 800c4a6:	7002      	strb	r2, [r0, #0]

    // Loop through all elements
    while( curElement != NULL )
 800c4a8:	b13b      	cbz	r3, 800c4ba <LoRaMacCommandsStickyCmdsPending+0x1e>
    {
        if( curElement->IsSticky == true )
 800c4aa:	7b1a      	ldrb	r2, [r3, #12]
 800c4ac:	b90a      	cbnz	r2, 800c4b2 <LoRaMacCommandsStickyCmdsPending+0x16>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
            return LORAMAC_COMMANDS_SUCCESS;
        }
        curElement = curElement->Next;
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	e7fa      	b.n	800c4a8 <LoRaMacCommandsStickyCmdsPending+0xc>
            *cmdsPending = true;
 800c4b2:	2301      	movs	r3, #1
 800c4b4:	700b      	strb	r3, [r1, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 800c4b6:	2000      	movs	r0, #0
 800c4b8:	4770      	bx	lr
    }

    return LORAMAC_COMMANDS_SUCCESS;
 800c4ba:	2000      	movs	r0, #0
 800c4bc:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_NPE;
 800c4be:	2001      	movs	r0, #1
}
 800c4c0:	4770      	bx	lr
 800c4c2:	bf00      	nop
 800c4c4:	20001048 	.word	0x20001048

0800c4c8 <LoRaMacCommandsGetCmdSize>:
uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
    uint8_t cidSize = 0;

    // Decode Frame MAC commands
    switch( cid )
 800c4c8:	1e83      	subs	r3, r0, #2
 800c4ca:	2b11      	cmp	r3, #17
 800c4cc:	d80a      	bhi.n	800c4e4 <LoRaMacCommandsGetCmdSize+0x1c>
 800c4ce:	e8df f003 	tbb	[pc, r3]
 800c4d2:	0b23      	.short	0x0b23
 800c4d4:	110f240d 	.word	0x110f240d
 800c4d8:	09171513 	.word	0x09171513
 800c4dc:	09091909 	.word	0x09091909
 800c4e0:	211f1d1b 	.word	0x211f1d1b
 800c4e4:	2000      	movs	r0, #0
 800c4e6:	4770      	bx	lr
            break;
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 800c4e8:	2005      	movs	r0, #5
            break;
 800c4ea:	4770      	bx	lr
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 800c4ec:	2002      	movs	r0, #2
            break;
 800c4ee:	4770      	bx	lr
            break;
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 800c4f0:	2001      	movs	r0, #1
            break;
 800c4f2:	4770      	bx	lr
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 800c4f4:	2006      	movs	r0, #6
            break;
 800c4f6:	4770      	bx	lr
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 800c4f8:	2002      	movs	r0, #2
            break;
 800c4fa:	4770      	bx	lr
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 800c4fc:	2002      	movs	r0, #2
            break;
 800c4fe:	4770      	bx	lr
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 800c500:	2005      	movs	r0, #5
            break;
 800c502:	4770      	bx	lr
        }
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 800c504:	2006      	movs	r0, #6
            break;
 800c506:	4770      	bx	lr
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 800c508:	2001      	movs	r0, #1
            break;
 800c50a:	4770      	bx	lr
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 800c50c:	2005      	movs	r0, #5
            break;
 800c50e:	4770      	bx	lr
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 800c510:	2004      	movs	r0, #4
            break;
 800c512:	4770      	bx	lr
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 800c514:	2004      	movs	r0, #4
            break;
 800c516:	4770      	bx	lr
            cidSize = 3;
 800c518:	2003      	movs	r0, #3
            // Unknown command. ABORT MAC commands processing
            break;
        }
    }
    return cidSize;
}
 800c51a:	4770      	bx	lr

0800c51c <IncreaseBufferPointer>:
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800c51c:	4b03      	ldr	r3, [pc, #12]	; (800c52c <IncreaseBufferPointer+0x10>)
 800c51e:	4298      	cmp	r0, r3
 800c520:	d001      	beq.n	800c526 <IncreaseBufferPointer+0xa>
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
    }
    else
    {
        // Increase
        bufferPointer++;
 800c522:	3004      	adds	r0, #4
 800c524:	4770      	bx	lr
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800c526:	4802      	ldr	r0, [pc, #8]	; (800c530 <IncreaseBufferPointer+0x14>)
    }
    return bufferPointer;
}
 800c528:	4770      	bx	lr
 800c52a:	bf00      	nop
 800c52c:	20001160 	.word	0x20001160
 800c530:	20001150 	.word	0x20001150

0800c534 <IsListEmpty>:
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
    if( count == 0 )
 800c534:	b108      	cbz	r0, 800c53a <IsListEmpty+0x6>
    {
        return true;
    }
    return false;
 800c536:	2000      	movs	r0, #0
 800c538:	4770      	bx	lr
        return true;
 800c53a:	2001      	movs	r0, #1
}
 800c53c:	4770      	bx	lr

0800c53e <IsListFull>:

static bool IsListFull( uint8_t count )
{
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 800c53e:	2804      	cmp	r0, #4
 800c540:	d801      	bhi.n	800c546 <IsListFull+0x8>
    {
        return true;
    }
    return false;
 800c542:	2000      	movs	r0, #0
 800c544:	4770      	bx	lr
        return true;
 800c546:	2001      	movs	r0, #1
}
 800c548:	4770      	bx	lr
	...

0800c54c <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 800c54c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c54e:	4606      	mov	r6, r0
 800c550:	460c      	mov	r4, r1
    MlmeConfirmQueue_t* element = bufferStart;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800c552:	4b0d      	ldr	r3, [pc, #52]	; (800c588 <GetElement+0x3c>)
 800c554:	f893 7020 	ldrb.w	r7, [r3, #32]
 800c558:	4638      	mov	r0, r7
 800c55a:	f7ff ffeb 	bl	800c534 <IsListEmpty>
 800c55e:	b970      	cbnz	r0, 800c57e <GetElement+0x32>
    {
        return NULL;
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 800c560:	2500      	movs	r5, #0
 800c562:	42af      	cmp	r7, r5
 800c564:	d909      	bls.n	800c57a <GetElement+0x2e>
    {
        if( element->Request == request )
 800c566:	7823      	ldrb	r3, [r4, #0]
 800c568:	42b3      	cmp	r3, r6
 800c56a:	d00a      	beq.n	800c582 <GetElement+0x36>
        {
            // We have found the element
            return element;
        }
        element = IncreaseBufferPointer( element );
 800c56c:	4620      	mov	r0, r4
 800c56e:	f7ff ffd5 	bl	800c51c <IncreaseBufferPointer>
 800c572:	4604      	mov	r4, r0
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 800c574:	3501      	adds	r5, #1
 800c576:	b2ed      	uxtb	r5, r5
 800c578:	e7f3      	b.n	800c562 <GetElement+0x16>
    }

    return NULL;
 800c57a:	2000      	movs	r0, #0
}
 800c57c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NULL;
 800c57e:	2000      	movs	r0, #0
 800c580:	e7fc      	b.n	800c57c <GetElement+0x30>
            return element;
 800c582:	4620      	mov	r0, r4
 800c584:	e7fa      	b.n	800c57c <GetElement+0x30>
 800c586:	bf00      	nop
 800c588:	20001144 	.word	0x20001144

0800c58c <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 800c58c:	b510      	push	{r4, lr}
    ConfirmQueueCtx.Primitives = primitives;
 800c58e:	4c08      	ldr	r4, [pc, #32]	; (800c5b0 <LoRaMacConfirmQueueInit+0x24>)
 800c590:	6020      	str	r0, [r4, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 800c592:	2300      	movs	r3, #0
 800c594:	f884 3020 	strb.w	r3, [r4, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800c598:	f104 000c 	add.w	r0, r4, #12
 800c59c:	6060      	str	r0, [r4, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800c59e:	60a0      	str	r0, [r4, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 800c5a0:	2214      	movs	r2, #20
 800c5a2:	21ff      	movs	r1, #255	; 0xff
 800c5a4:	f002 ffb5 	bl	800f512 <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800c5a8:	2301      	movs	r3, #1
 800c5aa:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
 800c5ae:	bd10      	pop	{r4, pc}
 800c5b0:	20001144 	.word	0x20001144

0800c5b4 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 800c5b4:	b538      	push	{r3, r4, r5, lr}
 800c5b6:	4605      	mov	r5, r0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800c5b8:	4b0f      	ldr	r3, [pc, #60]	; (800c5f8 <LoRaMacConfirmQueueAdd+0x44>)
 800c5ba:	f893 0020 	ldrb.w	r0, [r3, #32]
 800c5be:	f7ff ffbe 	bl	800c53e <IsListFull>
 800c5c2:	b9b8      	cbnz	r0, 800c5f4 <LoRaMacConfirmQueueAdd+0x40>
        // Protect the buffer against overwrites
        return false;
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 800c5c4:	4c0c      	ldr	r4, [pc, #48]	; (800c5f8 <LoRaMacConfirmQueueAdd+0x44>)
 800c5c6:	68a3      	ldr	r3, [r4, #8]
 800c5c8:	782a      	ldrb	r2, [r5, #0]
 800c5ca:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 800c5cc:	68a3      	ldr	r3, [r4, #8]
 800c5ce:	786a      	ldrb	r2, [r5, #1]
 800c5d0:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 800c5d2:	68a3      	ldr	r3, [r4, #8]
 800c5d4:	78ea      	ldrb	r2, [r5, #3]
 800c5d6:	70da      	strb	r2, [r3, #3]
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 800c5d8:	68a3      	ldr	r3, [r4, #8]
 800c5da:	2200      	movs	r2, #0
 800c5dc:	709a      	strb	r2, [r3, #2]
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 800c5de:	f894 3020 	ldrb.w	r3, [r4, #32]
 800c5e2:	3301      	adds	r3, #1
 800c5e4:	f884 3020 	strb.w	r3, [r4, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 800c5e8:	68a0      	ldr	r0, [r4, #8]
 800c5ea:	f7ff ff97 	bl	800c51c <IncreaseBufferPointer>
 800c5ee:	60a0      	str	r0, [r4, #8]

    return true;
 800c5f0:	2001      	movs	r0, #1
}
 800c5f2:	bd38      	pop	{r3, r4, r5, pc}
        return false;
 800c5f4:	2000      	movs	r0, #0
 800c5f6:	e7fc      	b.n	800c5f2 <LoRaMacConfirmQueueAdd+0x3e>
 800c5f8:	20001144 	.word	0x20001144

0800c5fc <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 800c5fc:	b538      	push	{r3, r4, r5, lr}
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800c5fe:	4b09      	ldr	r3, [pc, #36]	; (800c624 <LoRaMacConfirmQueueRemoveFirst+0x28>)
 800c600:	f893 4020 	ldrb.w	r4, [r3, #32]
 800c604:	4620      	mov	r0, r4
 800c606:	f7ff ff95 	bl	800c534 <IsListEmpty>
 800c60a:	b948      	cbnz	r0, 800c620 <LoRaMacConfirmQueueRemoveFirst+0x24>
    {
        return false;
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 800c60c:	4d05      	ldr	r5, [pc, #20]	; (800c624 <LoRaMacConfirmQueueRemoveFirst+0x28>)
 800c60e:	3c01      	subs	r4, #1
 800c610:	f885 4020 	strb.w	r4, [r5, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 800c614:	6868      	ldr	r0, [r5, #4]
 800c616:	f7ff ff81 	bl	800c51c <IncreaseBufferPointer>
 800c61a:	6068      	str	r0, [r5, #4]

    return true;
 800c61c:	2001      	movs	r0, #1
}
 800c61e:	bd38      	pop	{r3, r4, r5, pc}
        return false;
 800c620:	2000      	movs	r0, #0
 800c622:	e7fc      	b.n	800c61e <LoRaMacConfirmQueueRemoveFirst+0x22>
 800c624:	20001144 	.word	0x20001144

0800c628 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 800c628:	b538      	push	{r3, r4, r5, lr}
 800c62a:	4605      	mov	r5, r0
 800c62c:	460c      	mov	r4, r1
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800c62e:	4b08      	ldr	r3, [pc, #32]	; (800c650 <LoRaMacConfirmQueueSetStatus+0x28>)
 800c630:	f893 0020 	ldrb.w	r0, [r3, #32]
 800c634:	f7ff ff7e 	bl	800c534 <IsListEmpty>
 800c638:	b948      	cbnz	r0, 800c64e <LoRaMacConfirmQueueSetStatus+0x26>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800c63a:	4b05      	ldr	r3, [pc, #20]	; (800c650 <LoRaMacConfirmQueueSetStatus+0x28>)
 800c63c:	689a      	ldr	r2, [r3, #8]
 800c63e:	6859      	ldr	r1, [r3, #4]
 800c640:	4620      	mov	r0, r4
 800c642:	f7ff ff83 	bl	800c54c <GetElement>
        if( element != NULL )
 800c646:	b110      	cbz	r0, 800c64e <LoRaMacConfirmQueueSetStatus+0x26>
        {
            element->Status = status;
 800c648:	7045      	strb	r5, [r0, #1]
            element->ReadyToHandle = true;
 800c64a:	2201      	movs	r2, #1
 800c64c:	7082      	strb	r2, [r0, #2]
        }
    }
}
 800c64e:	bd38      	pop	{r3, r4, r5, pc}
 800c650:	20001144 	.word	0x20001144

0800c654 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 800c654:	b510      	push	{r4, lr}
 800c656:	4604      	mov	r4, r0
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800c658:	4b09      	ldr	r3, [pc, #36]	; (800c680 <LoRaMacConfirmQueueGetStatus+0x2c>)
 800c65a:	f893 0020 	ldrb.w	r0, [r3, #32]
 800c65e:	f7ff ff69 	bl	800c534 <IsListEmpty>
 800c662:	b940      	cbnz	r0, 800c676 <LoRaMacConfirmQueueGetStatus+0x22>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800c664:	4b06      	ldr	r3, [pc, #24]	; (800c680 <LoRaMacConfirmQueueGetStatus+0x2c>)
 800c666:	689a      	ldr	r2, [r3, #8]
 800c668:	6859      	ldr	r1, [r3, #4]
 800c66a:	4620      	mov	r0, r4
 800c66c:	f7ff ff6e 	bl	800c54c <GetElement>
        if( element != NULL )
 800c670:	b118      	cbz	r0, 800c67a <LoRaMacConfirmQueueGetStatus+0x26>
        {
            return element->Status;
 800c672:	7840      	ldrb	r0, [r0, #1]
 800c674:	e000      	b.n	800c678 <LoRaMacConfirmQueueGetStatus+0x24>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800c676:	2001      	movs	r0, #1
}
 800c678:	bd10      	pop	{r4, pc}
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800c67a:	2001      	movs	r0, #1
 800c67c:	e7fc      	b.n	800c678 <LoRaMacConfirmQueueGetStatus+0x24>
 800c67e:	bf00      	nop
 800c680:	20001144 	.word	0x20001144

0800c684 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 800c684:	b538      	push	{r3, r4, r5, lr}
 800c686:	4605      	mov	r5, r0
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 800c688:	4b0c      	ldr	r3, [pc, #48]	; (800c6bc <LoRaMacConfirmQueueSetStatusCmn+0x38>)
 800c68a:	685c      	ldr	r4, [r3, #4]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 800c68c:	f883 0021 	strb.w	r0, [r3, #33]	; 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800c690:	f893 0020 	ldrb.w	r0, [r3, #32]
 800c694:	f7ff ff4e 	bl	800c534 <IsListEmpty>
 800c698:	b150      	cbz	r0, 800c6b0 <LoRaMacConfirmQueueSetStatusCmn+0x2c>
                element->ReadyToHandle = true;
            }
            element = IncreaseBufferPointer( element );
        }while( element != ConfirmQueueCtx.BufferEnd );
    }
}
 800c69a:	bd38      	pop	{r3, r4, r5, pc}
                element->ReadyToHandle = true;
 800c69c:	2301      	movs	r3, #1
 800c69e:	70a3      	strb	r3, [r4, #2]
            element = IncreaseBufferPointer( element );
 800c6a0:	4620      	mov	r0, r4
 800c6a2:	f7ff ff3b 	bl	800c51c <IncreaseBufferPointer>
 800c6a6:	4604      	mov	r4, r0
        }while( element != ConfirmQueueCtx.BufferEnd );
 800c6a8:	4b04      	ldr	r3, [pc, #16]	; (800c6bc <LoRaMacConfirmQueueSetStatusCmn+0x38>)
 800c6aa:	689b      	ldr	r3, [r3, #8]
 800c6ac:	4283      	cmp	r3, r0
 800c6ae:	d0f4      	beq.n	800c69a <LoRaMacConfirmQueueSetStatusCmn+0x16>
            element->Status = status;
 800c6b0:	7065      	strb	r5, [r4, #1]
            if( element->RestrictCommonReadyToHandle == false )
 800c6b2:	78e3      	ldrb	r3, [r4, #3]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d1f3      	bne.n	800c6a0 <LoRaMacConfirmQueueSetStatusCmn+0x1c>
 800c6b8:	e7f0      	b.n	800c69c <LoRaMacConfirmQueueSetStatusCmn+0x18>
 800c6ba:	bf00      	nop
 800c6bc:	20001144 	.word	0x20001144

0800c6c0 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 800c6c0:	b508      	push	{r3, lr}
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 800c6c2:	4b04      	ldr	r3, [pc, #16]	; (800c6d4 <LoRaMacConfirmQueueIsCmdActive+0x14>)
 800c6c4:	689a      	ldr	r2, [r3, #8]
 800c6c6:	6859      	ldr	r1, [r3, #4]
 800c6c8:	f7ff ff40 	bl	800c54c <GetElement>
 800c6cc:	b100      	cbz	r0, 800c6d0 <LoRaMacConfirmQueueIsCmdActive+0x10>
    {
        return true;
 800c6ce:	2001      	movs	r0, #1
    }
    return false;
}
 800c6d0:	bd08      	pop	{r3, pc}
 800c6d2:	bf00      	nop
 800c6d4:	20001144 	.word	0x20001144

0800c6d8 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 800c6d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c6da:	b083      	sub	sp, #12
 800c6dc:	4606      	mov	r6, r0
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 800c6de:	4b16      	ldr	r3, [pc, #88]	; (800c738 <LoRaMacConfirmQueueHandleCb+0x60>)
 800c6e0:	f893 7020 	ldrb.w	r7, [r3, #32]
    bool readyToHandle = false;
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 800c6e4:	2400      	movs	r4, #0
 800c6e6:	e00d      	b.n	800c704 <LoRaMacConfirmQueueHandleCb+0x2c>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 800c6e8:	781a      	ldrb	r2, [r3, #0]
 800c6ea:	f88d 2004 	strb.w	r2, [sp, #4]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 800c6ee:	785a      	ldrb	r2, [r3, #1]
 800c6f0:	f88d 2005 	strb.w	r2, [sp, #5]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 800c6f4:	78db      	ldrb	r3, [r3, #3]
 800c6f6:	f88d 3007 	strb.w	r3, [sp, #7]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 800c6fa:	f7ff ff7f 	bl	800c5fc <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 800c6fe:	b1a5      	cbz	r5, 800c72a <LoRaMacConfirmQueueHandleCb+0x52>
    for( uint8_t i = 0; i < nbElements; i++ )
 800c700:	3401      	adds	r4, #1
 800c702:	b2e4      	uxtb	r4, r4
 800c704:	42bc      	cmp	r4, r7
 800c706:	d214      	bcs.n	800c732 <LoRaMacConfirmQueueHandleCb+0x5a>
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 800c708:	4b0b      	ldr	r3, [pc, #44]	; (800c738 <LoRaMacConfirmQueueHandleCb+0x60>)
 800c70a:	685a      	ldr	r2, [r3, #4]
 800c70c:	7812      	ldrb	r2, [r2, #0]
 800c70e:	7032      	strb	r2, [r6, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 800c710:	685a      	ldr	r2, [r3, #4]
 800c712:	7852      	ldrb	r2, [r2, #1]
 800c714:	7072      	strb	r2, [r6, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 800c716:	685b      	ldr	r3, [r3, #4]
 800c718:	789d      	ldrb	r5, [r3, #2]
        if( readyToHandle == true )
 800c71a:	2d00      	cmp	r5, #0
 800c71c:	d0e4      	beq.n	800c6e8 <LoRaMacConfirmQueueHandleCb+0x10>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 800c71e:	4b06      	ldr	r3, [pc, #24]	; (800c738 <LoRaMacConfirmQueueHandleCb+0x60>)
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	689b      	ldr	r3, [r3, #8]
 800c724:	4630      	mov	r0, r6
 800c726:	4798      	blx	r3
 800c728:	e7e7      	b.n	800c6fa <LoRaMacConfirmQueueHandleCb+0x22>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 800c72a:	a801      	add	r0, sp, #4
 800c72c:	f7ff ff42 	bl	800c5b4 <LoRaMacConfirmQueueAdd>
 800c730:	e7e6      	b.n	800c700 <LoRaMacConfirmQueueHandleCb+0x28>
        }
    }
}
 800c732:	b003      	add	sp, #12
 800c734:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c736:	bf00      	nop
 800c738:	20001144 	.word	0x20001144

0800c73c <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
}
 800c73c:	4b01      	ldr	r3, [pc, #4]	; (800c744 <LoRaMacConfirmQueueGetCnt+0x8>)
 800c73e:	f893 0020 	ldrb.w	r0, [r3, #32]
 800c742:	4770      	bx	lr
 800c744:	20001144 	.word	0x20001144

0800c748 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 800c748:	b508      	push	{r3, lr}
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800c74a:	4b03      	ldr	r3, [pc, #12]	; (800c758 <LoRaMacConfirmQueueIsFull+0x10>)
 800c74c:	f893 0020 	ldrb.w	r0, [r3, #32]
 800c750:	f7ff fef5 	bl	800c53e <IsListFull>
    }
    else
    {
        return false;
    }
}
 800c754:	bd08      	pop	{r3, pc}
 800c756:	bf00      	nop
 800c758:	20001144 	.word	0x20001144

0800c75c <PrepareB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[IN/OUT]  b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 800c75c:	b410      	push	{r4}
 800c75e:	9c01      	ldr	r4, [sp, #4]
 800c760:	9902      	ldr	r1, [sp, #8]
 800c762:	9a03      	ldr	r2, [sp, #12]
    if( b0 == 0 )
 800c764:	b1da      	cbz	r2, 800c79e <PrepareB0+0x42>
 800c766:	4684      	mov	ip, r0
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    b0[0] = 0x49;
 800c768:	2049      	movs	r0, #73	; 0x49
 800c76a:	7010      	strb	r0, [r2, #0]
    }
    else
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    /* ST_WORAROUND_END */
    {
        b0[1] = 0x00;
 800c76c:	2000      	movs	r0, #0
 800c76e:	7050      	strb	r0, [r2, #1]
        b0[2] = 0x00;
 800c770:	7090      	strb	r0, [r2, #2]
    }

    b0[3] = 0x00;
 800c772:	70d0      	strb	r0, [r2, #3]
    b0[4] = 0x00;
 800c774:	7110      	strb	r0, [r2, #4]

    b0[5] = dir;
 800c776:	7153      	strb	r3, [r2, #5]

    b0[6] = devAddr & 0xFF;
 800c778:	7194      	strb	r4, [r2, #6]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 800c77a:	0a23      	lsrs	r3, r4, #8
 800c77c:	71d3      	strb	r3, [r2, #7]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 800c77e:	0c23      	lsrs	r3, r4, #16
 800c780:	7213      	strb	r3, [r2, #8]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 800c782:	0e24      	lsrs	r4, r4, #24
 800c784:	7254      	strb	r4, [r2, #9]

    b0[10] = fCnt & 0xFF;
 800c786:	7291      	strb	r1, [r2, #10]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 800c788:	0a0b      	lsrs	r3, r1, #8
 800c78a:	72d3      	strb	r3, [r2, #11]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 800c78c:	0c0b      	lsrs	r3, r1, #16
 800c78e:	7313      	strb	r3, [r2, #12]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800c790:	0e09      	lsrs	r1, r1, #24
 800c792:	7351      	strb	r1, [r2, #13]

    b0[14] = 0x00;
 800c794:	7390      	strb	r0, [r2, #14]

    b0[15] = msgLen & 0xFF;
 800c796:	f882 c00f 	strb.w	ip, [r2, #15]

    return LORAMAC_CRYPTO_SUCCESS;
}
 800c79a:	bc10      	pop	{r4}
 800c79c:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800c79e:	200a      	movs	r0, #10
 800c7a0:	e7fb      	b.n	800c79a <PrepareB0+0x3e>
	...

0800c7a4 <GetKeyAddrItem>:
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 800c7a4:	2300      	movs	r3, #0
 800c7a6:	2b01      	cmp	r3, #1
 800c7a8:	d80e      	bhi.n	800c7c8 <GetKeyAddrItem+0x24>
    {
        if( KeyAddrList[i].AddrID == addrID )
 800c7aa:	469c      	mov	ip, r3
 800c7ac:	4a07      	ldr	r2, [pc, #28]	; (800c7cc <GetKeyAddrItem+0x28>)
 800c7ae:	f812 2023 	ldrb.w	r2, [r2, r3, lsl #2]
 800c7b2:	4282      	cmp	r2, r0
 800c7b4:	d002      	beq.n	800c7bc <GetKeyAddrItem+0x18>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 800c7b6:	3301      	adds	r3, #1
 800c7b8:	b2db      	uxtb	r3, r3
 800c7ba:	e7f4      	b.n	800c7a6 <GetKeyAddrItem+0x2>
        {
            *item = &( KeyAddrList[i] );
 800c7bc:	4b03      	ldr	r3, [pc, #12]	; (800c7cc <GetKeyAddrItem+0x28>)
 800c7be:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 800c7c2:	600b      	str	r3, [r1, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 800c7c4:	2000      	movs	r0, #0
 800c7c6:	4770      	bx	lr
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 800c7c8:	200c      	movs	r0, #12
}
 800c7ca:	4770      	bx	lr
 800c7cc:	200000c8 	.word	0x200000c8

0800c7d0 <GetLastFcntDown>:
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
    if( lastDown == NULL )
 800c7d0:	460b      	mov	r3, r1
 800c7d2:	b309      	cbz	r1, 800c818 <GetLastFcntDown+0x48>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }
    switch( fCntID )
 800c7d4:	3801      	subs	r0, #1
 800c7d6:	2803      	cmp	r0, #3
 800c7d8:	d820      	bhi.n	800c81c <GetLastFcntDown+0x4c>
 800c7da:	e8df f000 	tbb	[pc, r0]
 800c7de:	0902      	.short	0x0902
 800c7e0:	1710      	.short	0x1710
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 800c7e2:	4a0f      	ldr	r2, [pc, #60]	; (800c820 <GetLastFcntDown+0x50>)
 800c7e4:	6812      	ldr	r2, [r2, #0]
 800c7e6:	6911      	ldr	r1, [r2, #16]
 800c7e8:	6019      	str	r1, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.NFCntDown;
 800c7ea:	6211      	str	r1, [r2, #32]
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
    }
    return LORAMAC_CRYPTO_SUCCESS;
 800c7ec:	2000      	movs	r0, #0
            break;
 800c7ee:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 800c7f0:	4a0b      	ldr	r2, [pc, #44]	; (800c820 <GetLastFcntDown+0x50>)
 800c7f2:	6812      	ldr	r2, [r2, #0]
 800c7f4:	6951      	ldr	r1, [r2, #20]
 800c7f6:	6019      	str	r1, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.AFCntDown;
 800c7f8:	6211      	str	r1, [r2, #32]
    return LORAMAC_CRYPTO_SUCCESS;
 800c7fa:	2000      	movs	r0, #0
            break;
 800c7fc:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.FCntDown;
 800c7fe:	4a08      	ldr	r2, [pc, #32]	; (800c820 <GetLastFcntDown+0x50>)
 800c800:	6812      	ldr	r2, [r2, #0]
 800c802:	6991      	ldr	r1, [r2, #24]
 800c804:	6019      	str	r1, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 800c806:	6211      	str	r1, [r2, #32]
    return LORAMAC_CRYPTO_SUCCESS;
 800c808:	2000      	movs	r0, #0
            break;
 800c80a:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 800c80c:	4a04      	ldr	r2, [pc, #16]	; (800c820 <GetLastFcntDown+0x50>)
 800c80e:	6812      	ldr	r2, [r2, #0]
 800c810:	69d2      	ldr	r2, [r2, #28]
 800c812:	600a      	str	r2, [r1, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 800c814:	2000      	movs	r0, #0
            break;
 800c816:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800c818:	200a      	movs	r0, #10
 800c81a:	4770      	bx	lr
    switch( fCntID )
 800c81c:	2005      	movs	r0, #5
}
 800c81e:	4770      	bx	lr
 800c820:	20001168 	.word	0x20001168

0800c824 <CheckFCntDown>:
 * \param[IN]     currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 800c824:	b510      	push	{r4, lr}
 800c826:	b082      	sub	sp, #8
 800c828:	460c      	mov	r4, r1
    uint32_t lastDown = 0;
 800c82a:	2300      	movs	r3, #0
 800c82c:	9301      	str	r3, [sp, #4]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 800c82e:	a901      	add	r1, sp, #4
 800c830:	f7ff ffce 	bl	800c7d0 <GetLastFcntDown>
 800c834:	b948      	cbnz	r0, 800c84a <CheckFCntDown+0x26>
    {
        return false;
    }
    if( ( currentDown > lastDown ) ||
 800c836:	9b01      	ldr	r3, [sp, #4]
 800c838:	42a3      	cmp	r3, r4
 800c83a:	d309      	bcc.n	800c850 <CheckFCntDown+0x2c>
 800c83c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c840:	d001      	beq.n	800c846 <CheckFCntDown+0x22>
    {
        return true;
    }
    else
    {
        return false;
 800c842:	2000      	movs	r0, #0
 800c844:	e002      	b.n	800c84c <CheckFCntDown+0x28>
        return true;
 800c846:	2001      	movs	r0, #1
 800c848:	e000      	b.n	800c84c <CheckFCntDown+0x28>
        return false;
 800c84a:	2000      	movs	r0, #0
    }
}
 800c84c:	b002      	add	sp, #8
 800c84e:	bd10      	pop	{r4, pc}
        return true;
 800c850:	2001      	movs	r0, #1
 800c852:	e7fb      	b.n	800c84c <CheckFCntDown+0x28>

0800c854 <UpdateFCntDown>:
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
    switch( fCntID )
 800c854:	3801      	subs	r0, #1
 800c856:	2803      	cmp	r0, #3
 800c858:	d812      	bhi.n	800c880 <UpdateFCntDown+0x2c>
 800c85a:	e8df f000 	tbb	[pc, r0]
 800c85e:	0602      	.short	0x0602
 800c860:	0e0a      	.short	0x0e0a
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 800c862:	4b08      	ldr	r3, [pc, #32]	; (800c884 <UpdateFCntDown+0x30>)
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	6119      	str	r1, [r3, #16]
            break;
 800c868:	4770      	bx	lr
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 800c86a:	4b06      	ldr	r3, [pc, #24]	; (800c884 <UpdateFCntDown+0x30>)
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	6159      	str	r1, [r3, #20]
            break;
 800c870:	4770      	bx	lr
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 800c872:	4b04      	ldr	r3, [pc, #16]	; (800c884 <UpdateFCntDown+0x30>)
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	6199      	str	r1, [r3, #24]
            break;
 800c878:	4770      	bx	lr
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 800c87a:	4b02      	ldr	r3, [pc, #8]	; (800c884 <UpdateFCntDown+0x30>)
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	61d9      	str	r1, [r3, #28]
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
    }
}
 800c880:	4770      	bx	lr
 800c882:	bf00      	nop
 800c884:	20001168 	.word	0x20001168

0800c888 <ResetFCnts>:
/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
    CryptoNvm->FCntList.FCntUp = 0;
 800c888:	4b0a      	ldr	r3, [pc, #40]	; (800c8b4 <ResetFCnts+0x2c>)
 800c88a:	681a      	ldr	r2, [r3, #0]
 800c88c:	2300      	movs	r3, #0
 800c88e:	60d3      	str	r3, [r2, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 800c890:	f04f 31ff 	mov.w	r1, #4294967295
 800c894:	6111      	str	r1, [r2, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 800c896:	6151      	str	r1, [r2, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 800c898:	6191      	str	r1, [r2, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 800c89a:	6211      	str	r1, [r2, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	dd00      	ble.n	800c8a2 <ResetFCnts+0x1a>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
    }
}
 800c8a0:	4770      	bx	lr
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
 800c8a2:	1d99      	adds	r1, r3, #6
 800c8a4:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800c8a8:	f04f 30ff 	mov.w	r0, #4294967295
 800c8ac:	6048      	str	r0, [r1, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800c8ae:	3301      	adds	r3, #1
 800c8b0:	e7f4      	b.n	800c89c <ResetFCnts+0x14>
 800c8b2:	bf00      	nop
 800c8b4:	20001168 	.word	0x20001168

0800c8b8 <ComputeCmacB0>:
{
 800c8b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8bc:	b088      	sub	sp, #32
 800c8be:	9e11      	ldr	r6, [sp, #68]	; 0x44
    if( ( msg == 0 ) || ( cmac == 0 ) )
 800c8c0:	b1f0      	cbz	r0, 800c900 <ComputeCmacB0+0x48>
 800c8c2:	460c      	mov	r4, r1
 800c8c4:	4615      	mov	r5, r2
 800c8c6:	461a      	mov	r2, r3
 800c8c8:	4680      	mov	r8, r0
 800c8ca:	b1de      	cbz	r6, 800c904 <ComputeCmacB0+0x4c>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800c8cc:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800c8d0:	d81a      	bhi.n	800c908 <ComputeCmacB0+0x50>
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 800c8d2:	af04      	add	r7, sp, #16
 800c8d4:	9702      	str	r7, [sp, #8]
 800c8d6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c8d8:	9301      	str	r3, [sp, #4]
 800c8da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c8dc:	9300      	str	r3, [sp, #0]
 800c8de:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 800c8e2:	4629      	mov	r1, r5
 800c8e4:	4620      	mov	r0, r4
 800c8e6:	f7ff ff39 	bl	800c75c <PrepareB0>
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 800c8ea:	9600      	str	r6, [sp, #0]
 800c8ec:	462b      	mov	r3, r5
 800c8ee:	4622      	mov	r2, r4
 800c8f0:	4641      	mov	r1, r8
 800c8f2:	4638      	mov	r0, r7
 800c8f4:	f002 fc8e 	bl	800f214 <SecureElementComputeAesCmac>
 800c8f8:	b940      	cbnz	r0, 800c90c <ComputeCmacB0+0x54>
}
 800c8fa:	b008      	add	sp, #32
 800c8fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800c900:	200a      	movs	r0, #10
 800c902:	e7fa      	b.n	800c8fa <ComputeCmacB0+0x42>
 800c904:	200a      	movs	r0, #10
 800c906:	e7f8      	b.n	800c8fa <ComputeCmacB0+0x42>
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800c908:	200e      	movs	r0, #14
 800c90a:	e7f6      	b.n	800c8fa <ComputeCmacB0+0x42>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800c90c:	200f      	movs	r0, #15
 800c90e:	e7f4      	b.n	800c8fa <ComputeCmacB0+0x42>

0800c910 <DeriveSessionKey10x>:
{
 800c910:	b510      	push	{r4, lr}
 800c912:	b084      	sub	sp, #16
    uint8_t compBase[16] = { 0 };
 800c914:	2400      	movs	r4, #0
 800c916:	9400      	str	r4, [sp, #0]
 800c918:	9401      	str	r4, [sp, #4]
 800c91a:	9402      	str	r4, [sp, #8]
 800c91c:	9403      	str	r4, [sp, #12]
    switch( keyID )
 800c91e:	2802      	cmp	r0, #2
 800c920:	d003      	beq.n	800c92a <DeriveSessionKey10x+0x1a>
 800c922:	2803      	cmp	r0, #3
 800c924:	d025      	beq.n	800c972 <DeriveSessionKey10x+0x62>
 800c926:	200b      	movs	r0, #11
 800c928:	e021      	b.n	800c96e <DeriveSessionKey10x+0x5e>
            compBase[0] = 0x01;
 800c92a:	2401      	movs	r4, #1
 800c92c:	f88d 4000 	strb.w	r4, [sp]
    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 800c930:	f88d 1001 	strb.w	r1, [sp, #1]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 800c934:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800c938:	f88d 4002 	strb.w	r4, [sp, #2]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 800c93c:	f3c1 4107 	ubfx	r1, r1, #16, #8
 800c940:	f88d 1003 	strb.w	r1, [sp, #3]
    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 800c944:	f88d 2004 	strb.w	r2, [sp, #4]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 800c948:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800c94c:	f88d 1005 	strb.w	r1, [sp, #5]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 800c950:	f3c2 4207 	ubfx	r2, r2, #16, #8
 800c954:	f88d 2006 	strb.w	r2, [sp, #6]
    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 800c958:	f88d 3007 	strb.w	r3, [sp, #7]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 800c95c:	0a1b      	lsrs	r3, r3, #8
 800c95e:	f88d 3008 	strb.w	r3, [sp, #8]
    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 800c962:	4602      	mov	r2, r0
 800c964:	2101      	movs	r1, #1
 800c966:	4668      	mov	r0, sp
 800c968:	f002 fcf4 	bl	800f354 <SecureElementDeriveAndStoreKey>
 800c96c:	b928      	cbnz	r0, 800c97a <DeriveSessionKey10x+0x6a>
}
 800c96e:	b004      	add	sp, #16
 800c970:	bd10      	pop	{r4, pc}
            compBase[0] = 0x02;
 800c972:	2402      	movs	r4, #2
 800c974:	f88d 4000 	strb.w	r4, [sp]
            break;
 800c978:	e7da      	b.n	800c930 <DeriveSessionKey10x+0x20>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800c97a:	200f      	movs	r0, #15
 800c97c:	e7f7      	b.n	800c96e <DeriveSessionKey10x+0x5e>

0800c97e <PayloadEncrypt>:
{
 800c97e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c982:	b088      	sub	sp, #32
 800c984:	4690      	mov	r8, r2
 800c986:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    if( buffer == 0 )
 800c988:	2800      	cmp	r0, #0
 800c98a:	d052      	beq.n	800ca32 <PayloadEncrypt+0xb4>
 800c98c:	460d      	mov	r5, r1
 800c98e:	4604      	mov	r4, r0
    uint8_t sBlock[16] = { 0 };
 800c990:	2600      	movs	r6, #0
 800c992:	9604      	str	r6, [sp, #16]
 800c994:	9605      	str	r6, [sp, #20]
 800c996:	9606      	str	r6, [sp, #24]
 800c998:	9607      	str	r6, [sp, #28]
    uint8_t aBlock[16] = { 0 };
 800c99a:	9600      	str	r6, [sp, #0]
 800c99c:	9601      	str	r6, [sp, #4]
 800c99e:	9602      	str	r6, [sp, #8]
 800c9a0:	9603      	str	r6, [sp, #12]
    aBlock[0] = 0x01;
 800c9a2:	2701      	movs	r7, #1
 800c9a4:	f88d 7000 	strb.w	r7, [sp]
    aBlock[5] = dir;
 800c9a8:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 800c9ac:	f88d 1005 	strb.w	r1, [sp, #5]
    aBlock[6] = address & 0xFF;
 800c9b0:	f88d 3006 	strb.w	r3, [sp, #6]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 800c9b4:	0a19      	lsrs	r1, r3, #8
 800c9b6:	f88d 1007 	strb.w	r1, [sp, #7]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 800c9ba:	0c19      	lsrs	r1, r3, #16
 800c9bc:	f88d 1008 	strb.w	r1, [sp, #8]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 800c9c0:	0e1b      	lsrs	r3, r3, #24
 800c9c2:	f88d 3009 	strb.w	r3, [sp, #9]
    aBlock[10] = frameCounter & 0xFF;
 800c9c6:	f88d 200a 	strb.w	r2, [sp, #10]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 800c9ca:	0a13      	lsrs	r3, r2, #8
 800c9cc:	f88d 300b 	strb.w	r3, [sp, #11]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 800c9d0:	0c13      	lsrs	r3, r2, #16
 800c9d2:	f88d 300c 	strb.w	r3, [sp, #12]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 800c9d6:	0e12      	lsrs	r2, r2, #24
 800c9d8:	f88d 200d 	strb.w	r2, [sp, #13]
    while( size > 0 )
 800c9dc:	e014      	b.n	800ca08 <PayloadEncrypt+0x8a>
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 800c9de:	18f2      	adds	r2, r6, r3
 800c9e0:	5ca0      	ldrb	r0, [r4, r2]
 800c9e2:	f103 0120 	add.w	r1, r3, #32
 800c9e6:	4469      	add	r1, sp
 800c9e8:	f811 1c10 	ldrb.w	r1, [r1, #-16]
 800c9ec:	4048      	eors	r0, r1
 800c9ee:	54a0      	strb	r0, [r4, r2]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 800c9f0:	3301      	adds	r3, #1
 800c9f2:	b2db      	uxtb	r3, r3
 800c9f4:	462a      	mov	r2, r5
 800c9f6:	2d10      	cmp	r5, #16
 800c9f8:	bfa8      	it	ge
 800c9fa:	2210      	movge	r2, #16
 800c9fc:	4293      	cmp	r3, r2
 800c9fe:	dbee      	blt.n	800c9de <PayloadEncrypt+0x60>
        size -= 16;
 800ca00:	3d10      	subs	r5, #16
 800ca02:	b22d      	sxth	r5, r5
        bufferIndex += 16;
 800ca04:	3610      	adds	r6, #16
 800ca06:	b2f6      	uxtb	r6, r6
    while( size > 0 )
 800ca08:	2d00      	cmp	r5, #0
 800ca0a:	dd0e      	ble.n	800ca2a <PayloadEncrypt+0xac>
        aBlock[15] = ctr & 0xFF;
 800ca0c:	f88d 700f 	strb.w	r7, [sp, #15]
        ctr++;
 800ca10:	3701      	adds	r7, #1
 800ca12:	b2bf      	uxth	r7, r7
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 800ca14:	ab04      	add	r3, sp, #16
 800ca16:	4642      	mov	r2, r8
 800ca18:	2110      	movs	r1, #16
 800ca1a:	4668      	mov	r0, sp
 800ca1c:	f002 fc1f 	bl	800f25e <SecureElementAesEncrypt>
 800ca20:	4603      	mov	r3, r0
 800ca22:	2800      	cmp	r0, #0
 800ca24:	d0e6      	beq.n	800c9f4 <PayloadEncrypt+0x76>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800ca26:	200f      	movs	r0, #15
 800ca28:	e000      	b.n	800ca2c <PayloadEncrypt+0xae>
    return LORAMAC_CRYPTO_SUCCESS;
 800ca2a:	2000      	movs	r0, #0
}
 800ca2c:	b008      	add	sp, #32
 800ca2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800ca32:	200a      	movs	r0, #10
 800ca34:	e7fa      	b.n	800ca2c <PayloadEncrypt+0xae>

0800ca36 <VerifyCmacB0>:
    if( msg == 0 )
 800ca36:	b370      	cbz	r0, 800ca96 <VerifyCmacB0+0x60>
{
 800ca38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca3c:	b0c8      	sub	sp, #288	; 0x120
 800ca3e:	460c      	mov	r4, r1
 800ca40:	4615      	mov	r5, r2
 800ca42:	461e      	mov	r6, r3
 800ca44:	4680      	mov	r8, r0
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800ca46:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800ca4a:	d826      	bhi.n	800ca9a <VerifyCmacB0+0x64>
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 800ca4c:	af04      	add	r7, sp, #16
 800ca4e:	f44f 7288 	mov.w	r2, #272	; 0x110
 800ca52:	2100      	movs	r1, #0
 800ca54:	4638      	mov	r0, r7
 800ca56:	f002 fd5c 	bl	800f512 <memset1>
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 800ca5a:	9702      	str	r7, [sp, #8]
 800ca5c:	9b50      	ldr	r3, [sp, #320]	; 0x140
 800ca5e:	9301      	str	r3, [sp, #4]
 800ca60:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
 800ca62:	9300      	str	r3, [sp, #0]
 800ca64:	f89d 3138 	ldrb.w	r3, [sp, #312]	; 0x138
 800ca68:	4632      	mov	r2, r6
 800ca6a:	4629      	mov	r1, r5
 800ca6c:	4620      	mov	r0, r4
 800ca6e:	f7ff fe75 	bl	800c75c <PrepareB0>
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 800ca72:	4622      	mov	r2, r4
 800ca74:	4641      	mov	r1, r8
 800ca76:	a808      	add	r0, sp, #32
 800ca78:	f002 fd33 	bl	800f4e2 <memcpy1>
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 800ca7c:	f104 0110 	add.w	r1, r4, #16
 800ca80:	462b      	mov	r3, r5
 800ca82:	9a51      	ldr	r2, [sp, #324]	; 0x144
 800ca84:	b289      	uxth	r1, r1
 800ca86:	4638      	mov	r0, r7
 800ca88:	f002 fbd3 	bl	800f232 <SecureElementVerifyAesCmac>
    if( retval == SECURE_ELEMENT_SUCCESS )
 800ca8c:	b130      	cbz	r0, 800ca9c <VerifyCmacB0+0x66>
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 800ca8e:	2801      	cmp	r0, #1
 800ca90:	d004      	beq.n	800ca9c <VerifyCmacB0+0x66>
    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800ca92:	200f      	movs	r0, #15
 800ca94:	e002      	b.n	800ca9c <VerifyCmacB0+0x66>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800ca96:	200a      	movs	r0, #10
}
 800ca98:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800ca9a:	200e      	movs	r0, #14
}
 800ca9c:	b048      	add	sp, #288	; 0x120
 800ca9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800caa4 <LoRaMacCryptoInit>:
/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
    if( nvm == NULL )
 800caa4:	b188      	cbz	r0, 800caca <LoRaMacCryptoInit+0x26>
{
 800caa6:	b510      	push	{r4, lr}
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 800caa8:	4c09      	ldr	r4, [pc, #36]	; (800cad0 <LoRaMacCryptoInit+0x2c>)
 800caaa:	6020      	str	r0, [r4, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 800caac:	2228      	movs	r2, #40	; 0x28
 800caae:	2100      	movs	r1, #0
 800cab0:	f002 fd2f 	bl	800f512 <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 800cab4:	6823      	ldr	r3, [r4, #0]
 800cab6:	2201      	movs	r2, #1
 800cab8:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 800caba:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 800cabc:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 800cabe:	2400      	movs	r4, #0
 800cac0:	701c      	strb	r4, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 800cac2:	f7ff fee1 	bl	800c888 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 800cac6:	4620      	mov	r0, r4
}
 800cac8:	bd10      	pop	{r4, pc}
        return LORAMAC_CRYPTO_FAIL_PARAM;
 800caca:	2009      	movs	r0, #9
}
 800cacc:	4770      	bx	lr
 800cace:	bf00      	nop
 800cad0:	20001168 	.word	0x20001168

0800cad4 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
    CryptoNvm->LrWanVersion = version;
 800cad4:	4b02      	ldr	r3, [pc, #8]	; (800cae0 <LoRaMacCryptoSetLrWanVersion+0xc>)
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	6018      	str	r0, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
}
 800cada:	2000      	movs	r0, #0
 800cadc:	4770      	bx	lr
 800cade:	bf00      	nop
 800cae0:	20001168 	.word	0x20001168

0800cae4 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
    if( currentUp == NULL )
 800cae4:	b130      	cbz	r0, 800caf4 <LoRaMacCryptoGetFCntUp+0x10>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 800cae6:	4b04      	ldr	r3, [pc, #16]	; (800caf8 <LoRaMacCryptoGetFCntUp+0x14>)
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	68db      	ldr	r3, [r3, #12]
 800caec:	3301      	adds	r3, #1
 800caee:	6003      	str	r3, [r0, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 800caf0:	2000      	movs	r0, #0
 800caf2:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800caf4:	200a      	movs	r0, #10
}
 800caf6:	4770      	bx	lr
 800caf8:	20001168 	.word	0x20001168

0800cafc <LoRaMacCryptoGetFCntDown>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint16_t maxFCntGap, uint32_t frameFcnt, uint32_t* currentDown )
{
 800cafc:	b570      	push	{r4, r5, r6, lr}
 800cafe:	b082      	sub	sp, #8
 800cb00:	4614      	mov	r4, r2
    uint32_t lastDown = 0;
 800cb02:	2200      	movs	r2, #0
 800cb04:	9201      	str	r2, [sp, #4]
    int32_t fCntDiff = 0;
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;

    if( currentDown == NULL )
 800cb06:	b363      	cbz	r3, 800cb62 <LoRaMacCryptoGetFCntDown+0x66>
 800cb08:	460d      	mov	r5, r1
 800cb0a:	461e      	mov	r6, r3
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 800cb0c:	a901      	add	r1, sp, #4
 800cb0e:	f7ff fe5f 	bl	800c7d0 <GetLastFcntDown>
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800cb12:	b9b8      	cbnz	r0, 800cb44 <LoRaMacCryptoGetFCntDown+0x48>
    {
        return cryptoStatus;
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 800cb14:	9b01      	ldr	r3, [sp, #4]
 800cb16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb1a:	d015      	beq.n	800cb48 <LoRaMacCryptoGetFCntDown+0x4c>
        *currentDown = frameFcnt;
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 800cb1c:	b29a      	uxth	r2, r3
 800cb1e:	1aa2      	subs	r2, r4, r2

        if( fCntDiff > 0 )
 800cb20:	2a00      	cmp	r2, #0
 800cb22:	dd13      	ble.n	800cb4c <LoRaMacCryptoGetFCntDown+0x50>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 800cb24:	4413      	add	r3, r2
 800cb26:	6033      	str	r3, [r6, #0]
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
        }
    }

    // For LoRaWAN 1.0.X only, check maxFCntGap
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 800cb28:	4b10      	ldr	r3, [pc, #64]	; (800cb6c <LoRaMacCryptoGetFCntDown+0x70>)
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	789a      	ldrb	r2, [r3, #2]
 800cb2e:	b94a      	cbnz	r2, 800cb44 <LoRaMacCryptoGetFCntDown+0x48>
    {
        if( ( ( int64_t )*currentDown - ( int64_t )lastDown ) >= maxFCntGap )
 800cb30:	6833      	ldr	r3, [r6, #0]
 800cb32:	9901      	ldr	r1, [sp, #4]
 800cb34:	1a5b      	subs	r3, r3, r1
 800cb36:	eb61 0101 	sbc.w	r1, r1, r1
 800cb3a:	42ab      	cmp	r3, r5
 800cb3c:	f171 0100 	sbcs.w	r1, r1, #0
 800cb40:	da11      	bge.n	800cb66 <LoRaMacCryptoGetFCntDown+0x6a>
        {
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 800cb42:	4610      	mov	r0, r2
}
 800cb44:	b002      	add	sp, #8
 800cb46:	bd70      	pop	{r4, r5, r6, pc}
        *currentDown = frameFcnt;
 800cb48:	6034      	str	r4, [r6, #0]
 800cb4a:	e7ed      	b.n	800cb28 <LoRaMacCryptoGetFCntDown+0x2c>
        else if( fCntDiff == 0 )
 800cb4c:	b132      	cbz	r2, 800cb5c <LoRaMacCryptoGetFCntDown+0x60>
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 800cb4e:	0c1b      	lsrs	r3, r3, #16
 800cb50:	041b      	lsls	r3, r3, #16
 800cb52:	4423      	add	r3, r4
 800cb54:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800cb58:	6033      	str	r3, [r6, #0]
 800cb5a:	e7e5      	b.n	800cb28 <LoRaMacCryptoGetFCntDown+0x2c>
            *currentDown = lastDown;
 800cb5c:	6033      	str	r3, [r6, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 800cb5e:	2007      	movs	r0, #7
 800cb60:	e7f0      	b.n	800cb44 <LoRaMacCryptoGetFCntDown+0x48>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800cb62:	200a      	movs	r0, #10
 800cb64:	e7ee      	b.n	800cb44 <LoRaMacCryptoGetFCntDown+0x48>
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
 800cb66:	2008      	movs	r0, #8
 800cb68:	e7ec      	b.n	800cb44 <LoRaMacCryptoGetFCntDown+0x48>
 800cb6a:	bf00      	nop
 800cb6c:	20001168 	.word	0x20001168

0800cb70 <LoRaMacCryptoSetMulticastReference>:
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
    if( multicastList == NULL )
 800cb70:	4601      	mov	r1, r0
 800cb72:	b908      	cbnz	r0, 800cb78 <LoRaMacCryptoSetMulticastReference+0x8>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800cb74:	200a      	movs	r0, #10
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800cb76:	4770      	bx	lr
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800cb78:	2300      	movs	r3, #0
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	dd01      	ble.n	800cb82 <LoRaMacCryptoSetMulticastReference+0x12>
    return LORAMAC_CRYPTO_SUCCESS;
 800cb7e:	2000      	movs	r0, #0
 800cb80:	4770      	bx	lr
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 800cb82:	4a06      	ldr	r2, [pc, #24]	; (800cb9c <LoRaMacCryptoSetMulticastReference+0x2c>)
 800cb84:	6812      	ldr	r2, [r2, #0]
 800cb86:	202c      	movs	r0, #44	; 0x2c
 800cb88:	fb00 1003 	mla	r0, r0, r3, r1
 800cb8c:	f103 0c06 	add.w	ip, r3, #6
 800cb90:	eb02 028c 	add.w	r2, r2, ip, lsl #2
 800cb94:	3204      	adds	r2, #4
 800cb96:	6202      	str	r2, [r0, #32]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800cb98:	3301      	adds	r3, #1
 800cb9a:	e7ee      	b.n	800cb7a <LoRaMacCryptoSetMulticastReference+0xa>
 800cb9c:	20001168 	.word	0x20001168

0800cba0 <LoRaMacCryptoPrepareJoinRequest>:
    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
    if( macMsg == 0 )
 800cba0:	b300      	cbz	r0, 800cbe4 <LoRaMacCryptoPrepareJoinRequest+0x44>
{
 800cba2:	b510      	push	{r4, lr}
 800cba4:	b084      	sub	sp, #16
 800cba6:	4604      	mov	r4, r0
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;

    // Add device nonce
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
 800cba8:	2300      	movs	r3, #0
 800cbaa:	9303      	str	r3, [sp, #12]
    SecureElementRandomNumber( &devNonce );
 800cbac:	a803      	add	r0, sp, #12
 800cbae:	f002 fc35 	bl	800f41c <SecureElementRandomNumber>
    CryptoNvm->DevNonce = devNonce;
 800cbb2:	4b10      	ldr	r3, [pc, #64]	; (800cbf4 <LoRaMacCryptoPrepareJoinRequest+0x54>)
 800cbb4:	681a      	ldr	r2, [r3, #0]
 800cbb6:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800cbba:	8093      	strh	r3, [r2, #4]
#else
    CryptoNvm->DevNonce++;
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 800cbbc:	82e3      	strh	r3, [r4, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800cbbe:	4620      	mov	r0, r4
 800cbc0:	f000 fa2f 	bl	800d022 <LoRaMacSerializerJoinRequest>
 800cbc4:	b980      	cbnz	r0, 800cbe8 <LoRaMacCryptoPrepareJoinRequest+0x48>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 800cbc6:	4623      	mov	r3, r4
 800cbc8:	f853 1b18 	ldr.w	r1, [r3], #24
 800cbcc:	9300      	str	r3, [sp, #0]
 800cbce:	2301      	movs	r3, #1
 800cbd0:	2213      	movs	r2, #19
 800cbd2:	f002 fb1f 	bl	800f214 <SecureElementComputeAesCmac>
 800cbd6:	b950      	cbnz	r0, 800cbee <LoRaMacCryptoPrepareJoinRequest+0x4e>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800cbd8:	4620      	mov	r0, r4
 800cbda:	f000 fa22 	bl	800d022 <LoRaMacSerializerJoinRequest>
 800cbde:	b120      	cbz	r0, 800cbea <LoRaMacCryptoPrepareJoinRequest+0x4a>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800cbe0:	2011      	movs	r0, #17
 800cbe2:	e002      	b.n	800cbea <LoRaMacCryptoPrepareJoinRequest+0x4a>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800cbe4:	200a      	movs	r0, #10
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800cbe6:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800cbe8:	2011      	movs	r0, #17
}
 800cbea:	b004      	add	sp, #16
 800cbec:	bd10      	pop	{r4, pc}
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800cbee:	200f      	movs	r0, #15
 800cbf0:	e7fb      	b.n	800cbea <LoRaMacCryptoPrepareJoinRequest+0x4a>
 800cbf2:	bf00      	nop
 800cbf4:	20001168 	.word	0x20001168

0800cbf8 <LoRaMacCryptoSecureMessage>:
LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;

    if( macMsg == NULL )
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d036      	beq.n	800cc6a <LoRaMacCryptoSecureMessage+0x72>
{
 800cbfc:	b530      	push	{r4, r5, lr}
 800cbfe:	b085      	sub	sp, #20
 800cc00:	4604      	mov	r4, r0
 800cc02:	461d      	mov	r5, r3
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 800cc04:	4b1d      	ldr	r3, [pc, #116]	; (800cc7c <LoRaMacCryptoSecureMessage+0x84>)
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	68db      	ldr	r3, [r3, #12]
 800cc0a:	4283      	cmp	r3, r0
 800cc0c:	d82f      	bhi.n	800cc6e <LoRaMacCryptoSecureMessage+0x76>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 800cc0e:	f895 2020 	ldrb.w	r2, [r5, #32]
 800cc12:	b342      	cbz	r2, 800cc66 <LoRaMacCryptoSecureMessage+0x6e>
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 800cc14:	2203      	movs	r2, #3
        payloadDecryptionKeyID = NWK_S_KEY;
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 800cc16:	42a3      	cmp	r3, r4
 800cc18:	d209      	bcs.n	800cc2e <LoRaMacCryptoSecureMessage+0x36>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 800cc1a:	9401      	str	r4, [sp, #4]
 800cc1c:	2300      	movs	r3, #0
 800cc1e:	9300      	str	r3, [sp, #0]
 800cc20:	68ab      	ldr	r3, [r5, #8]
 800cc22:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 800cc26:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800cc28:	f7ff fea9 	bl	800c97e <PayloadEncrypt>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800cc2c:	bb10      	cbnz	r0, 800cc74 <LoRaMacCryptoSecureMessage+0x7c>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800cc2e:	4628      	mov	r0, r5
 800cc30:	f000 fa2d 	bl	800d08e <LoRaMacSerializerData>
 800cc34:	b9e8      	cbnz	r0, 800cc72 <LoRaMacCryptoSecureMessage+0x7a>
        payloadDecryptionKeyID = NWK_S_KEY;
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 800cc36:	7929      	ldrb	r1, [r5, #4]
 800cc38:	3904      	subs	r1, #4
 800cc3a:	462b      	mov	r3, r5
 800cc3c:	f853 0b2c 	ldr.w	r0, [r3], #44
 800cc40:	9303      	str	r3, [sp, #12]
 800cc42:	9402      	str	r4, [sp, #8]
 800cc44:	68ab      	ldr	r3, [r5, #8]
 800cc46:	9301      	str	r3, [sp, #4]
 800cc48:	2300      	movs	r3, #0
 800cc4a:	9300      	str	r3, [sp, #0]
 800cc4c:	2202      	movs	r2, #2
 800cc4e:	b289      	uxth	r1, r1
 800cc50:	f7ff fe32 	bl	800c8b8 <ComputeCmacB0>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800cc54:	b970      	cbnz	r0, 800cc74 <LoRaMacCryptoSecureMessage+0x7c>
            return retval;
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800cc56:	4628      	mov	r0, r5
 800cc58:	f000 fa19 	bl	800d08e <LoRaMacSerializerData>
 800cc5c:	b960      	cbnz	r0, 800cc78 <LoRaMacCryptoSecureMessage+0x80>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 800cc5e:	4b07      	ldr	r3, [pc, #28]	; (800cc7c <LoRaMacCryptoSecureMessage+0x84>)
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	60dc      	str	r4, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 800cc64:	e006      	b.n	800cc74 <LoRaMacCryptoSecureMessage+0x7c>
        payloadDecryptionKeyID = NWK_S_KEY;
 800cc66:	2202      	movs	r2, #2
 800cc68:	e7d5      	b.n	800cc16 <LoRaMacCryptoSecureMessage+0x1e>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800cc6a:	200a      	movs	r0, #10
}
 800cc6c:	4770      	bx	lr
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800cc6e:	2006      	movs	r0, #6
 800cc70:	e000      	b.n	800cc74 <LoRaMacCryptoSecureMessage+0x7c>
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800cc72:	2011      	movs	r0, #17
}
 800cc74:	b005      	add	sp, #20
 800cc76:	bd30      	pop	{r4, r5, pc}
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800cc78:	2011      	movs	r0, #17
 800cc7a:	e7fb      	b.n	800cc74 <LoRaMacCryptoSecureMessage+0x7c>
 800cc7c:	20001168 	.word	0x20001168

0800cc80 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 800cc80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cc84:	b087      	sub	sp, #28
 800cc86:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    if( macMsg == 0 )
 800cc88:	2e00      	cmp	r6, #0
 800cc8a:	d049      	beq.n	800cd20 <LoRaMacCryptoUnsecureMessage+0xa0>
 800cc8c:	4605      	mov	r5, r0
 800cc8e:	4688      	mov	r8, r1
 800cc90:	4617      	mov	r7, r2
 800cc92:	461c      	mov	r4, r3
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 800cc94:	4619      	mov	r1, r3
 800cc96:	4610      	mov	r0, r2
 800cc98:	f7ff fdc4 	bl	800c824 <CheckFCntDown>
 800cc9c:	2800      	cmp	r0, #0
 800cc9e:	d041      	beq.n	800cd24 <LoRaMacCryptoUnsecureMessage+0xa4>
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    /* ST_WORKAROUND_END */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800cca0:	4630      	mov	r0, r6
 800cca2:	f000 f95f 	bl	800cf64 <LoRaMacParserData>
 800cca6:	2800      	cmp	r0, #0
 800cca8:	d141      	bne.n	800cd2e <LoRaMacCryptoUnsecureMessage+0xae>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 800ccaa:	a905      	add	r1, sp, #20
 800ccac:	4628      	mov	r0, r5
 800ccae:	f7ff fd79 	bl	800c7a4 <GetKeyAddrItem>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800ccb2:	4605      	mov	r5, r0
 800ccb4:	2800      	cmp	r0, #0
 800ccb6:	d136      	bne.n	800cd26 <LoRaMacCryptoUnsecureMessage+0xa6>
    {
        return retval;
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 800ccb8:	9b05      	ldr	r3, [sp, #20]
 800ccba:	f893 9001 	ldrb.w	r9, [r3, #1]
    micComputationKeyID = curItem->NwkSkey;
 800ccbe:	789a      	ldrb	r2, [r3, #2]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 800ccc0:	68b3      	ldr	r3, [r6, #8]
 800ccc2:	4543      	cmp	r3, r8
 800ccc4:	d135      	bne.n	800cd32 <LoRaMacCryptoUnsecureMessage+0xb2>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 800ccc6:	7b33      	ldrb	r3, [r6, #12]
 800ccc8:	f3c3 1340 	ubfx	r3, r3, #5, #1
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 800cccc:	491a      	ldr	r1, [pc, #104]	; (800cd38 <LoRaMacCryptoUnsecureMessage+0xb8>)
 800ccce:	6809      	ldr	r1, [r1, #0]
 800ccd0:	7889      	ldrb	r1, [r1, #2]
 800ccd2:	b901      	cbnz	r1, 800ccd6 <LoRaMacCryptoUnsecureMessage+0x56>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 800ccd4:	2300      	movs	r3, #0
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 800ccd6:	7931      	ldrb	r1, [r6, #4]
 800ccd8:	3904      	subs	r1, #4
 800ccda:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 800ccdc:	9003      	str	r0, [sp, #12]
 800ccde:	9402      	str	r4, [sp, #8]
 800cce0:	f8cd 8004 	str.w	r8, [sp, #4]
 800cce4:	2001      	movs	r0, #1
 800cce6:	9000      	str	r0, [sp, #0]
 800cce8:	b289      	uxth	r1, r1
 800ccea:	6830      	ldr	r0, [r6, #0]
 800ccec:	f7ff fea3 	bl	800ca36 <VerifyCmacB0>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800ccf0:	4605      	mov	r5, r0
 800ccf2:	b9c0      	cbnz	r0, 800cd26 <LoRaMacCryptoUnsecureMessage+0xa6>
    {
        return retval;
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 800ccf4:	f896 3020 	ldrb.w	r3, [r6, #32]
 800ccf8:	b90b      	cbnz	r3, 800ccfe <LoRaMacCryptoUnsecureMessage+0x7e>
        // Use network session encryption key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 800ccfa:	f04f 0902 	mov.w	r9, #2
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 800ccfe:	9401      	str	r4, [sp, #4]
 800cd00:	2301      	movs	r3, #1
 800cd02:	9300      	str	r3, [sp, #0]
 800cd04:	4643      	mov	r3, r8
 800cd06:	464a      	mov	r2, r9
 800cd08:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 800cd0c:	6a70      	ldr	r0, [r6, #36]	; 0x24
 800cd0e:	f7ff fe36 	bl	800c97e <PayloadEncrypt>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800cd12:	4605      	mov	r5, r0
 800cd14:	b938      	cbnz	r0, 800cd26 <LoRaMacCryptoUnsecureMessage+0xa6>
            }
        } 
    }
#endif

    UpdateFCntDown( fCntID, fCntDown );
 800cd16:	4621      	mov	r1, r4
 800cd18:	4638      	mov	r0, r7
 800cd1a:	f7ff fd9b 	bl	800c854 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 800cd1e:	e002      	b.n	800cd26 <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800cd20:	250a      	movs	r5, #10
 800cd22:	e000      	b.n	800cd26 <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800cd24:	2506      	movs	r5, #6
}
 800cd26:	4628      	mov	r0, r5
 800cd28:	b007      	add	sp, #28
 800cd2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800cd2e:	2510      	movs	r5, #16
 800cd30:	e7f9      	b.n	800cd26 <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 800cd32:	2502      	movs	r5, #2
 800cd34:	e7f7      	b.n	800cd26 <LoRaMacCryptoUnsecureMessage+0xa6>
 800cd36:	bf00      	nop
 800cd38:	20001168 	.word	0x20001168

0800cd3c <LoRaMacCryptoDeriveMcRootKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcRootKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
    // Prevent other keys than AppKey
    if( keyID != APP_KEY )
 800cd3c:	b9b1      	cbnz	r1, 800cd6c <LoRaMacCryptoDeriveMcRootKey+0x30>
{
 800cd3e:	b500      	push	{lr}
 800cd40:	b085      	sub	sp, #20
 800cd42:	468c      	mov	ip, r1
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
    }
    uint8_t compBase[16] = { 0 };
 800cd44:	2300      	movs	r3, #0
 800cd46:	9300      	str	r3, [sp, #0]
 800cd48:	9301      	str	r3, [sp, #4]
 800cd4a:	9302      	str	r3, [sp, #8]
 800cd4c:	9303      	str	r3, [sp, #12]

    if( versionMinor == 1 )
 800cd4e:	2801      	cmp	r0, #1
 800cd50:	d008      	beq.n	800cd64 <LoRaMacCryptoDeriveMcRootKey+0x28>
    {
        compBase[0] = 0x20;
    }
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 800cd52:	2204      	movs	r2, #4
 800cd54:	4661      	mov	r1, ip
 800cd56:	4668      	mov	r0, sp
 800cd58:	f002 fafc 	bl	800f354 <SecureElementDeriveAndStoreKey>
 800cd5c:	b940      	cbnz	r0, 800cd70 <LoRaMacCryptoDeriveMcRootKey+0x34>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800cd5e:	b005      	add	sp, #20
 800cd60:	f85d fb04 	ldr.w	pc, [sp], #4
        compBase[0] = 0x20;
 800cd64:	2320      	movs	r3, #32
 800cd66:	f88d 3000 	strb.w	r3, [sp]
 800cd6a:	e7f2      	b.n	800cd52 <LoRaMacCryptoDeriveMcRootKey+0x16>
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 800cd6c:	200b      	movs	r0, #11
}
 800cd6e:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800cd70:	200f      	movs	r0, #15
 800cd72:	e7f4      	b.n	800cd5e <LoRaMacCryptoDeriveMcRootKey+0x22>

0800cd74 <LoRaMacCryptoDeriveMcKEKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
{
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
 800cd74:	2804      	cmp	r0, #4
 800cd76:	d001      	beq.n	800cd7c <LoRaMacCryptoDeriveMcKEKey+0x8>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 800cd78:	200b      	movs	r0, #11
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800cd7a:	4770      	bx	lr
{
 800cd7c:	b500      	push	{lr}
 800cd7e:	b085      	sub	sp, #20
    uint8_t compBase[16] = { 0 };
 800cd80:	2300      	movs	r3, #0
 800cd82:	9300      	str	r3, [sp, #0]
 800cd84:	9301      	str	r3, [sp, #4]
 800cd86:	9302      	str	r3, [sp, #8]
 800cd88:	9303      	str	r3, [sp, #12]
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 800cd8a:	227f      	movs	r2, #127	; 0x7f
 800cd8c:	4601      	mov	r1, r0
 800cd8e:	4668      	mov	r0, sp
 800cd90:	f002 fae0 	bl	800f354 <SecureElementDeriveAndStoreKey>
 800cd94:	b910      	cbnz	r0, 800cd9c <LoRaMacCryptoDeriveMcKEKey+0x28>
}
 800cd96:	b005      	add	sp, #20
 800cd98:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800cd9c:	200f      	movs	r0, #15
 800cd9e:	e7fa      	b.n	800cd96 <LoRaMacCryptoDeriveMcKEKey+0x22>

0800cda0 <LoRaMacCryptoSetKey>:
{
 800cda0:	b510      	push	{r4, lr}
 800cda2:	4604      	mov	r4, r0
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 800cda4:	f002 fa94 	bl	800f2d0 <SecureElementSetKey>
 800cda8:	b978      	cbnz	r0, 800cdca <LoRaMacCryptoSetKey+0x2a>
    if( keyID == APP_KEY )
 800cdaa:	b104      	cbz	r4, 800cdae <LoRaMacCryptoSetKey+0xe>
}
 800cdac:	bd10      	pop	{r4, pc}
        if( LoRaMacCryptoDeriveMcRootKey( CryptoNvm->LrWanVersion.Fields.Minor, keyID ) != LORAMAC_CRYPTO_SUCCESS )
 800cdae:	4b09      	ldr	r3, [pc, #36]	; (800cdd4 <LoRaMacCryptoSetKey+0x34>)
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	4621      	mov	r1, r4
 800cdb4:	7898      	ldrb	r0, [r3, #2]
 800cdb6:	f7ff ffc1 	bl	800cd3c <LoRaMacCryptoDeriveMcRootKey>
 800cdba:	b940      	cbnz	r0, 800cdce <LoRaMacCryptoSetKey+0x2e>
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 800cdbc:	2004      	movs	r0, #4
 800cdbe:	f7ff ffd9 	bl	800cd74 <LoRaMacCryptoDeriveMcKEKey>
 800cdc2:	2800      	cmp	r0, #0
 800cdc4:	d0f2      	beq.n	800cdac <LoRaMacCryptoSetKey+0xc>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800cdc6:	200f      	movs	r0, #15
 800cdc8:	e7f0      	b.n	800cdac <LoRaMacCryptoSetKey+0xc>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800cdca:	200f      	movs	r0, #15
 800cdcc:	e7ee      	b.n	800cdac <LoRaMacCryptoSetKey+0xc>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800cdce:	200f      	movs	r0, #15
 800cdd0:	e7ec      	b.n	800cdac <LoRaMacCryptoSetKey+0xc>
 800cdd2:	bf00      	nop
 800cdd4:	20001168 	.word	0x20001168

0800cdd8 <LoRaMacCryptoHandleJoinAccept>:
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 800cdd8:	2a00      	cmp	r2, #0
 800cdda:	d064      	beq.n	800cea6 <LoRaMacCryptoHandleJoinAccept+0xce>
{
 800cddc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cdde:	b08f      	sub	sp, #60	; 0x3c
 800cde0:	4607      	mov	r7, r0
 800cde2:	460d      	mov	r5, r1
 800cde4:	4614      	mov	r4, r2
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 800cde6:	2900      	cmp	r1, #0
 800cde8:	d05f      	beq.n	800ceaa <LoRaMacCryptoHandleJoinAccept+0xd2>
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 800cdea:	2600      	movs	r6, #0
 800cdec:	9605      	str	r6, [sp, #20]
 800cdee:	221d      	movs	r2, #29
 800cdf0:	4631      	mov	r1, r6
 800cdf2:	a806      	add	r0, sp, #24
 800cdf4:	f006 fa4d 	bl	8013292 <memset>
    uint8_t versionMinor         = 0;
 800cdf8:	f88d 6013 	strb.w	r6, [sp, #19]
    uint16_t nonce               = CryptoNvm->DevNonce;
 800cdfc:	4b2f      	ldr	r3, [pc, #188]	; (800cebc <LoRaMacCryptoHandleJoinAccept+0xe4>)
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	889e      	ldrh	r6, [r3, #4]
    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 800ce02:	f10d 0313 	add.w	r3, sp, #19
 800ce06:	9302      	str	r3, [sp, #8]
 800ce08:	ab05      	add	r3, sp, #20
 800ce0a:	9301      	str	r3, [sp, #4]
 800ce0c:	7923      	ldrb	r3, [r4, #4]
 800ce0e:	9300      	str	r3, [sp, #0]
 800ce10:	6823      	ldr	r3, [r4, #0]
 800ce12:	4632      	mov	r2, r6
 800ce14:	4629      	mov	r1, r5
 800ce16:	4638      	mov	r0, r7
 800ce18:	f002 fabc 	bl	800f394 <SecureElementProcessJoinAccept>
 800ce1c:	2800      	cmp	r0, #0
 800ce1e:	d146      	bne.n	800ceae <LoRaMacCryptoHandleJoinAccept+0xd6>
    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 800ce20:	7922      	ldrb	r2, [r4, #4]
 800ce22:	a905      	add	r1, sp, #20
 800ce24:	6820      	ldr	r0, [r4, #0]
 800ce26:	f002 fb5c 	bl	800f4e2 <memcpy1>
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800ce2a:	4620      	mov	r0, r4
 800ce2c:	f000 f848 	bl	800cec0 <LoRaMacParserJoinAccept>
 800ce30:	2800      	cmp	r0, #0
 800ce32:	d13f      	bne.n	800ceb4 <LoRaMacCryptoHandleJoinAccept+0xdc>
    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 800ce34:	79a5      	ldrb	r5, [r4, #6]
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 800ce36:	79e3      	ldrb	r3, [r4, #7]
 800ce38:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 800ce3c:	7a23      	ldrb	r3, [r4, #8]
 800ce3e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    if( currentJoinNonce != CryptoNvm->JoinNonce )
 800ce42:	4b1e      	ldr	r3, [pc, #120]	; (800cebc <LoRaMacCryptoHandleJoinAccept+0xe4>)
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	689a      	ldr	r2, [r3, #8]
 800ce48:	42aa      	cmp	r2, r5
 800ce4a:	d035      	beq.n	800ceb8 <LoRaMacCryptoHandleJoinAccept+0xe0>
        CryptoNvm->JoinNonce = currentJoinNonce;
 800ce4c:	609d      	str	r5, [r3, #8]
    retval = LoRaMacCryptoDeriveMcRootKey( versionMinor, APP_KEY );
 800ce4e:	2100      	movs	r1, #0
 800ce50:	f89d 0013 	ldrb.w	r0, [sp, #19]
 800ce54:	f7ff ff72 	bl	800cd3c <LoRaMacCryptoDeriveMcRootKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800ce58:	bb50      	cbnz	r0, 800ceb0 <LoRaMacCryptoHandleJoinAccept+0xd8>
    retval = LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY );
 800ce5a:	2004      	movs	r0, #4
 800ce5c:	f7ff ff8a 	bl	800cd74 <LoRaMacCryptoDeriveMcKEKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800ce60:	bb30      	cbnz	r0, 800ceb0 <LoRaMacCryptoHandleJoinAccept+0xd8>
        netID = ( uint32_t )macMsg->NetID[0];
 800ce62:	7a63      	ldrb	r3, [r4, #9]
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 800ce64:	7aa2      	ldrb	r2, [r4, #10]
 800ce66:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 800ce6a:	7ae2      	ldrb	r2, [r4, #11]
 800ce6c:	ea43 4402 	orr.w	r4, r3, r2, lsl #16
        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 800ce70:	4633      	mov	r3, r6
 800ce72:	4622      	mov	r2, r4
 800ce74:	4629      	mov	r1, r5
 800ce76:	2003      	movs	r0, #3
 800ce78:	f7ff fd4a 	bl	800c910 <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800ce7c:	b9c0      	cbnz	r0, 800ceb0 <LoRaMacCryptoHandleJoinAccept+0xd8>
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 800ce7e:	4633      	mov	r3, r6
 800ce80:	4622      	mov	r2, r4
 800ce82:	4629      	mov	r1, r5
 800ce84:	2002      	movs	r0, #2
 800ce86:	f7ff fd43 	bl	800c910 <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800ce8a:	b988      	cbnz	r0, 800ceb0 <LoRaMacCryptoHandleJoinAccept+0xd8>
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 800ce8c:	4b0b      	ldr	r3, [pc, #44]	; (800cebc <LoRaMacCryptoHandleJoinAccept+0xe4>)
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	f89d 2013 	ldrb.w	r2, [sp, #19]
 800ce94:	709a      	strb	r2, [r3, #2]
    CryptoNvm->FCntList.FCntUp = 0;
 800ce96:	2200      	movs	r2, #0
 800ce98:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 800ce9a:	f04f 32ff 	mov.w	r2, #4294967295
 800ce9e:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 800cea0:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 800cea2:	615a      	str	r2, [r3, #20]
    return LORAMAC_CRYPTO_SUCCESS;
 800cea4:	e004      	b.n	800ceb0 <LoRaMacCryptoHandleJoinAccept+0xd8>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800cea6:	200a      	movs	r0, #10
}
 800cea8:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800ceaa:	200a      	movs	r0, #10
 800ceac:	e000      	b.n	800ceb0 <LoRaMacCryptoHandleJoinAccept+0xd8>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800ceae:	200f      	movs	r0, #15
}
 800ceb0:	b00f      	add	sp, #60	; 0x3c
 800ceb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800ceb4:	2010      	movs	r0, #16
 800ceb6:	e7fb      	b.n	800ceb0 <LoRaMacCryptoHandleJoinAccept+0xd8>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 800ceb8:	2003      	movs	r0, #3
 800ceba:	e7f9      	b.n	800ceb0 <LoRaMacCryptoHandleJoinAccept+0xd8>
 800cebc:	20001168 	.word	0x20001168

0800cec0 <LoRaMacParserJoinAccept>:
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800cec0:	2800      	cmp	r0, #0
 800cec2:	d049      	beq.n	800cf58 <LoRaMacParserJoinAccept+0x98>
{
 800cec4:	b510      	push	{r4, lr}
 800cec6:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800cec8:	6801      	ldr	r1, [r0, #0]
 800ceca:	2900      	cmp	r1, #0
 800cecc:	d046      	beq.n	800cf5c <LoRaMacParserJoinAccept+0x9c>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800cece:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ced2:	7143      	strb	r3, [r0, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 800ced4:	2203      	movs	r2, #3
 800ced6:	3006      	adds	r0, #6
 800ced8:	f002 fb03 	bl	800f4e2 <memcpy1>
    bufItr = bufItr + 3;

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 800cedc:	4620      	mov	r0, r4
 800cede:	f850 1b09 	ldr.w	r1, [r0], #9
 800cee2:	2203      	movs	r2, #3
 800cee4:	3104      	adds	r1, #4
 800cee6:	f002 fafc 	bl	800f4e2 <memcpy1>
    bufItr = bufItr + 3;

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 800ceea:	6821      	ldr	r1, [r4, #0]
 800ceec:	79cb      	ldrb	r3, [r1, #7]
 800ceee:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800cef0:	7a0a      	ldrb	r2, [r1, #8]
 800cef2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800cef6:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800cef8:	7a4a      	ldrb	r2, [r1, #9]
 800cefa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cefe:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800cf00:	7a8a      	ldrb	r2, [r1, #10]
 800cf02:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800cf06:	60e3      	str	r3, [r4, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 800cf08:	7acb      	ldrb	r3, [r1, #11]
 800cf0a:	7423      	strb	r3, [r4, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 800cf0c:	7b0b      	ldrb	r3, [r1, #12]
 800cf0e:	7463      	strb	r3, [r4, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 800cf10:	7923      	ldrb	r3, [r4, #4]
 800cf12:	2b21      	cmp	r3, #33	; 0x21
 800cf14:	d018      	beq.n	800cf48 <LoRaMacParserJoinAccept+0x88>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 800cf16:	2b11      	cmp	r3, #17
 800cf18:	dc22      	bgt.n	800cf60 <LoRaMacParserJoinAccept+0xa0>
    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 800cf1a:	220d      	movs	r2, #13
    {
        return LORAMAC_PARSER_FAIL;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 800cf1c:	6821      	ldr	r1, [r4, #0]
 800cf1e:	f102 0c01 	add.w	ip, r2, #1
 800cf22:	5c8b      	ldrb	r3, [r1, r2]
 800cf24:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800cf26:	1c90      	adds	r0, r2, #2
 800cf28:	f811 c00c 	ldrb.w	ip, [r1, ip]
 800cf2c:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 800cf30:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800cf32:	3203      	adds	r2, #3
 800cf34:	5c08      	ldrb	r0, [r1, r0]
 800cf36:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800cf3a:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800cf3c:	5c8a      	ldrb	r2, [r1, r2]
 800cf3e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800cf42:	6263      	str	r3, [r4, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 800cf44:	2000      	movs	r0, #0
}
 800cf46:	bd10      	pop	{r4, pc}
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 800cf48:	2210      	movs	r2, #16
 800cf4a:	310d      	adds	r1, #13
 800cf4c:	f104 0012 	add.w	r0, r4, #18
 800cf50:	f002 fac7 	bl	800f4e2 <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 800cf54:	221d      	movs	r2, #29
 800cf56:	e7e1      	b.n	800cf1c <LoRaMacParserJoinAccept+0x5c>
        return LORAMAC_PARSER_ERROR_NPE;
 800cf58:	2002      	movs	r0, #2
}
 800cf5a:	4770      	bx	lr
        return LORAMAC_PARSER_ERROR_NPE;
 800cf5c:	2002      	movs	r0, #2
 800cf5e:	e7f2      	b.n	800cf46 <LoRaMacParserJoinAccept+0x86>
        return LORAMAC_PARSER_FAIL;
 800cf60:	2001      	movs	r0, #1
 800cf62:	e7f0      	b.n	800cf46 <LoRaMacParserJoinAccept+0x86>

0800cf64 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800cf64:	2800      	cmp	r0, #0
 800cf66:	d058      	beq.n	800d01a <LoRaMacParserData+0xb6>
{
 800cf68:	b510      	push	{r4, lr}
 800cf6a:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800cf6c:	6801      	ldr	r1, [r0, #0]
 800cf6e:	2900      	cmp	r1, #0
 800cf70:	d055      	beq.n	800d01e <LoRaMacParserData+0xba>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800cf72:	780b      	ldrb	r3, [r1, #0]
 800cf74:	7143      	strb	r3, [r0, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 800cf76:	784b      	ldrb	r3, [r1, #1]
 800cf78:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800cf7a:	788a      	ldrb	r2, [r1, #2]
 800cf7c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800cf80:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800cf82:	78ca      	ldrb	r2, [r1, #3]
 800cf84:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cf88:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800cf8a:	790a      	ldrb	r2, [r1, #4]
 800cf8c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800cf90:	6083      	str	r3, [r0, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 800cf92:	794b      	ldrb	r3, [r1, #5]
 800cf94:	7303      	strb	r3, [r0, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 800cf96:	798b      	ldrb	r3, [r1, #6]
 800cf98:	81c3      	strh	r3, [r0, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 800cf9a:	79ca      	ldrb	r2, [r1, #7]
 800cf9c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800cfa0:	81c3      	strh	r3, [r0, #14]

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800cfa2:	7b02      	ldrb	r2, [r0, #12]
 800cfa4:	f002 020f 	and.w	r2, r2, #15
 800cfa8:	3108      	adds	r1, #8
 800cfaa:	3010      	adds	r0, #16
 800cfac:	f002 fa99 	bl	800f4e2 <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800cfb0:	7b23      	ldrb	r3, [r4, #12]
 800cfb2:	f003 030f 	and.w	r3, r3, #15
 800cfb6:	f103 0008 	add.w	r0, r3, #8
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 800cfba:	2200      	movs	r2, #0
 800cfbc:	f884 2020 	strb.w	r2, [r4, #32]
    macMsg->FRMPayloadSize = 0;
 800cfc0:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 800cfc4:	7922      	ldrb	r2, [r4, #4]
 800cfc6:	1a11      	subs	r1, r2, r0
 800cfc8:	2904      	cmp	r1, #4
 800cfca:	dc16      	bgt.n	800cffa <LoRaMacParserData+0x96>
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
        bufItr = bufItr + macMsg->FRMPayloadSize;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 800cfcc:	6822      	ldr	r2, [r4, #0]
 800cfce:	7923      	ldrb	r3, [r4, #4]
 800cfd0:	441a      	add	r2, r3
 800cfd2:	f812 3c04 	ldrb.w	r3, [r2, #-4]
 800cfd6:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 800cfd8:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 800cfdc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800cfe0:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 800cfe2:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 800cfe6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800cfea:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 800cfec:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 800cff0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800cff4:	62e3      	str	r3, [r4, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 800cff6:	2000      	movs	r0, #0
}
 800cff8:	bd10      	pop	{r4, pc}
        macMsg->FPort = macMsg->Buffer[bufItr++];
 800cffa:	6821      	ldr	r1, [r4, #0]
 800cffc:	3309      	adds	r3, #9
 800cffe:	5c08      	ldrb	r0, [r1, r0]
 800d000:	f884 0020 	strb.w	r0, [r4, #32]
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 800d004:	1ad2      	subs	r2, r2, r3
 800d006:	b2d2      	uxtb	r2, r2
 800d008:	3a04      	subs	r2, #4
 800d00a:	b2d2      	uxtb	r2, r2
 800d00c:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 800d010:	4419      	add	r1, r3
 800d012:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d014:	f002 fa65 	bl	800f4e2 <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 800d018:	e7d8      	b.n	800cfcc <LoRaMacParserData+0x68>
        return LORAMAC_PARSER_ERROR_NPE;
 800d01a:	2002      	movs	r0, #2
}
 800d01c:	4770      	bx	lr
        return LORAMAC_PARSER_ERROR_NPE;
 800d01e:	2002      	movs	r0, #2
 800d020:	e7ea      	b.n	800cff8 <LoRaMacParserData+0x94>

0800d022 <LoRaMacSerializerJoinRequest>:
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800d022:	b370      	cbz	r0, 800d082 <LoRaMacSerializerJoinRequest+0x60>
{
 800d024:	b510      	push	{r4, lr}
 800d026:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800d028:	6803      	ldr	r3, [r0, #0]
 800d02a:	b363      	cbz	r3, 800d086 <LoRaMacSerializerJoinRequest+0x64>
    }

    uint16_t bufItr = 0;

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 800d02c:	7902      	ldrb	r2, [r0, #4]
 800d02e:	2a16      	cmp	r2, #22
 800d030:	d92b      	bls.n	800d08a <LoRaMacSerializerJoinRequest+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800d032:	7942      	ldrb	r2, [r0, #5]
 800d034:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 800d036:	4601      	mov	r1, r0
 800d038:	f851 0b06 	ldr.w	r0, [r1], #6
 800d03c:	2208      	movs	r2, #8
 800d03e:	3001      	adds	r0, #1
 800d040:	f002 fa5a 	bl	800f4f8 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 800d044:	4621      	mov	r1, r4
 800d046:	f851 0b0e 	ldr.w	r0, [r1], #14
 800d04a:	2208      	movs	r2, #8
 800d04c:	3009      	adds	r0, #9
 800d04e:	f002 fa53 	bl	800f4f8 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 800d052:	8ae2      	ldrh	r2, [r4, #22]
 800d054:	6823      	ldr	r3, [r4, #0]
 800d056:	745a      	strb	r2, [r3, #17]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 800d058:	8ae3      	ldrh	r3, [r4, #22]
 800d05a:	6822      	ldr	r2, [r4, #0]
 800d05c:	0a1b      	lsrs	r3, r3, #8
 800d05e:	7493      	strb	r3, [r2, #18]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800d060:	69a2      	ldr	r2, [r4, #24]
 800d062:	6823      	ldr	r3, [r4, #0]
 800d064:	74da      	strb	r2, [r3, #19]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800d066:	69a3      	ldr	r3, [r4, #24]
 800d068:	0a1b      	lsrs	r3, r3, #8
 800d06a:	6822      	ldr	r2, [r4, #0]
 800d06c:	7513      	strb	r3, [r2, #20]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800d06e:	8b62      	ldrh	r2, [r4, #26]
 800d070:	6823      	ldr	r3, [r4, #0]
 800d072:	755a      	strb	r2, [r3, #21]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800d074:	7ee2      	ldrb	r2, [r4, #27]
 800d076:	6823      	ldr	r3, [r4, #0]
 800d078:	759a      	strb	r2, [r3, #22]

    macMsg->BufSize = bufItr;
 800d07a:	2317      	movs	r3, #23
 800d07c:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 800d07e:	2000      	movs	r0, #0
}
 800d080:	bd10      	pop	{r4, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800d082:	2001      	movs	r0, #1
}
 800d084:	4770      	bx	lr
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800d086:	2001      	movs	r0, #1
 800d088:	e7fa      	b.n	800d080 <LoRaMacSerializerJoinRequest+0x5e>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800d08a:	2002      	movs	r0, #2
 800d08c:	e7f8      	b.n	800d080 <LoRaMacSerializerJoinRequest+0x5e>

0800d08e <LoRaMacSerializerData>:
    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800d08e:	2800      	cmp	r0, #0
 800d090:	d066      	beq.n	800d160 <LoRaMacSerializerData+0xd2>
{
 800d092:	b538      	push	{r3, r4, r5, lr}
 800d094:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800d096:	6801      	ldr	r1, [r0, #0]
 800d098:	2900      	cmp	r1, #0
 800d09a:	d063      	beq.n	800d164 <LoRaMacSerializerData+0xd6>
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800d09c:	7b02      	ldrb	r2, [r0, #12]
 800d09e:	f002 020f 	and.w	r2, r2, #15
 800d0a2:	f102 0008 	add.w	r0, r2, #8

    if( macMsg->FRMPayloadSize > 0 )
 800d0a6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800d0aa:	b10b      	cbz	r3, 800d0b0 <LoRaMacSerializerData+0x22>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 800d0ac:	f102 0009 	add.w	r0, r2, #9
    }

    computedBufSize += macMsg->FRMPayloadSize;
 800d0b0:	4403      	add	r3, r0
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 800d0b2:	3304      	adds	r3, #4
 800d0b4:	b29b      	uxth	r3, r3

    if( macMsg->BufSize < computedBufSize )
 800d0b6:	7922      	ldrb	r2, [r4, #4]
 800d0b8:	429a      	cmp	r2, r3
 800d0ba:	d355      	bcc.n	800d168 <LoRaMacSerializerData+0xda>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800d0bc:	7963      	ldrb	r3, [r4, #5]
 800d0be:	700b      	strb	r3, [r1, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 800d0c0:	68a2      	ldr	r2, [r4, #8]
 800d0c2:	6823      	ldr	r3, [r4, #0]
 800d0c4:	705a      	strb	r2, [r3, #1]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 800d0c6:	68a3      	ldr	r3, [r4, #8]
 800d0c8:	0a1b      	lsrs	r3, r3, #8
 800d0ca:	6822      	ldr	r2, [r4, #0]
 800d0cc:	7093      	strb	r3, [r2, #2]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 800d0ce:	8962      	ldrh	r2, [r4, #10]
 800d0d0:	6823      	ldr	r3, [r4, #0]
 800d0d2:	70da      	strb	r2, [r3, #3]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 800d0d4:	7ae2      	ldrb	r2, [r4, #11]
 800d0d6:	6823      	ldr	r3, [r4, #0]
 800d0d8:	711a      	strb	r2, [r3, #4]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 800d0da:	6823      	ldr	r3, [r4, #0]
 800d0dc:	7b22      	ldrb	r2, [r4, #12]
 800d0de:	715a      	strb	r2, [r3, #5]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 800d0e0:	89e2      	ldrh	r2, [r4, #14]
 800d0e2:	6823      	ldr	r3, [r4, #0]
 800d0e4:	719a      	strb	r2, [r3, #6]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 800d0e6:	89e3      	ldrh	r3, [r4, #14]
 800d0e8:	6822      	ldr	r2, [r4, #0]
 800d0ea:	0a1b      	lsrs	r3, r3, #8
 800d0ec:	71d3      	strb	r3, [r2, #7]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800d0ee:	4621      	mov	r1, r4
 800d0f0:	f851 0b10 	ldr.w	r0, [r1], #16
 800d0f4:	7b22      	ldrb	r2, [r4, #12]
 800d0f6:	f002 020f 	and.w	r2, r2, #15
 800d0fa:	3008      	adds	r0, #8
 800d0fc:	f002 f9f1 	bl	800f4e2 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800d100:	7b23      	ldrb	r3, [r4, #12]
 800d102:	f003 030f 	and.w	r3, r3, #15
 800d106:	f103 0508 	add.w	r5, r3, #8

    if( macMsg->FRMPayloadSize > 0 )
 800d10a:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800d10e:	b12a      	cbz	r2, 800d11c <LoRaMacSerializerData+0x8e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 800d110:	6822      	ldr	r2, [r4, #0]
 800d112:	f894 1020 	ldrb.w	r1, [r4, #32]
 800d116:	5551      	strb	r1, [r2, r5]
 800d118:	f103 0509 	add.w	r5, r3, #9
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 800d11c:	6820      	ldr	r0, [r4, #0]
 800d11e:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800d122:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800d124:	4428      	add	r0, r5
 800d126:	f002 f9dc 	bl	800f4e2 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 800d12a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800d12e:	442b      	add	r3, r5

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800d130:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800d132:	6821      	ldr	r1, [r4, #0]
 800d134:	1c5a      	adds	r2, r3, #1
 800d136:	b292      	uxth	r2, r2
 800d138:	54c8      	strb	r0, [r1, r3]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800d13a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800d13c:	0a08      	lsrs	r0, r1, #8
 800d13e:	6825      	ldr	r5, [r4, #0]
 800d140:	1c99      	adds	r1, r3, #2
 800d142:	b289      	uxth	r1, r1
 800d144:	54a8      	strb	r0, [r5, r2]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800d146:	8de5      	ldrh	r5, [r4, #46]	; 0x2e
 800d148:	6820      	ldr	r0, [r4, #0]
 800d14a:	1cda      	adds	r2, r3, #3
 800d14c:	b292      	uxth	r2, r2
 800d14e:	5445      	strb	r5, [r0, r1]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800d150:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
 800d154:	6821      	ldr	r1, [r4, #0]
 800d156:	3304      	adds	r3, #4
 800d158:	5488      	strb	r0, [r1, r2]

    macMsg->BufSize = bufItr;
 800d15a:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 800d15c:	2000      	movs	r0, #0
}
 800d15e:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800d160:	2001      	movs	r0, #1
}
 800d162:	4770      	bx	lr
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800d164:	2001      	movs	r0, #1
 800d166:	e7fa      	b.n	800d15e <LoRaMacSerializerData+0xd0>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800d168:	2002      	movs	r0, #2
 800d16a:	e7f8      	b.n	800d15e <LoRaMacSerializerData+0xd0>

0800d16c <NvmDataMgmtEvent>:
void NvmDataMgmtEvent( uint16_t notifyFlags )
{
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags = notifyFlags;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800d16c:	4770      	bx	lr

0800d16e <NvmDataMgmtStore>:
    LoRaMacStart( );
    return dataSize;
#else
    return 0;
#endif
}
 800d16e:	2000      	movs	r0, #0
 800d170:	4770      	bx	lr

0800d172 <NvmDataMgmtRestore>:
    {
        return sizeof( LoRaMacNvmData_t );
    }
#endif
    return 0;
}
 800d172:	2000      	movs	r0, #0
 800d174:	4770      	bx	lr

0800d176 <RegionIsActive>:
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
    switch( region )
 800d176:	2807      	cmp	r0, #7
 800d178:	d001      	beq.n	800d17e <RegionIsActive+0x8>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 800d17a:	2000      	movs	r0, #0
        }
    }
}
 800d17c:	4770      	bx	lr
        IN865_IS_ACTIVE( );
 800d17e:	2001      	movs	r0, #1
 800d180:	4770      	bx	lr

0800d182 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 800d182:	b500      	push	{lr}
 800d184:	b083      	sub	sp, #12
    PhyParam_t phyParam = { 0 };
 800d186:	2300      	movs	r3, #0
 800d188:	9300      	str	r3, [sp, #0]
    switch( region )
 800d18a:	2807      	cmp	r0, #7
 800d18c:	d005      	beq.n	800d19a <RegionGetPhyParam+0x18>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 800d18e:	9b00      	ldr	r3, [sp, #0]
 800d190:	9301      	str	r3, [sp, #4]
        }
    }
}
 800d192:	9801      	ldr	r0, [sp, #4]
 800d194:	b003      	add	sp, #12
 800d196:	f85d fb04 	ldr.w	pc, [sp], #4
        IN865_GET_PHY_PARAM( );
 800d19a:	4608      	mov	r0, r1
 800d19c:	f000 fcde 	bl	800db5c <RegionIN865GetPhyParam>
 800d1a0:	9001      	str	r0, [sp, #4]
 800d1a2:	e7f6      	b.n	800d192 <RegionGetPhyParam+0x10>

0800d1a4 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
    switch( region )
 800d1a4:	2807      	cmp	r0, #7
 800d1a6:	d000      	beq.n	800d1aa <RegionSetBandTxDone+0x6>
 800d1a8:	4770      	bx	lr
{
 800d1aa:	b508      	push	{r3, lr}
        CN470_SET_BAND_TX_DONE( );
        CN779_SET_BAND_TX_DONE( );
        EU433_SET_BAND_TX_DONE( );
        EU868_SET_BAND_TX_DONE( );
        KR920_SET_BAND_TX_DONE( );
        IN865_SET_BAND_TX_DONE( );
 800d1ac:	4608      	mov	r0, r1
 800d1ae:	f000 fd99 	bl	800dce4 <RegionIN865SetBandTxDone>
        default:
        {
            return;
        }
    }
}
 800d1b2:	bd08      	pop	{r3, pc}

0800d1b4 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
    switch( region )
 800d1b4:	2807      	cmp	r0, #7
 800d1b6:	d000      	beq.n	800d1ba <RegionInitDefaults+0x6>
 800d1b8:	4770      	bx	lr
{
 800d1ba:	b508      	push	{r3, lr}
        CN470_INIT_DEFAULTS( );
        CN779_INIT_DEFAULTS( );
        EU433_INIT_DEFAULTS( );
        EU868_INIT_DEFAULTS( );
        KR920_INIT_DEFAULTS( );
        IN865_INIT_DEFAULTS( );
 800d1bc:	4608      	mov	r0, r1
 800d1be:	f000 fdaf 	bl	800dd20 <RegionIN865InitDefaults>
        default:
        {
            break;
        }
    }
}
 800d1c2:	bd08      	pop	{r3, pc}

0800d1c4 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
    switch( region )
 800d1c4:	2807      	cmp	r0, #7
 800d1c6:	d001      	beq.n	800d1cc <RegionVerify+0x8>
        IN865_VERIFY( );
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 800d1c8:	2000      	movs	r0, #0
        }
    }
}
 800d1ca:	4770      	bx	lr
{
 800d1cc:	b508      	push	{r3, lr}
 800d1ce:	460b      	mov	r3, r1
        IN865_VERIFY( );
 800d1d0:	4611      	mov	r1, r2
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	f000 fe06 	bl	800dde4 <RegionIN865Verify>
}
 800d1d8:	bd08      	pop	{r3, pc}

0800d1da <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
    switch( region )
 800d1da:	2807      	cmp	r0, #7
 800d1dc:	d000      	beq.n	800d1e0 <RegionApplyCFList+0x6>
 800d1de:	4770      	bx	lr
{
 800d1e0:	b508      	push	{r3, lr}
        CN470_APPLY_CF_LIST( );
        CN779_APPLY_CF_LIST( );
        EU433_APPLY_CF_LIST( );
        EU868_APPLY_CF_LIST( );
        KR920_APPLY_CF_LIST( );
        IN865_APPLY_CF_LIST( );
 800d1e2:	4608      	mov	r0, r1
 800d1e4:	f001 f9b6 	bl	800e554 <RegionIN865ApplyCFList>
        default:
        {
            break;
        }
    }
}
 800d1e8:	bd08      	pop	{r3, pc}

0800d1ea <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
    switch( region )
 800d1ea:	2807      	cmp	r0, #7
 800d1ec:	d001      	beq.n	800d1f2 <RegionChanMaskSet+0x8>
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 800d1ee:	2000      	movs	r0, #0
        }
    }
}
 800d1f0:	4770      	bx	lr
{
 800d1f2:	b508      	push	{r3, lr}
        IN865_CHAN_MASK_SET( );
 800d1f4:	4608      	mov	r0, r1
 800d1f6:	f000 fe37 	bl	800de68 <RegionIN865ChanMaskSet>
}
 800d1fa:	bd08      	pop	{r3, pc}

0800d1fc <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
    switch( region )
 800d1fc:	2807      	cmp	r0, #7
 800d1fe:	d000      	beq.n	800d202 <RegionComputeRxWindowParameters+0x6>
 800d200:	4770      	bx	lr
{
 800d202:	b508      	push	{r3, lr}
 800d204:	468c      	mov	ip, r1
 800d206:	4611      	mov	r1, r2
 800d208:	461a      	mov	r2, r3
        CN470_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN779_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU433_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
        KR920_COMPUTE_RX_WINDOW_PARAMETERS( );
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
 800d20a:	9b02      	ldr	r3, [sp, #8]
 800d20c:	4660      	mov	r0, ip
 800d20e:	f000 fe49 	bl	800dea4 <RegionIN865ComputeRxWindowParameters>
        default:
        {
            break;
        }
    }
}
 800d212:	bd08      	pop	{r3, pc}

0800d214 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
    switch( region )
 800d214:	2807      	cmp	r0, #7
 800d216:	d001      	beq.n	800d21c <RegionRxConfig+0x8>
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 800d218:	2000      	movs	r0, #0
        }
    }
}
 800d21a:	4770      	bx	lr
{
 800d21c:	b508      	push	{r3, lr}
 800d21e:	460b      	mov	r3, r1
        IN865_RX_CONFIG( );
 800d220:	4611      	mov	r1, r2
 800d222:	4618      	mov	r0, r3
 800d224:	f000 fe74 	bl	800df10 <RegionIN865RxConfig>
}
 800d228:	bd08      	pop	{r3, pc}

0800d22a <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
    switch( region )
 800d22a:	2807      	cmp	r0, #7
 800d22c:	d001      	beq.n	800d232 <RegionTxConfig+0x8>
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 800d22e:	2000      	movs	r0, #0
        }
    }
}
 800d230:	4770      	bx	lr
{
 800d232:	b508      	push	{r3, lr}
 800d234:	468c      	mov	ip, r1
 800d236:	4611      	mov	r1, r2
        IN865_TX_CONFIG( );
 800d238:	461a      	mov	r2, r3
 800d23a:	4660      	mov	r0, ip
 800d23c:	f000 feec 	bl	800e018 <RegionIN865TxConfig>
}
 800d240:	bd08      	pop	{r3, pc}

0800d242 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
    switch( region )
 800d242:	2807      	cmp	r0, #7
 800d244:	d001      	beq.n	800d24a <RegionLinkAdrReq+0x8>
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 800d246:	2000      	movs	r0, #0
        }
    }
}
 800d248:	4770      	bx	lr
{
 800d24a:	b500      	push	{lr}
 800d24c:	b083      	sub	sp, #12
 800d24e:	468c      	mov	ip, r1
 800d250:	4611      	mov	r1, r2
 800d252:	461a      	mov	r2, r3
        IN865_LINK_ADR_REQ( );
 800d254:	9b05      	ldr	r3, [sp, #20]
 800d256:	9300      	str	r3, [sp, #0]
 800d258:	9b04      	ldr	r3, [sp, #16]
 800d25a:	4660      	mov	r0, ip
 800d25c:	f000 ff74 	bl	800e148 <RegionIN865LinkAdrReq>
}
 800d260:	b003      	add	sp, #12
 800d262:	f85d fb04 	ldr.w	pc, [sp], #4

0800d266 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
    switch( region )
 800d266:	2807      	cmp	r0, #7
 800d268:	d001      	beq.n	800d26e <RegionRxParamSetupReq+0x8>
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 800d26a:	2000      	movs	r0, #0
        }
    }
}
 800d26c:	4770      	bx	lr
{
 800d26e:	b508      	push	{r3, lr}
        IN865_RX_PARAM_SETUP_REQ( );
 800d270:	4608      	mov	r0, r1
 800d272:	f001 f835 	bl	800e2e0 <RegionIN865RxParamSetupReq>
}
 800d276:	bd08      	pop	{r3, pc}

0800d278 <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
    switch( region )
 800d278:	2807      	cmp	r0, #7
 800d27a:	d001      	beq.n	800d280 <RegionNewChannelReq+0x8>
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 800d27c:	2000      	movs	r0, #0
        }
    }
}
 800d27e:	4770      	bx	lr
{
 800d280:	b508      	push	{r3, lr}
        IN865_NEW_CHANNEL_REQ( );
 800d282:	4608      	mov	r0, r1
 800d284:	f001 f9a7 	bl	800e5d6 <RegionIN865NewChannelReq>
}
 800d288:	bd08      	pop	{r3, pc}

0800d28a <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
    switch( region )
 800d28a:	2807      	cmp	r0, #7
 800d28c:	d001      	beq.n	800d292 <RegionTxParamSetupReq+0x8>
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 800d28e:	2000      	movs	r0, #0
        }
    }
}
 800d290:	4770      	bx	lr
{
 800d292:	b508      	push	{r3, lr}
        IN865_TX_PARAM_SETUP_REQ( );
 800d294:	4608      	mov	r0, r1
 800d296:	f001 f844 	bl	800e322 <RegionIN865TxParamSetupReq>
}
 800d29a:	bd08      	pop	{r3, pc}

0800d29c <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
    switch( region )
 800d29c:	2807      	cmp	r0, #7
 800d29e:	d001      	beq.n	800d2a4 <RegionDlChannelReq+0x8>
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 800d2a0:	2000      	movs	r0, #0
        }
    }
}
 800d2a2:	4770      	bx	lr
{
 800d2a4:	b508      	push	{r3, lr}
        IN865_DL_CHANNEL_REQ( );
 800d2a6:	4608      	mov	r0, r1
 800d2a8:	f001 f83e 	bl	800e328 <RegionIN865DlChannelReq>
}
 800d2ac:	bd08      	pop	{r3, pc}

0800d2ae <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
    switch( region )
 800d2ae:	2807      	cmp	r0, #7
 800d2b0:	d001      	beq.n	800d2b6 <RegionAlternateDr+0x8>
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 800d2b2:	2000      	movs	r0, #0
        }
    }
}
 800d2b4:	4770      	bx	lr
{
 800d2b6:	b508      	push	{r3, lr}
 800d2b8:	460b      	mov	r3, r1
        IN865_ALTERNATE_DR( );
 800d2ba:	4611      	mov	r1, r2
 800d2bc:	4618      	mov	r0, r3
 800d2be:	f001 f853 	bl	800e368 <RegionIN865AlternateDr>
}
 800d2c2:	bd08      	pop	{r3, pc}

0800d2c4 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
    switch( region )
 800d2c4:	2807      	cmp	r0, #7
 800d2c6:	d001      	beq.n	800d2cc <RegionNextChannel+0x8>
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 800d2c8:	2009      	movs	r0, #9
        }
    }
}
 800d2ca:	4770      	bx	lr
{
 800d2cc:	b508      	push	{r3, lr}
 800d2ce:	468c      	mov	ip, r1
 800d2d0:	4611      	mov	r1, r2
 800d2d2:	461a      	mov	r2, r3
        IN865_NEXT_CHANNEL( );
 800d2d4:	9b02      	ldr	r3, [sp, #8]
 800d2d6:	4660      	mov	r0, ip
 800d2d8:	f001 f848 	bl	800e36c <RegionIN865NextChannel>
}
 800d2dc:	bd08      	pop	{r3, pc}

0800d2de <RegionSetContinuousWave>:
    }
}

void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
    switch( region )
 800d2de:	2807      	cmp	r0, #7
 800d2e0:	d000      	beq.n	800d2e4 <RegionSetContinuousWave+0x6>
 800d2e2:	4770      	bx	lr
{
 800d2e4:	b508      	push	{r3, lr}
        CN470_SET_CONTINUOUS_WAVE( );
        CN779_SET_CONTINUOUS_WAVE( );
        EU433_SET_CONTINUOUS_WAVE( );
        EU868_SET_CONTINUOUS_WAVE( );
        KR920_SET_CONTINUOUS_WAVE( );
        IN865_SET_CONTINUOUS_WAVE( );
 800d2e6:	4608      	mov	r0, r1
 800d2e8:	f001 f9a0 	bl	800e62c <RegionIN865SetContinuousWave>
        default:
        {
            break;
        }
    }
}
 800d2ec:	bd08      	pop	{r3, pc}

0800d2ee <RegionApplyDrOffset>:

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 800d2ee:	468c      	mov	ip, r1
 800d2f0:	4611      	mov	r1, r2
    switch( region )
 800d2f2:	2807      	cmp	r0, #7
 800d2f4:	d001      	beq.n	800d2fa <RegionApplyDrOffset+0xc>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 800d2f6:	b2d0      	uxtb	r0, r2
        }
    }
}
 800d2f8:	4770      	bx	lr
{
 800d2fa:	b508      	push	{r3, lr}
        IN865_APPLY_DR_OFFSET( );
 800d2fc:	461a      	mov	r2, r3
 800d2fe:	4660      	mov	r0, ip
 800d300:	f001 f9c2 	bl	800e688 <RegionIN865ApplyDrOffset>
}
 800d304:	bd08      	pop	{r3, pc}
	...

0800d308 <RegionGetVersion>:
    Version_t version;

    version.Value = REGION_VERSION;

    return version;
}
 800d308:	4800      	ldr	r0, [pc, #0]	; (800d30c <RegionGetVersion+0x4>)
 800d30a:	4770      	bx	lr
 800d30c:	01000300 	.word	0x01000300

0800d310 <GetDutyCycle>:
        ( ( ( N ) + ( D ) - 1 ) / ( D ) ) :                                    \
        ( ( N ) / ( D ) )                                                      \
    )

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 800d310:	b082      	sub	sp, #8
 800d312:	f10d 0c08 	add.w	ip, sp, #8
 800d316:	e90c 000c 	stmdb	ip, {r2, r3}
    uint16_t dutyCycle = band->DCycle;
 800d31a:	8800      	ldrh	r0, [r0, #0]

    if( joined == false )
 800d31c:	b971      	cbnz	r1, 800d33c <GetDutyCycle+0x2c>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 800d31e:	4613      	mov	r3, r2
 800d320:	f5b2 6f61 	cmp.w	r2, #3600	; 0xe10
 800d324:	d306      	bcc.n	800d334 <GetDutyCycle+0x24>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 800d326:	f649 22af 	movw	r2, #39599	; 0x9aaf
 800d32a:	4293      	cmp	r3, r2
 800d32c:	d80a      	bhi.n	800d344 <GetDutyCycle+0x34>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 800d32e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d332:	e000      	b.n	800d336 <GetDutyCycle+0x26>
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 800d334:	2364      	movs	r3, #100	; 0x64
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 800d336:	4298      	cmp	r0, r3
 800d338:	bf38      	it	cc
 800d33a:	4618      	movcc	r0, r3
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 800d33c:	b900      	cbnz	r0, 800d340 <GetDutyCycle+0x30>
    {
        dutyCycle = 1;
 800d33e:	2001      	movs	r0, #1
    }

    return dutyCycle;
}
 800d340:	b002      	add	sp, #8
 800d342:	4770      	bx	lr
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 800d344:	f242 7310 	movw	r3, #10000	; 0x2710
 800d348:	e7f5      	b.n	800d336 <GetDutyCycle+0x26>

0800d34a <CountChannels>:

    return dutyCycle;
}

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 800d34a:	4684      	mov	ip, r0
    uint8_t nbActiveBits = 0;

    for( uint8_t j = 0; j < nbBits; j++ )
 800d34c:	2300      	movs	r3, #0
    uint8_t nbActiveBits = 0;
 800d34e:	4618      	mov	r0, r3
    for( uint8_t j = 0; j < nbBits; j++ )
 800d350:	e001      	b.n	800d356 <CountChannels+0xc>
 800d352:	3301      	adds	r3, #1
 800d354:	b2db      	uxtb	r3, r3
 800d356:	428b      	cmp	r3, r1
 800d358:	d207      	bcs.n	800d36a <CountChannels+0x20>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 800d35a:	2201      	movs	r2, #1
 800d35c:	409a      	lsls	r2, r3
 800d35e:	ea32 020c 	bics.w	r2, r2, ip
 800d362:	d1f6      	bne.n	800d352 <CountChannels+0x8>
        {
            nbActiveBits++;
 800d364:	3001      	adds	r0, #1
 800d366:	b2c0      	uxtb	r0, r0
 800d368:	e7f3      	b.n	800d352 <CountChannels+0x8>
        }
    }
    return nbActiveBits;
}
 800d36a:	4770      	bx	lr

0800d36c <SetMaxTimeCredits>:
{
 800d36c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d370:	b089      	sub	sp, #36	; 0x24
 800d372:	4604      	mov	r4, r0
 800d374:	460e      	mov	r6, r1
 800d376:	ad02      	add	r5, sp, #8
 800d378:	e885 000c 	stmia.w	r5, {r2, r3}
 800d37c:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
 800d380:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 800d384:	e895 0003 	ldmia.w	r5, {r0, r1}
 800d388:	f004 fcce 	bl	8011d28 <SysTimeToMs>
 800d38c:	4607      	mov	r7, r0
    SysTime_t timeDiff = { 0 };
 800d38e:	2300      	movs	r3, #0
 800d390:	9304      	str	r3, [sp, #16]
 800d392:	9305      	str	r3, [sp, #20]
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 800d394:	e895 000c 	ldmia.w	r5, {r2, r3}
 800d398:	4631      	mov	r1, r6
 800d39a:	4620      	mov	r0, r4
 800d39c:	f7ff ffb8 	bl	800d310 <GetDutyCycle>
 800d3a0:	4605      	mov	r5, r0
    if( joined == false )
 800d3a2:	2e00      	cmp	r6, #0
 800d3a4:	d14c      	bne.n	800d440 <SetMaxTimeCredits+0xd4>
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 800d3a6:	2864      	cmp	r0, #100	; 0x64
 800d3a8:	d025      	beq.n	800d3f6 <SetMaxTimeCredits+0x8a>
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 800d3aa:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800d3ae:	d025      	beq.n	800d3fc <SetMaxTimeCredits+0x90>
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 800d3b0:	4e27      	ldr	r6, [pc, #156]	; (800d450 <SetMaxTimeCredits+0xe4>)
        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 800d3b2:	68a1      	ldr	r1, [r4, #8]
 800d3b4:	a806      	add	r0, sp, #24
 800d3b6:	f004 fcd7 	bl	8011d68 <SysTimeFromMs>
 800d3ba:	9b07      	ldr	r3, [sp, #28]
 800d3bc:	9300      	str	r3, [sp, #0]
 800d3be:	9b06      	ldr	r3, [sp, #24]
 800d3c0:	aa02      	add	r2, sp, #8
 800d3c2:	ca06      	ldmia	r2, {r1, r2}
 800d3c4:	a804      	add	r0, sp, #16
 800d3c6:	f004 fc36 	bl	8011c36 <SysTimeSub>
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 800d3ca:	f1b8 0f00 	cmp.w	r8, #0
 800d3ce:	d102      	bne.n	800d3d6 <SetMaxTimeCredits+0x6a>
 800d3d0:	f1b9 0f00 	cmp.w	r9, #0
 800d3d4:	d002      	beq.n	800d3dc <SetMaxTimeCredits+0x70>
            ( band->MaxTimeCredits != maxCredits ) ||
 800d3d6:	6923      	ldr	r3, [r4, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 800d3d8:	42b3      	cmp	r3, r6
 800d3da:	d012      	beq.n	800d402 <SetMaxTimeCredits+0x96>
            band->TimeCredits = maxCredits;
 800d3dc:	60e6      	str	r6, [r4, #12]
            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 800d3de:	9b02      	ldr	r3, [sp, #8]
 800d3e0:	4a1c      	ldr	r2, [pc, #112]	; (800d454 <SetMaxTimeCredits+0xe8>)
 800d3e2:	4293      	cmp	r3, r2
 800d3e4:	d812      	bhi.n	800d40c <SetMaxTimeCredits+0xa0>
    if( band->LastBandUpdateTime == 0 )
 800d3e6:	6863      	ldr	r3, [r4, #4]
 800d3e8:	b903      	cbnz	r3, 800d3ec <SetMaxTimeCredits+0x80>
        band->TimeCredits = maxCredits;
 800d3ea:	60e6      	str	r6, [r4, #12]
    band->MaxTimeCredits = maxCredits;
 800d3ec:	6126      	str	r6, [r4, #16]
}
 800d3ee:	4628      	mov	r0, r5
 800d3f0:	b009      	add	sp, #36	; 0x24
 800d3f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            band->LastMaxCreditAssignTime = elapsedTime;
 800d3f6:	60a7      	str	r7, [r4, #8]
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 800d3f8:	4e17      	ldr	r6, [pc, #92]	; (800d458 <SetMaxTimeCredits+0xec>)
 800d3fa:	e7da      	b.n	800d3b2 <SetMaxTimeCredits+0x46>
            band->LastMaxCreditAssignTime = elapsedTime;
 800d3fc:	60a7      	str	r7, [r4, #8]
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 800d3fe:	4e17      	ldr	r6, [pc, #92]	; (800d45c <SetMaxTimeCredits+0xf0>)
 800d400:	e7d7      	b.n	800d3b2 <SetMaxTimeCredits+0x46>
            ( band->MaxTimeCredits != maxCredits ) ||
 800d402:	9a04      	ldr	r2, [sp, #16]
 800d404:	4b16      	ldr	r3, [pc, #88]	; (800d460 <SetMaxTimeCredits+0xf4>)
 800d406:	429a      	cmp	r2, r3
 800d408:	d9ed      	bls.n	800d3e6 <SetMaxTimeCredits+0x7a>
 800d40a:	e7e7      	b.n	800d3dc <SetMaxTimeCredits+0x70>
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 800d40c:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 800d410:	3b30      	subs	r3, #48	; 0x30
 800d412:	4a14      	ldr	r2, [pc, #80]	; (800d464 <SetMaxTimeCredits+0xf8>)
 800d414:	fba2 2303 	umull	r2, r3, r2, r3
 800d418:	0c1b      	lsrs	r3, r3, #16
 800d41a:	9304      	str	r3, [sp, #16]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 800d41c:	4a12      	ldr	r2, [pc, #72]	; (800d468 <SetMaxTimeCredits+0xfc>)
 800d41e:	fb02 f303 	mul.w	r3, r2, r3
 800d422:	9304      	str	r3, [sp, #16]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 800d424:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 800d428:	3330      	adds	r3, #48	; 0x30
 800d42a:	9304      	str	r3, [sp, #16]
                timeDiff.SubSeconds = 0;
 800d42c:	2300      	movs	r3, #0
 800d42e:	f8ad 3014 	strh.w	r3, [sp, #20]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 800d432:	ab04      	add	r3, sp, #16
 800d434:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d438:	f004 fc76 	bl	8011d28 <SysTimeToMs>
 800d43c:	60a0      	str	r0, [r4, #8]
 800d43e:	e7d2      	b.n	800d3e6 <SetMaxTimeCredits+0x7a>
        if( dutyCycleEnabled == false )
 800d440:	f1b8 0f00 	cmp.w	r8, #0
 800d444:	d102      	bne.n	800d44c <SetMaxTimeCredits+0xe0>
            band->TimeCredits = maxCredits;
 800d446:	4e04      	ldr	r6, [pc, #16]	; (800d458 <SetMaxTimeCredits+0xec>)
 800d448:	60e6      	str	r6, [r4, #12]
 800d44a:	e7cc      	b.n	800d3e6 <SetMaxTimeCredits+0x7a>
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 800d44c:	4e02      	ldr	r6, [pc, #8]	; (800d458 <SetMaxTimeCredits+0xec>)
 800d44e:	e7ca      	b.n	800d3e6 <SetMaxTimeCredits+0x7a>
 800d450:	02932e00 	.word	0x02932e00
 800d454:	0001ec2f 	.word	0x0001ec2f
 800d458:	001b7740 	.word	0x001b7740
 800d45c:	0112a880 	.word	0x0112a880
 800d460:	0001517f 	.word	0x0001517f
 800d464:	c22e4507 	.word	0xc22e4507
 800d468:	00015180 	.word	0x00015180

0800d46c <UpdateTimeCredits>:
{
 800d46c:	b570      	push	{r4, r5, r6, lr}
 800d46e:	b082      	sub	sp, #8
 800d470:	4604      	mov	r4, r0
 800d472:	460e      	mov	r6, r1
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 800d474:	9301      	str	r3, [sp, #4]
 800d476:	9200      	str	r2, [sp, #0]
 800d478:	ab06      	add	r3, sp, #24
 800d47a:	cb0c      	ldmia	r3, {r2, r3}
 800d47c:	f7ff ff76 	bl	800d36c <SetMaxTimeCredits>
 800d480:	4605      	mov	r5, r0
    if( joined == true )
 800d482:	b94e      	cbnz	r6, 800d498 <UpdateTimeCredits+0x2c>
    if( band->TimeCredits > band->MaxTimeCredits )
 800d484:	68e2      	ldr	r2, [r4, #12]
 800d486:	6923      	ldr	r3, [r4, #16]
 800d488:	429a      	cmp	r2, r3
 800d48a:	d900      	bls.n	800d48e <UpdateTimeCredits+0x22>
        band->TimeCredits = band->MaxTimeCredits;
 800d48c:	60e3      	str	r3, [r4, #12]
    band->LastBandUpdateTime = currentTime;
 800d48e:	9b08      	ldr	r3, [sp, #32]
 800d490:	6063      	str	r3, [r4, #4]
}
 800d492:	4628      	mov	r0, r5
 800d494:	b002      	add	sp, #8
 800d496:	bd70      	pop	{r4, r5, r6, pc}
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 800d498:	6860      	ldr	r0, [r4, #4]
 800d49a:	f004 fcc5 	bl	8011e28 <UTIL_TIMER_GetElapsedTime>
 800d49e:	68e3      	ldr	r3, [r4, #12]
 800d4a0:	4403      	add	r3, r0
 800d4a2:	60e3      	str	r3, [r4, #12]
 800d4a4:	e7ee      	b.n	800d484 <UpdateTimeCredits+0x18>

0800d4a6 <RegionCommonValueInRange>:
    return false;
}

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
    if( ( value >= min ) && ( value <= max ) )
 800d4a6:	4288      	cmp	r0, r1
 800d4a8:	db03      	blt.n	800d4b2 <RegionCommonValueInRange+0xc>
 800d4aa:	4290      	cmp	r0, r2
 800d4ac:	dd03      	ble.n	800d4b6 <RegionCommonValueInRange+0x10>
    {
        return 1;
    }
    return 0;
 800d4ae:	2000      	movs	r0, #0
 800d4b0:	4770      	bx	lr
 800d4b2:	2000      	movs	r0, #0
 800d4b4:	4770      	bx	lr
        return 1;
 800d4b6:	2001      	movs	r0, #1
}
 800d4b8:	4770      	bx	lr

0800d4ba <RegionCommonChanVerifyDr>:
{
 800d4ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d4be:	4682      	mov	sl, r0
 800d4c0:	460e      	mov	r6, r1
 800d4c2:	4690      	mov	r8, r2
 800d4c4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 800d4c8:	f99d 2020 	ldrsb.w	r2, [sp, #32]
 800d4cc:	4619      	mov	r1, r3
 800d4ce:	4640      	mov	r0, r8
 800d4d0:	f7ff ffe9 	bl	800d4a6 <RegionCommonValueInRange>
 800d4d4:	b338      	cbz	r0, 800d526 <RegionCommonChanVerifyDr+0x6c>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 800d4d6:	2500      	movs	r5, #0
 800d4d8:	462f      	mov	r7, r5
 800d4da:	e01e      	b.n	800d51a <RegionCommonChanVerifyDr+0x60>
        for( uint8_t j = 0; j < 16; j++ )
 800d4dc:	3401      	adds	r4, #1
 800d4de:	b2e4      	uxtb	r4, r4
 800d4e0:	2c0f      	cmp	r4, #15
 800d4e2:	d816      	bhi.n	800d512 <RegionCommonChanVerifyDr+0x58>
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 800d4e4:	f836 3015 	ldrh.w	r3, [r6, r5, lsl #1]
 800d4e8:	4123      	asrs	r3, r4
 800d4ea:	f013 0f01 	tst.w	r3, #1
 800d4ee:	d0f5      	beq.n	800d4dc <RegionCommonChanVerifyDr+0x22>
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 800d4f0:	193b      	adds	r3, r7, r4
 800d4f2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d4f6:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 800d4fa:	7a19      	ldrb	r1, [r3, #8]
 800d4fc:	090a      	lsrs	r2, r1, #4
 800d4fe:	f001 010f 	and.w	r1, r1, #15
 800d502:	4640      	mov	r0, r8
 800d504:	f7ff ffcf 	bl	800d4a6 <RegionCommonValueInRange>
 800d508:	2801      	cmp	r0, #1
 800d50a:	d1e7      	bne.n	800d4dc <RegionCommonChanVerifyDr+0x22>
                    return true;
 800d50c:	2001      	movs	r0, #1
}
 800d50e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 800d512:	3710      	adds	r7, #16
 800d514:	b2ff      	uxtb	r7, r7
 800d516:	3501      	adds	r5, #1
 800d518:	b2ed      	uxtb	r5, r5
 800d51a:	4557      	cmp	r7, sl
 800d51c:	d201      	bcs.n	800d522 <RegionCommonChanVerifyDr+0x68>
        for( uint8_t j = 0; j < 16; j++ )
 800d51e:	2400      	movs	r4, #0
 800d520:	e7de      	b.n	800d4e0 <RegionCommonChanVerifyDr+0x26>
    return false;
 800d522:	2000      	movs	r0, #0
 800d524:	e7f3      	b.n	800d50e <RegionCommonChanVerifyDr+0x54>
        return false;
 800d526:	2000      	movs	r0, #0
 800d528:	e7f1      	b.n	800d50e <RegionCommonChanVerifyDr+0x54>

0800d52a <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
    uint8_t index = id / 16;

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 800d52a:	0913      	lsrs	r3, r2, #4
 800d52c:	ebb3 1f11 	cmp.w	r3, r1, lsr #4
 800d530:	d313      	bcc.n	800d55a <RegionCommonChanDisable+0x30>
{
 800d532:	b500      	push	{lr}
 800d534:	4684      	mov	ip, r0
 800d536:	ea4f 1e11 	mov.w	lr, r1, lsr #4
    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 800d53a:	4291      	cmp	r1, r2
 800d53c:	d20f      	bcs.n	800d55e <RegionCommonChanDisable+0x34>
    {
        return false;
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 800d53e:	f001 030f 	and.w	r3, r1, #15
 800d542:	2001      	movs	r0, #1
 800d544:	fa00 f303 	lsl.w	r3, r0, r3
 800d548:	43db      	mvns	r3, r3
 800d54a:	b21b      	sxth	r3, r3
 800d54c:	f83c 201e 	ldrh.w	r2, [ip, lr, lsl #1]
 800d550:	4013      	ands	r3, r2
 800d552:	f82c 301e 	strh.w	r3, [ip, lr, lsl #1]

    return true;
}
 800d556:	f85d fb04 	ldr.w	pc, [sp], #4
        return false;
 800d55a:	2000      	movs	r0, #0
}
 800d55c:	4770      	bx	lr
        return false;
 800d55e:	2000      	movs	r0, #0
 800d560:	e7f9      	b.n	800d556 <RegionCommonChanDisable+0x2c>

0800d562 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 800d562:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t nbChannels = 0;

    if( channelsMask == NULL )
 800d564:	b188      	cbz	r0, 800d58a <RegionCommonCountChannels+0x28>
 800d566:	460c      	mov	r4, r1
 800d568:	4616      	mov	r6, r2
 800d56a:	4607      	mov	r7, r0
    uint8_t nbChannels = 0;
 800d56c:	2500      	movs	r5, #0
 800d56e:	e008      	b.n	800d582 <RegionCommonCountChannels+0x20>
        return 0;
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 800d570:	2110      	movs	r1, #16
 800d572:	f837 0014 	ldrh.w	r0, [r7, r4, lsl #1]
 800d576:	f7ff fee8 	bl	800d34a <CountChannels>
 800d57a:	4405      	add	r5, r0
 800d57c:	b2ed      	uxtb	r5, r5
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 800d57e:	3401      	adds	r4, #1
 800d580:	b2e4      	uxtb	r4, r4
 800d582:	42b4      	cmp	r4, r6
 800d584:	d3f4      	bcc.n	800d570 <RegionCommonCountChannels+0xe>
    }

    return nbChannels;
}
 800d586:	4628      	mov	r0, r5
 800d588:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return 0;
 800d58a:	2500      	movs	r5, #0
 800d58c:	e7fb      	b.n	800d586 <RegionCommonCountChannels+0x24>

0800d58e <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 800d58e:	4684      	mov	ip, r0
 800d590:	b158      	cbz	r0, 800d5aa <RegionCommonChanMaskCopy+0x1c>
 800d592:	b109      	cbz	r1, 800d598 <RegionCommonChanMaskCopy+0xa>
    {
        for( uint8_t i = 0; i < len; i++ )
 800d594:	2300      	movs	r3, #0
 800d596:	e006      	b.n	800d5a6 <RegionCommonChanMaskCopy+0x18>
 800d598:	4770      	bx	lr
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 800d59a:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800d59e:	f82c 0013 	strh.w	r0, [ip, r3, lsl #1]
        for( uint8_t i = 0; i < len; i++ )
 800d5a2:	3301      	adds	r3, #1
 800d5a4:	b2db      	uxtb	r3, r3
 800d5a6:	4293      	cmp	r3, r2
 800d5a8:	d3f7      	bcc.n	800d59a <RegionCommonChanMaskCopy+0xc>
        }
    }
}
 800d5aa:	4770      	bx	lr

0800d5ac <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 800d5ac:	b082      	sub	sp, #8
 800d5ae:	b538      	push	{r3, r4, r5, lr}
 800d5b0:	4604      	mov	r4, r0
 800d5b2:	460d      	mov	r5, r1
 800d5b4:	4611      	mov	r1, r2
 800d5b6:	aa04      	add	r2, sp, #16
 800d5b8:	f842 3f04 	str.w	r3, [r2, #4]!
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 800d5bc:	ca0c      	ldmia	r2, {r2, r3}
 800d5be:	f7ff fea7 	bl	800d310 <GetDutyCycle>

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 800d5c2:	68e3      	ldr	r3, [r4, #12]
 800d5c4:	fb05 f100 	mul.w	r1, r5, r0
 800d5c8:	428b      	cmp	r3, r1
 800d5ca:	d905      	bls.n	800d5d8 <RegionCommonSetBandTxDone+0x2c>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 800d5cc:	1a5b      	subs	r3, r3, r1
 800d5ce:	60e3      	str	r3, [r4, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 800d5d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d5d4:	b002      	add	sp, #8
 800d5d6:	4770      	bx	lr
        band->TimeCredits = 0;
 800d5d8:	2300      	movs	r3, #0
 800d5da:	60e3      	str	r3, [r4, #12]
}
 800d5dc:	e7f8      	b.n	800d5d0 <RegionCommonSetBandTxDone+0x24>
	...

0800d5e0 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 800d5e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5e4:	b089      	sub	sp, #36	; 0x24
 800d5e6:	4607      	mov	r7, r0
 800d5e8:	468b      	mov	fp, r1
 800d5ea:	4691      	mov	r9, r2
 800d5ec:	4698      	mov	r8, r3
 800d5ee:	f89d a048 	ldrb.w	sl, [sp, #72]	; 0x48
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
    TimerTime_t currentTime = TimerGetCurrentTime( );
 800d5f2:	f004 fc0f 	bl	8011e14 <UTIL_TIMER_GetCurrentTime>
 800d5f6:	9004      	str	r0, [sp, #16]
    TimerTime_t creditCosts = 0;
    uint16_t dutyCycle = 1;
    uint8_t validBands = 0;

    for( uint8_t i = 0; i < nbBands; i++ )
 800d5f8:	2400      	movs	r4, #0
    uint8_t validBands = 0;
 800d5fa:	4626      	mov	r6, r4
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 800d5fc:	f04f 33ff 	mov.w	r3, #4294967295
 800d600:	9305      	str	r3, [sp, #20]
    for( uint8_t i = 0; i < nbBands; i++ )
 800d602:	e005      	b.n	800d610 <RegionCommonUpdateBandTimeOff+0x30>
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits > creditCosts ) ||
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
        {
            bands[i].ReadyForTransmission = true;
 800d604:	2301      	movs	r3, #1
 800d606:	752b      	strb	r3, [r5, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 800d608:	441e      	add	r6, r3
 800d60a:	b2f6      	uxtb	r6, r6
    for( uint8_t i = 0; i < nbBands; i++ )
 800d60c:	3401      	adds	r4, #1
 800d60e:	b2e4      	uxtb	r4, r4
 800d610:	454c      	cmp	r4, r9
 800d612:	d25d      	bcs.n	800d6d0 <RegionCommonUpdateBandTimeOff+0xf0>
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 800d614:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 800d618:	eb0b 05c5 	add.w	r5, fp, r5, lsl #3
 800d61c:	9b04      	ldr	r3, [sp, #16]
 800d61e:	9302      	str	r3, [sp, #8]
 800d620:	ab13      	add	r3, sp, #76	; 0x4c
 800d622:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d626:	e88d 0003 	stmia.w	sp, {r0, r1}
 800d62a:	4653      	mov	r3, sl
 800d62c:	4642      	mov	r2, r8
 800d62e:	4639      	mov	r1, r7
 800d630:	4628      	mov	r0, r5
 800d632:	f7ff ff1b 	bl	800d46c <UpdateTimeCredits>
        creditCosts = expectedTimeOnAir * dutyCycle;
 800d636:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d638:	fb03 f300 	mul.w	r3, r3, r0
        if( ( bands[i].TimeCredits > creditCosts ) ||
 800d63c:	68ea      	ldr	r2, [r5, #12]
 800d63e:	429a      	cmp	r2, r3
 800d640:	d8e0      	bhi.n	800d604 <RegionCommonUpdateBandTimeOff+0x24>
 800d642:	f1b8 0f00 	cmp.w	r8, #0
 800d646:	d101      	bne.n	800d64c <RegionCommonUpdateBandTimeOff+0x6c>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 800d648:	2f00      	cmp	r7, #0
 800d64a:	d1db      	bne.n	800d604 <RegionCommonUpdateBandTimeOff+0x24>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 800d64c:	2100      	movs	r1, #0
 800d64e:	7529      	strb	r1, [r5, #20]

            if( bands[i].MaxTimeCredits > creditCosts )
 800d650:	6929      	ldr	r1, [r5, #16]
 800d652:	4299      	cmp	r1, r3
 800d654:	d907      	bls.n	800d666 <RegionCommonUpdateBandTimeOff+0x86>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 800d656:	1a9b      	subs	r3, r3, r2
 800d658:	9a05      	ldr	r2, [sp, #20]
 800d65a:	429a      	cmp	r2, r3
 800d65c:	bf28      	it	cs
 800d65e:	461a      	movcs	r2, r3
 800d660:	9205      	str	r2, [sp, #20]
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 800d662:	3601      	adds	r6, #1
 800d664:	b2f6      	uxtb	r6, r6
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 800d666:	2f00      	cmp	r7, #0
 800d668:	d1d0      	bne.n	800d60c <RegionCommonUpdateBandTimeOff+0x2c>
            {
                SysTime_t backoffTimeRange = {
 800d66a:	2300      	movs	r3, #0
 800d66c:	9306      	str	r3, [sp, #24]
 800d66e:	f8ad 301c 	strh.w	r3, [sp, #28]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 800d672:	2864      	cmp	r0, #100	; 0x64
 800d674:	d024      	beq.n	800d6c0 <RegionCommonUpdateBandTimeOff+0xe0>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 800d676:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800d67a:	d025      	beq.n	800d6c8 <RegionCommonUpdateBandTimeOff+0xe8>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 800d67c:	4b19      	ldr	r3, [pc, #100]	; (800d6e4 <RegionCommonUpdateBandTimeOff+0x104>)
 800d67e:	9306      	str	r3, [sp, #24]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 800d680:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d682:	4a18      	ldr	r2, [pc, #96]	; (800d6e4 <RegionCommonUpdateBandTimeOff+0x104>)
 800d684:	4293      	cmp	r3, r2
 800d686:	d90c      	bls.n	800d6a2 <RegionCommonUpdateBandTimeOff+0xc2>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 800d688:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 800d68c:	3b30      	subs	r3, #48	; 0x30
 800d68e:	4a16      	ldr	r2, [pc, #88]	; (800d6e8 <RegionCommonUpdateBandTimeOff+0x108>)
 800d690:	fba2 2303 	umull	r2, r3, r2, r3
 800d694:	0c1b      	lsrs	r3, r3, #16
 800d696:	4a15      	ldr	r2, [pc, #84]	; (800d6ec <RegionCommonUpdateBandTimeOff+0x10c>)
 800d698:	fb03 2202 	mla	r2, r3, r2, r2
 800d69c:	9b06      	ldr	r3, [sp, #24]
 800d69e:	4413      	add	r3, r2
 800d6a0:	9306      	str	r3, [sp, #24]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 800d6a2:	ad06      	add	r5, sp, #24
 800d6a4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d6a6:	9300      	str	r3, [sp, #0]
 800d6a8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d6aa:	e895 0006 	ldmia.w	r5, {r1, r2}
 800d6ae:	4628      	mov	r0, r5
 800d6b0:	f004 fac1 	bl	8011c36 <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 800d6b4:	e895 0003 	ldmia.w	r5, {r0, r1}
 800d6b8:	f004 fb36 	bl	8011d28 <SysTimeToMs>
 800d6bc:	9005      	str	r0, [sp, #20]
 800d6be:	e7a5      	b.n	800d60c <RegionCommonUpdateBandTimeOff+0x2c>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 800d6c0:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800d6c4:	9306      	str	r3, [sp, #24]
 800d6c6:	e7db      	b.n	800d680 <RegionCommonUpdateBandTimeOff+0xa0>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 800d6c8:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 800d6cc:	9306      	str	r3, [sp, #24]
 800d6ce:	e7d7      	b.n	800d680 <RegionCommonUpdateBandTimeOff+0xa0>
            }
        }
    }


    if( validBands == 0 )
 800d6d0:	b11e      	cbz	r6, 800d6da <RegionCommonUpdateBandTimeOff+0xfa>
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
    }
    return minTimeToWait;
}
 800d6d2:	9805      	ldr	r0, [sp, #20]
 800d6d4:	b009      	add	sp, #36	; 0x24
 800d6d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return TIMERTIME_T_MAX;
 800d6da:	f04f 33ff 	mov.w	r3, #4294967295
 800d6de:	9305      	str	r3, [sp, #20]
 800d6e0:	e7f7      	b.n	800d6d2 <RegionCommonUpdateBandTimeOff+0xf2>
 800d6e2:	bf00      	nop
 800d6e4:	0001ec30 	.word	0x0001ec30
 800d6e8:	c22e4507 	.word	0xc22e4507
 800d6ec:	00015180 	.word	0x00015180

0800d6f0 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
    uint8_t retIndex = 0;

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 800d6f0:	7803      	ldrb	r3, [r0, #0]
 800d6f2:	2b03      	cmp	r3, #3
 800d6f4:	d001      	beq.n	800d6fa <RegionCommonParseLinkAdrReq+0xa>
    uint8_t retIndex = 0;
 800d6f6:	2000      	movs	r0, #0

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
    }
    return retIndex;
}
 800d6f8:	4770      	bx	lr
        linkAdrParams->Datarate = payload[1];
 800d6fa:	7842      	ldrb	r2, [r0, #1]
 800d6fc:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800d700:	704b      	strb	r3, [r1, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 800d702:	f003 030f 	and.w	r3, r3, #15
 800d706:	708b      	strb	r3, [r1, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 800d708:	0913      	lsrs	r3, r2, #4
 800d70a:	704b      	strb	r3, [r1, #1]
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 800d70c:	7883      	ldrb	r3, [r0, #2]
 800d70e:	808b      	strh	r3, [r1, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 800d710:	78c2      	ldrb	r2, [r0, #3]
 800d712:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d716:	808b      	strh	r3, [r1, #4]
        linkAdrParams->NbRep = payload[4];
 800d718:	7903      	ldrb	r3, [r0, #4]
 800d71a:	700b      	strb	r3, [r1, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 800d71c:	f3c3 1202 	ubfx	r2, r3, #4, #3
 800d720:	70ca      	strb	r2, [r1, #3]
        linkAdrParams->NbRep &= 0x0F;
 800d722:	f003 030f 	and.w	r3, r3, #15
 800d726:	700b      	strb	r3, [r1, #0]
        retIndex = 5;
 800d728:	2005      	movs	r0, #5
 800d72a:	4770      	bx	lr

0800d72c <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 800d72c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d730:	b085      	sub	sp, #20
 800d732:	4604      	mov	r4, r0
 800d734:	4688      	mov	r8, r1
 800d736:	4617      	mov	r7, r2
 800d738:	461e      	mov	r6, r3
    uint8_t status = verifyParams->Status;
 800d73a:	7905      	ldrb	r5, [r0, #4]
    int8_t datarate = verifyParams->Datarate;
 800d73c:	f990 b006 	ldrsb.w	fp, [r0, #6]
    int8_t txPower = verifyParams->TxPower;
 800d740:	f990 9007 	ldrsb.w	r9, [r0, #7]
    int8_t nbRepetitions = verifyParams->NbRep;
 800d744:	f990 a008 	ldrsb.w	sl, [r0, #8]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 800d748:	7943      	ldrb	r3, [r0, #5]
 800d74a:	b92b      	cbnz	r3, 800d758 <RegionCommonLinkAdrReqVerifyParams+0x2c>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 800d74c:	f990 a00b 	ldrsb.w	sl, [r0, #11]
        datarate =  verifyParams->CurrentDatarate;
 800d750:	f990 b009 	ldrsb.w	fp, [r0, #9]
        txPower =  verifyParams->CurrentTxPower;
 800d754:	f990 900a 	ldrsb.w	r9, [r0, #10]
    }

    if( status != 0 )
 800d758:	b95d      	cbnz	r5, 800d772 <RegionCommonLinkAdrReqVerifyParams+0x46>
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 800d75a:	2d07      	cmp	r5, #7
 800d75c:	d02c      	beq.n	800d7b8 <RegionCommonLinkAdrReqVerifyParams+0x8c>
            nbRepetitions = 1;
        }
    }

    // Apply changes
    *dr = datarate;
 800d75e:	f888 b000 	strb.w	fp, [r8]
    *txPow = txPower;
 800d762:	f887 9000 	strb.w	r9, [r7]
    *nbRep = nbRepetitions;
 800d766:	f886 a000 	strb.w	sl, [r6]

    return status;
}
 800d76a:	4628      	mov	r0, r5
 800d76c:	b005      	add	sp, #20
 800d76e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 800d772:	69a3      	ldr	r3, [r4, #24]
 800d774:	9301      	str	r3, [sp, #4]
 800d776:	f994 3015 	ldrsb.w	r3, [r4, #21]
 800d77a:	9300      	str	r3, [sp, #0]
 800d77c:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800d780:	465a      	mov	r2, fp
 800d782:	6921      	ldr	r1, [r4, #16]
 800d784:	7b20      	ldrb	r0, [r4, #12]
 800d786:	f7ff fe98 	bl	800d4ba <RegionCommonChanVerifyDr>
 800d78a:	b908      	cbnz	r0, 800d790 <RegionCommonLinkAdrReqVerifyParams+0x64>
            status &= 0xFD; // Datarate KO
 800d78c:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
        if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 800d790:	f994 301d 	ldrsb.w	r3, [r4, #29]
 800d794:	9303      	str	r3, [sp, #12]
 800d796:	f994 201c 	ldrsb.w	r2, [r4, #28]
 800d79a:	461c      	mov	r4, r3
 800d79c:	4619      	mov	r1, r3
 800d79e:	4648      	mov	r0, r9
 800d7a0:	f7ff fe81 	bl	800d4a6 <RegionCommonValueInRange>
 800d7a4:	2800      	cmp	r0, #0
 800d7a6:	d1d8      	bne.n	800d75a <RegionCommonLinkAdrReqVerifyParams+0x2e>
            if( verifyParams->MaxTxPower > txPower )
 800d7a8:	454c      	cmp	r4, r9
 800d7aa:	dc02      	bgt.n	800d7b2 <RegionCommonLinkAdrReqVerifyParams+0x86>
                status &= 0xFB; // TxPower KO
 800d7ac:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
 800d7b0:	e7d3      	b.n	800d75a <RegionCommonLinkAdrReqVerifyParams+0x2e>
                txPower = verifyParams->MaxTxPower;
 800d7b2:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800d7b6:	e7d0      	b.n	800d75a <RegionCommonLinkAdrReqVerifyParams+0x2e>
        if( nbRepetitions == 0 )
 800d7b8:	f1ba 0f00 	cmp.w	sl, #0
 800d7bc:	d1cf      	bne.n	800d75e <RegionCommonLinkAdrReqVerifyParams+0x32>
            nbRepetitions = 1;
 800d7be:	f04f 0a01 	mov.w	sl, #1
 800d7c2:	e7cc      	b.n	800d75e <RegionCommonLinkAdrReqVerifyParams+0x32>

0800d7c4 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 800d7c4:	4b02      	ldr	r3, [pc, #8]	; (800d7d0 <RegionCommonComputeSymbolTimeLoRa+0xc>)
 800d7c6:	fa03 f000 	lsl.w	r0, r3, r0
}
 800d7ca:	fbb0 f0f1 	udiv	r0, r0, r1
 800d7ce:	4770      	bx	lr
 800d7d0:	000f4240 	.word	0x000f4240

0800d7d4 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
}
 800d7d4:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 800d7d8:	fbb3 f0f0 	udiv	r0, r3, r0
 800d7dc:	4770      	bx	lr
	...

0800d7e0 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 800d7e0:	b500      	push	{lr}
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 800d7e2:	f1a1 0c04 	sub.w	ip, r1, #4
 800d7e6:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
 800d7ea:	fb0e f202 	mul.w	r2, lr, r2
 800d7ee:	fb00 220c 	mla	r2, r0, ip, r2
 800d7f2:	0052      	lsls	r2, r2, #1
 800d7f4:	d021      	beq.n	800d83a <RegionCommonComputeRxWindowParameters+0x5a>
 800d7f6:	4402      	add	r2, r0
 800d7f8:	3a01      	subs	r2, #1
 800d7fa:	fbb2 f2f0 	udiv	r2, r2, r0
 800d7fe:	4291      	cmp	r1, r2
 800d800:	bf38      	it	cc
 800d802:	4611      	movcc	r1, r2
 800d804:	9a01      	ldr	r2, [sp, #4]
 800d806:	6011      	str	r1, [r2, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 800d808:	0082      	lsls	r2, r0, #2
 800d80a:	fb01 f000 	mul.w	r0, r1, r0
 800d80e:	b1b8      	cbz	r0, 800d840 <RegionCommonComputeRxWindowParameters+0x60>
 800d810:	3001      	adds	r0, #1
 800d812:	0840      	lsrs	r0, r0, #1
 800d814:	1a12      	subs	r2, r2, r0
 800d816:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800d81a:	fb01 2313 	mls	r3, r1, r3, r2
 800d81e:	2b00      	cmp	r3, #0
 800d820:	dd10      	ble.n	800d844 <RegionCommonComputeRxWindowParameters+0x64>
 800d822:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 800d826:	4a0b      	ldr	r2, [pc, #44]	; (800d854 <RegionCommonComputeRxWindowParameters+0x74>)
 800d828:	fb82 1203 	smull	r1, r2, r2, r3
 800d82c:	17db      	asrs	r3, r3, #31
 800d82e:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 800d832:	9a02      	ldr	r2, [sp, #8]
 800d834:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 800d836:	f85d fb04 	ldr.w	pc, [sp], #4
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 800d83a:	fbb2 f2f0 	udiv	r2, r2, r0
 800d83e:	e7de      	b.n	800d7fe <RegionCommonComputeRxWindowParameters+0x1e>
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 800d840:	0840      	lsrs	r0, r0, #1
 800d842:	e7e7      	b.n	800d814 <RegionCommonComputeRxWindowParameters+0x34>
 800d844:	4a03      	ldr	r2, [pc, #12]	; (800d854 <RegionCommonComputeRxWindowParameters+0x74>)
 800d846:	fb82 1203 	smull	r1, r2, r2, r3
 800d84a:	17db      	asrs	r3, r3, #31
 800d84c:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 800d850:	e7ef      	b.n	800d832 <RegionCommonComputeRxWindowParameters+0x52>
 800d852:	bf00      	nop
 800d854:	10624dd3 	.word	0x10624dd3

0800d858 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 800d858:	b538      	push	{r3, r4, r5, lr}
 800d85a:	460d      	mov	r5, r1
 800d85c:	4614      	mov	r4, r2
    int8_t phyTxPower = 0;

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 800d85e:	0040      	lsls	r0, r0, #1
 800d860:	f7f3 faa0 	bl	8000da4 <__aeabi_ui2f>
 800d864:	4601      	mov	r1, r0
 800d866:	4628      	mov	r0, r5
 800d868:	f7f3 f9ea 	bl	8000c40 <__aeabi_fsub>
 800d86c:	4621      	mov	r1, r4
 800d86e:	f7f3 f9e7 	bl	8000c40 <__aeabi_fsub>
 800d872:	f7f2 fe41 	bl	80004f8 <__aeabi_f2d>
 800d876:	f009 fa73 	bl	8016d60 <floor>
 800d87a:	f7f3 f945 	bl	8000b08 <__aeabi_d2iz>

    return phyTxPower;
}
 800d87e:	b240      	sxtb	r0, r0
 800d880:	bd38      	pop	{r3, r4, r5, pc}

0800d882 <RegionCommonCountNbOfEnabledChannels>:
    /* ST_WORKAROUND_END */
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 800d882:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d886:	b083      	sub	sp, #12
 800d888:	4605      	mov	r5, r0
 800d88a:	468b      	mov	fp, r1
 800d88c:	9200      	str	r2, [sp, #0]
 800d88e:	9301      	str	r3, [sp, #4]
    uint8_t nbChannelCount = 0;
    uint8_t nbRestrictedChannelsCount = 0;

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800d890:	2600      	movs	r6, #0
 800d892:	46b0      	mov	r8, r6
    uint8_t nbRestrictedChannelsCount = 0;
 800d894:	46b2      	mov	sl, r6
    uint8_t nbChannelCount = 0;
 800d896:	46b1      	mov	r9, r6
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800d898:	e049      	b.n	800d92e <RegionCommonCountNbOfEnabledChannels+0xac>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 800d89a:	7a3a      	ldrb	r2, [r7, #8]
 800d89c:	f342 0103 	sbfx	r1, r2, #0, #4
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 800d8a0:	f342 1203 	sbfx	r2, r2, #4, #4
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 800d8a4:	b252      	sxtb	r2, r2
 800d8a6:	b249      	sxtb	r1, r1
 800d8a8:	f995 0001 	ldrsb.w	r0, [r5, #1]
 800d8ac:	f7ff fdfb 	bl	800d4a6 <RegionCommonValueInRange>
 800d8b0:	b178      	cbz	r0, 800d8d2 <RegionCommonCountNbOfEnabledChannels+0x50>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 800d8b2:	68ea      	ldr	r2, [r5, #12]
 800d8b4:	7a7b      	ldrb	r3, [r7, #9]
 800d8b6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d8ba:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800d8be:	7d13      	ldrb	r3, [r2, #20]
 800d8c0:	b353      	cbz	r3, 800d918 <RegionCommonCountNbOfEnabledChannels+0x96>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
                    continue;
                }
                enabledChannels[nbChannelCount++] = i + j;
 800d8c2:	f109 0301 	add.w	r3, r9, #1
 800d8c6:	eb08 0204 	add.w	r2, r8, r4
 800d8ca:	f80b 2009 	strb.w	r2, [fp, r9]
 800d8ce:	fa5f f983 	uxtb.w	r9, r3
        for( uint8_t j = 0; j < 16; j++ )
 800d8d2:	3401      	adds	r4, #1
 800d8d4:	b2e4      	uxtb	r4, r4
 800d8d6:	2c0f      	cmp	r4, #15
 800d8d8:	d823      	bhi.n	800d922 <RegionCommonCountNbOfEnabledChannels+0xa0>
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 800d8da:	686b      	ldr	r3, [r5, #4]
 800d8dc:	0072      	lsls	r2, r6, #1
 800d8de:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
 800d8e2:	4123      	asrs	r3, r4
 800d8e4:	f013 0f01 	tst.w	r3, #1
 800d8e8:	d0f3      	beq.n	800d8d2 <RegionCommonCountNbOfEnabledChannels+0x50>
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 800d8ea:	68a8      	ldr	r0, [r5, #8]
 800d8ec:	eb08 0304 	add.w	r3, r8, r4
 800d8f0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d8f4:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 800d8f8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d0e8      	beq.n	800d8d2 <RegionCommonCountNbOfEnabledChannels+0x50>
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 800d900:	782b      	ldrb	r3, [r5, #0]
 800d902:	2b00      	cmp	r3, #0
 800d904:	d1c9      	bne.n	800d89a <RegionCommonCountNbOfEnabledChannels+0x18>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 800d906:	696b      	ldr	r3, [r5, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d0c6      	beq.n	800d89a <RegionCommonCountNbOfEnabledChannels+0x18>
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 800d90c:	5a9b      	ldrh	r3, [r3, r2]
 800d90e:	4123      	asrs	r3, r4
 800d910:	f013 0f01 	tst.w	r3, #1
 800d914:	d1c1      	bne.n	800d89a <RegionCommonCountNbOfEnabledChannels+0x18>
 800d916:	e7dc      	b.n	800d8d2 <RegionCommonCountNbOfEnabledChannels+0x50>
                    nbRestrictedChannelsCount++;
 800d918:	f10a 0a01 	add.w	sl, sl, #1
 800d91c:	fa5f fa8a 	uxtb.w	sl, sl
                    continue;
 800d920:	e7d7      	b.n	800d8d2 <RegionCommonCountNbOfEnabledChannels+0x50>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800d922:	f108 0810 	add.w	r8, r8, #16
 800d926:	fa5f f888 	uxtb.w	r8, r8
 800d92a:	3601      	adds	r6, #1
 800d92c:	b2f6      	uxtb	r6, r6
 800d92e:	8a2b      	ldrh	r3, [r5, #16]
 800d930:	fa1f f288 	uxth.w	r2, r8
 800d934:	429a      	cmp	r2, r3
 800d936:	d201      	bcs.n	800d93c <RegionCommonCountNbOfEnabledChannels+0xba>
        for( uint8_t j = 0; j < 16; j++ )
 800d938:	2400      	movs	r4, #0
 800d93a:	e7cc      	b.n	800d8d6 <RegionCommonCountNbOfEnabledChannels+0x54>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 800d93c:	9b00      	ldr	r3, [sp, #0]
 800d93e:	f883 9000 	strb.w	r9, [r3]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 800d942:	9b01      	ldr	r3, [sp, #4]
 800d944:	f883 a000 	strb.w	sl, [r3]
}
 800d948:	b003      	add	sp, #12
 800d94a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d94e <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 800d94e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d952:	b085      	sub	sp, #20
 800d954:	4604      	mov	r4, r0
 800d956:	460f      	mov	r7, r1
 800d958:	4616      	mov	r6, r2
 800d95a:	461d      	mov	r5, r3
 800d95c:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800d960:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 800d964:	6840      	ldr	r0, [r0, #4]
 800d966:	f004 fa5f 	bl	8011e28 <UTIL_TIMER_GetElapsedTime>
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 800d96a:	6823      	ldr	r3, [r4, #0]
 800d96c:	1a1b      	subs	r3, r3, r0
 800d96e:	f8c9 3000 	str.w	r3, [r9]
    *nbRestrictedChannels = 1;
 800d972:	2301      	movs	r3, #1
 800d974:	f888 3000 	strb.w	r3, [r8]
    *nbEnabledChannels = 0;
 800d978:	2300      	movs	r3, #0
 800d97a:	702b      	strb	r3, [r5, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 800d97c:	6863      	ldr	r3, [r4, #4]
 800d97e:	b113      	cbz	r3, 800d986 <RegionCommonIdentifyChannels+0x38>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 800d980:	6823      	ldr	r3, [r4, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 800d982:	4283      	cmp	r3, r0
 800d984:	d81e      	bhi.n	800d9c4 <RegionCommonIdentifyChannels+0x76>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 800d986:	2300      	movs	r3, #0
 800d988:	603b      	str	r3, [r7, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 800d98a:	69e3      	ldr	r3, [r4, #28]
 800d98c:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 800d990:	781f      	ldrb	r7, [r3, #0]
 800d992:	69a3      	ldr	r3, [r4, #24]
 800d994:	9303      	str	r3, [sp, #12]
 800d996:	ab01      	add	r3, sp, #4
 800d998:	f104 020c 	add.w	r2, r4, #12
 800d99c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d9a0:	e883 0003 	stmia.w	r3, {r0, r1}
 800d9a4:	7d23      	ldrb	r3, [r4, #20]
 800d9a6:	9300      	str	r3, [sp, #0]
 800d9a8:	7a23      	ldrb	r3, [r4, #8]
 800d9aa:	7a62      	ldrb	r2, [r4, #9]
 800d9ac:	4661      	mov	r1, ip
 800d9ae:	4638      	mov	r0, r7
 800d9b0:	f7ff fe16 	bl	800d5e0 <RegionCommonUpdateBandTimeOff>
 800d9b4:	f8c9 0000 	str.w	r0, [r9]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 800d9b8:	4643      	mov	r3, r8
 800d9ba:	462a      	mov	r2, r5
 800d9bc:	4631      	mov	r1, r6
 800d9be:	69e0      	ldr	r0, [r4, #28]
 800d9c0:	f7ff ff5f 	bl	800d882 <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 800d9c4:	782b      	ldrb	r3, [r5, #0]
 800d9c6:	b923      	cbnz	r3, 800d9d2 <RegionCommonIdentifyChannels+0x84>
    {
        *nextTxDelay = 0;
        return LORAMAC_STATUS_OK;
    }
    else if( *nbRestrictedChannels > 0 )
 800d9c8:	f898 3000 	ldrb.w	r3, [r8]
 800d9cc:	b13b      	cbz	r3, 800d9de <RegionCommonIdentifyChannels+0x90>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 800d9ce:	200b      	movs	r0, #11
 800d9d0:	e002      	b.n	800d9d8 <RegionCommonIdentifyChannels+0x8a>
        *nextTxDelay = 0;
 800d9d2:	2000      	movs	r0, #0
 800d9d4:	f8c9 0000 	str.w	r0, [r9]
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
    }
}
 800d9d8:	b005      	add	sp, #20
 800d9da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 800d9de:	200c      	movs	r0, #12
 800d9e0:	e7fa      	b.n	800d9d8 <RegionCommonIdentifyChannels+0x8a>

0800d9e2 <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 800d9e2:	b570      	push	{r4, r5, r6, lr}
 800d9e4:	b082      	sub	sp, #8
 800d9e6:	4605      	mov	r5, r0
    int8_t drLocal = params->CurrentDr;
 800d9e8:	f990 4000 	ldrsb.w	r4, [r0]

    if( params->CurrentDr == params->MinDr )
 800d9ec:	f990 6002 	ldrsb.w	r6, [r0, #2]
 800d9f0:	42a6      	cmp	r6, r4
 800d9f2:	d011      	beq.n	800da18 <RegionCommonGetNextLowerTxDr+0x36>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 800d9f4:	3c01      	subs	r4, #1
 800d9f6:	b264      	sxtb	r4, r4
        } while( ( drLocal != params->MinDr ) &&
 800d9f8:	42a6      	cmp	r6, r4
 800d9fa:	d00e      	beq.n	800da1a <RegionCommonGetNextLowerTxDr+0x38>
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 800d9fc:	68ab      	ldr	r3, [r5, #8]
 800d9fe:	9301      	str	r3, [sp, #4]
 800da00:	f995 3001 	ldrsb.w	r3, [r5, #1]
 800da04:	9300      	str	r3, [sp, #0]
 800da06:	4633      	mov	r3, r6
 800da08:	4622      	mov	r2, r4
 800da0a:	6869      	ldr	r1, [r5, #4]
 800da0c:	78e8      	ldrb	r0, [r5, #3]
 800da0e:	f7ff fd54 	bl	800d4ba <RegionCommonChanVerifyDr>
        } while( ( drLocal != params->MinDr ) &&
 800da12:	2800      	cmp	r0, #0
 800da14:	d0ee      	beq.n	800d9f4 <RegionCommonGetNextLowerTxDr+0x12>
 800da16:	e000      	b.n	800da1a <RegionCommonGetNextLowerTxDr+0x38>
        return params->MinDr;
 800da18:	4634      	mov	r4, r6

        return drLocal;
    }
}
 800da1a:	4620      	mov	r0, r4
 800da1c:	b002      	add	sp, #8
 800da1e:	bd70      	pop	{r4, r5, r6, pc}

0800da20 <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
}
 800da20:	4288      	cmp	r0, r1
 800da22:	bfb8      	it	lt
 800da24:	4608      	movlt	r0, r1
 800da26:	4770      	bx	lr

0800da28 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
    switch( bandwidths[drIndex] )
 800da28:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
 800da2c:	4a05      	ldr	r2, [pc, #20]	; (800da44 <RegionCommonGetBandwidth+0x1c>)
 800da2e:	4293      	cmp	r3, r2
 800da30:	d004      	beq.n	800da3c <RegionCommonGetBandwidth+0x14>
 800da32:	4a05      	ldr	r2, [pc, #20]	; (800da48 <RegionCommonGetBandwidth+0x20>)
 800da34:	4293      	cmp	r3, r2
 800da36:	d103      	bne.n	800da40 <RegionCommonGetBandwidth+0x18>
        case 125000:
            return 0;
        case 250000:
            return 1;
        case 500000:
            return 2;
 800da38:	2002      	movs	r0, #2
 800da3a:	4770      	bx	lr
            return 1;
 800da3c:	2001      	movs	r0, #1
 800da3e:	4770      	bx	lr
    switch( bandwidths[drIndex] )
 800da40:	2000      	movs	r0, #0
    }
}
 800da42:	4770      	bx	lr
 800da44:	0003d090 	.word	0x0003d090
 800da48:	0007a120 	.word	0x0007a120

0800da4c <RegionCommonRxConfigPrint>:

/* ST_WORKAROUND_BEGIN: Print Tx/Rx config */
void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 800da4c:	b570      	push	{r4, r5, r6, lr}
 800da4e:	b08a      	sub	sp, #40	; 0x28
 800da50:	4686      	mov	lr, r0
 800da52:	460d      	mov	r5, r1
 800da54:	4616      	mov	r6, r2
    const char *slotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
 800da56:	f10d 0c10 	add.w	ip, sp, #16
 800da5a:	4c12      	ldr	r4, [pc, #72]	; (800daa4 <RegionCommonRxConfigPrint+0x58>)
 800da5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800da5e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800da62:	e894 0003 	ldmia.w	r4, {r0, r1}
 800da66:	e88c 0003 	stmia.w	ip, {r0, r1}

    if ( rxSlot < RX_SLOT_NONE )
 800da6a:	f1be 0f05 	cmp.w	lr, #5
 800da6e:	d80f      	bhi.n	800da90 <RegionCommonRxConfigPrint+0x44>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", slotStrings[rxSlot], frequency, dr );
 800da70:	9602      	str	r6, [sp, #8]
 800da72:	9501      	str	r5, [sp, #4]
 800da74:	ab0a      	add	r3, sp, #40	; 0x28
 800da76:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
 800da7a:	f85e 3c18 	ldr.w	r3, [lr, #-24]
 800da7e:	9300      	str	r3, [sp, #0]
 800da80:	4b09      	ldr	r3, [pc, #36]	; (800daa8 <RegionCommonRxConfigPrint+0x5c>)
 800da82:	2201      	movs	r2, #1
 800da84:	2100      	movs	r1, #0
 800da86:	2002      	movs	r0, #2
 800da88:	f003 fec0 	bl	801180c <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 800da8c:	b00a      	add	sp, #40	; 0x28
 800da8e:	bd70      	pop	{r4, r5, r6, pc}
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 800da90:	9601      	str	r6, [sp, #4]
 800da92:	9500      	str	r5, [sp, #0]
 800da94:	4b05      	ldr	r3, [pc, #20]	; (800daac <RegionCommonRxConfigPrint+0x60>)
 800da96:	2201      	movs	r2, #1
 800da98:	2100      	movs	r1, #0
 800da9a:	2002      	movs	r0, #2
 800da9c:	f003 feb6 	bl	801180c <UTIL_ADV_TRACE_COND_FSend>
}
 800daa0:	e7f4      	b.n	800da8c <RegionCommonRxConfigPrint+0x40>
 800daa2:	bf00      	nop
 800daa4:	08016e94 	.word	0x08016e94
 800daa8:	08017590 	.word	0x08017590
 800daac:	080175b0 	.word	0x080175b0

0800dab0 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 800dab0:	b500      	push	{lr}
 800dab2:	b083      	sub	sp, #12
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 800dab4:	9101      	str	r1, [sp, #4]
 800dab6:	9000      	str	r0, [sp, #0]
 800dab8:	4b04      	ldr	r3, [pc, #16]	; (800dacc <RegionCommonTxConfigPrint+0x1c>)
 800daba:	2201      	movs	r2, #1
 800dabc:	2100      	movs	r1, #0
 800dabe:	2002      	movs	r0, #2
 800dac0:	f003 fea4 	bl	801180c <UTIL_ADV_TRACE_COND_FSend>
}
 800dac4:	b003      	add	sp, #12
 800dac6:	f85d fb04 	ldr.w	pc, [sp], #4
 800daca:	bf00      	nop
 800dacc:	080175cc 	.word	0x080175cc

0800dad0 <VerifyRfFreq>:
static RegionNvmDataGroup1_t* RegionNvmGroup1;
static RegionNvmDataGroup2_t* RegionNvmGroup2;


static bool VerifyRfFreq( uint32_t freq )
{
 800dad0:	b510      	push	{r4, lr}
 800dad2:	4604      	mov	r4, r0
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 800dad4:	4b05      	ldr	r3, [pc, #20]	; (800daec <VerifyRfFreq+0x1c>)
 800dad6:	6a1b      	ldr	r3, [r3, #32]
 800dad8:	4798      	blx	r3
 800dada:	b120      	cbz	r0, 800dae6 <VerifyRfFreq+0x16>
    {
        return false;
    }

    if( ( freq < 865000000 ) || ( freq > 867000000 ) )
 800dadc:	4b04      	ldr	r3, [pc, #16]	; (800daf0 <VerifyRfFreq+0x20>)
 800dade:	4423      	add	r3, r4
 800dae0:	4a04      	ldr	r2, [pc, #16]	; (800daf4 <VerifyRfFreq+0x24>)
 800dae2:	4293      	cmp	r3, r2
 800dae4:	d800      	bhi.n	800dae8 <VerifyRfFreq+0x18>
    {
        return false;
    }
    return true;
}
 800dae6:	bd10      	pop	{r4, pc}
        return false;
 800dae8:	2000      	movs	r0, #0
 800daea:	e7fc      	b.n	800dae6 <VerifyRfFreq+0x16>
 800daec:	08017b28 	.word	0x08017b28
 800daf0:	cc7125c0 	.word	0xcc7125c0
 800daf4:	001e8480 	.word	0x001e8480

0800daf8 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 800daf8:	b570      	push	{r4, r5, r6, lr}
 800dafa:	b084      	sub	sp, #16
 800dafc:	4605      	mov	r5, r0
 800dafe:	460c      	mov	r4, r1
    int8_t phyDr = DataratesIN865[datarate];
 800db00:	4b13      	ldr	r3, [pc, #76]	; (800db50 <GetTimeOnAir+0x58>)
 800db02:	561e      	ldrsb	r6, [r3, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsIN865 );
 800db04:	4913      	ldr	r1, [pc, #76]	; (800db54 <GetTimeOnAir+0x5c>)
 800db06:	f7ff ff8f 	bl	800da28 <RegionCommonGetBandwidth>
 800db0a:	4601      	mov	r1, r0
    TimerTime_t timeOnAir = 0;

    if( datarate == DR_7 )
 800db0c:	2d07      	cmp	r5, #7
 800db0e:	d00e      	beq.n	800db2e <GetTimeOnAir+0x36>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 800db10:	4b11      	ldr	r3, [pc, #68]	; (800db58 <GetTimeOnAir+0x60>)
 800db12:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800db14:	2001      	movs	r0, #1
 800db16:	9003      	str	r0, [sp, #12]
 800db18:	b2e4      	uxtb	r4, r4
 800db1a:	9402      	str	r4, [sp, #8]
 800db1c:	2300      	movs	r3, #0
 800db1e:	9301      	str	r3, [sp, #4]
 800db20:	2308      	movs	r3, #8
 800db22:	9300      	str	r3, [sp, #0]
 800db24:	4603      	mov	r3, r0
 800db26:	4632      	mov	r2, r6
 800db28:	47a8      	blx	r5
    }
    return timeOnAir;
}
 800db2a:	b004      	add	sp, #16
 800db2c:	bd70      	pop	{r4, r5, r6, pc}
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 800db2e:	4b0a      	ldr	r3, [pc, #40]	; (800db58 <GetTimeOnAir+0x60>)
 800db30:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800db32:	2301      	movs	r3, #1
 800db34:	9303      	str	r3, [sp, #12]
 800db36:	b2e4      	uxtb	r4, r4
 800db38:	9402      	str	r4, [sp, #8]
 800db3a:	2000      	movs	r0, #0
 800db3c:	9001      	str	r0, [sp, #4]
 800db3e:	2305      	movs	r3, #5
 800db40:	9300      	str	r3, [sp, #0]
 800db42:	4603      	mov	r3, r0
 800db44:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800db48:	fb06 f202 	mul.w	r2, r6, r2
 800db4c:	47a8      	blx	r5
 800db4e:	e7ec      	b.n	800db2a <GetTimeOnAir+0x32>
 800db50:	0801761c 	.word	0x0801761c
 800db54:	080175fc 	.word	0x080175fc
 800db58:	08017b28 	.word	0x08017b28

0800db5c <RegionIN865GetPhyParam>:
#endif /* REGION_IN865 */

PhyParam_t RegionIN865GetPhyParam( GetPhyParams_t* getPhy )
{
 800db5c:	b500      	push	{lr}
 800db5e:	b087      	sub	sp, #28
    PhyParam_t phyParam = { 0 };
 800db60:	2300      	movs	r3, #0
 800db62:	9304      	str	r3, [sp, #16]

#if defined( REGION_IN865 )
    switch( getPhy->Attribute )
 800db64:	7803      	ldrb	r3, [r0, #0]
 800db66:	3b0b      	subs	r3, #11
 800db68:	2b2e      	cmp	r3, #46	; 0x2e
 800db6a:	d830      	bhi.n	800dbce <RegionIN865GetPhyParam+0x72>
 800db6c:	e8df f003 	tbb	[pc, r3]
 800db70:	403a3734 	.word	0x403a3734
 800db74:	4e4a462f 	.word	0x4e4a462f
 800db78:	5e5a5652 	.word	0x5e5a5652
 800db7c:	6d6a672f 	.word	0x6d6a672f
 800db80:	2f7a7772 	.word	0x2f7a7772
 800db84:	18817e2f 	.word	0x18817e2f
 800db88:	2f2f2f2f 	.word	0x2f2f2f2f
 800db8c:	2f2f2f2f 	.word	0x2f2f2f2f
 800db90:	2f2f2f2f 	.word	0x2f2f2f2f
 800db94:	9187842f 	.word	0x9187842f
 800db98:	97942f2f 	.word	0x97942f2f
 800db9c:	9a2f      	.short	0x9a2f
 800db9e:	a0          	.byte	0xa0
 800db9f:	00          	.byte	0x00
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 800dba0:	f990 3001 	ldrsb.w	r3, [r0, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800dba4:	f88d 3004 	strb.w	r3, [sp, #4]
 800dba8:	2307      	movs	r3, #7
 800dbaa:	f88d 3005 	strb.w	r3, [sp, #5]
 800dbae:	2300      	movs	r3, #0
 800dbb0:	f88d 3006 	strb.w	r3, [sp, #6]
 800dbb4:	2310      	movs	r3, #16
 800dbb6:	f88d 3007 	strb.w	r3, [sp, #7]
                .MaxDr = ( int8_t )IN865_TX_MAX_DATARATE,
                .MinDr = ( int8_t )IN865_TX_MIN_DATARATE,
                .NbChannels = IN865_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 800dbba:	4b41      	ldr	r3, [pc, #260]	; (800dcc0 <RegionIN865GetPhyParam+0x164>)
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	f103 02c0 	add.w	r2, r3, #192	; 0xc0
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800dbc2:	9202      	str	r2, [sp, #8]
 800dbc4:	9303      	str	r3, [sp, #12]
                .Channels = RegionNvmGroup2->Channels,
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 800dbc6:	a801      	add	r0, sp, #4
 800dbc8:	f7ff ff0b 	bl	800d9e2 <RegionCommonGetNextLowerTxDr>
 800dbcc:	9004      	str	r0, [sp, #16]
            break;
        }
    }

#endif /* REGION_IN865 */
    return phyParam;
 800dbce:	9804      	ldr	r0, [sp, #16]
 800dbd0:	9005      	str	r0, [sp, #20]
}
 800dbd2:	b007      	add	sp, #28
 800dbd4:	f85d fb04 	ldr.w	pc, [sp], #4
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 800dbd8:	2340      	movs	r3, #64	; 0x40
 800dbda:	9304      	str	r3, [sp, #16]
            break;
 800dbdc:	e7f7      	b.n	800dbce <RegionIN865GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 800dbde:	2320      	movs	r3, #32
 800dbe0:	9304      	str	r3, [sp, #16]
            break;
 800dbe2:	e7f4      	b.n	800dbce <RegionIN865GetPhyParam+0x72>
            phyParam.Value = MaxPayloadOfDatarateIN865[getPhy->Datarate];
 800dbe4:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800dbe8:	4a36      	ldr	r2, [pc, #216]	; (800dcc4 <RegionIN865GetPhyParam+0x168>)
 800dbea:	5cd3      	ldrb	r3, [r2, r3]
 800dbec:	9304      	str	r3, [sp, #16]
            break;
 800dbee:	e7ee      	b.n	800dbce <RegionIN865GetPhyParam+0x72>
            phyParam.Value = MaxPayloadOfDatarateRepeaterIN865[getPhy->Datarate];
 800dbf0:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800dbf4:	4a34      	ldr	r2, [pc, #208]	; (800dcc8 <RegionIN865GetPhyParam+0x16c>)
 800dbf6:	5cd3      	ldrb	r3, [r2, r3]
 800dbf8:	9304      	str	r3, [sp, #16]
            break;
 800dbfa:	e7e8      	b.n	800dbce <RegionIN865GetPhyParam+0x72>
            phyParam.Value = IN865_MAX_RX_WINDOW;
 800dbfc:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800dc00:	9304      	str	r3, [sp, #16]
            break;
 800dc02:	e7e4      	b.n	800dbce <RegionIN865GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 800dc04:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800dc08:	9304      	str	r3, [sp, #16]
            break;
 800dc0a:	e7e0      	b.n	800dbce <RegionIN865GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 800dc0c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800dc10:	9304      	str	r3, [sp, #16]
            break;
 800dc12:	e7dc      	b.n	800dbce <RegionIN865GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 800dc14:	f241 3388 	movw	r3, #5000	; 0x1388
 800dc18:	9304      	str	r3, [sp, #16]
            break;
 800dc1a:	e7d8      	b.n	800dbce <RegionIN865GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 800dc1c:	f241 7370 	movw	r3, #6000	; 0x1770
 800dc20:	9304      	str	r3, [sp, #16]
            break;
 800dc22:	e7d4      	b.n	800dbce <RegionIN865GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 800dc24:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800dc28:	9304      	str	r3, [sp, #16]
            break;
 800dc2a:	e7d0      	b.n	800dbce <RegionIN865GetPhyParam+0x72>
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 800dc2c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800dc30:	4826      	ldr	r0, [pc, #152]	; (800dccc <RegionIN865GetPhyParam+0x170>)
 800dc32:	f001 fc49 	bl	800f4c8 <randr>
 800dc36:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
 800dc3a:	9004      	str	r0, [sp, #16]
            break;
 800dc3c:	e7c7      	b.n	800dbce <RegionIN865GetPhyParam+0x72>
            phyParam.Value = IN865_RX_WND_2_FREQ;
 800dc3e:	4b24      	ldr	r3, [pc, #144]	; (800dcd0 <RegionIN865GetPhyParam+0x174>)
 800dc40:	9304      	str	r3, [sp, #16]
            break;
 800dc42:	e7c4      	b.n	800dbce <RegionIN865GetPhyParam+0x72>
            phyParam.Value = IN865_RX_WND_2_DR;
 800dc44:	2302      	movs	r3, #2
 800dc46:	9304      	str	r3, [sp, #16]
            break;
 800dc48:	e7c1      	b.n	800dbce <RegionIN865GetPhyParam+0x72>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800dc4a:	4b1d      	ldr	r3, [pc, #116]	; (800dcc0 <RegionIN865GetPhyParam+0x164>)
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	33c0      	adds	r3, #192	; 0xc0
 800dc50:	9304      	str	r3, [sp, #16]
            break;
 800dc52:	e7bc      	b.n	800dbce <RegionIN865GetPhyParam+0x72>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 800dc54:	4b1a      	ldr	r3, [pc, #104]	; (800dcc0 <RegionIN865GetPhyParam+0x164>)
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	33c2      	adds	r3, #194	; 0xc2
 800dc5a:	9304      	str	r3, [sp, #16]
            break;
 800dc5c:	e7b7      	b.n	800dbce <RegionIN865GetPhyParam+0x72>
            phyParam.Value = IN865_MAX_NB_CHANNELS;
 800dc5e:	2310      	movs	r3, #16
 800dc60:	9304      	str	r3, [sp, #16]
            break;
 800dc62:	e7b4      	b.n	800dbce <RegionIN865GetPhyParam+0x72>
            phyParam.Channels = RegionNvmGroup2->Channels;
 800dc64:	4b16      	ldr	r3, [pc, #88]	; (800dcc0 <RegionIN865GetPhyParam+0x164>)
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	9304      	str	r3, [sp, #16]
            break;
 800dc6a:	e7b0      	b.n	800dbce <RegionIN865GetPhyParam+0x72>
            phyParam.fValue = IN865_DEFAULT_MAX_EIRP;
 800dc6c:	4b19      	ldr	r3, [pc, #100]	; (800dcd4 <RegionIN865GetPhyParam+0x178>)
 800dc6e:	9304      	str	r3, [sp, #16]
            break;
 800dc70:	e7ad      	b.n	800dbce <RegionIN865GetPhyParam+0x72>
            phyParam.fValue = IN865_DEFAULT_ANTENNA_GAIN;
 800dc72:	4b19      	ldr	r3, [pc, #100]	; (800dcd8 <RegionIN865GetPhyParam+0x17c>)
 800dc74:	9304      	str	r3, [sp, #16]
            break;
 800dc76:	e7aa      	b.n	800dbce <RegionIN865GetPhyParam+0x72>
            phyParam.Value = IN865_BEACON_CHANNEL_FREQ;
 800dc78:	4b15      	ldr	r3, [pc, #84]	; (800dcd0 <RegionIN865GetPhyParam+0x174>)
 800dc7a:	9304      	str	r3, [sp, #16]
            break;
 800dc7c:	e7a7      	b.n	800dbce <RegionIN865GetPhyParam+0x72>
            phyParam.BeaconFormat.BeaconSize = IN865_BEACON_SIZE;
 800dc7e:	2313      	movs	r3, #19
 800dc80:	f88d 3010 	strb.w	r3, [sp, #16]
            phyParam.BeaconFormat.Rfu1Size = IN865_RFU1_SIZE;
 800dc84:	2301      	movs	r3, #1
 800dc86:	f88d 3011 	strb.w	r3, [sp, #17]
            phyParam.BeaconFormat.Rfu2Size = IN865_RFU2_SIZE;
 800dc8a:	2303      	movs	r3, #3
 800dc8c:	f88d 3012 	strb.w	r3, [sp, #18]
            break;
 800dc90:	e79d      	b.n	800dbce <RegionIN865GetPhyParam+0x72>
            phyParam.Value = IN865_BEACON_CHANNEL_DR;
 800dc92:	2304      	movs	r3, #4
 800dc94:	9304      	str	r3, [sp, #16]
            break;
 800dc96:	e79a      	b.n	800dbce <RegionIN865GetPhyParam+0x72>
            phyParam.Value = IN865_PING_SLOT_CHANNEL_FREQ;
 800dc98:	4b0d      	ldr	r3, [pc, #52]	; (800dcd0 <RegionIN865GetPhyParam+0x174>)
 800dc9a:	9304      	str	r3, [sp, #16]
            break;
 800dc9c:	e797      	b.n	800dbce <RegionIN865GetPhyParam+0x72>
            phyParam.Value = IN865_PING_SLOT_CHANNEL_DR;
 800dc9e:	2304      	movs	r3, #4
 800dca0:	9304      	str	r3, [sp, #16]
            break;
 800dca2:	e794      	b.n	800dbce <RegionIN865GetPhyParam+0x72>
            phyParam.Value = DataratesIN865[getPhy->Datarate];
 800dca4:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800dca8:	4a0c      	ldr	r2, [pc, #48]	; (800dcdc <RegionIN865GetPhyParam+0x180>)
 800dcaa:	5cd3      	ldrb	r3, [r2, r3]
 800dcac:	9304      	str	r3, [sp, #16]
            break;
 800dcae:	e78e      	b.n	800dbce <RegionIN865GetPhyParam+0x72>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsIN865 );
 800dcb0:	490b      	ldr	r1, [pc, #44]	; (800dce0 <RegionIN865GetPhyParam+0x184>)
 800dcb2:	f990 0001 	ldrsb.w	r0, [r0, #1]
 800dcb6:	f7ff feb7 	bl	800da28 <RegionCommonGetBandwidth>
 800dcba:	9004      	str	r0, [sp, #16]
            break;
 800dcbc:	e787      	b.n	800dbce <RegionIN865GetPhyParam+0x72>
 800dcbe:	bf00      	nop
 800dcc0:	20001170 	.word	0x20001170
 800dcc4:	0801762c 	.word	0x0801762c
 800dcc8:	08017634 	.word	0x08017634
 800dccc:	fffffc18 	.word	0xfffffc18
 800dcd0:	33a680f0 	.word	0x33a680f0
 800dcd4:	41f00000 	.word	0x41f00000
 800dcd8:	4009999a 	.word	0x4009999a
 800dcdc:	0801761c 	.word	0x0801761c
 800dce0:	080175fc 	.word	0x080175fc

0800dce4 <RegionIN865SetBandTxDone>:

void RegionIN865SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 800dce4:	b510      	push	{r4, lr}
 800dce6:	b082      	sub	sp, #8
#if defined( REGION_IN865 )
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 800dce8:	4b0b      	ldr	r3, [pc, #44]	; (800dd18 <RegionIN865SetBandTxDone+0x34>)
 800dcea:	681c      	ldr	r4, [r3, #0]
 800dcec:	4b0b      	ldr	r3, [pc, #44]	; (800dd1c <RegionIN865SetBandTxDone+0x38>)
 800dcee:	681a      	ldr	r2, [r3, #0]
 800dcf0:	7803      	ldrb	r3, [r0, #0]
 800dcf2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800dcf6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800dcfa:	7a5b      	ldrb	r3, [r3, #9]
 800dcfc:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 800dd00:	6903      	ldr	r3, [r0, #16]
 800dd02:	9300      	str	r3, [sp, #0]
 800dd04:	68c3      	ldr	r3, [r0, #12]
 800dd06:	7842      	ldrb	r2, [r0, #1]
 800dd08:	6881      	ldr	r1, [r0, #8]
 800dd0a:	eb04 00cc 	add.w	r0, r4, ip, lsl #3
 800dd0e:	f7ff fc4d 	bl	800d5ac <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_IN865 */
}
 800dd12:	b002      	add	sp, #8
 800dd14:	bd10      	pop	{r4, pc}
 800dd16:	bf00      	nop
 800dd18:	2000116c 	.word	0x2000116c
 800dd1c:	20001170 	.word	0x20001170

0800dd20 <RegionIN865InitDefaults>:

void RegionIN865InitDefaults( InitDefaultsParams_t* params )
{
 800dd20:	b510      	push	{r4, lr}
 800dd22:	b086      	sub	sp, #24
#if defined( REGION_IN865 )
    Band_t bands[IN865_MAX_NB_BANDS] =
 800dd24:	2301      	movs	r3, #1
 800dd26:	f8ad 3000 	strh.w	r3, [sp]
 800dd2a:	2300      	movs	r3, #0
 800dd2c:	f88d 3002 	strb.w	r3, [sp, #2]
 800dd30:	9301      	str	r3, [sp, #4]
 800dd32:	9302      	str	r3, [sp, #8]
 800dd34:	9303      	str	r3, [sp, #12]
 800dd36:	9304      	str	r3, [sp, #16]
 800dd38:	f88d 3014 	strb.w	r3, [sp, #20]
    {
        IN865_BAND0
    };

    switch( params->Type )
 800dd3c:	7a03      	ldrb	r3, [r0, #8]
 800dd3e:	2b01      	cmp	r3, #1
 800dd40:	d032      	beq.n	800dda8 <RegionIN865InitDefaults+0x88>
 800dd42:	2b02      	cmp	r3, #2
 800dd44:	d03d      	beq.n	800ddc2 <RegionIN865InitDefaults+0xa2>
 800dd46:	b10b      	cbz	r3, 800dd4c <RegionIN865InitDefaults+0x2c>
        {
            break;
        }
    }
#endif /* REGION_IN865 */
}
 800dd48:	b006      	add	sp, #24
 800dd4a:	bd10      	pop	{r4, pc}
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 800dd4c:	6803      	ldr	r3, [r0, #0]
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d0fa      	beq.n	800dd48 <RegionIN865InitDefaults+0x28>
 800dd52:	6842      	ldr	r2, [r0, #4]
 800dd54:	2a00      	cmp	r2, #0
 800dd56:	d0f7      	beq.n	800dd48 <RegionIN865InitDefaults+0x28>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 800dd58:	491f      	ldr	r1, [pc, #124]	; (800ddd8 <RegionIN865InitDefaults+0xb8>)
 800dd5a:	600b      	str	r3, [r1, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 800dd5c:	4c1f      	ldr	r4, [pc, #124]	; (800dddc <RegionIN865InitDefaults+0xbc>)
 800dd5e:	6022      	str	r2, [r4, #0]
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * IN865_MAX_NB_BANDS );
 800dd60:	2218      	movs	r2, #24
 800dd62:	4669      	mov	r1, sp
 800dd64:	4618      	mov	r0, r3
 800dd66:	f001 fbbc 	bl	800f4e2 <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) IN865_LC1;
 800dd6a:	6824      	ldr	r4, [r4, #0]
 800dd6c:	4b1c      	ldr	r3, [pc, #112]	; (800dde0 <RegionIN865InitDefaults+0xc0>)
 800dd6e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800dd72:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) IN865_LC2;
 800dd76:	f104 0c0c 	add.w	ip, r4, #12
 800dd7a:	f103 020c 	add.w	r2, r3, #12
 800dd7e:	ca07      	ldmia	r2, {r0, r1, r2}
 800dd80:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) IN865_LC3;
 800dd84:	f104 0c18 	add.w	ip, r4, #24
 800dd88:	3318      	adds	r3, #24
 800dd8a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800dd8e:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 800dd92:	2307      	movs	r3, #7
 800dd94:	f8a4 30c2 	strh.w	r3, [r4, #194]	; 0xc2
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800dd98:	2201      	movs	r2, #1
 800dd9a:	f104 01c2 	add.w	r1, r4, #194	; 0xc2
 800dd9e:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
 800dda2:	f7ff fbf4 	bl	800d58e <RegionCommonChanMaskCopy>
            break;
 800dda6:	e7cf      	b.n	800dd48 <RegionIN865InitDefaults+0x28>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 800dda8:	4b0c      	ldr	r3, [pc, #48]	; (800dddc <RegionIN865InitDefaults+0xbc>)
 800ddaa:	6818      	ldr	r0, [r3, #0]
 800ddac:	2300      	movs	r3, #0
 800ddae:	6043      	str	r3, [r0, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 800ddb0:	6103      	str	r3, [r0, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 800ddb2:	61c3      	str	r3, [r0, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800ddb4:	2201      	movs	r2, #1
 800ddb6:	f100 01c2 	add.w	r1, r0, #194	; 0xc2
 800ddba:	30c0      	adds	r0, #192	; 0xc0
 800ddbc:	f7ff fbe7 	bl	800d58e <RegionCommonChanMaskCopy>
            break;
 800ddc0:	e7c2      	b.n	800dd48 <RegionIN865InitDefaults+0x28>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 800ddc2:	4b06      	ldr	r3, [pc, #24]	; (800dddc <RegionIN865InitDefaults+0xbc>)
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	f8b3 20c2 	ldrh.w	r2, [r3, #194]	; 0xc2
 800ddca:	f8b3 10c0 	ldrh.w	r1, [r3, #192]	; 0xc0
 800ddce:	430a      	orrs	r2, r1
 800ddd0:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
            break;
 800ddd4:	e7b8      	b.n	800dd48 <RegionIN865InitDefaults+0x28>
 800ddd6:	bf00      	nop
 800ddd8:	2000116c 	.word	0x2000116c
 800dddc:	20001170 	.word	0x20001170
 800dde0:	08016eac 	.word	0x08016eac

0800dde4 <RegionIN865Verify>:

bool RegionIN865Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800dde4:	b508      	push	{r3, lr}
#if defined( REGION_IN865 )
    switch( phyAttribute )
 800dde6:	290a      	cmp	r1, #10
 800dde8:	d83b      	bhi.n	800de62 <RegionIN865Verify+0x7e>
 800ddea:	e8df f001 	tbb	[pc, r1]
 800ddee:	3a06      	.short	0x3a06
 800ddf0:	0a3a3a3a 	.word	0x0a3a3a3a
 800ddf4:	303a2218 	.word	0x303a2218
 800ddf8:	30          	.byte	0x30
 800ddf9:	00          	.byte	0x00
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 800ddfa:	6800      	ldr	r0, [r0, #0]
 800ddfc:	f7ff fe68 	bl	800dad0 <VerifyRfFreq>
 800de00:	e030      	b.n	800de64 <RegionIN865Verify+0x80>
        }
        case PHY_TX_DR:
        {
            if( verify->DatarateParams.Datarate == DR_6 )
 800de02:	f990 0000 	ldrsb.w	r0, [r0]
 800de06:	2806      	cmp	r0, #6
 800de08:	d101      	bne.n	800de0e <RegionIN865Verify+0x2a>
            {// DR_6 is not supported by this region
                return false;
 800de0a:	2000      	movs	r0, #0
 800de0c:	e02a      	b.n	800de64 <RegionIN865Verify+0x80>
            }
            else
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, IN865_TX_MIN_DATARATE, IN865_TX_MAX_DATARATE );
 800de0e:	2207      	movs	r2, #7
 800de10:	2100      	movs	r1, #0
 800de12:	f7ff fb48 	bl	800d4a6 <RegionCommonValueInRange>
 800de16:	3800      	subs	r0, #0
 800de18:	bf18      	it	ne
 800de1a:	2001      	movne	r0, #1
 800de1c:	e022      	b.n	800de64 <RegionIN865Verify+0x80>
            }
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 800de1e:	2205      	movs	r2, #5
 800de20:	2100      	movs	r1, #0
 800de22:	f990 0000 	ldrsb.w	r0, [r0]
 800de26:	f7ff fb3e 	bl	800d4a6 <RegionCommonValueInRange>
 800de2a:	3800      	subs	r0, #0
 800de2c:	bf18      	it	ne
 800de2e:	2001      	movne	r0, #1
 800de30:	e018      	b.n	800de64 <RegionIN865Verify+0x80>
        }
        case PHY_RX_DR:
        {
            if( verify->DatarateParams.Datarate == DR_6 )
 800de32:	f990 0000 	ldrsb.w	r0, [r0]
 800de36:	2806      	cmp	r0, #6
 800de38:	d101      	bne.n	800de3e <RegionIN865Verify+0x5a>
            {// DR_6 is not supported by this region
                return false;
 800de3a:	2000      	movs	r0, #0
 800de3c:	e012      	b.n	800de64 <RegionIN865Verify+0x80>
            }
            else
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, IN865_RX_MIN_DATARATE, IN865_RX_MAX_DATARATE );
 800de3e:	2207      	movs	r2, #7
 800de40:	2100      	movs	r1, #0
 800de42:	f7ff fb30 	bl	800d4a6 <RegionCommonValueInRange>
 800de46:	3800      	subs	r0, #0
 800de48:	bf18      	it	ne
 800de4a:	2001      	movne	r0, #1
 800de4c:	e00a      	b.n	800de64 <RegionIN865Verify+0x80>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, IN865_MAX_TX_POWER, IN865_MIN_TX_POWER );
 800de4e:	220a      	movs	r2, #10
 800de50:	2100      	movs	r1, #0
 800de52:	f990 0000 	ldrsb.w	r0, [r0]
 800de56:	f7ff fb26 	bl	800d4a6 <RegionCommonValueInRange>
 800de5a:	3800      	subs	r0, #0
 800de5c:	bf18      	it	ne
 800de5e:	2001      	movne	r0, #1
 800de60:	e000      	b.n	800de64 <RegionIN865Verify+0x80>
    switch( phyAttribute )
 800de62:	2000      	movs	r0, #0
            return false;
    }
#else
    return false;
#endif /* REGION_IN865 */
}
 800de64:	bd08      	pop	{r3, pc}
	...

0800de68 <RegionIN865ChanMaskSet>:
    }
#endif /* REGION_IN865 */
}

bool RegionIN865ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 800de68:	b508      	push	{r3, lr}
#if defined( REGION_IN865 )
    switch( chanMaskSet->ChannelsMaskType )
 800de6a:	7903      	ldrb	r3, [r0, #4]
 800de6c:	b11b      	cbz	r3, 800de76 <RegionIN865ChanMaskSet+0xe>
 800de6e:	2b01      	cmp	r3, #1
 800de70:	d00b      	beq.n	800de8a <RegionIN865ChanMaskSet+0x22>
 800de72:	2000      	movs	r0, #0
    }
    return true;
#else
    return false;
#endif /* REGION_IN865 */
}
 800de74:	bd08      	pop	{r3, pc}
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, 1 );
 800de76:	4b0a      	ldr	r3, [pc, #40]	; (800dea0 <RegionIN865ChanMaskSet+0x38>)
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	2201      	movs	r2, #1
 800de7c:	6801      	ldr	r1, [r0, #0]
 800de7e:	f103 00c0 	add.w	r0, r3, #192	; 0xc0
 800de82:	f7ff fb84 	bl	800d58e <RegionCommonChanMaskCopy>
    return true;
 800de86:	2001      	movs	r0, #1
            break;
 800de88:	e7f4      	b.n	800de74 <RegionIN865ChanMaskSet+0xc>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, 1 );
 800de8a:	4b05      	ldr	r3, [pc, #20]	; (800dea0 <RegionIN865ChanMaskSet+0x38>)
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	2201      	movs	r2, #1
 800de90:	6801      	ldr	r1, [r0, #0]
 800de92:	f103 00c2 	add.w	r0, r3, #194	; 0xc2
 800de96:	f7ff fb7a 	bl	800d58e <RegionCommonChanMaskCopy>
    return true;
 800de9a:	2001      	movs	r0, #1
            break;
 800de9c:	e7ea      	b.n	800de74 <RegionIN865ChanMaskSet+0xc>
 800de9e:	bf00      	nop
 800dea0:	20001170 	.word	0x20001170

0800dea4 <RegionIN865ComputeRxWindowParameters>:

void RegionIN865ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800dea4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dea6:	b083      	sub	sp, #12
 800dea8:	460e      	mov	r6, r1
 800deaa:	4617      	mov	r7, r2
 800deac:	461c      	mov	r4, r3
#if defined( REGION_IN865 )
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, IN865_RX_MAX_DATARATE );
 800deae:	2807      	cmp	r0, #7
 800deb0:	bfa8      	it	ge
 800deb2:	2007      	movge	r0, #7
 800deb4:	7058      	strb	r0, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsIN865 );
 800deb6:	4913      	ldr	r1, [pc, #76]	; (800df04 <RegionIN865ComputeRxWindowParameters+0x60>)
 800deb8:	f7ff fdb6 	bl	800da28 <RegionCommonGetBandwidth>
 800debc:	70a0      	strb	r0, [r4, #2]

    if( rxConfigParams->Datarate == DR_7 )
 800debe:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800dec2:	2b07      	cmp	r3, #7
 800dec4:	d017      	beq.n	800def6 <RegionIN865ComputeRxWindowParameters+0x52>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesIN865[rxConfigParams->Datarate] );
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesIN865[rxConfigParams->Datarate], BandwidthsIN865[rxConfigParams->Datarate] );
 800dec6:	4a0f      	ldr	r2, [pc, #60]	; (800df04 <RegionIN865ComputeRxWindowParameters+0x60>)
 800dec8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800decc:	4a0e      	ldr	r2, [pc, #56]	; (800df08 <RegionIN865ComputeRxWindowParameters+0x64>)
 800dece:	5cd0      	ldrb	r0, [r2, r3]
 800ded0:	f7ff fc78 	bl	800d7c4 <RegionCommonComputeSymbolTimeLoRa>
 800ded4:	4605      	mov	r5, r0
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800ded6:	4b0d      	ldr	r3, [pc, #52]	; (800df0c <RegionIN865ComputeRxWindowParameters+0x68>)
 800ded8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800deda:	4798      	blx	r3
 800dedc:	4603      	mov	r3, r0
 800dede:	f104 020c 	add.w	r2, r4, #12
 800dee2:	9201      	str	r2, [sp, #4]
 800dee4:	3408      	adds	r4, #8
 800dee6:	9400      	str	r4, [sp, #0]
 800dee8:	463a      	mov	r2, r7
 800deea:	4631      	mov	r1, r6
 800deec:	4628      	mov	r0, r5
 800deee:	f7ff fc77 	bl	800d7e0 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_IN865 */
}
 800def2:	b003      	add	sp, #12
 800def4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesIN865[rxConfigParams->Datarate] );
 800def6:	4a04      	ldr	r2, [pc, #16]	; (800df08 <RegionIN865ComputeRxWindowParameters+0x64>)
 800def8:	5cd0      	ldrb	r0, [r2, r3]
 800defa:	f7ff fc6b 	bl	800d7d4 <RegionCommonComputeSymbolTimeFsk>
 800defe:	4605      	mov	r5, r0
 800df00:	e7e9      	b.n	800ded6 <RegionIN865ComputeRxWindowParameters+0x32>
 800df02:	bf00      	nop
 800df04:	080175fc 	.word	0x080175fc
 800df08:	0801761c 	.word	0x0801761c
 800df0c:	08017b28 	.word	0x08017b28

0800df10 <RegionIN865RxConfig>:

bool RegionIN865RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800df10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800df14:	b08a      	sub	sp, #40	; 0x28
 800df16:	4604      	mov	r4, r0
 800df18:	460f      	mov	r7, r1
#if defined( REGION_IN865 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 800df1a:	f990 5001 	ldrsb.w	r5, [r0, #1]
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;
 800df1e:	f8d0 8004 	ldr.w	r8, [r0, #4]

    if( Radio.GetStatus( ) != RF_IDLE )
 800df22:	4b37      	ldr	r3, [pc, #220]	; (800e000 <RegionIN865RxConfig+0xf0>)
 800df24:	685b      	ldr	r3, [r3, #4]
 800df26:	4798      	blx	r3
 800df28:	2800      	cmp	r0, #0
 800df2a:	d167      	bne.n	800dffc <RegionIN865RxConfig+0xec>
 800df2c:	4606      	mov	r6, r0
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 800df2e:	7ce3      	ldrb	r3, [r4, #19]
 800df30:	b983      	cbnz	r3, 800df54 <RegionIN865RxConfig+0x44>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 800df32:	4b34      	ldr	r3, [pc, #208]	; (800e004 <RegionIN865RxConfig+0xf4>)
 800df34:	681a      	ldr	r2, [r3, #0]
 800df36:	7823      	ldrb	r3, [r4, #0]
 800df38:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800df3c:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 800df40:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800df44:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800df48:	f8d2 8004 	ldr.w	r8, [r2, #4]
 800df4c:	f1b8 0f00 	cmp.w	r8, #0
 800df50:	d100      	bne.n	800df54 <RegionIN865RxConfig+0x44>
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 800df52:	4688      	mov	r8, r1
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesIN865[dr];
 800df54:	4b2c      	ldr	r3, [pc, #176]	; (800e008 <RegionIN865RxConfig+0xf8>)
 800df56:	f913 9005 	ldrsb.w	r9, [r3, r5]

    Radio.SetChannel( frequency );
 800df5a:	4b29      	ldr	r3, [pc, #164]	; (800e000 <RegionIN865RxConfig+0xf0>)
 800df5c:	68db      	ldr	r3, [r3, #12]
 800df5e:	4640      	mov	r0, r8
 800df60:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 800df62:	2d07      	cmp	r5, #7
 800df64:	d02b      	beq.n	800dfbe <RegionIN865RxConfig+0xae>
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 800df66:	4b26      	ldr	r3, [pc, #152]	; (800e000 <RegionIN865RxConfig+0xf0>)
 800df68:	f8d3 a018 	ldr.w	sl, [r3, #24]
 800df6c:	7ca3      	ldrb	r3, [r4, #18]
 800df6e:	9309      	str	r3, [sp, #36]	; 0x24
 800df70:	2601      	movs	r6, #1
 800df72:	9608      	str	r6, [sp, #32]
 800df74:	2300      	movs	r3, #0
 800df76:	9307      	str	r3, [sp, #28]
 800df78:	9306      	str	r3, [sp, #24]
 800df7a:	9305      	str	r3, [sp, #20]
 800df7c:	9304      	str	r3, [sp, #16]
 800df7e:	9303      	str	r3, [sp, #12]
 800df80:	8922      	ldrh	r2, [r4, #8]
 800df82:	9202      	str	r2, [sp, #8]
 800df84:	2208      	movs	r2, #8
 800df86:	9201      	str	r2, [sp, #4]
 800df88:	9300      	str	r3, [sp, #0]
 800df8a:	4633      	mov	r3, r6
 800df8c:	464a      	mov	r2, r9
 800df8e:	78a1      	ldrb	r1, [r4, #2]
 800df90:	4630      	mov	r0, r6
 800df92:	47d0      	blx	sl
    }

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 800df94:	7c63      	ldrb	r3, [r4, #17]
 800df96:	2b00      	cmp	r3, #0
 800df98:	d02d      	beq.n	800dff6 <RegionIN865RxConfig+0xe6>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterIN865[dr];
 800df9a:	4b1c      	ldr	r3, [pc, #112]	; (800e00c <RegionIN865RxConfig+0xfc>)
 800df9c:	5d59      	ldrb	r1, [r3, r5]
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateIN865[dr];
    }
    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 800df9e:	4b18      	ldr	r3, [pc, #96]	; (800e000 <RegionIN865RxConfig+0xf0>)
 800dfa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dfa2:	310d      	adds	r1, #13
 800dfa4:	b2c9      	uxtb	r1, r1
 800dfa6:	4630      	mov	r0, r6
 800dfa8:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 800dfaa:	462a      	mov	r2, r5
 800dfac:	4641      	mov	r1, r8
 800dfae:	7ce0      	ldrb	r0, [r4, #19]
 800dfb0:	f7ff fd4c 	bl	800da4c <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 800dfb4:	703d      	strb	r5, [r7, #0]
    return true;
 800dfb6:	2001      	movs	r0, #1
#else
    return false;
#endif /* REGION_IN865 */
}
 800dfb8:	b00a      	add	sp, #40	; 0x28
 800dfba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 800dfbe:	4b10      	ldr	r3, [pc, #64]	; (800e000 <RegionIN865RxConfig+0xf0>)
 800dfc0:	f8d3 a018 	ldr.w	sl, [r3, #24]
 800dfc4:	7ca3      	ldrb	r3, [r4, #18]
 800dfc6:	9309      	str	r3, [sp, #36]	; 0x24
 800dfc8:	2000      	movs	r0, #0
 800dfca:	9008      	str	r0, [sp, #32]
 800dfcc:	9007      	str	r0, [sp, #28]
 800dfce:	9006      	str	r0, [sp, #24]
 800dfd0:	2301      	movs	r3, #1
 800dfd2:	9305      	str	r3, [sp, #20]
 800dfd4:	9004      	str	r0, [sp, #16]
 800dfd6:	9003      	str	r0, [sp, #12]
 800dfd8:	8923      	ldrh	r3, [r4, #8]
 800dfda:	9302      	str	r3, [sp, #8]
 800dfdc:	2305      	movs	r3, #5
 800dfde:	9301      	str	r3, [sp, #4]
 800dfe0:	4b0b      	ldr	r3, [pc, #44]	; (800e010 <RegionIN865RxConfig+0x100>)
 800dfe2:	9300      	str	r3, [sp, #0]
 800dfe4:	4603      	mov	r3, r0
 800dfe6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800dfea:	fb02 f209 	mul.w	r2, r2, r9
 800dfee:	f24c 3150 	movw	r1, #50000	; 0xc350
 800dff2:	47d0      	blx	sl
 800dff4:	e7ce      	b.n	800df94 <RegionIN865RxConfig+0x84>
        maxPayload = MaxPayloadOfDatarateIN865[dr];
 800dff6:	4b07      	ldr	r3, [pc, #28]	; (800e014 <RegionIN865RxConfig+0x104>)
 800dff8:	5d59      	ldrb	r1, [r3, r5]
 800dffa:	e7d0      	b.n	800df9e <RegionIN865RxConfig+0x8e>
        return false;
 800dffc:	2000      	movs	r0, #0
 800dffe:	e7db      	b.n	800dfb8 <RegionIN865RxConfig+0xa8>
 800e000:	08017b28 	.word	0x08017b28
 800e004:	20001170 	.word	0x20001170
 800e008:	0801761c 	.word	0x0801761c
 800e00c:	08017634 	.word	0x08017634
 800e010:	00014585 	.word	0x00014585
 800e014:	0801762c 	.word	0x0801762c

0800e018 <RegionIN865TxConfig>:

bool RegionIN865TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800e018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e01c:	b08d      	sub	sp, #52	; 0x34
 800e01e:	4604      	mov	r4, r0
 800e020:	460f      	mov	r7, r1
 800e022:	4690      	mov	r8, r2
#if defined( REGION_IN865 )
    RadioModems_t modem;
    int8_t phyDr = DataratesIN865[txConfig->Datarate];
 800e024:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800e028:	4a42      	ldr	r2, [pc, #264]	; (800e134 <RegionIN865TxConfig+0x11c>)
 800e02a:	f912 a003 	ldrsb.w	sl, [r2, r3]
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 800e02e:	4b42      	ldr	r3, [pc, #264]	; (800e138 <RegionIN865TxConfig+0x120>)
 800e030:	681a      	ldr	r2, [r3, #0]
 800e032:	4d42      	ldr	r5, [pc, #264]	; (800e13c <RegionIN865TxConfig+0x124>)
 800e034:	6829      	ldr	r1, [r5, #0]
 800e036:	7803      	ldrb	r3, [r0, #0]
 800e038:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e03c:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800e040:	7a4b      	ldrb	r3, [r1, #9]
 800e042:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e046:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e04a:	f993 1002 	ldrsb.w	r1, [r3, #2]
 800e04e:	f990 0002 	ldrsb.w	r0, [r0, #2]
 800e052:	f7ff fce5 	bl	800da20 <RegionCommonLimitTxPower>
 800e056:	4606      	mov	r6, r0
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsIN865 );
 800e058:	4939      	ldr	r1, [pc, #228]	; (800e140 <RegionIN865TxConfig+0x128>)
 800e05a:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800e05e:	f7ff fce3 	bl	800da28 <RegionCommonGetBandwidth>
 800e062:	4681      	mov	r9, r0
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 800e064:	68a2      	ldr	r2, [r4, #8]
 800e066:	6861      	ldr	r1, [r4, #4]
 800e068:	4630      	mov	r0, r6
 800e06a:	f7ff fbf5 	bl	800d858 <RegionCommonComputeTxPower>
 800e06e:	900b      	str	r0, [sp, #44]	; 0x2c

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 800e070:	4b34      	ldr	r3, [pc, #208]	; (800e144 <RegionIN865TxConfig+0x12c>)
 800e072:	68da      	ldr	r2, [r3, #12]
 800e074:	6829      	ldr	r1, [r5, #0]
 800e076:	7823      	ldrb	r3, [r4, #0]
 800e078:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e07c:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 800e080:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 800e082:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800e086:	2b07      	cmp	r3, #7
 800e088:	d031      	beq.n	800e0ee <RegionIN865TxConfig+0xd6>
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 800e08a:	4b2e      	ldr	r3, [pc, #184]	; (800e144 <RegionIN865TxConfig+0x12c>)
 800e08c:	f8d3 b01c 	ldr.w	fp, [r3, #28]
 800e090:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800e094:	9308      	str	r3, [sp, #32]
 800e096:	2200      	movs	r2, #0
 800e098:	9207      	str	r2, [sp, #28]
 800e09a:	9206      	str	r2, [sp, #24]
 800e09c:	9205      	str	r2, [sp, #20]
 800e09e:	2501      	movs	r5, #1
 800e0a0:	9504      	str	r5, [sp, #16]
 800e0a2:	9203      	str	r2, [sp, #12]
 800e0a4:	2308      	movs	r3, #8
 800e0a6:	9302      	str	r3, [sp, #8]
 800e0a8:	9501      	str	r5, [sp, #4]
 800e0aa:	f8cd a000 	str.w	sl, [sp]
 800e0ae:	464b      	mov	r3, r9
 800e0b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e0b2:	4628      	mov	r0, r5
 800e0b4:	47d8      	blx	fp
    }
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 800e0b6:	4b21      	ldr	r3, [pc, #132]	; (800e13c <RegionIN865TxConfig+0x124>)
 800e0b8:	681a      	ldr	r2, [r3, #0]
 800e0ba:	7823      	ldrb	r3, [r4, #0]
 800e0bc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e0c0:	f994 1001 	ldrsb.w	r1, [r4, #1]
 800e0c4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800e0c8:	f7ff fcf2 	bl	800dab0 <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 800e0cc:	89a1      	ldrh	r1, [r4, #12]
 800e0ce:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800e0d2:	f7ff fd11 	bl	800daf8 <GetTimeOnAir>
 800e0d6:	f8c8 0000 	str.w	r0, [r8]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 800e0da:	4b1a      	ldr	r3, [pc, #104]	; (800e144 <RegionIN865TxConfig+0x12c>)
 800e0dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e0de:	7b21      	ldrb	r1, [r4, #12]
 800e0e0:	4628      	mov	r0, r5
 800e0e2:	4798      	blx	r3

    *txPower = txPowerLimited;
 800e0e4:	703e      	strb	r6, [r7, #0]
    return true;
#else
    return false;
#endif /* REGION_IN865 */
}
 800e0e6:	2001      	movs	r0, #1
 800e0e8:	b00d      	add	sp, #52	; 0x34
 800e0ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 800e0ee:	4b15      	ldr	r3, [pc, #84]	; (800e144 <RegionIN865TxConfig+0x12c>)
 800e0f0:	69dd      	ldr	r5, [r3, #28]
 800e0f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e0f6:	fb03 f30a 	mul.w	r3, r3, sl
 800e0fa:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800e0fe:	9208      	str	r2, [sp, #32]
 800e100:	f04f 0a00 	mov.w	sl, #0
 800e104:	f8cd a01c 	str.w	sl, [sp, #28]
 800e108:	f8cd a018 	str.w	sl, [sp, #24]
 800e10c:	f8cd a014 	str.w	sl, [sp, #20]
 800e110:	2201      	movs	r2, #1
 800e112:	9204      	str	r2, [sp, #16]
 800e114:	f8cd a00c 	str.w	sl, [sp, #12]
 800e118:	2205      	movs	r2, #5
 800e11a:	9202      	str	r2, [sp, #8]
 800e11c:	f8cd a004 	str.w	sl, [sp, #4]
 800e120:	9300      	str	r3, [sp, #0]
 800e122:	464b      	mov	r3, r9
 800e124:	f246 12a8 	movw	r2, #25000	; 0x61a8
 800e128:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e12a:	4650      	mov	r0, sl
 800e12c:	47a8      	blx	r5
        modem = MODEM_FSK;
 800e12e:	4655      	mov	r5, sl
 800e130:	e7c1      	b.n	800e0b6 <RegionIN865TxConfig+0x9e>
 800e132:	bf00      	nop
 800e134:	0801761c 	.word	0x0801761c
 800e138:	2000116c 	.word	0x2000116c
 800e13c:	20001170 	.word	0x20001170
 800e140:	080175fc 	.word	0x080175fc
 800e144:	08017b28 	.word	0x08017b28

0800e148 <RegionIN865LinkAdrReq>:

uint8_t RegionIN865LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800e148:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e14c:	b08f      	sub	sp, #60	; 0x3c
 800e14e:	4605      	mov	r5, r0
 800e150:	4689      	mov	r9, r1
 800e152:	4690      	mov	r8, r2
 800e154:	461f      	mov	r7, r3
    uint8_t status = 0x07;
#if defined( REGION_IN865 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 800e156:	2400      	movs	r4, #0
 800e158:	940c      	str	r4, [sp, #48]	; 0x30
 800e15a:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
    uint16_t chMask = 0;
 800e15e:	f8ad 402e 	strh.w	r4, [sp, #46]	; 0x2e
    uint8_t status = 0x07;
 800e162:	2607      	movs	r6, #7
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 800e164:	e030      	b.n	800e1c8 <RegionIN865LinkAdrReq+0x80>
            // RFU
            status &= 0xFE; // Channel mask KO
        }
        else
        {
            for( uint8_t i = 0; i < IN865_MAX_NB_CHANNELS; i++ )
 800e166:	f04f 0c00 	mov.w	ip, #0
        status = 0x07;
 800e16a:	2607      	movs	r6, #7
 800e16c:	e012      	b.n	800e194 <RegionIN865LinkAdrReq+0x4c>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 800e16e:	4a5b      	ldr	r2, [pc, #364]	; (800e2dc <RegionIN865LinkAdrReq+0x194>)
 800e170:	6812      	ldr	r2, [r2, #0]
 800e172:	eb0c 014c 	add.w	r1, ip, ip, lsl #1
 800e176:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800e17a:	b13a      	cbz	r2, 800e18c <RegionIN865LinkAdrReq+0x44>
                    {
                        chMask |= 1 << i;
 800e17c:	2201      	movs	r2, #1
 800e17e:	fa02 f20c 	lsl.w	r2, r2, ip
 800e182:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 800e186:	430a      	orrs	r2, r1
 800e188:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
            for( uint8_t i = 0; i < IN865_MAX_NB_CHANNELS; i++ )
 800e18c:	f10c 0c01 	add.w	ip, ip, #1
 800e190:	fa5f fc8c 	uxtb.w	ip, ip
 800e194:	f1bc 0f0f 	cmp.w	ip, #15
 800e198:	d816      	bhi.n	800e1c8 <RegionIN865LinkAdrReq+0x80>
                if( linkAdrParams.ChMaskCtrl == 6 )
 800e19a:	2b06      	cmp	r3, #6
 800e19c:	d0e7      	beq.n	800e16e <RegionIN865LinkAdrReq+0x26>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 800e19e:	f8bd e02e 	ldrh.w	lr, [sp, #46]	; 0x2e
 800e1a2:	fa4e fe0c 	asr.w	lr, lr, ip
 800e1a6:	f01e 0f01 	tst.w	lr, #1
 800e1aa:	d0ef      	beq.n	800e18c <RegionIN865LinkAdrReq+0x44>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 800e1ac:	4a4b      	ldr	r2, [pc, #300]	; (800e2dc <RegionIN865LinkAdrReq+0x194>)
 800e1ae:	6812      	ldr	r2, [r2, #0]
 800e1b0:	eb0c 014c 	add.w	r1, ip, ip, lsl #1
 800e1b4:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 800e1b8:	2a00      	cmp	r2, #0
 800e1ba:	d1e7      	bne.n	800e18c <RegionIN865LinkAdrReq+0x44>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 800e1bc:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
 800e1c0:	e7e4      	b.n	800e18c <RegionIN865LinkAdrReq+0x44>
            status &= 0xFE; // Channel mask KO
 800e1c2:	2606      	movs	r6, #6
 800e1c4:	e000      	b.n	800e1c8 <RegionIN865LinkAdrReq+0x80>
            status &= 0xFE; // Channel mask KO
 800e1c6:	2606      	movs	r6, #6
    while( bytesProcessed < linkAdrReq->PayloadSize )
 800e1c8:	7a2b      	ldrb	r3, [r5, #8]
 800e1ca:	42a3      	cmp	r3, r4
 800e1cc:	d919      	bls.n	800e202 <RegionIN865LinkAdrReq+0xba>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 800e1ce:	6868      	ldr	r0, [r5, #4]
 800e1d0:	a90c      	add	r1, sp, #48	; 0x30
 800e1d2:	4420      	add	r0, r4
 800e1d4:	f7ff fa8c 	bl	800d6f0 <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 800e1d8:	4603      	mov	r3, r0
 800e1da:	b190      	cbz	r0, 800e202 <RegionIN865LinkAdrReq+0xba>
        bytesProcessed += nextIndex;
 800e1dc:	4423      	add	r3, r4
 800e1de:	b2dc      	uxtb	r4, r3
        chMask = linkAdrParams.ChMask;
 800e1e0:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800e1e4:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 800e1e8:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800e1ec:	b90b      	cbnz	r3, 800e1f2 <RegionIN865LinkAdrReq+0xaa>
 800e1ee:	2a00      	cmp	r2, #0
 800e1f0:	d0e7      	beq.n	800e1c2 <RegionIN865LinkAdrReq+0x7a>
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 800e1f2:	1e5a      	subs	r2, r3, #1
 800e1f4:	b2d2      	uxtb	r2, r2
 800e1f6:	2a04      	cmp	r2, #4
 800e1f8:	d9e5      	bls.n	800e1c6 <RegionIN865LinkAdrReq+0x7e>
 800e1fa:	2b06      	cmp	r3, #6
 800e1fc:	d9b3      	bls.n	800e166 <RegionIN865LinkAdrReq+0x1e>
            status &= 0xFE; // Channel mask KO
 800e1fe:	2606      	movs	r6, #6
 800e200:	e7e2      	b.n	800e1c8 <RegionIN865LinkAdrReq+0x80>
                }
            }
        }
    }

    if( linkAdrParams.Datarate != DR_6 )
 800e202:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
 800e206:	2b06      	cmp	r3, #6
 800e208:	d114      	bne.n	800e234 <RegionIN865LinkAdrReq+0xec>
        // Verify the parameters and update, if necessary
        status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
    }
    else
    {// DR_6 is not supported by this region
        status &= 0xFD; // Datarate KO
 800e20a:	f006 06fd 	and.w	r6, r6, #253	; 0xfd
    }

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 800e20e:	2e07      	cmp	r6, #7
 800e210:	d057      	beq.n	800e2c2 <RegionIN865LinkAdrReq+0x17a>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 800e212:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
 800e216:	f889 3000 	strb.w	r3, [r9]
    *txPowOut = linkAdrParams.TxPower;
 800e21a:	f99d 3032 	ldrsb.w	r3, [sp, #50]	; 0x32
 800e21e:	f888 3000 	strb.w	r3, [r8]
    *nbRepOut = linkAdrParams.NbRep;
 800e222:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800e226:	703b      	strb	r3, [r7, #0]
    *nbBytesParsed = bytesProcessed;
 800e228:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e22a:	701c      	strb	r4, [r3, #0]

#endif /* REGION_IN865 */
    return status;
}
 800e22c:	4630      	mov	r0, r6
 800e22e:	b00f      	add	sp, #60	; 0x3c
 800e230:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        getPhy.Attribute = PHY_MIN_TX_DR;
 800e234:	2302      	movs	r3, #2
 800e236:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
        getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 800e23a:	7a6b      	ldrb	r3, [r5, #9]
 800e23c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
        phyParam = RegionIN865GetPhyParam( &getPhy );
 800e240:	a80a      	add	r0, sp, #40	; 0x28
 800e242:	f7ff fc8b 	bl	800db5c <RegionIN865GetPhyParam>
 800e246:	9009      	str	r0, [sp, #36]	; 0x24
        linkAdrVerifyParams.Status = status;
 800e248:	f88d 6008 	strb.w	r6, [sp, #8]
        linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 800e24c:	7aab      	ldrb	r3, [r5, #10]
 800e24e:	f88d 3009 	strb.w	r3, [sp, #9]
        linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 800e252:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
 800e256:	f88d 300a 	strb.w	r3, [sp, #10]
        linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 800e25a:	f99d 3032 	ldrsb.w	r3, [sp, #50]	; 0x32
 800e25e:	f88d 300b 	strb.w	r3, [sp, #11]
        linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 800e262:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800e266:	f88d 300c 	strb.w	r3, [sp, #12]
        linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 800e26a:	f995 300b 	ldrsb.w	r3, [r5, #11]
 800e26e:	f88d 300d 	strb.w	r3, [sp, #13]
        linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 800e272:	f995 300c 	ldrsb.w	r3, [r5, #12]
 800e276:	f88d 300e 	strb.w	r3, [sp, #14]
        linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 800e27a:	f995 300d 	ldrsb.w	r3, [r5, #13]
 800e27e:	f88d 300f 	strb.w	r3, [sp, #15]
        linkAdrVerifyParams.NbChannels = IN865_MAX_NB_CHANNELS;
 800e282:	2310      	movs	r3, #16
 800e284:	f88d 3010 	strb.w	r3, [sp, #16]
        linkAdrVerifyParams.ChannelsMask = &chMask;
 800e288:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 800e28c:	9305      	str	r3, [sp, #20]
        linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 800e28e:	f88d 0018 	strb.w	r0, [sp, #24]
        linkAdrVerifyParams.MaxDatarate = IN865_TX_MAX_DATARATE;
 800e292:	2307      	movs	r3, #7
 800e294:	f88d 3019 	strb.w	r3, [sp, #25]
        linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 800e298:	4b10      	ldr	r3, [pc, #64]	; (800e2dc <RegionIN865LinkAdrReq+0x194>)
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	9307      	str	r3, [sp, #28]
        linkAdrVerifyParams.MinTxPower = IN865_MIN_TX_POWER;
 800e29e:	230a      	movs	r3, #10
 800e2a0:	f88d 3020 	strb.w	r3, [sp, #32]
        linkAdrVerifyParams.MaxTxPower = IN865_MAX_TX_POWER;
 800e2a4:	2300      	movs	r3, #0
 800e2a6:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
        linkAdrVerifyParams.Version = linkAdrReq->Version;
 800e2aa:	682b      	ldr	r3, [r5, #0]
 800e2ac:	9301      	str	r3, [sp, #4]
        status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800e2ae:	ab0c      	add	r3, sp, #48	; 0x30
 800e2b0:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 800e2b4:	f10d 0131 	add.w	r1, sp, #49	; 0x31
 800e2b8:	a801      	add	r0, sp, #4
 800e2ba:	f7ff fa37 	bl	800d72c <RegionCommonLinkAdrReqVerifyParams>
 800e2be:	4606      	mov	r6, r0
 800e2c0:	e7a5      	b.n	800e20e <RegionIN865LinkAdrReq+0xc6>
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 800e2c2:	4d06      	ldr	r5, [pc, #24]	; (800e2dc <RegionIN865LinkAdrReq+0x194>)
 800e2c4:	6828      	ldr	r0, [r5, #0]
 800e2c6:	2202      	movs	r2, #2
 800e2c8:	2100      	movs	r1, #0
 800e2ca:	30c0      	adds	r0, #192	; 0xc0
 800e2cc:	f001 f921 	bl	800f512 <memset1>
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 800e2d0:	682b      	ldr	r3, [r5, #0]
 800e2d2:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 800e2d6:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
 800e2da:	e79a      	b.n	800e212 <RegionIN865LinkAdrReq+0xca>
 800e2dc:	20001170 	.word	0x20001170

0800e2e0 <RegionIN865RxParamSetupReq>:

uint8_t RegionIN865RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 800e2e0:	b538      	push	{r3, r4, r5, lr}
 800e2e2:	4604      	mov	r4, r0
    uint8_t status = 0x07;
#if defined( REGION_IN865 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 800e2e4:	6840      	ldr	r0, [r0, #4]
 800e2e6:	f7ff fbf3 	bl	800dad0 <VerifyRfFreq>
 800e2ea:	b1c0      	cbz	r0, 800e31e <RegionIN865RxParamSetupReq+0x3e>
    uint8_t status = 0x07;
 800e2ec:	2507      	movs	r5, #7
    {
        status &= 0xFE; // Channel frequency KO
    }

    // Verify datarate
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, IN865_RX_MIN_DATARATE, IN865_RX_MAX_DATARATE ) == false ) ||
 800e2ee:	2207      	movs	r2, #7
 800e2f0:	2100      	movs	r1, #0
 800e2f2:	f994 0000 	ldrsb.w	r0, [r4]
 800e2f6:	f7ff f8d6 	bl	800d4a6 <RegionCommonValueInRange>
 800e2fa:	b118      	cbz	r0, 800e304 <RegionIN865RxParamSetupReq+0x24>
        // DR_6 is not supported by this region
        ( rxParamSetupReq->Datarate == DR_6 ) )
 800e2fc:	f994 3000 	ldrsb.w	r3, [r4]
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, IN865_RX_MIN_DATARATE, IN865_RX_MAX_DATARATE ) == false ) ||
 800e300:	2b06      	cmp	r3, #6
 800e302:	d101      	bne.n	800e308 <RegionIN865RxParamSetupReq+0x28>
    {
        status &= 0xFD; // Datarate KO
 800e304:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, IN865_MIN_RX1_DR_OFFSET, IN865_MAX_RX1_DR_OFFSET ) == false )
 800e308:	2207      	movs	r2, #7
 800e30a:	2100      	movs	r1, #0
 800e30c:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800e310:	f7ff f8c9 	bl	800d4a6 <RegionCommonValueInRange>
 800e314:	b908      	cbnz	r0, 800e31a <RegionIN865RxParamSetupReq+0x3a>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 800e316:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
    }

#endif /* REGION_IN865 */
    return status;
}
 800e31a:	4628      	mov	r0, r5
 800e31c:	bd38      	pop	{r3, r4, r5, pc}
        status &= 0xFE; // Channel frequency KO
 800e31e:	2506      	movs	r5, #6
 800e320:	e7e5      	b.n	800e2ee <RegionIN865RxParamSetupReq+0xe>

0800e322 <RegionIN865TxParamSetupReq>:

int8_t RegionIN865TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Do not accept the request
    return -1;
}
 800e322:	f04f 30ff 	mov.w	r0, #4294967295
 800e326:	4770      	bx	lr

0800e328 <RegionIN865DlChannelReq>:

int8_t RegionIN865DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 800e328:	b510      	push	{r4, lr}
 800e32a:	4604      	mov	r4, r0
    uint8_t status = 0x03;
#if defined( REGION_IN865 )

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency ) == false )
 800e32c:	6840      	ldr	r0, [r0, #4]
 800e32e:	f7ff fbcf 	bl	800dad0 <VerifyRfFreq>
 800e332:	b170      	cbz	r0, 800e352 <RegionIN865DlChannelReq+0x2a>
    uint8_t status = 0x03;
 800e334:	2003      	movs	r0, #3
    {
        status &= 0xFE;
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 800e336:	4b0b      	ldr	r3, [pc, #44]	; (800e364 <RegionIN865DlChannelReq+0x3c>)
 800e338:	681a      	ldr	r2, [r3, #0]
 800e33a:	7823      	ldrb	r3, [r4, #0]
 800e33c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800e340:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 800e344:	b909      	cbnz	r1, 800e34a <RegionIN865DlChannelReq+0x22>
    {
        status &= 0xFD;
 800e346:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 800e34a:	2803      	cmp	r0, #3
 800e34c:	d003      	beq.n	800e356 <RegionIN865DlChannelReq+0x2e>
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
    }

#endif /* REGION_IN865 */
    return status;
}
 800e34e:	b240      	sxtb	r0, r0
 800e350:	bd10      	pop	{r4, pc}
        status &= 0xFE;
 800e352:	2002      	movs	r0, #2
 800e354:	e7ef      	b.n	800e336 <RegionIN865DlChannelReq+0xe>
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 800e356:	6861      	ldr	r1, [r4, #4]
 800e358:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e35c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800e360:	6051      	str	r1, [r2, #4]
 800e362:	e7f4      	b.n	800e34e <RegionIN865DlChannelReq+0x26>
 800e364:	20001170 	.word	0x20001170

0800e368 <RegionIN865AlternateDr>:
#if defined( REGION_IN865 )
    return currentDr;
#else
    return -1;
#endif /* REGION_IN865 */
}
 800e368:	4770      	bx	lr
	...

0800e36c <RegionIN865NextChannel>:

LoRaMacStatus_t RegionIN865NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800e36c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e36e:	b097      	sub	sp, #92	; 0x5c
 800e370:	4604      	mov	r4, r0
 800e372:	460f      	mov	r7, r1
 800e374:	4616      	mov	r6, r2
 800e376:	461d      	mov	r5, r3
#if defined( REGION_IN865 )
    uint8_t nbEnabledChannels = 0;
 800e378:	2100      	movs	r1, #0
 800e37a:	f88d 1057 	strb.w	r1, [sp, #87]	; 0x57
    uint8_t nbRestrictedChannels = 0;
 800e37e:	f88d 1056 	strb.w	r1, [sp, #86]	; 0x56
    uint8_t enabledChannels[IN865_MAX_NB_CHANNELS] = { 0 };
 800e382:	9111      	str	r1, [sp, #68]	; 0x44
 800e384:	9112      	str	r1, [sp, #72]	; 0x48
 800e386:	9113      	str	r1, [sp, #76]	; 0x4c
 800e388:	9114      	str	r1, [sp, #80]	; 0x50
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
    uint16_t joinChannels = IN865_JOIN_CHANNELS;
 800e38a:	2307      	movs	r3, #7
 800e38c:	f8ad 300a 	strh.w	r3, [sp, #10]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 800e390:	4b33      	ldr	r3, [pc, #204]	; (800e460 <RegionIN865NextChannel+0xf4>)
 800e392:	6818      	ldr	r0, [r3, #0]
 800e394:	2201      	movs	r2, #1
 800e396:	30c0      	adds	r0, #192	; 0xc0
 800e398:	f7ff f8e3 	bl	800d562 <RegionCommonCountChannels>
 800e39c:	b938      	cbnz	r0, 800e3ae <RegionIN865NextChannel+0x42>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 800e39e:	4b30      	ldr	r3, [pc, #192]	; (800e460 <RegionIN865NextChannel+0xf4>)
 800e3a0:	681a      	ldr	r2, [r3, #0]
 800e3a2:	f8b2 30c0 	ldrh.w	r3, [r2, #192]	; 0xc0
 800e3a6:	f043 0307 	orr.w	r3, r3, #7
 800e3aa:	f8a2 30c0 	strh.w	r3, [r2, #192]	; 0xc0
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 800e3ae:	7a63      	ldrb	r3, [r4, #9]
 800e3b0:	f88d 300c 	strb.w	r3, [sp, #12]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 800e3b4:	7a23      	ldrb	r3, [r4, #8]
 800e3b6:	f88d 300d 	strb.w	r3, [sp, #13]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800e3ba:	4b29      	ldr	r3, [pc, #164]	; (800e460 <RegionIN865NextChannel+0xf4>)
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	f103 02c0 	add.w	r2, r3, #192	; 0xc0
 800e3c2:	9204      	str	r2, [sp, #16]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 800e3c4:	9305      	str	r3, [sp, #20]
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 800e3c6:	4b27      	ldr	r3, [pc, #156]	; (800e464 <RegionIN865NextChannel+0xf8>)
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	9306      	str	r3, [sp, #24]
    countChannelsParams.MaxNbChannels = IN865_MAX_NB_CHANNELS;
 800e3cc:	2310      	movs	r3, #16
 800e3ce:	f8ad 301c 	strh.w	r3, [sp, #28]
    countChannelsParams.JoinChannels = &joinChannels;
 800e3d2:	f10d 030a 	add.w	r3, sp, #10
 800e3d6:	9308      	str	r3, [sp, #32]

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 800e3d8:	6823      	ldr	r3, [r4, #0]
 800e3da:	9309      	str	r3, [sp, #36]	; 0x24
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 800e3dc:	6863      	ldr	r3, [r4, #4]
 800e3de:	930a      	str	r3, [sp, #40]	; 0x28
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 800e3e0:	7aa3      	ldrb	r3, [r4, #10]
 800e3e2:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    identifyChannelsParam.MaxBands = IN865_MAX_NB_BANDS;
 800e3e6:	2301      	movs	r3, #1
 800e3e8:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 800e3ec:	ab0c      	add	r3, sp, #48	; 0x30
 800e3ee:	f104 020c 	add.w	r2, r4, #12
 800e3f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e3f6:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 800e3fa:	7d23      	ldrb	r3, [r4, #20]
 800e3fc:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 800e400:	8ae1      	ldrh	r1, [r4, #22]
 800e402:	f994 0008 	ldrsb.w	r0, [r4, #8]
 800e406:	f7ff fb77 	bl	800daf8 <GetTimeOnAir>
 800e40a:	900f      	str	r0, [sp, #60]	; 0x3c

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 800e40c:	ab03      	add	r3, sp, #12
 800e40e:	9310      	str	r3, [sp, #64]	; 0x40

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 800e410:	9601      	str	r6, [sp, #4]
 800e412:	f10d 0356 	add.w	r3, sp, #86	; 0x56
 800e416:	9300      	str	r3, [sp, #0]
 800e418:	f10d 0357 	add.w	r3, sp, #87	; 0x57
 800e41c:	aa11      	add	r2, sp, #68	; 0x44
 800e41e:	4629      	mov	r1, r5
 800e420:	a809      	add	r0, sp, #36	; 0x24
 800e422:	f7ff fa94 	bl	800d94e <RegionCommonIdentifyChannels>
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 800e426:	4604      	mov	r4, r0
 800e428:	b120      	cbz	r0, 800e434 <RegionIN865NextChannel+0xc8>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 800e42a:	280c      	cmp	r0, #12
 800e42c:	d00f      	beq.n	800e44e <RegionIN865NextChannel+0xe2>
    }
    return status;
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_IN865 */
}
 800e42e:	4620      	mov	r0, r4
 800e430:	b017      	add	sp, #92	; 0x5c
 800e432:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 800e434:	f89d 1057 	ldrb.w	r1, [sp, #87]	; 0x57
 800e438:	3901      	subs	r1, #1
 800e43a:	f001 f845 	bl	800f4c8 <randr>
 800e43e:	f100 0358 	add.w	r3, r0, #88	; 0x58
 800e442:	eb0d 0003 	add.w	r0, sp, r3
 800e446:	f810 3c14 	ldrb.w	r3, [r0, #-20]
 800e44a:	703b      	strb	r3, [r7, #0]
 800e44c:	e7ef      	b.n	800e42e <RegionIN865NextChannel+0xc2>
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 800e44e:	4b04      	ldr	r3, [pc, #16]	; (800e460 <RegionIN865NextChannel+0xf4>)
 800e450:	681a      	ldr	r2, [r3, #0]
 800e452:	f8b2 30c0 	ldrh.w	r3, [r2, #192]	; 0xc0
 800e456:	f043 0307 	orr.w	r3, r3, #7
 800e45a:	f8a2 30c0 	strh.w	r3, [r2, #192]	; 0xc0
 800e45e:	e7e6      	b.n	800e42e <RegionIN865NextChannel+0xc2>
 800e460:	20001170 	.word	0x20001170
 800e464:	2000116c 	.word	0x2000116c

0800e468 <RegionIN865ChannelAdd>:

LoRaMacStatus_t RegionIN865ChannelAdd( ChannelAddParams_t* channelAdd )
{
 800e468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if defined( REGION_IN865 )
    bool drInvalid = false;
    bool freqInvalid = false;
    uint8_t id = channelAdd->ChannelId;
 800e46a:	7905      	ldrb	r5, [r0, #4]

    if( id < IN865_NUMB_DEFAULT_CHANNELS )
 800e46c:	2d02      	cmp	r5, #2
 800e46e:	d94a      	bls.n	800e506 <RegionIN865ChannelAdd+0x9e>
 800e470:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }

    if( id >= IN865_MAX_NB_CHANNELS )
 800e472:	2d0f      	cmp	r5, #15
 800e474:	d849      	bhi.n	800e50a <RegionIN865ChannelAdd+0xa2>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, IN865_TX_MIN_DATARATE, IN865_TX_MAX_DATARATE ) == false )
 800e476:	6803      	ldr	r3, [r0, #0]
 800e478:	7a18      	ldrb	r0, [r3, #8]
 800e47a:	f340 0003 	sbfx	r0, r0, #0, #4
 800e47e:	2207      	movs	r2, #7
 800e480:	2100      	movs	r1, #0
 800e482:	b240      	sxtb	r0, r0
 800e484:	f7ff f80f 	bl	800d4a6 <RegionCommonValueInRange>
 800e488:	2800      	cmp	r0, #0
 800e48a:	d038      	beq.n	800e4fe <RegionIN865ChannelAdd+0x96>
    bool drInvalid = false;
 800e48c:	2600      	movs	r6, #0
    {
        drInvalid = true;
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, IN865_TX_MIN_DATARATE, IN865_TX_MAX_DATARATE ) == false )
 800e48e:	6823      	ldr	r3, [r4, #0]
 800e490:	7a18      	ldrb	r0, [r3, #8]
 800e492:	f340 1003 	sbfx	r0, r0, #4, #4
 800e496:	2207      	movs	r2, #7
 800e498:	2100      	movs	r1, #0
 800e49a:	b240      	sxtb	r0, r0
 800e49c:	f7ff f803 	bl	800d4a6 <RegionCommonValueInRange>
 800e4a0:	b900      	cbnz	r0, 800e4a4 <RegionIN865ChannelAdd+0x3c>
    {
        drInvalid = true;
 800e4a2:	2601      	movs	r6, #1
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 800e4a4:	6821      	ldr	r1, [r4, #0]
 800e4a6:	7a0b      	ldrb	r3, [r1, #8]
 800e4a8:	f343 0203 	sbfx	r2, r3, #0, #4
 800e4ac:	b252      	sxtb	r2, r2
 800e4ae:	f343 1303 	sbfx	r3, r3, #4, #4
 800e4b2:	b25b      	sxtb	r3, r3
 800e4b4:	429a      	cmp	r2, r3
 800e4b6:	dd00      	ble.n	800e4ba <RegionIN865ChannelAdd+0x52>
    {
        drInvalid = true;
 800e4b8:	2601      	movs	r6, #1
    }

    // Check frequency
    if( freqInvalid == false )
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency ) == false )
 800e4ba:	6808      	ldr	r0, [r1, #0]
 800e4bc:	f7ff fb08 	bl	800dad0 <VerifyRfFreq>
 800e4c0:	b1f8      	cbz	r0, 800e502 <RegionIN865ChannelAdd+0x9a>
    bool freqInvalid = false;
 800e4c2:	2300      	movs	r3, #0
            freqInvalid = true;
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 800e4c4:	b106      	cbz	r6, 800e4c8 <RegionIN865ChannelAdd+0x60>
 800e4c6:	bb13      	cbnz	r3, 800e50e <RegionIN865ChannelAdd+0xa6>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }
    if( drInvalid == true )
 800e4c8:	bb1e      	cbnz	r6, 800e512 <RegionIN865ChannelAdd+0xaa>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
    }
    if( freqInvalid == true )
 800e4ca:	bb23      	cbnz	r3, 800e516 <RegionIN865ChannelAdd+0xae>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 800e4cc:	4f13      	ldr	r7, [pc, #76]	; (800e51c <RegionIN865ChannelAdd+0xb4>)
 800e4ce:	683b      	ldr	r3, [r7, #0]
 800e4d0:	006e      	lsls	r6, r5, #1
 800e4d2:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 800e4d6:	220c      	movs	r2, #12
 800e4d8:	6821      	ldr	r1, [r4, #0]
 800e4da:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e4de:	f001 f800 	bl	800f4e2 <memcpy1>
    RegionNvmGroup2->Channels[id].Band = 0;
 800e4e2:	683a      	ldr	r2, [r7, #0]
 800e4e4:	442e      	add	r6, r5
 800e4e6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e4ea:	2000      	movs	r0, #0
 800e4ec:	7270      	strb	r0, [r6, #9]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 800e4ee:	2301      	movs	r3, #1
 800e4f0:	40ab      	lsls	r3, r5
 800e4f2:	f8b2 10c0 	ldrh.w	r1, [r2, #192]	; 0xc0
 800e4f6:	430b      	orrs	r3, r1
 800e4f8:	f8a2 30c0 	strh.w	r3, [r2, #192]	; 0xc0
    return LORAMAC_STATUS_OK;
 800e4fc:	e006      	b.n	800e50c <RegionIN865ChannelAdd+0xa4>
        drInvalid = true;
 800e4fe:	2601      	movs	r6, #1
 800e500:	e7c5      	b.n	800e48e <RegionIN865ChannelAdd+0x26>
            freqInvalid = true;
 800e502:	2301      	movs	r3, #1
 800e504:	e7de      	b.n	800e4c4 <RegionIN865ChannelAdd+0x5c>
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 800e506:	2006      	movs	r0, #6
 800e508:	e000      	b.n	800e50c <RegionIN865ChannelAdd+0xa4>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800e50a:	2003      	movs	r0, #3
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_IN865 */
}
 800e50c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 800e50e:	2006      	movs	r0, #6
 800e510:	e7fc      	b.n	800e50c <RegionIN865ChannelAdd+0xa4>
        return LORAMAC_STATUS_DATARATE_INVALID;
 800e512:	2005      	movs	r0, #5
 800e514:	e7fa      	b.n	800e50c <RegionIN865ChannelAdd+0xa4>
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 800e516:	2004      	movs	r0, #4
 800e518:	e7f8      	b.n	800e50c <RegionIN865ChannelAdd+0xa4>
 800e51a:	bf00      	nop
 800e51c:	20001170 	.word	0x20001170

0800e520 <RegionIN865ChannelsRemove>:

bool RegionIN865ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
#if defined( REGION_IN865 )
    uint8_t id = channelRemove->ChannelId;
 800e520:	7801      	ldrb	r1, [r0, #0]

    if( id < IN865_NUMB_DEFAULT_CHANNELS )
 800e522:	2902      	cmp	r1, #2
 800e524:	d801      	bhi.n	800e52a <RegionIN865ChannelsRemove+0xa>
    {
        return false;
 800e526:	2000      	movs	r0, #0

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, IN865_MAX_NB_CHANNELS );
#else
    return false;
#endif /* REGION_IN865 */
}
 800e528:	4770      	bx	lr
{
 800e52a:	b508      	push	{r3, lr}
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 800e52c:	4b08      	ldr	r3, [pc, #32]	; (800e550 <RegionIN865ChannelsRemove+0x30>)
 800e52e:	6818      	ldr	r0, [r3, #0]
 800e530:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 800e534:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 800e538:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800e53c:	2200      	movs	r2, #0
 800e53e:	f840 200c 	str.w	r2, [r0, ip]
 800e542:	605a      	str	r2, [r3, #4]
 800e544:	609a      	str	r2, [r3, #8]
    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, IN865_MAX_NB_CHANNELS );
 800e546:	2210      	movs	r2, #16
 800e548:	30c0      	adds	r0, #192	; 0xc0
 800e54a:	f7fe ffee 	bl	800d52a <RegionCommonChanDisable>
}
 800e54e:	bd08      	pop	{r3, pc}
 800e550:	20001170 	.word	0x20001170

0800e554 <RegionIN865ApplyCFList>:
{
 800e554:	b570      	push	{r4, r5, r6, lr}
 800e556:	b086      	sub	sp, #24
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 800e558:	2350      	movs	r3, #80	; 0x50
 800e55a:	f88d 3014 	strb.w	r3, [sp, #20]
    if( applyCFList->Size != 16 )
 800e55e:	7903      	ldrb	r3, [r0, #4]
 800e560:	2b10      	cmp	r3, #16
 800e562:	d136      	bne.n	800e5d2 <RegionIN865ApplyCFList+0x7e>
 800e564:	4606      	mov	r6, r0
    if( applyCFList->Payload[15] != 0 )
 800e566:	6803      	ldr	r3, [r0, #0]
 800e568:	7bdd      	ldrb	r5, [r3, #15]
 800e56a:	2d00      	cmp	r5, #0
 800e56c:	d131      	bne.n	800e5d2 <RegionIN865ApplyCFList+0x7e>
    for( uint8_t i = 0, chanIdx = IN865_NUMB_DEFAULT_CHANNELS; chanIdx < IN865_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 800e56e:	2403      	movs	r4, #3
 800e570:	e01b      	b.n	800e5aa <RegionIN865ApplyCFList+0x56>
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 800e572:	6832      	ldr	r2, [r6, #0]
 800e574:	5d53      	ldrb	r3, [r2, r5]
 800e576:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 800e578:	442a      	add	r2, r5
 800e57a:	7851      	ldrb	r1, [r2, #1]
 800e57c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800e580:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 800e582:	7892      	ldrb	r2, [r2, #2]
 800e584:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e588:	9303      	str	r3, [sp, #12]
            newChannel.Frequency *= 100;
 800e58a:	2264      	movs	r2, #100	; 0x64
 800e58c:	fb02 f303 	mul.w	r3, r2, r3
 800e590:	9303      	str	r3, [sp, #12]
            newChannel.Rx1Frequency = 0;
 800e592:	2300      	movs	r3, #0
 800e594:	9304      	str	r3, [sp, #16]
 800e596:	e011      	b.n	800e5bc <RegionIN865ApplyCFList+0x68>
            channelRemove.ChannelId = chanIdx;
 800e598:	f88d 4000 	strb.w	r4, [sp]
            RegionIN865ChannelsRemove( &channelRemove );
 800e59c:	4668      	mov	r0, sp
 800e59e:	f7ff ffbf 	bl	800e520 <RegionIN865ChannelsRemove>
    for( uint8_t i = 0, chanIdx = IN865_NUMB_DEFAULT_CHANNELS; chanIdx < IN865_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 800e5a2:	3503      	adds	r5, #3
 800e5a4:	b2ed      	uxtb	r5, r5
 800e5a6:	3401      	adds	r4, #1
 800e5a8:	b2e4      	uxtb	r4, r4
 800e5aa:	2c0f      	cmp	r4, #15
 800e5ac:	d811      	bhi.n	800e5d2 <RegionIN865ApplyCFList+0x7e>
        if( chanIdx < ( IN865_NUMB_CHANNELS_CF_LIST + IN865_NUMB_DEFAULT_CHANNELS ) )
 800e5ae:	2c07      	cmp	r4, #7
 800e5b0:	d9df      	bls.n	800e572 <RegionIN865ApplyCFList+0x1e>
            newChannel.Frequency = 0;
 800e5b2:	2300      	movs	r3, #0
 800e5b4:	9303      	str	r3, [sp, #12]
            newChannel.DrRange.Value = 0;
 800e5b6:	f88d 3014 	strb.w	r3, [sp, #20]
            newChannel.Rx1Frequency = 0;
 800e5ba:	9304      	str	r3, [sp, #16]
        if( newChannel.Frequency != 0 )
 800e5bc:	9b03      	ldr	r3, [sp, #12]
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d0ea      	beq.n	800e598 <RegionIN865ApplyCFList+0x44>
            channelAdd.NewChannel = &newChannel;
 800e5c2:	ab03      	add	r3, sp, #12
 800e5c4:	9301      	str	r3, [sp, #4]
            channelAdd.ChannelId = chanIdx;
 800e5c6:	f88d 4008 	strb.w	r4, [sp, #8]
            RegionIN865ChannelAdd( &channelAdd );
 800e5ca:	a801      	add	r0, sp, #4
 800e5cc:	f7ff ff4c 	bl	800e468 <RegionIN865ChannelAdd>
 800e5d0:	e7e7      	b.n	800e5a2 <RegionIN865ApplyCFList+0x4e>
}
 800e5d2:	b006      	add	sp, #24
 800e5d4:	bd70      	pop	{r4, r5, r6, pc}

0800e5d6 <RegionIN865NewChannelReq>:
{
 800e5d6:	b500      	push	{lr}
 800e5d8:	b085      	sub	sp, #20
    if( newChannelReq->NewChannel->Frequency == 0 )
 800e5da:	6803      	ldr	r3, [r0, #0]
 800e5dc:	681a      	ldr	r2, [r3, #0]
 800e5de:	b952      	cbnz	r2, 800e5f6 <RegionIN865NewChannelReq+0x20>
        channelRemove.ChannelId = newChannelReq->ChannelId;
 800e5e0:	7903      	ldrb	r3, [r0, #4]
 800e5e2:	f88d 3004 	strb.w	r3, [sp, #4]
        if( RegionIN865ChannelsRemove( &channelRemove ) == false )
 800e5e6:	a801      	add	r0, sp, #4
 800e5e8:	f7ff ff9a 	bl	800e520 <RegionIN865ChannelsRemove>
 800e5ec:	b1d0      	cbz	r0, 800e624 <RegionIN865NewChannelReq+0x4e>
    uint8_t status = 0x03;
 800e5ee:	2003      	movs	r0, #3
}
 800e5f0:	b005      	add	sp, #20
 800e5f2:	f85d fb04 	ldr.w	pc, [sp], #4
        channelAdd.NewChannel = newChannelReq->NewChannel;
 800e5f6:	9302      	str	r3, [sp, #8]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 800e5f8:	7903      	ldrb	r3, [r0, #4]
 800e5fa:	f88d 300c 	strb.w	r3, [sp, #12]
        switch( RegionIN865ChannelAdd( &channelAdd ) )
 800e5fe:	a802      	add	r0, sp, #8
 800e600:	f7ff ff32 	bl	800e468 <RegionIN865ChannelAdd>
 800e604:	2806      	cmp	r0, #6
 800e606:	d80b      	bhi.n	800e620 <RegionIN865NewChannelReq+0x4a>
 800e608:	e8df f000 	tbb	[pc, r0]
 800e60c:	0a0a0a04 	.word	0x0a0a0a04
 800e610:	060e      	.short	0x060e
 800e612:	08          	.byte	0x08
 800e613:	00          	.byte	0x00
 800e614:	2003      	movs	r0, #3
 800e616:	e7eb      	b.n	800e5f0 <RegionIN865NewChannelReq+0x1a>
                status &= 0xFD;
 800e618:	2001      	movs	r0, #1
                break;
 800e61a:	e7e9      	b.n	800e5f0 <RegionIN865NewChannelReq+0x1a>
                status &= 0xFC;
 800e61c:	2000      	movs	r0, #0
                break;
 800e61e:	e7e7      	b.n	800e5f0 <RegionIN865NewChannelReq+0x1a>
                status &= 0xFC;
 800e620:	2000      	movs	r0, #0
                break;
 800e622:	e7e5      	b.n	800e5f0 <RegionIN865NewChannelReq+0x1a>
            status &= 0xFC;
 800e624:	2000      	movs	r0, #0
 800e626:	e7e3      	b.n	800e5f0 <RegionIN865NewChannelReq+0x1a>
                status &= 0xFE;
 800e628:	2002      	movs	r0, #2
 800e62a:	e7e1      	b.n	800e5f0 <RegionIN865NewChannelReq+0x1a>

0800e62c <RegionIN865SetContinuousWave>:

void RegionIN865SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 800e62c:	b538      	push	{r3, r4, r5, lr}
 800e62e:	4604      	mov	r4, r0
#if defined( REGION_IN865 )
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 800e630:	4b12      	ldr	r3, [pc, #72]	; (800e67c <RegionIN865SetContinuousWave+0x50>)
 800e632:	681a      	ldr	r2, [r3, #0]
 800e634:	4d12      	ldr	r5, [pc, #72]	; (800e680 <RegionIN865SetContinuousWave+0x54>)
 800e636:	6829      	ldr	r1, [r5, #0]
 800e638:	7803      	ldrb	r3, [r0, #0]
 800e63a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e63e:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800e642:	7a4b      	ldrb	r3, [r1, #9]
 800e644:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e648:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e64c:	f993 1002 	ldrsb.w	r1, [r3, #2]
 800e650:	f990 0002 	ldrsb.w	r0, [r0, #2]
 800e654:	f7ff f9e4 	bl	800da20 <RegionCommonLimitTxPower>
    int8_t phyTxPower = 0;
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 800e658:	682a      	ldr	r2, [r5, #0]
 800e65a:	7823      	ldrb	r3, [r4, #0]
 800e65c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e660:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 800e664:	68a2      	ldr	r2, [r4, #8]
 800e666:	6861      	ldr	r1, [r4, #4]
 800e668:	f7ff f8f6 	bl	800d858 <RegionCommonComputeTxPower>
 800e66c:	4601      	mov	r1, r0

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 800e66e:	4b05      	ldr	r3, [pc, #20]	; (800e684 <RegionIN865SetContinuousWave+0x58>)
 800e670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e672:	89a2      	ldrh	r2, [r4, #12]
 800e674:	4628      	mov	r0, r5
 800e676:	4798      	blx	r3
#endif /* REGION_IN865 */
}
 800e678:	bd38      	pop	{r3, r4, r5, pc}
 800e67a:	bf00      	nop
 800e67c:	2000116c 	.word	0x2000116c
 800e680:	20001170 	.word	0x20001170
 800e684:	08017b28 	.word	0x08017b28

0800e688 <RegionIN865ApplyDrOffset>:

uint8_t RegionIN865ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
#if defined( REGION_IN865 )
    // Apply offset formula
    return MIN( DR_5, MAX( DR_0, dr - EffectiveRx1DrOffsetIN865[drOffset] ) );
 800e688:	4b05      	ldr	r3, [pc, #20]	; (800e6a0 <RegionIN865ApplyDrOffset+0x18>)
 800e68a:	569b      	ldrsb	r3, [r3, r2]
 800e68c:	1ac9      	subs	r1, r1, r3
 800e68e:	2905      	cmp	r1, #5
 800e690:	dc03      	bgt.n	800e69a <RegionIN865ApplyDrOffset+0x12>
 800e692:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 800e696:	b2c8      	uxtb	r0, r1
 800e698:	4770      	bx	lr
 800e69a:	2005      	movs	r0, #5
#else
    return 0;
#endif /* REGION_IN865 */
}
 800e69c:	4770      	bx	lr
 800e69e:	bf00      	nop
 800e6a0:	08017624 	.word	0x08017624

0800e6a4 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800e6a4:	b510      	push	{r4, lr}
 800e6a6:	4604      	mov	r4, r0
    memset1( ctx->X, 0, sizeof ctx->X );
 800e6a8:	2210      	movs	r2, #16
 800e6aa:	2100      	movs	r1, #0
 800e6ac:	30f1      	adds	r0, #241	; 0xf1
 800e6ae:	f000 ff30 	bl	800f512 <memset1>
    ctx->M_n = 0;
 800e6b2:	2100      	movs	r1, #0
 800e6b4:	f8c4 1114 	str.w	r1, [r4, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800e6b8:	22f0      	movs	r2, #240	; 0xf0
 800e6ba:	4620      	mov	r0, r4
 800e6bc:	f000 ff29 	bl	800f512 <memset1>
}
 800e6c0:	bd10      	pop	{r4, pc}

0800e6c2 <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800e6c2:	b508      	push	{r3, lr}
 800e6c4:	4602      	mov	r2, r0
 800e6c6:	4608      	mov	r0, r1
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800e6c8:	2110      	movs	r1, #16
 800e6ca:	f000 fb3b 	bl	800ed44 <lorawan_aes_set_key>
}
 800e6ce:	bd08      	pop	{r3, pc}

0800e6d0 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800e6d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e6d4:	b084      	sub	sp, #16
 800e6d6:	4604      	mov	r4, r0
 800e6d8:	460d      	mov	r5, r1
 800e6da:	4616      	mov	r6, r2
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800e6dc:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d054      	beq.n	800e78e <AES_CMAC_Update+0xbe>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800e6e4:	f1c3 0810 	rsb	r8, r3, #16
 800e6e8:	4647      	mov	r7, r8
 800e6ea:	4590      	cmp	r8, r2
 800e6ec:	bf28      	it	cs
 800e6ee:	4617      	movcs	r7, r2
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800e6f0:	f200 1001 	addw	r0, r0, #257	; 0x101
 800e6f4:	b2ba      	uxth	r2, r7
 800e6f6:	4418      	add	r0, r3
 800e6f8:	f000 fef3 	bl	800f4e2 <memcpy1>
        ctx->M_n += mlen;
 800e6fc:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 800e700:	443b      	add	r3, r7
 800e702:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
 800e706:	2b0f      	cmp	r3, #15
 800e708:	d94d      	bls.n	800e7a6 <AES_CMAC_Update+0xd6>
 800e70a:	45b0      	cmp	r8, r6
 800e70c:	d24b      	bcs.n	800e7a6 <AES_CMAC_Update+0xd6>
            return;
        XOR( ctx->M_last, ctx->X );
 800e70e:	2300      	movs	r3, #0
 800e710:	e008      	b.n	800e724 <AES_CMAC_Update+0x54>
 800e712:	18e2      	adds	r2, r4, r3
 800e714:	f892 10f1 	ldrb.w	r1, [r2, #241]	; 0xf1
 800e718:	f892 0101 	ldrb.w	r0, [r2, #257]	; 0x101
 800e71c:	4041      	eors	r1, r0
 800e71e:	f882 10f1 	strb.w	r1, [r2, #241]	; 0xf1
 800e722:	3301      	adds	r3, #1
 800e724:	2b0f      	cmp	r3, #15
 800e726:	ddf4      	ble.n	800e712 <AES_CMAC_Update+0x42>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800e728:	f104 08f1 	add.w	r8, r4, #241	; 0xf1
 800e72c:	2210      	movs	r2, #16
 800e72e:	4641      	mov	r1, r8
 800e730:	4668      	mov	r0, sp
 800e732:	f000 fed6 	bl	800f4e2 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800e736:	4622      	mov	r2, r4
 800e738:	4669      	mov	r1, sp
 800e73a:	4668      	mov	r0, sp
 800e73c:	f000 fb86 	bl	800ee4c <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800e740:	2210      	movs	r2, #16
 800e742:	4669      	mov	r1, sp
 800e744:	4640      	mov	r0, r8
 800e746:	f000 fecc 	bl	800f4e2 <memcpy1>

        data += mlen;
 800e74a:	443d      	add	r5, r7
        len -= mlen;
 800e74c:	1bf6      	subs	r6, r6, r7
 800e74e:	e01e      	b.n	800e78e <AES_CMAC_Update+0xbe>
    }
    while( len > 16 )
    { /* not last block */

        XOR( data, ctx->X );
 800e750:	eb04 0e03 	add.w	lr, r4, r3
 800e754:	f89e c0f1 	ldrb.w	ip, [lr, #241]	; 0xf1
 800e758:	5cea      	ldrb	r2, [r5, r3]
 800e75a:	ea8c 0c02 	eor.w	ip, ip, r2
 800e75e:	f88e c0f1 	strb.w	ip, [lr, #241]	; 0xf1
 800e762:	3301      	adds	r3, #1
 800e764:	2b0f      	cmp	r3, #15
 800e766:	ddf3      	ble.n	800e750 <AES_CMAC_Update+0x80>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800e768:	f104 07f1 	add.w	r7, r4, #241	; 0xf1
 800e76c:	2210      	movs	r2, #16
 800e76e:	4639      	mov	r1, r7
 800e770:	4668      	mov	r0, sp
 800e772:	f000 feb6 	bl	800f4e2 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800e776:	4622      	mov	r2, r4
 800e778:	4669      	mov	r1, sp
 800e77a:	4668      	mov	r0, sp
 800e77c:	f000 fb66 	bl	800ee4c <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800e780:	2210      	movs	r2, #16
 800e782:	4669      	mov	r1, sp
 800e784:	4638      	mov	r0, r7
 800e786:	f000 feac 	bl	800f4e2 <memcpy1>

        data += 16;
 800e78a:	3510      	adds	r5, #16
        len -= 16;
 800e78c:	3e10      	subs	r6, #16
    while( len > 16 )
 800e78e:	2e10      	cmp	r6, #16
 800e790:	d901      	bls.n	800e796 <AES_CMAC_Update+0xc6>
        XOR( data, ctx->X );
 800e792:	2300      	movs	r3, #0
 800e794:	e7e6      	b.n	800e764 <AES_CMAC_Update+0x94>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800e796:	b2b2      	uxth	r2, r6
 800e798:	4629      	mov	r1, r5
 800e79a:	f204 1001 	addw	r0, r4, #257	; 0x101
 800e79e:	f000 fea0 	bl	800f4e2 <memcpy1>
    ctx->M_n = len;
 800e7a2:	f8c4 6114 	str.w	r6, [r4, #276]	; 0x114
}
 800e7a6:	b004      	add	sp, #16
 800e7a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e7ac <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800e7ac:	b530      	push	{r4, r5, lr}
 800e7ae:	b089      	sub	sp, #36	; 0x24
 800e7b0:	4605      	mov	r5, r0
 800e7b2:	460c      	mov	r4, r1
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800e7b4:	2210      	movs	r2, #16
 800e7b6:	2100      	movs	r1, #0
 800e7b8:	eb0d 0002 	add.w	r0, sp, r2
 800e7bc:	f000 fea9 	bl	800f512 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800e7c0:	4622      	mov	r2, r4
 800e7c2:	a904      	add	r1, sp, #16
 800e7c4:	4608      	mov	r0, r1
 800e7c6:	f000 fb41 	bl	800ee4c <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800e7ca:	f99d 3010 	ldrsb.w	r3, [sp, #16]
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	db01      	blt.n	800e7d6 <AES_CMAC_Final+0x2a>
    {
        LSHIFT( K, K );
        K[15] ^= 0x87;
    }
    else
        LSHIFT( K, K );
 800e7d2:	2300      	movs	r3, #0
 800e7d4:	e030      	b.n	800e838 <AES_CMAC_Final+0x8c>
        LSHIFT( K, K );
 800e7d6:	2300      	movs	r3, #0
 800e7d8:	2b0e      	cmp	r3, #14
 800e7da:	dc11      	bgt.n	800e800 <AES_CMAC_Final+0x54>
 800e7dc:	f103 0220 	add.w	r2, r3, #32
 800e7e0:	eb0d 0102 	add.w	r1, sp, r2
 800e7e4:	f811 0c10 	ldrb.w	r0, [r1, #-16]
 800e7e8:	3301      	adds	r3, #1
 800e7ea:	f103 0220 	add.w	r2, r3, #32
 800e7ee:	446a      	add	r2, sp
 800e7f0:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 800e7f4:	09d2      	lsrs	r2, r2, #7
 800e7f6:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 800e7fa:	f801 2c10 	strb.w	r2, [r1, #-16]
 800e7fe:	e7eb      	b.n	800e7d8 <AES_CMAC_Final+0x2c>
 800e800:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800e804:	005b      	lsls	r3, r3, #1
 800e806:	b2db      	uxtb	r3, r3
 800e808:	f88d 301f 	strb.w	r3, [sp, #31]
        K[15] ^= 0x87;
 800e80c:	f083 0387 	eor.w	r3, r3, #135	; 0x87
 800e810:	f88d 301f 	strb.w	r3, [sp, #31]
 800e814:	e017      	b.n	800e846 <AES_CMAC_Final+0x9a>
        LSHIFT( K, K );
 800e816:	f103 0220 	add.w	r2, r3, #32
 800e81a:	eb0d 0102 	add.w	r1, sp, r2
 800e81e:	f811 0c10 	ldrb.w	r0, [r1, #-16]
 800e822:	3301      	adds	r3, #1
 800e824:	f103 0220 	add.w	r2, r3, #32
 800e828:	446a      	add	r2, sp
 800e82a:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 800e82e:	09d2      	lsrs	r2, r2, #7
 800e830:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 800e834:	f801 2c10 	strb.w	r2, [r1, #-16]
 800e838:	2b0e      	cmp	r3, #14
 800e83a:	ddec      	ble.n	800e816 <AES_CMAC_Final+0x6a>
 800e83c:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800e840:	005b      	lsls	r3, r3, #1
 800e842:	f88d 301f 	strb.w	r3, [sp, #31]

    if( ctx->M_n == 16 )
 800e846:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
 800e84a:	2810      	cmp	r0, #16
 800e84c:	d014      	beq.n	800e878 <AES_CMAC_Final+0xcc>
        XOR( K, ctx->M_last );
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800e84e:	f99d 3010 	ldrsb.w	r3, [sp, #16]
 800e852:	2b00      	cmp	r3, #0
 800e854:	db30      	blt.n	800e8b8 <AES_CMAC_Final+0x10c>
        {
            LSHIFT( K, K );
            K[15] ^= 0x87;
        }
        else
            LSHIFT( K, K );
 800e856:	2300      	movs	r3, #0
 800e858:	e041      	b.n	800e8de <AES_CMAC_Final+0x132>
        XOR( K, ctx->M_last );
 800e85a:	18e1      	adds	r1, r4, r3
 800e85c:	f891 2101 	ldrb.w	r2, [r1, #257]	; 0x101
 800e860:	f103 0020 	add.w	r0, r3, #32
 800e864:	4468      	add	r0, sp
 800e866:	f810 0c10 	ldrb.w	r0, [r0, #-16]
 800e86a:	4042      	eors	r2, r0
 800e86c:	f881 2101 	strb.w	r2, [r1, #257]	; 0x101
 800e870:	3301      	adds	r3, #1
 800e872:	2b0f      	cmp	r3, #15
 800e874:	ddf1      	ble.n	800e85a <AES_CMAC_Final+0xae>
 800e876:	e059      	b.n	800e92c <AES_CMAC_Final+0x180>
 800e878:	2300      	movs	r3, #0
 800e87a:	e7fa      	b.n	800e872 <AES_CMAC_Final+0xc6>
            LSHIFT( K, K );
 800e87c:	f103 0220 	add.w	r2, r3, #32
 800e880:	eb0d 0102 	add.w	r1, sp, r2
 800e884:	f811 cc10 	ldrb.w	ip, [r1, #-16]
 800e888:	3301      	adds	r3, #1
 800e88a:	f103 0220 	add.w	r2, r3, #32
 800e88e:	446a      	add	r2, sp
 800e890:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 800e894:	09d2      	lsrs	r2, r2, #7
 800e896:	ea42 024c 	orr.w	r2, r2, ip, lsl #1
 800e89a:	f801 2c10 	strb.w	r2, [r1, #-16]
 800e89e:	2b0e      	cmp	r3, #14
 800e8a0:	ddec      	ble.n	800e87c <AES_CMAC_Final+0xd0>
 800e8a2:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800e8a6:	005b      	lsls	r3, r3, #1
 800e8a8:	b2db      	uxtb	r3, r3
 800e8aa:	f88d 301f 	strb.w	r3, [sp, #31]
            K[15] ^= 0x87;
 800e8ae:	f083 0387 	eor.w	r3, r3, #135	; 0x87
 800e8b2:	f88d 301f 	strb.w	r3, [sp, #31]
 800e8b6:	e019      	b.n	800e8ec <AES_CMAC_Final+0x140>
            LSHIFT( K, K );
 800e8b8:	2300      	movs	r3, #0
 800e8ba:	e7f0      	b.n	800e89e <AES_CMAC_Final+0xf2>
            LSHIFT( K, K );
 800e8bc:	f103 0220 	add.w	r2, r3, #32
 800e8c0:	eb0d 0102 	add.w	r1, sp, r2
 800e8c4:	f811 cc10 	ldrb.w	ip, [r1, #-16]
 800e8c8:	3301      	adds	r3, #1
 800e8ca:	f103 0220 	add.w	r2, r3, #32
 800e8ce:	446a      	add	r2, sp
 800e8d0:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 800e8d4:	09d2      	lsrs	r2, r2, #7
 800e8d6:	ea42 024c 	orr.w	r2, r2, ip, lsl #1
 800e8da:	f801 2c10 	strb.w	r2, [r1, #-16]
 800e8de:	2b0e      	cmp	r3, #14
 800e8e0:	ddec      	ble.n	800e8bc <AES_CMAC_Final+0x110>
 800e8e2:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800e8e6:	005b      	lsls	r3, r3, #1
 800e8e8:	f88d 301f 	strb.w	r3, [sp, #31]

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800e8ec:	4420      	add	r0, r4
 800e8ee:	2380      	movs	r3, #128	; 0x80
 800e8f0:	f880 3101 	strb.w	r3, [r0, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800e8f4:	e003      	b.n	800e8fe <AES_CMAC_Final+0x152>
            ctx->M_last[ctx->M_n] = 0;
 800e8f6:	4423      	add	r3, r4
 800e8f8:	2200      	movs	r2, #0
 800e8fa:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800e8fe:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 800e902:	3301      	adds	r3, #1
 800e904:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 800e908:	2b0f      	cmp	r3, #15
 800e90a:	d9f4      	bls.n	800e8f6 <AES_CMAC_Final+0x14a>

        XOR( K, ctx->M_last );
 800e90c:	2300      	movs	r3, #0
 800e90e:	e00b      	b.n	800e928 <AES_CMAC_Final+0x17c>
 800e910:	18e1      	adds	r1, r4, r3
 800e912:	f891 2101 	ldrb.w	r2, [r1, #257]	; 0x101
 800e916:	f103 0020 	add.w	r0, r3, #32
 800e91a:	4468      	add	r0, sp
 800e91c:	f810 0c10 	ldrb.w	r0, [r0, #-16]
 800e920:	4042      	eors	r2, r0
 800e922:	f881 2101 	strb.w	r2, [r1, #257]	; 0x101
 800e926:	3301      	adds	r3, #1
 800e928:	2b0f      	cmp	r3, #15
 800e92a:	ddf1      	ble.n	800e910 <AES_CMAC_Final+0x164>
 800e92c:	2300      	movs	r3, #0
 800e92e:	e009      	b.n	800e944 <AES_CMAC_Final+0x198>
    }
    XOR( ctx->M_last, ctx->X );
 800e930:	18e2      	adds	r2, r4, r3
 800e932:	f892 c0f1 	ldrb.w	ip, [r2, #241]	; 0xf1
 800e936:	f892 1101 	ldrb.w	r1, [r2, #257]	; 0x101
 800e93a:	ea8c 0c01 	eor.w	ip, ip, r1
 800e93e:	f882 c0f1 	strb.w	ip, [r2, #241]	; 0xf1
 800e942:	3301      	adds	r3, #1
 800e944:	2b0f      	cmp	r3, #15
 800e946:	ddf3      	ble.n	800e930 <AES_CMAC_Final+0x184>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800e948:	2210      	movs	r2, #16
 800e94a:	f104 01f1 	add.w	r1, r4, #241	; 0xf1
 800e94e:	4668      	mov	r0, sp
 800e950:	f000 fdc7 	bl	800f4e2 <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800e954:	4622      	mov	r2, r4
 800e956:	4629      	mov	r1, r5
 800e958:	4668      	mov	r0, sp
 800e95a:	f000 fa77 	bl	800ee4c <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800e95e:	2210      	movs	r2, #16
 800e960:	2100      	movs	r1, #0
 800e962:	eb0d 0002 	add.w	r0, sp, r2
 800e966:	f000 fdd4 	bl	800f512 <memset1>
}
 800e96a:	b009      	add	sp, #36	; 0x24
 800e96c:	bd30      	pop	{r4, r5, pc}

0800e96e <copy_block>:
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800e96e:	780b      	ldrb	r3, [r1, #0]
 800e970:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800e972:	784b      	ldrb	r3, [r1, #1]
 800e974:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800e976:	788b      	ldrb	r3, [r1, #2]
 800e978:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800e97a:	78cb      	ldrb	r3, [r1, #3]
 800e97c:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800e97e:	790b      	ldrb	r3, [r1, #4]
 800e980:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800e982:	794b      	ldrb	r3, [r1, #5]
 800e984:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800e986:	798b      	ldrb	r3, [r1, #6]
 800e988:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800e98a:	79cb      	ldrb	r3, [r1, #7]
 800e98c:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800e98e:	7a0b      	ldrb	r3, [r1, #8]
 800e990:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800e992:	7a4b      	ldrb	r3, [r1, #9]
 800e994:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800e996:	7a8b      	ldrb	r3, [r1, #10]
 800e998:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800e99a:	7acb      	ldrb	r3, [r1, #11]
 800e99c:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800e99e:	7b0b      	ldrb	r3, [r1, #12]
 800e9a0:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800e9a2:	7b4b      	ldrb	r3, [r1, #13]
 800e9a4:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800e9a6:	7b8b      	ldrb	r3, [r1, #14]
 800e9a8:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800e9aa:	7bcb      	ldrb	r3, [r1, #15]
 800e9ac:	73c3      	strb	r3, [r0, #15]
#endif
}
 800e9ae:	4770      	bx	lr

0800e9b0 <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
    while( nn-- )
 800e9b0:	e004      	b.n	800e9bc <copy_block_nn+0xc>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800e9b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e9b6:	f800 2b01 	strb.w	r2, [r0], #1
    while( nn-- )
 800e9ba:	461a      	mov	r2, r3
 800e9bc:	1e53      	subs	r3, r2, #1
 800e9be:	b2db      	uxtb	r3, r3
 800e9c0:	2a00      	cmp	r2, #0
 800e9c2:	d1f6      	bne.n	800e9b2 <copy_block_nn+0x2>
}
 800e9c4:	4770      	bx	lr

0800e9c6 <xor_block>:
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800e9c6:	780b      	ldrb	r3, [r1, #0]
 800e9c8:	7802      	ldrb	r2, [r0, #0]
 800e9ca:	4053      	eors	r3, r2
 800e9cc:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800e9ce:	784b      	ldrb	r3, [r1, #1]
 800e9d0:	7842      	ldrb	r2, [r0, #1]
 800e9d2:	4053      	eors	r3, r2
 800e9d4:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800e9d6:	788b      	ldrb	r3, [r1, #2]
 800e9d8:	7882      	ldrb	r2, [r0, #2]
 800e9da:	4053      	eors	r3, r2
 800e9dc:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800e9de:	78cb      	ldrb	r3, [r1, #3]
 800e9e0:	78c2      	ldrb	r2, [r0, #3]
 800e9e2:	4053      	eors	r3, r2
 800e9e4:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800e9e6:	790b      	ldrb	r3, [r1, #4]
 800e9e8:	7902      	ldrb	r2, [r0, #4]
 800e9ea:	4053      	eors	r3, r2
 800e9ec:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800e9ee:	794b      	ldrb	r3, [r1, #5]
 800e9f0:	7942      	ldrb	r2, [r0, #5]
 800e9f2:	4053      	eors	r3, r2
 800e9f4:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800e9f6:	798b      	ldrb	r3, [r1, #6]
 800e9f8:	7982      	ldrb	r2, [r0, #6]
 800e9fa:	4053      	eors	r3, r2
 800e9fc:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800e9fe:	79cb      	ldrb	r3, [r1, #7]
 800ea00:	79c2      	ldrb	r2, [r0, #7]
 800ea02:	4053      	eors	r3, r2
 800ea04:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800ea06:	7a0b      	ldrb	r3, [r1, #8]
 800ea08:	7a02      	ldrb	r2, [r0, #8]
 800ea0a:	4053      	eors	r3, r2
 800ea0c:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800ea0e:	7a4b      	ldrb	r3, [r1, #9]
 800ea10:	7a42      	ldrb	r2, [r0, #9]
 800ea12:	4053      	eors	r3, r2
 800ea14:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800ea16:	7a8b      	ldrb	r3, [r1, #10]
 800ea18:	7a82      	ldrb	r2, [r0, #10]
 800ea1a:	4053      	eors	r3, r2
 800ea1c:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800ea1e:	7acb      	ldrb	r3, [r1, #11]
 800ea20:	7ac2      	ldrb	r2, [r0, #11]
 800ea22:	4053      	eors	r3, r2
 800ea24:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800ea26:	7b0b      	ldrb	r3, [r1, #12]
 800ea28:	7b02      	ldrb	r2, [r0, #12]
 800ea2a:	4053      	eors	r3, r2
 800ea2c:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800ea2e:	7b4b      	ldrb	r3, [r1, #13]
 800ea30:	7b42      	ldrb	r2, [r0, #13]
 800ea32:	4053      	eors	r3, r2
 800ea34:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800ea36:	7b8b      	ldrb	r3, [r1, #14]
 800ea38:	7b82      	ldrb	r2, [r0, #14]
 800ea3a:	4053      	eors	r3, r2
 800ea3c:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800ea3e:	7bcb      	ldrb	r3, [r1, #15]
 800ea40:	7bc2      	ldrb	r2, [r0, #15]
 800ea42:	4053      	eors	r3, r2
 800ea44:	73c3      	strb	r3, [r0, #15]
#endif
}
 800ea46:	4770      	bx	lr

0800ea48 <copy_and_key>:
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800ea48:	780b      	ldrb	r3, [r1, #0]
 800ea4a:	f892 c000 	ldrb.w	ip, [r2]
 800ea4e:	ea83 030c 	eor.w	r3, r3, ip
 800ea52:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800ea54:	784b      	ldrb	r3, [r1, #1]
 800ea56:	f892 c001 	ldrb.w	ip, [r2, #1]
 800ea5a:	ea83 030c 	eor.w	r3, r3, ip
 800ea5e:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800ea60:	788b      	ldrb	r3, [r1, #2]
 800ea62:	f892 c002 	ldrb.w	ip, [r2, #2]
 800ea66:	ea83 030c 	eor.w	r3, r3, ip
 800ea6a:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800ea6c:	78cb      	ldrb	r3, [r1, #3]
 800ea6e:	f892 c003 	ldrb.w	ip, [r2, #3]
 800ea72:	ea83 030c 	eor.w	r3, r3, ip
 800ea76:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800ea78:	790b      	ldrb	r3, [r1, #4]
 800ea7a:	f892 c004 	ldrb.w	ip, [r2, #4]
 800ea7e:	ea83 030c 	eor.w	r3, r3, ip
 800ea82:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800ea84:	794b      	ldrb	r3, [r1, #5]
 800ea86:	f892 c005 	ldrb.w	ip, [r2, #5]
 800ea8a:	ea83 030c 	eor.w	r3, r3, ip
 800ea8e:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800ea90:	798b      	ldrb	r3, [r1, #6]
 800ea92:	f892 c006 	ldrb.w	ip, [r2, #6]
 800ea96:	ea83 030c 	eor.w	r3, r3, ip
 800ea9a:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800ea9c:	79cb      	ldrb	r3, [r1, #7]
 800ea9e:	f892 c007 	ldrb.w	ip, [r2, #7]
 800eaa2:	ea83 030c 	eor.w	r3, r3, ip
 800eaa6:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800eaa8:	7a0b      	ldrb	r3, [r1, #8]
 800eaaa:	f892 c008 	ldrb.w	ip, [r2, #8]
 800eaae:	ea83 030c 	eor.w	r3, r3, ip
 800eab2:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800eab4:	7a4b      	ldrb	r3, [r1, #9]
 800eab6:	f892 c009 	ldrb.w	ip, [r2, #9]
 800eaba:	ea83 030c 	eor.w	r3, r3, ip
 800eabe:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800eac0:	7a8b      	ldrb	r3, [r1, #10]
 800eac2:	f892 c00a 	ldrb.w	ip, [r2, #10]
 800eac6:	ea83 030c 	eor.w	r3, r3, ip
 800eaca:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800eacc:	7acb      	ldrb	r3, [r1, #11]
 800eace:	f892 c00b 	ldrb.w	ip, [r2, #11]
 800ead2:	ea83 030c 	eor.w	r3, r3, ip
 800ead6:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800ead8:	7b0b      	ldrb	r3, [r1, #12]
 800eada:	f892 c00c 	ldrb.w	ip, [r2, #12]
 800eade:	ea83 030c 	eor.w	r3, r3, ip
 800eae2:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800eae4:	7b4b      	ldrb	r3, [r1, #13]
 800eae6:	f892 c00d 	ldrb.w	ip, [r2, #13]
 800eaea:	ea83 030c 	eor.w	r3, r3, ip
 800eaee:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800eaf0:	7b8b      	ldrb	r3, [r1, #14]
 800eaf2:	f892 c00e 	ldrb.w	ip, [r2, #14]
 800eaf6:	ea83 030c 	eor.w	r3, r3, ip
 800eafa:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800eafc:	7bcb      	ldrb	r3, [r1, #15]
 800eafe:	7bd2      	ldrb	r2, [r2, #15]
 800eb00:	4053      	eors	r3, r2
 800eb02:	73c3      	strb	r3, [r0, #15]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800eb04:	4770      	bx	lr

0800eb06 <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800eb06:	b508      	push	{r3, lr}
    xor_block(d, k);
 800eb08:	f7ff ff5d 	bl	800e9c6 <xor_block>
}
 800eb0c:	bd08      	pop	{r3, pc}
	...

0800eb10 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800eb10:	7802      	ldrb	r2, [r0, #0]
 800eb12:	4b18      	ldr	r3, [pc, #96]	; (800eb74 <shift_sub_rows+0x64>)
 800eb14:	5c9a      	ldrb	r2, [r3, r2]
 800eb16:	7002      	strb	r2, [r0, #0]
 800eb18:	7902      	ldrb	r2, [r0, #4]
 800eb1a:	5c9a      	ldrb	r2, [r3, r2]
 800eb1c:	7102      	strb	r2, [r0, #4]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800eb1e:	7a02      	ldrb	r2, [r0, #8]
 800eb20:	5c9a      	ldrb	r2, [r3, r2]
 800eb22:	7202      	strb	r2, [r0, #8]
 800eb24:	7b02      	ldrb	r2, [r0, #12]
 800eb26:	5c9a      	ldrb	r2, [r3, r2]
 800eb28:	7302      	strb	r2, [r0, #12]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800eb2a:	7842      	ldrb	r2, [r0, #1]
 800eb2c:	7941      	ldrb	r1, [r0, #5]
 800eb2e:	5c59      	ldrb	r1, [r3, r1]
 800eb30:	7041      	strb	r1, [r0, #1]
 800eb32:	7a41      	ldrb	r1, [r0, #9]
 800eb34:	5c59      	ldrb	r1, [r3, r1]
 800eb36:	7141      	strb	r1, [r0, #5]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800eb38:	7b41      	ldrb	r1, [r0, #13]
 800eb3a:	5c59      	ldrb	r1, [r3, r1]
 800eb3c:	7241      	strb	r1, [r0, #9]
 800eb3e:	5c9a      	ldrb	r2, [r3, r2]
 800eb40:	7342      	strb	r2, [r0, #13]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800eb42:	7882      	ldrb	r2, [r0, #2]
 800eb44:	7a81      	ldrb	r1, [r0, #10]
 800eb46:	5c59      	ldrb	r1, [r3, r1]
 800eb48:	7081      	strb	r1, [r0, #2]
 800eb4a:	5c9a      	ldrb	r2, [r3, r2]
 800eb4c:	7282      	strb	r2, [r0, #10]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800eb4e:	7982      	ldrb	r2, [r0, #6]
 800eb50:	7b81      	ldrb	r1, [r0, #14]
 800eb52:	5c59      	ldrb	r1, [r3, r1]
 800eb54:	7181      	strb	r1, [r0, #6]
 800eb56:	5c9a      	ldrb	r2, [r3, r2]
 800eb58:	7382      	strb	r2, [r0, #14]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800eb5a:	7bc2      	ldrb	r2, [r0, #15]
 800eb5c:	7ac1      	ldrb	r1, [r0, #11]
 800eb5e:	5c59      	ldrb	r1, [r3, r1]
 800eb60:	73c1      	strb	r1, [r0, #15]
 800eb62:	79c1      	ldrb	r1, [r0, #7]
 800eb64:	5c59      	ldrb	r1, [r3, r1]
 800eb66:	72c1      	strb	r1, [r0, #11]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800eb68:	78c1      	ldrb	r1, [r0, #3]
 800eb6a:	5c59      	ldrb	r1, [r3, r1]
 800eb6c:	71c1      	strb	r1, [r0, #7]
 800eb6e:	5c9b      	ldrb	r3, [r3, r2]
 800eb70:	70c3      	strb	r3, [r0, #3]
}
 800eb72:	4770      	bx	lr
 800eb74:	0801783c 	.word	0x0801783c

0800eb78 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800eb78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb7c:	b084      	sub	sp, #16
 800eb7e:	4604      	mov	r4, r0
    block_copy(st, dt);
 800eb80:	4601      	mov	r1, r0
 800eb82:	4668      	mov	r0, sp
 800eb84:	f7ff fef3 	bl	800e96e <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800eb88:	f89d c000 	ldrb.w	ip, [sp]
 800eb8c:	4b6a      	ldr	r3, [pc, #424]	; (800ed38 <mix_sub_columns+0x1c0>)
 800eb8e:	f813 000c 	ldrb.w	r0, [r3, ip]
 800eb92:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800eb96:	4a69      	ldr	r2, [pc, #420]	; (800ed3c <mix_sub_columns+0x1c4>)
 800eb98:	f812 9008 	ldrb.w	r9, [r2, r8]
 800eb9c:	f89d e00a 	ldrb.w	lr, [sp, #10]
 800eba0:	4967      	ldr	r1, [pc, #412]	; (800ed40 <mix_sub_columns+0x1c8>)
 800eba2:	f811 500e 	ldrb.w	r5, [r1, lr]
 800eba6:	f89d 700f 	ldrb.w	r7, [sp, #15]
 800ebaa:	5dce      	ldrb	r6, [r1, r7]
 800ebac:	ea80 0009 	eor.w	r0, r0, r9
 800ebb0:	4068      	eors	r0, r5
 800ebb2:	4070      	eors	r0, r6
 800ebb4:	7020      	strb	r0, [r4, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800ebb6:	f811 000c 	ldrb.w	r0, [r1, ip]
 800ebba:	f813 a008 	ldrb.w	sl, [r3, r8]
 800ebbe:	f812 900e 	ldrb.w	r9, [r2, lr]
 800ebc2:	ea80 0a0a 	eor.w	sl, r0, sl
 800ebc6:	ea89 090a 	eor.w	r9, r9, sl
 800ebca:	ea86 0609 	eor.w	r6, r6, r9
 800ebce:	7066      	strb	r6, [r4, #1]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800ebd0:	f811 8008 	ldrb.w	r8, [r1, r8]
 800ebd4:	f813 e00e 	ldrb.w	lr, [r3, lr]
 800ebd8:	5dd6      	ldrb	r6, [r2, r7]
 800ebda:	ea80 0008 	eor.w	r0, r0, r8
 800ebde:	ea8e 0000 	eor.w	r0, lr, r0
 800ebe2:	4070      	eors	r0, r6
 800ebe4:	70a0      	strb	r0, [r4, #2]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800ebe6:	f812 600c 	ldrb.w	r6, [r2, ip]
 800ebea:	5dd8      	ldrb	r0, [r3, r7]
 800ebec:	ea86 0608 	eor.w	r6, r6, r8
 800ebf0:	4075      	eors	r5, r6
 800ebf2:	4068      	eors	r0, r5
 800ebf4:	70e0      	strb	r0, [r4, #3]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800ebf6:	f89d c004 	ldrb.w	ip, [sp, #4]
 800ebfa:	f813 000c 	ldrb.w	r0, [r3, ip]
 800ebfe:	f89d 8009 	ldrb.w	r8, [sp, #9]
 800ec02:	f812 9008 	ldrb.w	r9, [r2, r8]
 800ec06:	f89d e00e 	ldrb.w	lr, [sp, #14]
 800ec0a:	f811 500e 	ldrb.w	r5, [r1, lr]
 800ec0e:	f89d 7003 	ldrb.w	r7, [sp, #3]
 800ec12:	5dce      	ldrb	r6, [r1, r7]
 800ec14:	ea80 0009 	eor.w	r0, r0, r9
 800ec18:	4068      	eors	r0, r5
 800ec1a:	4070      	eors	r0, r6
 800ec1c:	7120      	strb	r0, [r4, #4]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800ec1e:	f811 000c 	ldrb.w	r0, [r1, ip]
 800ec22:	f813 a008 	ldrb.w	sl, [r3, r8]
 800ec26:	f812 900e 	ldrb.w	r9, [r2, lr]
 800ec2a:	ea80 0a0a 	eor.w	sl, r0, sl
 800ec2e:	ea89 090a 	eor.w	r9, r9, sl
 800ec32:	ea86 0609 	eor.w	r6, r6, r9
 800ec36:	7166      	strb	r6, [r4, #5]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800ec38:	f811 8008 	ldrb.w	r8, [r1, r8]
 800ec3c:	f813 e00e 	ldrb.w	lr, [r3, lr]
 800ec40:	5dd6      	ldrb	r6, [r2, r7]
 800ec42:	ea80 0008 	eor.w	r0, r0, r8
 800ec46:	ea8e 0000 	eor.w	r0, lr, r0
 800ec4a:	4070      	eors	r0, r6
 800ec4c:	71a0      	strb	r0, [r4, #6]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800ec4e:	f812 600c 	ldrb.w	r6, [r2, ip]
 800ec52:	5dd8      	ldrb	r0, [r3, r7]
 800ec54:	ea86 0608 	eor.w	r6, r6, r8
 800ec58:	4075      	eors	r5, r6
 800ec5a:	4068      	eors	r0, r5
 800ec5c:	71e0      	strb	r0, [r4, #7]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800ec5e:	f89d c008 	ldrb.w	ip, [sp, #8]
 800ec62:	f813 000c 	ldrb.w	r0, [r3, ip]
 800ec66:	f89d 800d 	ldrb.w	r8, [sp, #13]
 800ec6a:	f812 9008 	ldrb.w	r9, [r2, r8]
 800ec6e:	f89d e002 	ldrb.w	lr, [sp, #2]
 800ec72:	f811 500e 	ldrb.w	r5, [r1, lr]
 800ec76:	f89d 7007 	ldrb.w	r7, [sp, #7]
 800ec7a:	5dce      	ldrb	r6, [r1, r7]
 800ec7c:	ea80 0009 	eor.w	r0, r0, r9
 800ec80:	4068      	eors	r0, r5
 800ec82:	4070      	eors	r0, r6
 800ec84:	7220      	strb	r0, [r4, #8]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800ec86:	f811 000c 	ldrb.w	r0, [r1, ip]
 800ec8a:	f813 a008 	ldrb.w	sl, [r3, r8]
 800ec8e:	f812 900e 	ldrb.w	r9, [r2, lr]
 800ec92:	ea80 0a0a 	eor.w	sl, r0, sl
 800ec96:	ea89 090a 	eor.w	r9, r9, sl
 800ec9a:	ea86 0609 	eor.w	r6, r6, r9
 800ec9e:	7266      	strb	r6, [r4, #9]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800eca0:	f811 8008 	ldrb.w	r8, [r1, r8]
 800eca4:	f813 e00e 	ldrb.w	lr, [r3, lr]
 800eca8:	5dd6      	ldrb	r6, [r2, r7]
 800ecaa:	ea80 0008 	eor.w	r0, r0, r8
 800ecae:	ea8e 0000 	eor.w	r0, lr, r0
 800ecb2:	4070      	eors	r0, r6
 800ecb4:	72a0      	strb	r0, [r4, #10]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800ecb6:	f812 600c 	ldrb.w	r6, [r2, ip]
 800ecba:	5dd8      	ldrb	r0, [r3, r7]
 800ecbc:	ea86 0608 	eor.w	r6, r6, r8
 800ecc0:	4075      	eors	r5, r6
 800ecc2:	4068      	eors	r0, r5
 800ecc4:	72e0      	strb	r0, [r4, #11]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800ecc6:	f89d 600c 	ldrb.w	r6, [sp, #12]
 800ecca:	5d98      	ldrb	r0, [r3, r6]
 800eccc:	f89d 8001 	ldrb.w	r8, [sp, #1]
 800ecd0:	f812 9008 	ldrb.w	r9, [r2, r8]
 800ecd4:	f89d 7006 	ldrb.w	r7, [sp, #6]
 800ecd8:	f811 c007 	ldrb.w	ip, [r1, r7]
 800ecdc:	f89d 500b 	ldrb.w	r5, [sp, #11]
 800ece0:	f811 e005 	ldrb.w	lr, [r1, r5]
 800ece4:	ea80 0009 	eor.w	r0, r0, r9
 800ece8:	ea8c 0000 	eor.w	r0, ip, r0
 800ecec:	ea8e 0000 	eor.w	r0, lr, r0
 800ecf0:	7320      	strb	r0, [r4, #12]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800ecf2:	5d88      	ldrb	r0, [r1, r6]
 800ecf4:	f813 a008 	ldrb.w	sl, [r3, r8]
 800ecf8:	f812 9007 	ldrb.w	r9, [r2, r7]
 800ecfc:	ea80 0a0a 	eor.w	sl, r0, sl
 800ed00:	ea89 090a 	eor.w	r9, r9, sl
 800ed04:	ea8e 0e09 	eor.w	lr, lr, r9
 800ed08:	f884 e00d 	strb.w	lr, [r4, #13]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800ed0c:	f811 1008 	ldrb.w	r1, [r1, r8]
 800ed10:	f813 e007 	ldrb.w	lr, [r3, r7]
 800ed14:	5d57      	ldrb	r7, [r2, r5]
 800ed16:	4048      	eors	r0, r1
 800ed18:	ea8e 0000 	eor.w	r0, lr, r0
 800ed1c:	4078      	eors	r0, r7
 800ed1e:	73a0      	strb	r0, [r4, #14]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800ed20:	5d92      	ldrb	r2, [r2, r6]
 800ed22:	5d5b      	ldrb	r3, [r3, r5]
 800ed24:	4051      	eors	r1, r2
 800ed26:	ea8c 0c01 	eor.w	ip, ip, r1
 800ed2a:	ea83 030c 	eor.w	r3, r3, ip
 800ed2e:	73e3      	strb	r3, [r4, #15]
  }
 800ed30:	b004      	add	sp, #16
 800ed32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed36:	bf00      	nop
 800ed38:	0801763c 	.word	0x0801763c
 800ed3c:	0801773c 	.word	0x0801773c
 800ed40:	0801783c 	.word	0x0801783c

0800ed44 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800ed44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ed48:	4614      	mov	r4, r2
    uint8_t cc, rc, hi;

    switch( keylen )
 800ed4a:	f1a1 0310 	sub.w	r3, r1, #16
 800ed4e:	b2db      	uxtb	r3, r3
 800ed50:	2b10      	cmp	r3, #16
 800ed52:	d806      	bhi.n	800ed62 <lorawan_aes_set_key+0x1e>
 800ed54:	460d      	mov	r5, r1
 800ed56:	4a3b      	ldr	r2, [pc, #236]	; (800ee44 <lorawan_aes_set_key+0x100>)
 800ed58:	fa22 f303 	lsr.w	r3, r2, r3
 800ed5c:	f013 0f01 	tst.w	r3, #1
 800ed60:	d105      	bne.n	800ed6e <lorawan_aes_set_key+0x2a>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800ed62:	2300      	movs	r3, #0
 800ed64:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
        return ( uint8_t )-1;
 800ed68:	20ff      	movs	r0, #255	; 0xff
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
    }
    return 0;
}
 800ed6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    block_copy_nn(ctx->ksch, key, keylen);
 800ed6e:	460a      	mov	r2, r1
 800ed70:	4601      	mov	r1, r0
 800ed72:	4620      	mov	r0, r4
 800ed74:	f7ff fe1c 	bl	800e9b0 <copy_block_nn>
    hi = (keylen + 28) << 2;
 800ed78:	f105 031c 	add.w	r3, r5, #28
 800ed7c:	b2db      	uxtb	r3, r3
 800ed7e:	009b      	lsls	r3, r3, #2
 800ed80:	fa5f fe83 	uxtb.w	lr, r3
    ctx->rnd = (hi >> 4) - 1;
 800ed84:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800ed88:	3b01      	subs	r3, #1
 800ed8a:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800ed8e:	462b      	mov	r3, r5
 800ed90:	f04f 0c01 	mov.w	ip, #1
 800ed94:	e023      	b.n	800edde <lorawan_aes_set_key+0x9a>
        else if( keylen > 24 && cc % keylen == 16 )
 800ed96:	2d18      	cmp	r5, #24
 800ed98:	d901      	bls.n	800ed9e <lorawan_aes_set_key+0x5a>
 800ed9a:	2a10      	cmp	r2, #16
 800ed9c:	d048      	beq.n	800ee30 <lorawan_aes_set_key+0xec>
        tt = cc - keylen;
 800ed9e:	1b5a      	subs	r2, r3, r5
 800eda0:	b2d2      	uxtb	r2, r2
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800eda2:	f814 9002 	ldrb.w	r9, [r4, r2]
 800eda6:	ea89 0808 	eor.w	r8, r9, r8
 800edaa:	f804 8000 	strb.w	r8, [r4, r0]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800edae:	f102 0801 	add.w	r8, r2, #1
 800edb2:	f814 8008 	ldrb.w	r8, [r4, r8]
 800edb6:	f100 0901 	add.w	r9, r0, #1
 800edba:	ea88 0707 	eor.w	r7, r8, r7
 800edbe:	f804 7009 	strb.w	r7, [r4, r9]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800edc2:	1c97      	adds	r7, r2, #2
 800edc4:	5de7      	ldrb	r7, [r4, r7]
 800edc6:	f100 0802 	add.w	r8, r0, #2
 800edca:	407e      	eors	r6, r7
 800edcc:	f804 6008 	strb.w	r6, [r4, r8]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800edd0:	3203      	adds	r2, #3
 800edd2:	5ca6      	ldrb	r6, [r4, r2]
 800edd4:	1cc2      	adds	r2, r0, #3
 800edd6:	4071      	eors	r1, r6
 800edd8:	54a1      	strb	r1, [r4, r2]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800edda:	3304      	adds	r3, #4
 800eddc:	b2db      	uxtb	r3, r3
 800edde:	4573      	cmp	r3, lr
 800ede0:	d22d      	bcs.n	800ee3e <lorawan_aes_set_key+0xfa>
        t0 = ctx->ksch[cc - 4];
 800ede2:	4618      	mov	r0, r3
 800ede4:	1f1a      	subs	r2, r3, #4
 800ede6:	f814 8002 	ldrb.w	r8, [r4, r2]
        t1 = ctx->ksch[cc - 3];
 800edea:	1eda      	subs	r2, r3, #3
 800edec:	5ca7      	ldrb	r7, [r4, r2]
        t2 = ctx->ksch[cc - 2];
 800edee:	1e9a      	subs	r2, r3, #2
 800edf0:	5ca6      	ldrb	r6, [r4, r2]
        t3 = ctx->ksch[cc - 1];
 800edf2:	1e5a      	subs	r2, r3, #1
 800edf4:	5ca1      	ldrb	r1, [r4, r2]
        if( cc % keylen == 0 )
 800edf6:	fbb3 f2f5 	udiv	r2, r3, r5
 800edfa:	fb05 3212 	mls	r2, r5, r2, r3
 800edfe:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 800ee02:	d1c8      	bne.n	800ed96 <lorawan_aes_set_key+0x52>
            t0 = s_box(t1) ^ rc;
 800ee04:	4a10      	ldr	r2, [pc, #64]	; (800ee48 <lorawan_aes_set_key+0x104>)
 800ee06:	f812 9007 	ldrb.w	r9, [r2, r7]
 800ee0a:	ea89 090c 	eor.w	r9, r9, ip
            t1 = s_box(t2);
 800ee0e:	5d97      	ldrb	r7, [r2, r6]
            t2 = s_box(t3);
 800ee10:	5c56      	ldrb	r6, [r2, r1]
            t3 = s_box(tt);
 800ee12:	f812 1008 	ldrb.w	r1, [r2, r8]
            rc = f2(rc);
 800ee16:	ea4f 12dc 	mov.w	r2, ip, lsr #7
 800ee1a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800ee1e:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 800ee22:	b2d2      	uxtb	r2, r2
 800ee24:	ea82 024c 	eor.w	r2, r2, ip, lsl #1
 800ee28:	fa5f fc82 	uxtb.w	ip, r2
            t0 = s_box(t1) ^ rc;
 800ee2c:	46c8      	mov	r8, r9
 800ee2e:	e7b6      	b.n	800ed9e <lorawan_aes_set_key+0x5a>
            t0 = s_box(t0);
 800ee30:	4a05      	ldr	r2, [pc, #20]	; (800ee48 <lorawan_aes_set_key+0x104>)
 800ee32:	f812 8008 	ldrb.w	r8, [r2, r8]
            t1 = s_box(t1);
 800ee36:	5dd7      	ldrb	r7, [r2, r7]
            t2 = s_box(t2);
 800ee38:	5d96      	ldrb	r6, [r2, r6]
            t3 = s_box(t3);
 800ee3a:	5c51      	ldrb	r1, [r2, r1]
 800ee3c:	e7af      	b.n	800ed9e <lorawan_aes_set_key+0x5a>
    return 0;
 800ee3e:	2000      	movs	r0, #0
 800ee40:	e793      	b.n	800ed6a <lorawan_aes_set_key+0x26>
 800ee42:	bf00      	nop
 800ee44:	00010101 	.word	0x00010101
 800ee48:	0801783c 	.word	0x0801783c

0800ee4c <lorawan_aes_encrypt>:

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
    if( ctx->rnd )
 800ee4c:	f892 30f0 	ldrb.w	r3, [r2, #240]	; 0xf0
 800ee50:	b31b      	cbz	r3, 800ee9a <lorawan_aes_encrypt+0x4e>
{
 800ee52:	b570      	push	{r4, r5, r6, lr}
 800ee54:	b084      	sub	sp, #16
 800ee56:	460e      	mov	r6, r1
 800ee58:	4615      	mov	r5, r2
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800ee5a:	4601      	mov	r1, r0
 800ee5c:	4668      	mov	r0, sp
 800ee5e:	f7ff fdf3 	bl	800ea48 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800ee62:	2401      	movs	r4, #1
 800ee64:	e009      	b.n	800ee7a <lorawan_aes_encrypt+0x2e>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800ee66:	4668      	mov	r0, sp
 800ee68:	f7ff fe86 	bl	800eb78 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800ee6c:	eb05 1104 	add.w	r1, r5, r4, lsl #4
 800ee70:	4668      	mov	r0, sp
 800ee72:	f7ff fe48 	bl	800eb06 <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800ee76:	3401      	adds	r4, #1
 800ee78:	b2e4      	uxtb	r4, r4
 800ee7a:	f895 30f0 	ldrb.w	r3, [r5, #240]	; 0xf0
 800ee7e:	42a3      	cmp	r3, r4
 800ee80:	d8f1      	bhi.n	800ee66 <lorawan_aes_encrypt+0x1a>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800ee82:	4668      	mov	r0, sp
 800ee84:	f7ff fe44 	bl	800eb10 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800ee88:	eb05 1204 	add.w	r2, r5, r4, lsl #4
 800ee8c:	4669      	mov	r1, sp
 800ee8e:	4630      	mov	r0, r6
 800ee90:	f7ff fdda 	bl	800ea48 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800ee94:	2000      	movs	r0, #0
}
 800ee96:	b004      	add	sp, #16
 800ee98:	bd70      	pop	{r4, r5, r6, pc}
        return ( uint8_t )-1;
 800ee9a:	20ff      	movs	r0, #255	; 0xff
}
 800ee9c:	4770      	bx	lr
	...

0800eea0 <GetKeyByID>:
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t** keyItem )
{
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800eea0:	2300      	movs	r3, #0
 800eea2:	2b09      	cmp	r3, #9
 800eea4:	d817      	bhi.n	800eed6 <GetKeyByID+0x36>
{
 800eea6:	b410      	push	{r4}
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800eea8:	4a0c      	ldr	r2, [pc, #48]	; (800eedc <GetKeyByID+0x3c>)
 800eeaa:	6814      	ldr	r4, [r2, #0]
 800eeac:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 800eeb0:	4422      	add	r2, r4
 800eeb2:	7c12      	ldrb	r2, [r2, #16]
 800eeb4:	4282      	cmp	r2, r0
 800eeb6:	d006      	beq.n	800eec6 <GetKeyByID+0x26>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800eeb8:	3301      	adds	r3, #1
 800eeba:	b2db      	uxtb	r3, r3
 800eebc:	2b09      	cmp	r3, #9
 800eebe:	d9f3      	bls.n	800eea8 <GetKeyByID+0x8>
        {
            *keyItem = &( SeNvm->KeyList[i] );
            return SECURE_ELEMENT_SUCCESS;
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800eec0:	2003      	movs	r0, #3
}
 800eec2:	bc10      	pop	{r4}
 800eec4:	4770      	bx	lr
            *keyItem = &( SeNvm->KeyList[i] );
 800eec6:	eb03 1c03 	add.w	ip, r3, r3, lsl #4
 800eeca:	f10c 0c10 	add.w	ip, ip, #16
 800eece:	4464      	add	r4, ip
 800eed0:	600c      	str	r4, [r1, #0]
            return SECURE_ELEMENT_SUCCESS;
 800eed2:	2000      	movs	r0, #0
 800eed4:	e7f5      	b.n	800eec2 <GetKeyByID+0x22>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800eed6:	2003      	movs	r0, #3
}
 800eed8:	4770      	bx	lr
 800eeda:	bf00      	nop
 800eedc:	20001174 	.word	0x20001174

0800eee0 <ComputeCmac>:
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                          uint32_t* cmac )
{
 800eee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eee4:	b0cc      	sub	sp, #304	; 0x130
 800eee6:	9e52      	ldr	r6, [sp, #328]	; 0x148
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800eee8:	b3a9      	cbz	r1, 800ef56 <ComputeCmac+0x76>
 800eeea:	4605      	mov	r5, r0
 800eeec:	4617      	mov	r7, r2
 800eeee:	461c      	mov	r4, r3
 800eef0:	4688      	mov	r8, r1
 800eef2:	b396      	cbz	r6, 800ef5a <ComputeCmac+0x7a>

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800eef4:	a802      	add	r0, sp, #8
 800eef6:	f7ff fbd5 	bl	800e6a4 <AES_CMAC_Init>

    Key_t*                keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800eefa:	a901      	add	r1, sp, #4
 800eefc:	4620      	mov	r0, r4
 800eefe:	f7ff ffcf 	bl	800eea0 <GetKeyByID>

    if( retval == SECURE_ELEMENT_SUCCESS )
 800ef02:	4604      	mov	r4, r0
 800ef04:	b118      	cbz	r0, 800ef0e <ComputeCmac+0x2e>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
}
 800ef06:	4620      	mov	r0, r4
 800ef08:	b04c      	add	sp, #304	; 0x130
 800ef0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800ef0e:	9901      	ldr	r1, [sp, #4]
 800ef10:	3101      	adds	r1, #1
 800ef12:	a802      	add	r0, sp, #8
 800ef14:	f7ff fbd5 	bl	800e6c2 <AES_CMAC_SetKey>
        if( micBxBuffer != NULL )
 800ef18:	b125      	cbz	r5, 800ef24 <ComputeCmac+0x44>
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, 16 );
 800ef1a:	2210      	movs	r2, #16
 800ef1c:	4629      	mov	r1, r5
 800ef1e:	a802      	add	r0, sp, #8
 800ef20:	f7ff fbd6 	bl	800e6d0 <AES_CMAC_Update>
        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800ef24:	463a      	mov	r2, r7
 800ef26:	4641      	mov	r1, r8
 800ef28:	a802      	add	r0, sp, #8
 800ef2a:	f7ff fbd1 	bl	800e6d0 <AES_CMAC_Update>
        AES_CMAC_Final( Cmac, aesCmacCtx );
 800ef2e:	a902      	add	r1, sp, #8
 800ef30:	a848      	add	r0, sp, #288	; 0x120
 800ef32:	f7ff fc3b 	bl	800e7ac <AES_CMAC_Final>
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800ef36:	f89d 2123 	ldrb.w	r2, [sp, #291]	; 0x123
 800ef3a:	f89d 3122 	ldrb.w	r3, [sp, #290]	; 0x122
 800ef3e:	041b      	lsls	r3, r3, #16
 800ef40:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800ef44:	f89d 2121 	ldrb.w	r2, [sp, #289]	; 0x121
 800ef48:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                              ( uint32_t ) Cmac[0] );
 800ef4c:	f89d 2120 	ldrb.w	r2, [sp, #288]	; 0x120
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800ef50:	4313      	orrs	r3, r2
 800ef52:	6033      	str	r3, [r6, #0]
 800ef54:	e7d7      	b.n	800ef06 <ComputeCmac+0x26>
        return SECURE_ELEMENT_ERROR_NPE;
 800ef56:	2402      	movs	r4, #2
 800ef58:	e7d5      	b.n	800ef06 <ComputeCmac+0x26>
 800ef5a:	2402      	movs	r4, #2
 800ef5c:	e7d3      	b.n	800ef06 <ComputeCmac+0x26>
	...

0800ef60 <SecureElementGetKeyByID>:
/* ST_WORKAROUND_BEGIN: Add KMS specific functions */
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800ef60:	2300      	movs	r3, #0
 800ef62:	2b09      	cmp	r3, #9
 800ef64:	d817      	bhi.n	800ef96 <SecureElementGetKeyByID+0x36>
{
 800ef66:	b410      	push	{r4}
    {
        if (SeNvm->KeyList[i].KeyID == keyID)
 800ef68:	4a0c      	ldr	r2, [pc, #48]	; (800ef9c <SecureElementGetKeyByID+0x3c>)
 800ef6a:	6814      	ldr	r4, [r2, #0]
 800ef6c:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 800ef70:	4422      	add	r2, r4
 800ef72:	7c12      	ldrb	r2, [r2, #16]
 800ef74:	4282      	cmp	r2, r0
 800ef76:	d006      	beq.n	800ef86 <SecureElementGetKeyByID+0x26>
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800ef78:	3301      	adds	r3, #1
 800ef7a:	b2db      	uxtb	r3, r3
 800ef7c:	2b09      	cmp	r3, #9
 800ef7e:	d9f3      	bls.n	800ef68 <SecureElementGetKeyByID+0x8>
            *keyItem = &(SeNvm->KeyList[i]);
            return SECURE_ELEMENT_SUCCESS;
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800ef80:	2003      	movs	r0, #3
        return SECURE_ELEMENT_ERROR;
    }
    return SECURE_ELEMENT_SUCCESS;

#endif /* LORAWAN_KMS == 1 */
}
 800ef82:	bc10      	pop	{r4}
 800ef84:	4770      	bx	lr
            *keyItem = &(SeNvm->KeyList[i]);
 800ef86:	eb03 1c03 	add.w	ip, r3, r3, lsl #4
 800ef8a:	f10c 0c10 	add.w	ip, ip, #16
 800ef8e:	4464      	add	r4, ip
 800ef90:	600c      	str	r4, [r1, #0]
            return SECURE_ELEMENT_SUCCESS;
 800ef92:	2000      	movs	r0, #0
 800ef94:	e7f5      	b.n	800ef82 <SecureElementGetKeyByID+0x22>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800ef96:	2003      	movs	r0, #3
}
 800ef98:	4770      	bx	lr
 800ef9a:	bf00      	nop
 800ef9c:	20001174 	.word	0x20001174

0800efa0 <PrintKey>:
{
 800efa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efa4:	b095      	sub	sp, #84	; 0x54
 800efa6:	4604      	mov	r4, r0
    retval = SecureElementGetKeyByID(key, &keyItem);
 800efa8:	a913      	add	r1, sp, #76	; 0x4c
 800efaa:	f7ff ffd9 	bl	800ef60 <SecureElementGetKeyByID>
    if (retval == SECURE_ELEMENT_SUCCESS)
 800efae:	2800      	cmp	r0, #0
 800efb0:	d150      	bne.n	800f054 <PrintKey+0xb4>
        if (key == APP_KEY)
 800efb2:	2c04      	cmp	r4, #4
 800efb4:	d806      	bhi.n	800efc4 <PrintKey+0x24>
 800efb6:	2c04      	cmp	r4, #4
 800efb8:	d815      	bhi.n	800efe6 <PrintKey+0x46>
 800efba:	e8df f004 	tbb	[pc, r4]
 800efbe:	4e0e      	.short	0x4e0e
 800efc0:	555c      	.short	0x555c
 800efc2:	63          	.byte	0x63
 800efc3:	00          	.byte	0x00
 800efc4:	2c82      	cmp	r4, #130	; 0x82
 800efc6:	d80e      	bhi.n	800efe6 <PrintKey+0x46>
 800efc8:	2c7f      	cmp	r4, #127	; 0x7f
 800efca:	d30c      	bcc.n	800efe6 <PrintKey+0x46>
 800efcc:	3c7f      	subs	r4, #127	; 0x7f
 800efce:	2c03      	cmp	r4, #3
 800efd0:	d809      	bhi.n	800efe6 <PrintKey+0x46>
 800efd2:	e8df f004 	tbb	[pc, r4]
 800efd6:	655e      	.short	0x655e
 800efd8:	736c      	.short	0x736c
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppKey:      ");
 800efda:	4b3c      	ldr	r3, [pc, #240]	; (800f0cc <PrintKey+0x12c>)
 800efdc:	2200      	movs	r2, #0
 800efde:	4611      	mov	r1, r2
 800efe0:	2002      	movs	r0, #2
 800efe2:	f002 fc13 	bl	801180c <UTIL_ADV_TRACE_COND_FSend>
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800efe6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800efe8:	785a      	ldrb	r2, [r3, #1]
 800efea:	9210      	str	r2, [sp, #64]	; 0x40
 800efec:	7899      	ldrb	r1, [r3, #2]
 800efee:	9111      	str	r1, [sp, #68]	; 0x44
 800eff0:	78da      	ldrb	r2, [r3, #3]
 800eff2:	7919      	ldrb	r1, [r3, #4]
 800eff4:	7958      	ldrb	r0, [r3, #5]
 800eff6:	799c      	ldrb	r4, [r3, #6]
 800eff8:	79dd      	ldrb	r5, [r3, #7]
 800effa:	7a1e      	ldrb	r6, [r3, #8]
 800effc:	7a5f      	ldrb	r7, [r3, #9]
 800effe:	f893 c00a 	ldrb.w	ip, [r3, #10]
 800f002:	f893 e00b 	ldrb.w	lr, [r3, #11]
 800f006:	f893 800c 	ldrb.w	r8, [r3, #12]
 800f00a:	f893 900d 	ldrb.w	r9, [r3, #13]
 800f00e:	f893 a00e 	ldrb.w	sl, [r3, #14]
 800f012:	f893 b00f 	ldrb.w	fp, [r3, #15]
 800f016:	7c1b      	ldrb	r3, [r3, #16]
 800f018:	930f      	str	r3, [sp, #60]	; 0x3c
 800f01a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800f01e:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800f022:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800f026:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 800f02a:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
 800f02e:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 800f032:	9708      	str	r7, [sp, #32]
 800f034:	9607      	str	r6, [sp, #28]
 800f036:	9506      	str	r5, [sp, #24]
 800f038:	9405      	str	r4, [sp, #20]
 800f03a:	9004      	str	r0, [sp, #16]
 800f03c:	9103      	str	r1, [sp, #12]
 800f03e:	9202      	str	r2, [sp, #8]
 800f040:	9911      	ldr	r1, [sp, #68]	; 0x44
 800f042:	9101      	str	r1, [sp, #4]
 800f044:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f046:	9200      	str	r2, [sp, #0]
 800f048:	4b21      	ldr	r3, [pc, #132]	; (800f0d0 <PrintKey+0x130>)
 800f04a:	2200      	movs	r2, #0
 800f04c:	4611      	mov	r1, r2
 800f04e:	2002      	movs	r0, #2
 800f050:	f002 fbdc 	bl	801180c <UTIL_ADV_TRACE_COND_FSend>
}
 800f054:	b015      	add	sp, #84	; 0x54
 800f056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkKey:      ");
 800f05a:	4b1e      	ldr	r3, [pc, #120]	; (800f0d4 <PrintKey+0x134>)
 800f05c:	2200      	movs	r2, #0
 800f05e:	4611      	mov	r1, r2
 800f060:	2002      	movs	r0, #2
 800f062:	f002 fbd3 	bl	801180c <UTIL_ADV_TRACE_COND_FSend>
 800f066:	e7be      	b.n	800efe6 <PrintKey+0x46>
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppSKey:     ");
 800f068:	4b1b      	ldr	r3, [pc, #108]	; (800f0d8 <PrintKey+0x138>)
 800f06a:	2200      	movs	r2, #0
 800f06c:	4611      	mov	r1, r2
 800f06e:	2002      	movs	r0, #2
 800f070:	f002 fbcc 	bl	801180c <UTIL_ADV_TRACE_COND_FSend>
 800f074:	e7b7      	b.n	800efe6 <PrintKey+0x46>
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkSKey:     ");
 800f076:	4b19      	ldr	r3, [pc, #100]	; (800f0dc <PrintKey+0x13c>)
 800f078:	2200      	movs	r2, #0
 800f07a:	4611      	mov	r1, r2
 800f07c:	2002      	movs	r0, #2
 800f07e:	f002 fbc5 	bl	801180c <UTIL_ADV_TRACE_COND_FSend>
 800f082:	e7b0      	b.n	800efe6 <PrintKey+0x46>
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCRootKey:   ");
 800f084:	4b16      	ldr	r3, [pc, #88]	; (800f0e0 <PrintKey+0x140>)
 800f086:	2200      	movs	r2, #0
 800f088:	4611      	mov	r1, r2
 800f08a:	2002      	movs	r0, #2
 800f08c:	f002 fbbe 	bl	801180c <UTIL_ADV_TRACE_COND_FSend>
 800f090:	e7a9      	b.n	800efe6 <PrintKey+0x46>
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKEKey:     ");
 800f092:	4b14      	ldr	r3, [pc, #80]	; (800f0e4 <PrintKey+0x144>)
 800f094:	2200      	movs	r2, #0
 800f096:	4611      	mov	r1, r2
 800f098:	2002      	movs	r0, #2
 800f09a:	f002 fbb7 	bl	801180c <UTIL_ADV_TRACE_COND_FSend>
 800f09e:	e7a2      	b.n	800efe6 <PrintKey+0x46>
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKey_0:     ");
 800f0a0:	4b11      	ldr	r3, [pc, #68]	; (800f0e8 <PrintKey+0x148>)
 800f0a2:	2200      	movs	r2, #0
 800f0a4:	4611      	mov	r1, r2
 800f0a6:	2002      	movs	r0, #2
 800f0a8:	f002 fbb0 	bl	801180c <UTIL_ADV_TRACE_COND_FSend>
 800f0ac:	e79b      	b.n	800efe6 <PrintKey+0x46>
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCAppSKey_0: ");
 800f0ae:	4b0f      	ldr	r3, [pc, #60]	; (800f0ec <PrintKey+0x14c>)
 800f0b0:	2200      	movs	r2, #0
 800f0b2:	4611      	mov	r1, r2
 800f0b4:	2002      	movs	r0, #2
 800f0b6:	f002 fba9 	bl	801180c <UTIL_ADV_TRACE_COND_FSend>
 800f0ba:	e794      	b.n	800efe6 <PrintKey+0x46>
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCNwkSKey_0: ");
 800f0bc:	4b0c      	ldr	r3, [pc, #48]	; (800f0f0 <PrintKey+0x150>)
 800f0be:	2200      	movs	r2, #0
 800f0c0:	4611      	mov	r1, r2
 800f0c2:	2002      	movs	r0, #2
 800f0c4:	f002 fba2 	bl	801180c <UTIL_ADV_TRACE_COND_FSend>
 800f0c8:	e78d      	b.n	800efe6 <PrintKey+0x46>
 800f0ca:	bf00      	nop
 800f0cc:	0801793c 	.word	0x0801793c
 800f0d0:	08017a14 	.word	0x08017a14
 800f0d4:	08017954 	.word	0x08017954
 800f0d8:	0801796c 	.word	0x0801796c
 800f0dc:	08017984 	.word	0x08017984
 800f0e0:	0801799c 	.word	0x0801799c
 800f0e4:	080179b4 	.word	0x080179b4
 800f0e8:	080179cc 	.word	0x080179cc
 800f0ec:	080179e4 	.word	0x080179e4
 800f0f0:	080179fc 	.word	0x080179fc

0800f0f4 <SecureElementInit>:
{
 800f0f4:	b570      	push	{r4, r5, r6, lr}
 800f0f6:	b0b0      	sub	sp, #192	; 0xc0
 800f0f8:	4605      	mov	r5, r0
 800f0fa:	460e      	mov	r6, r1
    SecureElementNvmData_t seNvmInit =
 800f0fc:	466c      	mov	r4, sp
 800f0fe:	22c0      	movs	r2, #192	; 0xc0
 800f100:	2100      	movs	r1, #0
 800f102:	4620      	mov	r0, r4
 800f104:	f004 f8c5 	bl	8013292 <memset>
 800f108:	4b3c      	ldr	r3, [pc, #240]	; (800f1fc <SecureElementInit+0x108>)
 800f10a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f10e:	e884 0003 	stmia.w	r4, {r0, r1}
 800f112:	4a3b      	ldr	r2, [pc, #236]	; (800f200 <SecureElementInit+0x10c>)
 800f114:	ab02      	add	r3, sp, #8
 800f116:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f11a:	e883 0003 	stmia.w	r3, {r0, r1}
 800f11e:	4c39      	ldr	r4, [pc, #228]	; (800f204 <SecureElementInit+0x110>)
 800f120:	46a4      	mov	ip, r4
 800f122:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f126:	f8cd 0011 	str.w	r0, [sp, #17]
 800f12a:	f8cd 1015 	str.w	r1, [sp, #21]
 800f12e:	f8cd 2019 	str.w	r2, [sp, #25]
 800f132:	f8cd 301d 	str.w	r3, [sp, #29]
 800f136:	2301      	movs	r3, #1
 800f138:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 800f13c:	46a4      	mov	ip, r4
 800f13e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f142:	f8cd 0022 	str.w	r0, [sp, #34]	; 0x22
 800f146:	f8cd 1026 	str.w	r1, [sp, #38]	; 0x26
 800f14a:	f8cd 202a 	str.w	r2, [sp, #42]	; 0x2a
 800f14e:	f8cd 302e 	str.w	r3, [sp, #46]	; 0x2e
 800f152:	2302      	movs	r3, #2
 800f154:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
 800f158:	46a4      	mov	ip, r4
 800f15a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f15e:	f8cd 0033 	str.w	r0, [sp, #51]	; 0x33
 800f162:	f8cd 1037 	str.w	r1, [sp, #55]	; 0x37
 800f166:	f8cd 203b 	str.w	r2, [sp, #59]	; 0x3b
 800f16a:	f8cd 303f 	str.w	r3, [sp, #63]	; 0x3f
 800f16e:	2303      	movs	r3, #3
 800f170:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
 800f174:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 800f178:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800f17c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 800f180:	2304      	movs	r3, #4
 800f182:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 800f186:	237f      	movs	r3, #127	; 0x7f
 800f188:	f88d 3065 	strb.w	r3, [sp, #101]	; 0x65
 800f18c:	2380      	movs	r3, #128	; 0x80
 800f18e:	f88d 3076 	strb.w	r3, [sp, #118]	; 0x76
 800f192:	2381      	movs	r3, #129	; 0x81
 800f194:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
 800f198:	2382      	movs	r3, #130	; 0x82
 800f19a:	f88d 3098 	strb.w	r3, [sp, #152]	; 0x98
 800f19e:	2383      	movs	r3, #131	; 0x83
 800f1a0:	f88d 30a9 	strb.w	r3, [sp, #169]	; 0xa9
    if( nvm == NULL )
 800f1a4:	b32d      	cbz	r5, 800f1f2 <SecureElementInit+0xfe>
    SeNvm = nvm;
 800f1a6:	4b18      	ldr	r3, [pc, #96]	; (800f208 <SecureElementInit+0x114>)
 800f1a8:	601d      	str	r5, [r3, #0]
    memcpy1( ( uint8_t* )SeNvm, ( uint8_t* )&seNvmInit, sizeof( seNvmInit ) );
 800f1aa:	22c0      	movs	r2, #192	; 0xc0
 800f1ac:	4669      	mov	r1, sp
 800f1ae:	4628      	mov	r0, r5
 800f1b0:	f000 f997 	bl	800f4e2 <memcpy1>
    MW_LOG(TS_OFF, VLEVEL_M, "###### OTAA ######\r\n");
 800f1b4:	4b15      	ldr	r3, [pc, #84]	; (800f20c <SecureElementInit+0x118>)
 800f1b6:	2200      	movs	r2, #0
 800f1b8:	4611      	mov	r1, r2
 800f1ba:	2002      	movs	r0, #2
 800f1bc:	f002 fb26 	bl	801180c <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_KEY);
 800f1c0:	2000      	movs	r0, #0
 800f1c2:	f7ff feed 	bl	800efa0 <PrintKey>
    PrintKey(NWK_KEY);
 800f1c6:	2001      	movs	r0, #1
 800f1c8:	f7ff feea 	bl	800efa0 <PrintKey>
    MW_LOG(TS_OFF, VLEVEL_M, "###### ABP  ######\r\n");
 800f1cc:	4b10      	ldr	r3, [pc, #64]	; (800f210 <SecureElementInit+0x11c>)
 800f1ce:	2200      	movs	r2, #0
 800f1d0:	4611      	mov	r1, r2
 800f1d2:	2002      	movs	r0, #2
 800f1d4:	f002 fb1a 	bl	801180c <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_S_KEY);
 800f1d8:	2003      	movs	r0, #3
 800f1da:	f7ff fee1 	bl	800efa0 <PrintKey>
    PrintKey(NWK_S_KEY);
 800f1de:	2002      	movs	r0, #2
 800f1e0:	f7ff fede 	bl	800efa0 <PrintKey>
    if (seGetUniqueId != NULL)
 800f1e4:	b13e      	cbz	r6, 800f1f6 <SecureElementInit+0x102>
        seGetUniqueId(SeNvm->DevEui);
 800f1e6:	4b08      	ldr	r3, [pc, #32]	; (800f208 <SecureElementInit+0x114>)
 800f1e8:	6818      	ldr	r0, [r3, #0]
 800f1ea:	47b0      	blx	r6
    return SECURE_ELEMENT_SUCCESS;
 800f1ec:	2000      	movs	r0, #0
}
 800f1ee:	b030      	add	sp, #192	; 0xc0
 800f1f0:	bd70      	pop	{r4, r5, r6, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800f1f2:	2002      	movs	r0, #2
 800f1f4:	e7fb      	b.n	800f1ee <SecureElementInit+0xfa>
    return SECURE_ELEMENT_SUCCESS;
 800f1f6:	2000      	movs	r0, #0
 800f1f8:	e7f9      	b.n	800f1ee <SecureElementInit+0xfa>
 800f1fa:	bf00      	nop
 800f1fc:	08016ed0 	.word	0x08016ed0
 800f200:	08017a98 	.word	0x08017a98
 800f204:	08017aa4 	.word	0x08017aa4
 800f208:	20001174 	.word	0x20001174
 800f20c:	08017a68 	.word	0x08017a68
 800f210:	08017a80 	.word	0x08017a80

0800f214 <SecureElementComputeAesCmac>:
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size,
                                                   KeyIdentifier_t keyID, uint32_t* cmac )
{
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 800f214:	2b7e      	cmp	r3, #126	; 0x7e
 800f216:	d80a      	bhi.n	800f22e <SecureElementComputeAesCmac+0x1a>
{
 800f218:	b500      	push	{lr}
 800f21a:	b083      	sub	sp, #12
    {
        // Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800f21c:	f8dd c010 	ldr.w	ip, [sp, #16]
 800f220:	f8cd c000 	str.w	ip, [sp]
 800f224:	f7ff fe5c 	bl	800eee0 <ComputeCmac>
}
 800f228:	b003      	add	sp, #12
 800f22a:	f85d fb04 	ldr.w	pc, [sp], #4
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800f22e:	2003      	movs	r0, #3
}
 800f230:	4770      	bx	lr

0800f232 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t* buffer, uint16_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
    if( buffer == NULL )
 800f232:	b190      	cbz	r0, 800f25a <SecureElementVerifyAesCmac+0x28>
{
 800f234:	b510      	push	{r4, lr}
 800f236:	b084      	sub	sp, #16
 800f238:	468c      	mov	ip, r1
 800f23a:	4614      	mov	r4, r2
 800f23c:	4601      	mov	r1, r0
        return SECURE_ELEMENT_ERROR_NPE;
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint32_t              compCmac = 0;
 800f23e:	2000      	movs	r0, #0
 800f240:	9003      	str	r0, [sp, #12]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800f242:	aa03      	add	r2, sp, #12
 800f244:	9200      	str	r2, [sp, #0]
 800f246:	4662      	mov	r2, ip
 800f248:	f7ff fe4a 	bl	800eee0 <ComputeCmac>
    if( retval != SECURE_ELEMENT_SUCCESS )
 800f24c:	b918      	cbnz	r0, 800f256 <SecureElementVerifyAesCmac+0x24>
    {
        return retval;
    }

    if( expectedCmac != compCmac )
 800f24e:	9b03      	ldr	r3, [sp, #12]
 800f250:	42a3      	cmp	r3, r4
 800f252:	d000      	beq.n	800f256 <SecureElementVerifyAesCmac+0x24>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800f254:	2001      	movs	r0, #1
    }

#endif /* LORAWAN_KMS */

    return retval;
}
 800f256:	b004      	add	sp, #16
 800f258:	bd10      	pop	{r4, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800f25a:	2002      	movs	r0, #2
}
 800f25c:	4770      	bx	lr

0800f25e <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                               uint8_t* encBuffer )
{
 800f25e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f262:	b0be      	sub	sp, #248	; 0xf8
    if( buffer == NULL || encBuffer == NULL )
 800f264:	b350      	cbz	r0, 800f2bc <SecureElementAesEncrypt+0x5e>
 800f266:	460c      	mov	r4, r1
 800f268:	4615      	mov	r5, r2
 800f26a:	461e      	mov	r6, r3
 800f26c:	4607      	mov	r7, r0
 800f26e:	b343      	cbz	r3, 800f2c2 <SecureElementAesEncrypt+0x64>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 800f270:	f011 0f0f 	tst.w	r1, #15
 800f274:	d128      	bne.n	800f2c8 <SecureElementAesEncrypt+0x6a>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800f276:	22f0      	movs	r2, #240	; 0xf0
 800f278:	2100      	movs	r1, #0
 800f27a:	a801      	add	r0, sp, #4
 800f27c:	f000 f949 	bl	800f512 <memset1>

    Key_t*                pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800f280:	4669      	mov	r1, sp
 800f282:	4628      	mov	r0, r5
 800f284:	f7ff fe0c 	bl	800eea0 <GetKeyByID>

    if( retval == SECURE_ELEMENT_SUCCESS )
 800f288:	4680      	mov	r8, r0
 800f28a:	b118      	cbz	r0, 800f294 <SecureElementAesEncrypt+0x36>
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
}
 800f28c:	4640      	mov	r0, r8
 800f28e:	b03e      	add	sp, #248	; 0xf8
 800f290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lorawan_aes_set_key(pItem->KeyValue, 16, &aesContext);
 800f294:	aa01      	add	r2, sp, #4
 800f296:	2110      	movs	r1, #16
 800f298:	9800      	ldr	r0, [sp, #0]
 800f29a:	3001      	adds	r0, #1
 800f29c:	f7ff fd52 	bl	800ed44 <lorawan_aes_set_key>
        uint8_t block = 0;
 800f2a0:	4645      	mov	r5, r8
        while( size != 0 )
 800f2a2:	e008      	b.n	800f2b6 <SecureElementAesEncrypt+0x58>
            lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 800f2a4:	aa01      	add	r2, sp, #4
 800f2a6:	1971      	adds	r1, r6, r5
 800f2a8:	1978      	adds	r0, r7, r5
 800f2aa:	f7ff fdcf 	bl	800ee4c <lorawan_aes_encrypt>
            block = block + 16;
 800f2ae:	3510      	adds	r5, #16
 800f2b0:	b2ed      	uxtb	r5, r5
            size  = size - 16;
 800f2b2:	3c10      	subs	r4, #16
 800f2b4:	b2a4      	uxth	r4, r4
        while( size != 0 )
 800f2b6:	2c00      	cmp	r4, #0
 800f2b8:	d1f4      	bne.n	800f2a4 <SecureElementAesEncrypt+0x46>
 800f2ba:	e7e7      	b.n	800f28c <SecureElementAesEncrypt+0x2e>
        return SECURE_ELEMENT_ERROR_NPE;
 800f2bc:	f04f 0802 	mov.w	r8, #2
 800f2c0:	e7e4      	b.n	800f28c <SecureElementAesEncrypt+0x2e>
 800f2c2:	f04f 0802 	mov.w	r8, #2
 800f2c6:	e7e1      	b.n	800f28c <SecureElementAesEncrypt+0x2e>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800f2c8:	f04f 0805 	mov.w	r8, #5
 800f2cc:	e7de      	b.n	800f28c <SecureElementAesEncrypt+0x2e>
	...

0800f2d0 <SecureElementSetKey>:
{
 800f2d0:	b530      	push	{r4, r5, lr}
 800f2d2:	b085      	sub	sp, #20
    if( key == NULL )
 800f2d4:	2900      	cmp	r1, #0
 800f2d6:	d038      	beq.n	800f34a <SecureElementSetKey+0x7a>
 800f2d8:	468c      	mov	ip, r1
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800f2da:	2300      	movs	r3, #0
 800f2dc:	2b09      	cmp	r3, #9
 800f2de:	d830      	bhi.n	800f342 <SecureElementSetKey+0x72>
        if( SeNvm->KeyList[i].KeyID == keyID )
 800f2e0:	4a1b      	ldr	r2, [pc, #108]	; (800f350 <SecureElementSetKey+0x80>)
 800f2e2:	6811      	ldr	r1, [r2, #0]
 800f2e4:	461c      	mov	r4, r3
 800f2e6:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 800f2ea:	440a      	add	r2, r1
 800f2ec:	7c12      	ldrb	r2, [r2, #16]
 800f2ee:	4282      	cmp	r2, r0
 800f2f0:	d002      	beq.n	800f2f8 <SecureElementSetKey+0x28>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800f2f2:	3301      	adds	r3, #1
 800f2f4:	b2db      	uxtb	r3, r3
 800f2f6:	e7f1      	b.n	800f2dc <SecureElementSetKey+0xc>
            if ( keyID == MC_KEY_0 )
 800f2f8:	2880      	cmp	r0, #128	; 0x80
 800f2fa:	d00a      	beq.n	800f312 <SecureElementSetKey+0x42>
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800f2fc:	eb03 1403 	add.w	r4, r3, r3, lsl #4
 800f300:	3410      	adds	r4, #16
 800f302:	1908      	adds	r0, r1, r4
 800f304:	2210      	movs	r2, #16
 800f306:	4661      	mov	r1, ip
 800f308:	3001      	adds	r0, #1
 800f30a:	f000 f8ea 	bl	800f4e2 <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800f30e:	2500      	movs	r5, #0
 800f310:	e018      	b.n	800f344 <SecureElementSetKey+0x74>
                uint8_t               decryptedKey[16] = { 0 };
 800f312:	2300      	movs	r3, #0
 800f314:	9300      	str	r3, [sp, #0]
 800f316:	9301      	str	r3, [sp, #4]
 800f318:	9302      	str	r3, [sp, #8]
 800f31a:	9303      	str	r3, [sp, #12]
                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 800f31c:	466b      	mov	r3, sp
 800f31e:	227f      	movs	r2, #127	; 0x7f
 800f320:	2110      	movs	r1, #16
 800f322:	4660      	mov	r0, ip
 800f324:	f7ff ff9b 	bl	800f25e <SecureElementAesEncrypt>
 800f328:	4605      	mov	r5, r0
                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800f32a:	4b09      	ldr	r3, [pc, #36]	; (800f350 <SecureElementSetKey+0x80>)
 800f32c:	6818      	ldr	r0, [r3, #0]
 800f32e:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 800f332:	3410      	adds	r4, #16
 800f334:	4420      	add	r0, r4
 800f336:	2210      	movs	r2, #16
 800f338:	4669      	mov	r1, sp
 800f33a:	3001      	adds	r0, #1
 800f33c:	f000 f8d1 	bl	800f4e2 <memcpy1>
                return retval;
 800f340:	e000      	b.n	800f344 <SecureElementSetKey+0x74>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800f342:	2503      	movs	r5, #3
}
 800f344:	4628      	mov	r0, r5
 800f346:	b005      	add	sp, #20
 800f348:	bd30      	pop	{r4, r5, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800f34a:	2502      	movs	r5, #2
 800f34c:	e7fa      	b.n	800f344 <SecureElementSetKey+0x74>
 800f34e:	bf00      	nop
 800f350:	20001174 	.word	0x20001174

0800f354 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t* input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
    if( input == NULL )
 800f354:	b1d0      	cbz	r0, 800f38c <SecureElementDeriveAndStoreKey+0x38>
{
 800f356:	b510      	push	{r4, lr}
 800f358:	b084      	sub	sp, #16
 800f35a:	4614      	mov	r4, r2
 800f35c:	4684      	mov	ip, r0
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;

    // In case of MC_KE_KEY, only McRootKey can be used as root key
    if( targetKeyID == MC_KE_KEY )
 800f35e:	2a7f      	cmp	r2, #127	; 0x7f
 800f360:	d101      	bne.n	800f366 <SecureElementDeriveAndStoreKey+0x12>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800f362:	2904      	cmp	r1, #4
 800f364:	d114      	bne.n	800f390 <SecureElementDeriveAndStoreKey+0x3c>
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
        }
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t key[16] = { 0 };
 800f366:	2300      	movs	r3, #0
 800f368:	9300      	str	r3, [sp, #0]
 800f36a:	9301      	str	r3, [sp, #4]
 800f36c:	9302      	str	r3, [sp, #8]
 800f36e:	9303      	str	r3, [sp, #12]
    // Derive key
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 800f370:	466b      	mov	r3, sp
 800f372:	460a      	mov	r2, r1
 800f374:	2110      	movs	r1, #16
 800f376:	4660      	mov	r0, ip
 800f378:	f7ff ff71 	bl	800f25e <SecureElementAesEncrypt>
    if( retval != SECURE_ELEMENT_SUCCESS )
 800f37c:	b108      	cbz	r0, 800f382 <SecureElementDeriveAndStoreKey+0x2e>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800f37e:	b004      	add	sp, #16
 800f380:	bd10      	pop	{r4, pc}
    retval = SecureElementSetKey( targetKeyID, key );
 800f382:	4669      	mov	r1, sp
 800f384:	4620      	mov	r0, r4
 800f386:	f7ff ffa3 	bl	800f2d0 <SecureElementSetKey>
    if( retval != SECURE_ELEMENT_SUCCESS )
 800f38a:	e7f8      	b.n	800f37e <SecureElementDeriveAndStoreKey+0x2a>
        return SECURE_ELEMENT_ERROR_NPE;
 800f38c:	2002      	movs	r0, #2
}
 800f38e:	4770      	bx	lr
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800f390:	2003      	movs	r0, #3
 800f392:	e7f4      	b.n	800f37e <SecureElementDeriveAndStoreKey+0x2a>

0800f394 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEui,
                                                      uint16_t devNonce, uint8_t* encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t* decJoinAccept,
                                                      uint8_t* versionMinor )
{
 800f394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f398:	f89d 4018 	ldrb.w	r4, [sp, #24]
 800f39c:	9d07      	ldr	r5, [sp, #28]
 800f39e:	9e08      	ldr	r6, [sp, #32]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800f3a0:	b37b      	cbz	r3, 800f402 <SecureElementProcessJoinAccept+0x6e>
 800f3a2:	4698      	mov	r8, r3
 800f3a4:	b37d      	cbz	r5, 800f406 <SecureElementProcessJoinAccept+0x72>
 800f3a6:	b386      	cbz	r6, 800f40a <SecureElementProcessJoinAccept+0x76>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    // Check that frame size isn't bigger than a JoinAccept with CFList size
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800f3a8:	2c21      	cmp	r4, #33	; 0x21
 800f3aa:	d830      	bhi.n	800f40e <SecureElementProcessJoinAccept+0x7a>
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 800f3ac:	b2a7      	uxth	r7, r4
 800f3ae:	463a      	mov	r2, r7
 800f3b0:	4619      	mov	r1, r3
 800f3b2:	4628      	mov	r0, r5
 800f3b4:	f000 f895 	bl	800f4e2 <memcpy1>

    // Decrypt JoinAccept, skip MHDR
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800f3b8:	1e79      	subs	r1, r7, #1
 800f3ba:	1c6b      	adds	r3, r5, #1
 800f3bc:	2201      	movs	r2, #1
 800f3be:	b289      	uxth	r1, r1
 800f3c0:	eb08 0002 	add.w	r0, r8, r2
 800f3c4:	f7ff ff4b 	bl	800f25e <SecureElementAesEncrypt>
 800f3c8:	bb20      	cbnz	r0, 800f414 <SecureElementProcessJoinAccept+0x80>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800f3ca:	7aeb      	ldrb	r3, [r5, #11]
 800f3cc:	09db      	lsrs	r3, r3, #7
 800f3ce:	7033      	strb	r3, [r6, #0]

    uint32_t mic = 0;

    mic = ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0 );
 800f3d0:	442c      	add	r4, r5
 800f3d2:	f814 2c04 	ldrb.w	r2, [r4, #-4]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8 );
 800f3d6:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 800f3da:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
 800f3de:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 800f3e2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 800f3e6:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 800f3ea:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
    //  - Header buffer to be used for MIC computation
    //        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
    //        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]

    // Verify mic
    if( *versionMinor == 0 )
 800f3ee:	b99b      	cbnz	r3, 800f418 <SecureElementProcessJoinAccept+0x84>
    {
        // For LoRaWAN 1.0.x
        //   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
        //   CFListType)
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800f3f0:	1f39      	subs	r1, r7, #4
 800f3f2:	2301      	movs	r3, #1
 800f3f4:	b289      	uxth	r1, r1
 800f3f6:	4628      	mov	r0, r5
 800f3f8:	f7ff ff1b 	bl	800f232 <SecureElementVerifyAesCmac>
 800f3fc:	b140      	cbz	r0, 800f410 <SecureElementProcessJoinAccept+0x7c>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 800f3fe:	2001      	movs	r0, #1
 800f400:	e006      	b.n	800f410 <SecureElementProcessJoinAccept+0x7c>
        return SECURE_ELEMENT_ERROR_NPE;
 800f402:	2002      	movs	r0, #2
 800f404:	e004      	b.n	800f410 <SecureElementProcessJoinAccept+0x7c>
 800f406:	2002      	movs	r0, #2
 800f408:	e002      	b.n	800f410 <SecureElementProcessJoinAccept+0x7c>
 800f40a:	2002      	movs	r0, #2
 800f40c:	e000      	b.n	800f410 <SecureElementProcessJoinAccept+0x7c>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800f40e:	2005      	movs	r0, #5
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
    }

    return SECURE_ELEMENT_SUCCESS;
}
 800f410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800f414:	2007      	movs	r0, #7
 800f416:	e7fb      	b.n	800f410 <SecureElementProcessJoinAccept+0x7c>
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800f418:	2004      	movs	r0, #4
 800f41a:	e7f9      	b.n	800f410 <SecureElementProcessJoinAccept+0x7c>

0800f41c <SecureElementRandomNumber>:

SecureElementStatus_t SecureElementRandomNumber( uint32_t* randomNum )
{
    if( randomNum == NULL )
 800f41c:	b138      	cbz	r0, 800f42e <SecureElementRandomNumber+0x12>
{
 800f41e:	b510      	push	{r4, lr}
 800f420:	4604      	mov	r4, r0
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
    *randomNum = Radio.Random();
 800f422:	4b04      	ldr	r3, [pc, #16]	; (800f434 <SecureElementRandomNumber+0x18>)
 800f424:	695b      	ldr	r3, [r3, #20]
 800f426:	4798      	blx	r3
 800f428:	6020      	str	r0, [r4, #0]
    return SECURE_ELEMENT_SUCCESS;
 800f42a:	2000      	movs	r0, #0
}
 800f42c:	bd10      	pop	{r4, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800f42e:	2002      	movs	r0, #2
}
 800f430:	4770      	bx	lr
 800f432:	bf00      	nop
 800f434:	08017b28 	.word	0x08017b28

0800f438 <SecureElementSetDevEui>:

SecureElementStatus_t SecureElementSetDevEui( uint8_t* devEui )
{
    if( devEui == NULL )
 800f438:	b140      	cbz	r0, 800f44c <SecureElementSetDevEui+0x14>
{
 800f43a:	b508      	push	{r3, lr}
 800f43c:	4601      	mov	r1, r0
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
    memcpy1( SeNvm->DevEui, devEui, SE_EUI_SIZE );
 800f43e:	2208      	movs	r2, #8
 800f440:	4b03      	ldr	r3, [pc, #12]	; (800f450 <SecureElementSetDevEui+0x18>)
 800f442:	6818      	ldr	r0, [r3, #0]
 800f444:	f000 f84d 	bl	800f4e2 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800f448:	2000      	movs	r0, #0
}
 800f44a:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800f44c:	2002      	movs	r0, #2
}
 800f44e:	4770      	bx	lr
 800f450:	20001174 	.word	0x20001174

0800f454 <SecureElementGetDevEui>:

uint8_t* SecureElementGetDevEui( void )
{
    return SeNvm->DevEui;
}
 800f454:	4b01      	ldr	r3, [pc, #4]	; (800f45c <SecureElementGetDevEui+0x8>)
 800f456:	6818      	ldr	r0, [r3, #0]
 800f458:	4770      	bx	lr
 800f45a:	bf00      	nop
 800f45c:	20001174 	.word	0x20001174

0800f460 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t* joinEui )
{
    if( joinEui == NULL )
 800f460:	b148      	cbz	r0, 800f476 <SecureElementSetJoinEui+0x16>
{
 800f462:	b508      	push	{r3, lr}
 800f464:	4601      	mov	r1, r0
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
    memcpy1( SeNvm->JoinEui, joinEui, SE_EUI_SIZE );
 800f466:	4b05      	ldr	r3, [pc, #20]	; (800f47c <SecureElementSetJoinEui+0x1c>)
 800f468:	6818      	ldr	r0, [r3, #0]
 800f46a:	2208      	movs	r2, #8
 800f46c:	4410      	add	r0, r2
 800f46e:	f000 f838 	bl	800f4e2 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800f472:	2000      	movs	r0, #0
}
 800f474:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800f476:	2002      	movs	r0, #2
}
 800f478:	4770      	bx	lr
 800f47a:	bf00      	nop
 800f47c:	20001174 	.word	0x20001174

0800f480 <SecureElementGetJoinEui>:

uint8_t* SecureElementGetJoinEui( void )
{
    return SeNvm->JoinEui;
 800f480:	4b01      	ldr	r3, [pc, #4]	; (800f488 <SecureElementGetJoinEui+0x8>)
 800f482:	6818      	ldr	r0, [r3, #0]
}
 800f484:	3008      	adds	r0, #8
 800f486:	4770      	bx	lr
 800f488:	20001174 	.word	0x20001174

0800f48c <rand1>:

static int32_t rand1( void );

static int32_t rand1( void )
{
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 800f48c:	4b09      	ldr	r3, [pc, #36]	; (800f4b4 <rand1+0x28>)
 800f48e:	681a      	ldr	r2, [r3, #0]
 800f490:	4909      	ldr	r1, [pc, #36]	; (800f4b8 <rand1+0x2c>)
 800f492:	f243 0039 	movw	r0, #12345	; 0x3039
 800f496:	fb01 0002 	mla	r0, r1, r2, r0
 800f49a:	6018      	str	r0, [r3, #0]
 800f49c:	2303      	movs	r3, #3
 800f49e:	fba3 2300 	umull	r2, r3, r3, r0
 800f4a2:	1ac2      	subs	r2, r0, r3
 800f4a4:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800f4a8:	0f9b      	lsrs	r3, r3, #30
 800f4aa:	ebc3 73c3 	rsb	r3, r3, r3, lsl #31
}
 800f4ae:	1ac0      	subs	r0, r0, r3
 800f4b0:	4770      	bx	lr
 800f4b2:	bf00      	nop
 800f4b4:	200000d0 	.word	0x200000d0
 800f4b8:	41c64e6d 	.word	0x41c64e6d

0800f4bc <srand1>:

void srand1( uint32_t seed )
{
    next = seed;
 800f4bc:	4b01      	ldr	r3, [pc, #4]	; (800f4c4 <srand1+0x8>)
 800f4be:	6018      	str	r0, [r3, #0]
}
 800f4c0:	4770      	bx	lr
 800f4c2:	bf00      	nop
 800f4c4:	200000d0 	.word	0x200000d0

0800f4c8 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 800f4c8:	b538      	push	{r3, r4, r5, lr}
 800f4ca:	4605      	mov	r5, r0
 800f4cc:	460c      	mov	r4, r1
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 800f4ce:	f7ff ffdd 	bl	800f48c <rand1>
 800f4d2:	1b61      	subs	r1, r4, r5
 800f4d4:	3101      	adds	r1, #1
 800f4d6:	fb90 f3f1 	sdiv	r3, r0, r1
 800f4da:	fb01 0013 	mls	r0, r1, r3, r0
}
 800f4de:	4428      	add	r0, r5
 800f4e0:	bd38      	pop	{r3, r4, r5, pc}

0800f4e2 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    while( size-- )
 800f4e2:	e004      	b.n	800f4ee <memcpy1+0xc>
    {
        *dst++ = *src++;
 800f4e4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f4e8:	f800 2b01 	strb.w	r2, [r0], #1
    while( size-- )
 800f4ec:	461a      	mov	r2, r3
 800f4ee:	1e53      	subs	r3, r2, #1
 800f4f0:	b29b      	uxth	r3, r3
 800f4f2:	2a00      	cmp	r2, #0
 800f4f4:	d1f6      	bne.n	800f4e4 <memcpy1+0x2>
    }
}
 800f4f6:	4770      	bx	lr

0800f4f8 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    dst = dst + ( size - 1 );
 800f4f8:	1e53      	subs	r3, r2, #1
 800f4fa:	4418      	add	r0, r3
    while( size-- )
 800f4fc:	e004      	b.n	800f508 <memcpyr+0x10>
    {
        *dst-- = *src++;
 800f4fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f502:	f800 2901 	strb.w	r2, [r0], #-1
    while( size-- )
 800f506:	461a      	mov	r2, r3
 800f508:	1e53      	subs	r3, r2, #1
 800f50a:	b29b      	uxth	r3, r3
 800f50c:	2a00      	cmp	r2, #0
 800f50e:	d1f6      	bne.n	800f4fe <memcpyr+0x6>
    }
}
 800f510:	4770      	bx	lr

0800f512 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
    while( size-- )
 800f512:	e002      	b.n	800f51a <memset1+0x8>
    {
        *dst++ = value;
 800f514:	f800 1b01 	strb.w	r1, [r0], #1
    while( size-- )
 800f518:	461a      	mov	r2, r3
 800f51a:	1e53      	subs	r3, r2, #1
 800f51c:	b29b      	uxth	r3, r3
 800f51e:	2a00      	cmp	r2, #0
 800f520:	d1f8      	bne.n	800f514 <memset1+0x2>
    }
}
 800f522:	4770      	bx	lr

0800f524 <Crc32>:
    const uint32_t reversedPolynom = 0xEDB88320;

    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;

    if( buffer == NULL )
 800f524:	b1f0      	cbz	r0, 800f564 <Crc32+0x40>
{
 800f526:	b510      	push	{r4, lr}
 800f528:	4604      	mov	r4, r0
    {
        return 0;
    }

    for( uint16_t i = 0; i < length; ++i )
 800f52a:	f04f 0e00 	mov.w	lr, #0
    uint32_t crc = 0xFFFFFFFF;
 800f52e:	f04f 30ff 	mov.w	r0, #4294967295
 800f532:	e00e      	b.n	800f552 <Crc32+0x2e>
    {
        crc ^= ( uint32_t )buffer[i];
        for( uint16_t i = 0; i < 8; i++ )
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 800f534:	f340 0c00 	sbfx	ip, r0, #0, #1
 800f538:	4a0b      	ldr	r2, [pc, #44]	; (800f568 <Crc32+0x44>)
 800f53a:	ea0c 0202 	and.w	r2, ip, r2
 800f53e:	ea82 0050 	eor.w	r0, r2, r0, lsr #1
        for( uint16_t i = 0; i < 8; i++ )
 800f542:	3301      	adds	r3, #1
 800f544:	b29b      	uxth	r3, r3
 800f546:	2b07      	cmp	r3, #7
 800f548:	d9f4      	bls.n	800f534 <Crc32+0x10>
    for( uint16_t i = 0; i < length; ++i )
 800f54a:	f10e 0e01 	add.w	lr, lr, #1
 800f54e:	fa1f fe8e 	uxth.w	lr, lr
 800f552:	458e      	cmp	lr, r1
 800f554:	d204      	bcs.n	800f560 <Crc32+0x3c>
        crc ^= ( uint32_t )buffer[i];
 800f556:	f814 300e 	ldrb.w	r3, [r4, lr]
 800f55a:	4058      	eors	r0, r3
        for( uint16_t i = 0; i < 8; i++ )
 800f55c:	2300      	movs	r3, #0
 800f55e:	e7f2      	b.n	800f546 <Crc32+0x22>
        }
    }

    return ~crc;
 800f560:	43c0      	mvns	r0, r0
}
 800f562:	bd10      	pop	{r4, pc}
        return 0;
 800f564:	2000      	movs	r0, #0
}
 800f566:	4770      	bx	lr
 800f568:	edb88320 	.word	0xedb88320

0800f56c <RadioCheckRfFrequency>:
}

static bool RadioCheckRfFrequency( uint32_t frequency )
{
    return true;
}
 800f56c:	2001      	movs	r0, #1
 800f56e:	4770      	bx	lr

0800f570 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
    uint32_t bandwidthInHz = 0;

    switch( bw )
 800f570:	280a      	cmp	r0, #10
 800f572:	d807      	bhi.n	800f584 <RadioGetLoRaBandwidthInHz+0x14>
 800f574:	e8df f000 	tbb	[pc, r0]
 800f578:	17110b20 	.word	0x17110b20
 800f57c:	061e1c1a 	.word	0x061e1c1a
 800f580:	0e08      	.short	0x0e08
 800f582:	14          	.byte	0x14
 800f583:	00          	.byte	0x00
 800f584:	2000      	movs	r0, #0
 800f586:	4770      	bx	lr
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
        break;
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 800f588:	f642 00b1 	movw	r0, #10417	; 0x28b1
        break;
 800f58c:	4770      	bx	lr
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 800f58e:	f643 5009 	movw	r0, #15625	; 0x3d09
        break;
 800f592:	4770      	bx	lr
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 800f594:	f245 1061 	movw	r0, #20833	; 0x5161
        break;
 800f598:	4770      	bx	lr
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 800f59a:	f647 2012 	movw	r0, #31250	; 0x7a12
        break;
 800f59e:	4770      	bx	lr
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 800f5a0:	f24a 20c3 	movw	r0, #41667	; 0xa2c3
        break;
 800f5a4:	4770      	bx	lr
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 800f5a6:	f24f 4024 	movw	r0, #62500	; 0xf424
        break;
 800f5aa:	4770      	bx	lr
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 800f5ac:	4804      	ldr	r0, [pc, #16]	; (800f5c0 <RadioGetLoRaBandwidthInHz+0x50>)
        break;
 800f5ae:	4770      	bx	lr
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 800f5b0:	4804      	ldr	r0, [pc, #16]	; (800f5c4 <RadioGetLoRaBandwidthInHz+0x54>)
        break;
 800f5b2:	4770      	bx	lr
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 800f5b4:	4804      	ldr	r0, [pc, #16]	; (800f5c8 <RadioGetLoRaBandwidthInHz+0x58>)
        break;
 800f5b6:	4770      	bx	lr
        bandwidthInHz = 7812UL;
 800f5b8:	f641 6084 	movw	r0, #7812	; 0x1e84
    }

    return bandwidthInHz;
}
 800f5bc:	4770      	bx	lr
 800f5be:	bf00      	nop
 800f5c0:	0001e848 	.word	0x0001e848
 800f5c4:	0003d090 	.word	0x0003d090
 800f5c8:	0007a120 	.word	0x0007a120

0800f5cc <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 800f5cc:	f89d 1004 	ldrb.w	r1, [sp, #4]
    /* ST_WORKAROUND_BEGIN: Simplified calculation without const values */
    return ( preambleLen << 3 ) +
 800f5d0:	00d2      	lsls	r2, r2, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800f5d2:	b953      	cbnz	r3, 800f5ea <RadioGetGfskTimeOnAirNumerator+0x1e>
 800f5d4:	2308      	movs	r3, #8
    return ( preambleLen << 3 ) +
 800f5d6:	441a      	add	r2, r3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800f5d8:	3218      	adds	r2, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 800f5da:	b141      	cbz	r1, 800f5ee <RadioGetGfskTimeOnAirNumerator+0x22>
 800f5dc:	2302      	movs	r3, #2
 800f5de:	f89d 0000 	ldrb.w	r0, [sp]
 800f5e2:	4418      	add	r0, r3
    /* ST_WORKAROUND_END */
}
 800f5e4:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 800f5e8:	4770      	bx	lr
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800f5ea:	2300      	movs	r3, #0
 800f5ec:	e7f3      	b.n	800f5d6 <RadioGetGfskTimeOnAirNumerator+0xa>
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 800f5ee:	2300      	movs	r3, #0
 800f5f0:	e7f5      	b.n	800f5de <RadioGetGfskTimeOnAirNumerator+0x12>

0800f5f2 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 800f5f2:	b570      	push	{r4, r5, r6, lr}
 800f5f4:	f89d 4010 	ldrb.w	r4, [sp, #16]
 800f5f8:	f89d 5018 	ldrb.w	r5, [sp, #24]
    int32_t crDenom           = coderate + 4;
 800f5fc:	3204      	adds	r2, #4
    bool    lowDatareOptimize = false;

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 800f5fe:	f1a1 0c05 	sub.w	ip, r1, #5
 800f602:	f1bc 0f01 	cmp.w	ip, #1
 800f606:	d931      	bls.n	800f66c <RadioGetLoRaTimeOnAirNumerator+0x7a>
        {
            preambleLen = 12;
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800f608:	b918      	cbnz	r0, 800f612 <RadioGetLoRaTimeOnAirNumerator+0x20>
 800f60a:	f1a1 060b 	sub.w	r6, r1, #11
 800f60e:	2e01      	cmp	r6, #1
 800f610:	d934      	bls.n	800f67c <RadioGetLoRaTimeOnAirNumerator+0x8a>
 800f612:	2801      	cmp	r0, #1
 800f614:	d02e      	beq.n	800f674 <RadioGetLoRaTimeOnAirNumerator+0x82>
    bool    lowDatareOptimize = false;
 800f616:	2600      	movs	r6, #0
    {
        lowDatareOptimize = true;
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800f618:	f89d c014 	ldrb.w	ip, [sp, #20]
 800f61c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
                            ( crcOn ? 16 : 0 ) -
 800f620:	b385      	cbz	r5, 800f684 <RadioGetLoRaTimeOnAirNumerator+0x92>
 800f622:	2010      	movs	r0, #16
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800f624:	4484      	add	ip, r0
                            ( 4 * datarate ) +
 800f626:	0088      	lsls	r0, r1, #2
                            ( crcOn ? 16 : 0 ) -
 800f628:	ebac 0c81 	sub.w	ip, ip, r1, lsl #2
                            ( fixLen ? 0 : 20 );
 800f62c:	b364      	cbz	r4, 800f688 <RadioGetLoRaTimeOnAirNumerator+0x96>
 800f62e:	f04f 0e00 	mov.w	lr, #0
                            ( 4 * datarate ) +
 800f632:	44f4      	add	ip, lr

    if( datarate <= 6 )
 800f634:	2906      	cmp	r1, #6
 800f636:	d904      	bls.n	800f642 <RadioGetLoRaTimeOnAirNumerator+0x50>
    {
        ceilDenominator = 4 * datarate;
    }
    else
    {
        ceilNumerator += 8;
 800f638:	f10c 0c08 	add.w	ip, ip, #8

        if( lowDatareOptimize == true )
 800f63c:	b10e      	cbz	r6, 800f642 <RadioGetLoRaTimeOnAirNumerator+0x50>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 800f63e:	1e88      	subs	r0, r1, #2
 800f640:	0080      	lsls	r0, r0, #2
        {
            ceilDenominator = 4 * datarate;
        }
    }

    if( ceilNumerator < 0 )
 800f642:	f1bc 0f00 	cmp.w	ip, #0
 800f646:	db22      	blt.n	800f68e <RadioGetLoRaTimeOnAirNumerator+0x9c>
        ceilNumerator = 0;
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 800f648:	4484      	add	ip, r0
 800f64a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800f64e:	fb9c fcf0 	sdiv	ip, ip, r0
 800f652:	fb02 330c 	mla	r3, r2, ip, r3
    int32_t intermediate =
 800f656:	f103 000c 	add.w	r0, r3, #12

    if( datarate <= 6 )
 800f65a:	2906      	cmp	r1, #6
 800f65c:	d801      	bhi.n	800f662 <RadioGetLoRaTimeOnAirNumerator+0x70>
    {
        intermediate += 2;
 800f65e:	f103 000e 	add.w	r0, r3, #14
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 800f662:	0080      	lsls	r0, r0, #2
 800f664:	3001      	adds	r0, #1
 800f666:	3902      	subs	r1, #2
}
 800f668:	4088      	lsls	r0, r1
 800f66a:	bd70      	pop	{r4, r5, r6, pc}
        if( preambleLen < 12 )
 800f66c:	2b0b      	cmp	r3, #11
 800f66e:	d8cb      	bhi.n	800f608 <RadioGetLoRaTimeOnAirNumerator+0x16>
            preambleLen = 12;
 800f670:	230c      	movs	r3, #12
 800f672:	e7c9      	b.n	800f608 <RadioGetLoRaTimeOnAirNumerator+0x16>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800f674:	290c      	cmp	r1, #12
 800f676:	d003      	beq.n	800f680 <RadioGetLoRaTimeOnAirNumerator+0x8e>
    bool    lowDatareOptimize = false;
 800f678:	2600      	movs	r6, #0
 800f67a:	e7cd      	b.n	800f618 <RadioGetLoRaTimeOnAirNumerator+0x26>
        lowDatareOptimize = true;
 800f67c:	2601      	movs	r6, #1
 800f67e:	e7cb      	b.n	800f618 <RadioGetLoRaTimeOnAirNumerator+0x26>
 800f680:	2601      	movs	r6, #1
 800f682:	e7c9      	b.n	800f618 <RadioGetLoRaTimeOnAirNumerator+0x26>
                            ( crcOn ? 16 : 0 ) -
 800f684:	2000      	movs	r0, #0
 800f686:	e7cd      	b.n	800f624 <RadioGetLoRaTimeOnAirNumerator+0x32>
                            ( fixLen ? 0 : 20 );
 800f688:	f04f 0e14 	mov.w	lr, #20
 800f68c:	e7d1      	b.n	800f632 <RadioGetLoRaTimeOnAirNumerator+0x40>
        ceilNumerator = 0;
 800f68e:	f04f 0c00 	mov.w	ip, #0
 800f692:	e7d9      	b.n	800f648 <RadioGetLoRaTimeOnAirNumerator+0x56>

0800f694 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 800f694:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f696:	b085      	sub	sp, #20
 800f698:	460e      	mov	r6, r1
 800f69a:	4615      	mov	r5, r2
 800f69c:	4619      	mov	r1, r3
 800f69e:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 800f6a2:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 800f6a6:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 800f6aa:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
    uint32_t numerator = 0;
    uint32_t denominator = 1;

    switch( modem )
 800f6ae:	b148      	cbz	r0, 800f6c4 <RadioTimeOnAir+0x30>
 800f6b0:	2801      	cmp	r0, #1
 800f6b2:	d012      	beq.n	800f6da <RadioTimeOnAir+0x46>
 800f6b4:	2501      	movs	r5, #1
 800f6b6:	2400      	movs	r4, #0
        break;
    default:
        break;
    }
    // Perform integral ceil()
    return DIVC(numerator, denominator); /* ST_WORKAROUND : simplified calculation with macro usage */
 800f6b8:	442c      	add	r4, r5
 800f6ba:	1e60      	subs	r0, r4, #1
}
 800f6bc:	fbb0 f0f5 	udiv	r0, r0, r5
 800f6c0:	b005      	add	sp, #20
 800f6c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 800f6c4:	f8cd c004 	str.w	ip, [sp, #4]
 800f6c8:	9700      	str	r7, [sp, #0]
 800f6ca:	4628      	mov	r0, r5
 800f6cc:	f7ff ff7e 	bl	800f5cc <RadioGetGfskTimeOnAirNumerator>
 800f6d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f6d4:	fb03 f400 	mul.w	r4, r3, r0
        break;
 800f6d8:	e7ee      	b.n	800f6b8 <RadioTimeOnAir+0x24>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 800f6da:	f8cd c008 	str.w	ip, [sp, #8]
 800f6de:	9701      	str	r7, [sp, #4]
 800f6e0:	9300      	str	r3, [sp, #0]
 800f6e2:	4613      	mov	r3, r2
 800f6e4:	460a      	mov	r2, r1
 800f6e6:	4629      	mov	r1, r5
 800f6e8:	4630      	mov	r0, r6
 800f6ea:	f7ff ff82 	bl	800f5f2 <RadioGetLoRaTimeOnAirNumerator>
 800f6ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f6f2:	fb03 f400 	mul.w	r4, r3, r0
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 800f6f6:	4b03      	ldr	r3, [pc, #12]	; (800f704 <RadioTimeOnAir+0x70>)
 800f6f8:	5d98      	ldrb	r0, [r3, r6]
 800f6fa:	f7ff ff39 	bl	800f570 <RadioGetLoRaBandwidthInHz>
 800f6fe:	4605      	mov	r5, r0
        break;
 800f700:	e7da      	b.n	800f6b8 <RadioTimeOnAir+0x24>
 800f702:	bf00      	nop
 800f704:	08017b24 	.word	0x08017b24

0800f708 <RadioOnTxTimeoutProcess>:
{
    RADIO_RX_TIMEOUT_PROCESS();
}

static void RadioOnTxTimeoutProcess( void )
{
 800f708:	b508      	push	{r3, lr}
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_TX(RST);
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800f70a:	4b03      	ldr	r3, [pc, #12]	; (800f718 <RadioOnTxTimeoutProcess+0x10>)
 800f70c:	681b      	ldr	r3, [r3, #0]
 800f70e:	b113      	cbz	r3, 800f716 <RadioOnTxTimeoutProcess+0xe>
 800f710:	685b      	ldr	r3, [r3, #4]
 800f712:	b103      	cbz	r3, 800f716 <RadioOnTxTimeoutProcess+0xe>
    {
        RadioEvents->TxTimeout( );
 800f714:	4798      	blx	r3
    }
}
 800f716:	bd08      	pop	{r3, pc}
 800f718:	20001278 	.word	0x20001278

0800f71c <RadioOnTxTimeoutIrq>:
{
 800f71c:	b508      	push	{r3, lr}
    RADIO_TX_TIMEOUT_PROCESS();
 800f71e:	f7ff fff3 	bl	800f708 <RadioOnTxTimeoutProcess>
}
 800f722:	bd08      	pop	{r3, pc}

0800f724 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 800f724:	b508      	push	{r3, lr}
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_RX(RST);
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800f726:	4b03      	ldr	r3, [pc, #12]	; (800f734 <RadioOnRxTimeoutProcess+0x10>)
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	b113      	cbz	r3, 800f732 <RadioOnRxTimeoutProcess+0xe>
 800f72c:	68db      	ldr	r3, [r3, #12]
 800f72e:	b103      	cbz	r3, 800f732 <RadioOnRxTimeoutProcess+0xe>
    {
        RadioEvents->RxTimeout( );
 800f730:	4798      	blx	r3
    }
}
 800f732:	bd08      	pop	{r3, pc}
 800f734:	20001278 	.word	0x20001278

0800f738 <RadioOnRxTimeoutIrq>:
{
 800f738:	b508      	push	{r3, lr}
    RADIO_RX_TIMEOUT_PROCESS();
 800f73a:	f7ff fff3 	bl	800f724 <RadioOnRxTimeoutProcess>
}
 800f73e:	bd08      	pop	{r3, pc}

0800f740 <payload_integration>:
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
    SUBGRF_SetTxContinuousWave( );
}

static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 800f740:	b570      	push	{r4, r5, r6, lr}
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int i = 0;

    for (i = 0; i < size; i++)
 800f742:	2300      	movs	r3, #0
 800f744:	e005      	b.n	800f752 <payload_integration+0x12>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 800f746:	5ccc      	ldrb	r4, [r1, r3]
 800f748:	43e4      	mvns	r4, r4
 800f74a:	54cc      	strb	r4, [r1, r3]
        /* init outBuffer */
        outBuffer[i] = 0;
 800f74c:	2400      	movs	r4, #0
 800f74e:	54c4      	strb	r4, [r0, r3]
    for (i = 0; i < size; i++)
 800f750:	3301      	adds	r3, #1
 800f752:	429a      	cmp	r2, r3
 800f754:	dcf7      	bgt.n	800f746 <payload_integration+0x6>
    }

    for (i = 0; i < (size * 8); i++)
 800f756:	2300      	movs	r3, #0
    uint8_t prevInt = 0;
 800f758:	461c      	mov	r4, r3
 800f75a:	e011      	b.n	800f780 <payload_integration+0x40>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
        index_byte = i / 8;
 800f75c:	f103 0c07 	add.w	ip, r3, #7
 800f760:	e022      	b.n	800f7a8 <payload_integration+0x68>
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
        index_byte_out = ( i + 1 ) / 8;
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 800f762:	b2ed      	uxtb	r5, r5
 800f764:	5d4d      	ldrb	r5, [r1, r5]
 800f766:	fa45 f50e 	asr.w	r5, r5, lr
 800f76a:	f005 0501 	and.w	r5, r5, #1
        /* integration */
        prevInt ^= currBit;
 800f76e:	406c      	eors	r4, r5
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 800f770:	f3c6 05c7 	ubfx	r5, r6, #3, #8
 800f774:	fa04 fc0c 	lsl.w	ip, r4, ip
 800f778:	5d46      	ldrb	r6, [r0, r5]
 800f77a:	ea46 060c 	orr.w	r6, r6, ip
 800f77e:	5546      	strb	r6, [r0, r5]
    for (i = 0; i < (size * 8); i++)
 800f780:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 800f784:	da26      	bge.n	800f7d4 <payload_integration+0x94>
        index_bit = 7 - ( i % 8 );
 800f786:	425d      	negs	r5, r3
 800f788:	f003 0c07 	and.w	ip, r3, #7
 800f78c:	f005 0507 	and.w	r5, r5, #7
 800f790:	bf58      	it	pl
 800f792:	f1c5 0c00 	rsbpl	ip, r5, #0
 800f796:	fa5f fe8c 	uxtb.w	lr, ip
 800f79a:	f1ce 0e07 	rsb	lr, lr, #7
 800f79e:	fa5f fe8e 	uxtb.w	lr, lr
        index_byte = i / 8;
 800f7a2:	469c      	mov	ip, r3
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	dbd9      	blt.n	800f75c <payload_integration+0x1c>
 800f7a8:	ea4f 05ec 	mov.w	r5, ip, asr #3
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 800f7ac:	3301      	adds	r3, #1
 800f7ae:	425e      	negs	r6, r3
 800f7b0:	f003 0c07 	and.w	ip, r3, #7
 800f7b4:	f006 0607 	and.w	r6, r6, #7
 800f7b8:	bf58      	it	pl
 800f7ba:	f1c6 0c00 	rsbpl	ip, r6, #0
 800f7be:	fa5f fc8c 	uxtb.w	ip, ip
 800f7c2:	f1cc 0c07 	rsb	ip, ip, #7
 800f7c6:	fa5f fc8c 	uxtb.w	ip, ip
        index_byte_out = ( i + 1 ) / 8;
 800f7ca:	461e      	mov	r6, r3
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	dac8      	bge.n	800f762 <payload_integration+0x22>
 800f7d0:	1dde      	adds	r6, r3, #7
 800f7d2:	e7c6      	b.n	800f762 <payload_integration+0x22>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 800f7d4:	01a3      	lsls	r3, r4, #6
 800f7d6:	ea43 13c4 	orr.w	r3, r3, r4, lsl #7
 800f7da:	b25b      	sxtb	r3, r3
 800f7dc:	b91c      	cbnz	r4, 800f7e6 <payload_integration+0xa6>
 800f7de:	2120      	movs	r1, #32
 800f7e0:	430b      	orrs	r3, r1
 800f7e2:	5483      	strb	r3, [r0, r2]
}
 800f7e4:	bd70      	pop	{r4, r5, r6, pc}
    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 800f7e6:	2100      	movs	r1, #0
 800f7e8:	e7fa      	b.n	800f7e0 <payload_integration+0xa0>
	...

0800f7ec <RadioSetMaxPayloadLength>:
{
 800f7ec:	b508      	push	{r3, lr}
    if( modem == MODEM_LORA )
 800f7ee:	2801      	cmp	r0, #1
 800f7f0:	d004      	beq.n	800f7fc <RadioSetMaxPayloadLength+0x10>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 800f7f2:	4b0a      	ldr	r3, [pc, #40]	; (800f81c <RadioSetMaxPayloadLength+0x30>)
 800f7f4:	7d5b      	ldrb	r3, [r3, #21]
 800f7f6:	2b01      	cmp	r3, #1
 800f7f8:	d008      	beq.n	800f80c <RadioSetMaxPayloadLength+0x20>
}
 800f7fa:	bd08      	pop	{r3, pc}
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 800f7fc:	4b08      	ldr	r3, [pc, #32]	; (800f820 <RadioSetMaxPayloadLength+0x34>)
 800f7fe:	7019      	strb	r1, [r3, #0]
 800f800:	4806      	ldr	r0, [pc, #24]	; (800f81c <RadioSetMaxPayloadLength+0x30>)
 800f802:	77c1      	strb	r1, [r0, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800f804:	300e      	adds	r0, #14
 800f806:	f001 fd31 	bl	801126c <SUBGRF_SetPacketParams>
 800f80a:	e7f6      	b.n	800f7fa <RadioSetMaxPayloadLength+0xe>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 800f80c:	4b04      	ldr	r3, [pc, #16]	; (800f820 <RadioSetMaxPayloadLength+0x34>)
 800f80e:	7019      	strb	r1, [r3, #0]
 800f810:	4802      	ldr	r0, [pc, #8]	; (800f81c <RadioSetMaxPayloadLength+0x30>)
 800f812:	7581      	strb	r1, [r0, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800f814:	300e      	adds	r0, #14
 800f816:	f001 fd29 	bl	801126c <SUBGRF_SetPacketParams>
}
 800f81a:	e7ee      	b.n	800f7fa <RadioSetMaxPayloadLength+0xe>
 800f81c:	20001294 	.word	0x20001294
 800f820:	200000d4 	.word	0x200000d4

0800f824 <RadioRead>:
{
 800f824:	b508      	push	{r3, lr}
    return SUBGRF_ReadRegister(addr);
 800f826:	f001 fbdb 	bl	8010fe0 <SUBGRF_ReadRegister>
}
 800f82a:	bd08      	pop	{r3, pc}

0800f82c <RadioWrite>:
{
 800f82c:	b508      	push	{r3, lr}
    SUBGRF_WriteRegister(addr, data );
 800f82e:	f001 fae5 	bl	8010dfc <SUBGRF_WriteRegister>
}
 800f832:	bd08      	pop	{r3, pc}

0800f834 <RadioTxCw>:
{
 800f834:	b508      	push	{r3, lr}
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 800f836:	f001 fe2f 	bl	8011498 <SUBGRF_SetRfTxPower>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 800f83a:	2101      	movs	r1, #1
 800f83c:	f001 fe18 	bl	8011470 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 800f840:	f001 f96e 	bl	8010b20 <SUBGRF_SetTxContinuousWave>
}
 800f844:	bd08      	pop	{r3, pc}
	...

0800f848 <RadioTxPrbs>:
{
 800f848:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 800f84a:	2101      	movs	r1, #1
 800f84c:	4b07      	ldr	r3, [pc, #28]	; (800f86c <RadioTxPrbs+0x24>)
 800f84e:	f893 0056 	ldrb.w	r0, [r3, #86]	; 0x56
 800f852:	f001 fe0d 	bl	8011470 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_PKTCTL1A, 0x2d );  // sel mode prbs9 instead of preamble
 800f856:	212d      	movs	r1, #45	; 0x2d
 800f858:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 800f85c:	f7ff ffe6 	bl	800f82c <RadioWrite>
    SUBGRF_SetTxInfinitePreamble( );
 800f860:	f001 f965 	bl	8010b2e <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 800f864:	4802      	ldr	r0, [pc, #8]	; (800f870 <RadioTxPrbs+0x28>)
 800f866:	f001 f8f7 	bl	8010a58 <SUBGRF_SetTx>
}
 800f86a:	bd08      	pop	{r3, pc}
 800f86c:	20001294 	.word	0x20001294
 800f870:	000fffff 	.word	0x000fffff

0800f874 <RadioSetRxDutyCycle>:
{
 800f874:	b538      	push	{r3, r4, r5, lr}
 800f876:	4604      	mov	r4, r0
 800f878:	460d      	mov	r5, r1
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 800f87a:	2100      	movs	r1, #0
 800f87c:	4b04      	ldr	r3, [pc, #16]	; (800f890 <RadioSetRxDutyCycle+0x1c>)
 800f87e:	f893 0056 	ldrb.w	r0, [r3, #86]	; 0x56
 800f882:	f001 fdf5 	bl	8011470 <SUBGRF_SetSwitch>
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 800f886:	4629      	mov	r1, r5
 800f888:	4620      	mov	r0, r4
 800f88a:	f001 f919 	bl	8010ac0 <SUBGRF_SetRxDutyCycle>
}
 800f88e:	bd38      	pop	{r3, r4, r5, pc}
 800f890:	20001294 	.word	0x20001294

0800f894 <RadioRxBoosted>:
{
 800f894:	b538      	push	{r3, r4, r5, lr}
 800f896:	4604      	mov	r4, r0
    if (1UL==RFW_Is_Init())
 800f898:	f001 fed2 	bl	8011640 <RFW_Is_Init>
 800f89c:	2801      	cmp	r0, #1
 800f89e:	d014      	beq.n	800f8ca <RadioRxBoosted+0x36>
      SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800f8a0:	2300      	movs	r3, #0
 800f8a2:	461a      	mov	r2, r3
 800f8a4:	f240 2162 	movw	r1, #610	; 0x262
 800f8a8:	4608      	mov	r0, r1
 800f8aa:	f001 f9e4 	bl	8010c76 <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 800f8ae:	b97c      	cbnz	r4, 800f8d0 <RadioRxBoosted+0x3c>
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 800f8b0:	4c0f      	ldr	r4, [pc, #60]	; (800f8f0 <RadioRxBoosted+0x5c>)
 800f8b2:	2100      	movs	r1, #0
 800f8b4:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
 800f8b8:	f001 fdda 	bl	8011470 <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 800f8bc:	7863      	ldrb	r3, [r4, #1]
 800f8be:	b183      	cbz	r3, 800f8e2 <RadioRxBoosted+0x4e>
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 800f8c0:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800f8c4:	f001 faaa 	bl	8010e1c <SUBGRF_SetRxBoosted>
}
 800f8c8:	bd38      	pop	{r3, r4, r5, pc}
      RFW_ReceiveInit();
 800f8ca:	f001 fec1 	bl	8011650 <RFW_ReceiveInit>
 800f8ce:	e7ee      	b.n	800f8ae <RadioRxBoosted+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 800f8d0:	4d08      	ldr	r5, [pc, #32]	; (800f8f4 <RadioRxBoosted+0x60>)
 800f8d2:	4621      	mov	r1, r4
 800f8d4:	4628      	mov	r0, r5
 800f8d6:	f002 fb7d 	bl	8011fd4 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 800f8da:	4628      	mov	r0, r5
 800f8dc:	f002 fb34 	bl	8011f48 <UTIL_TIMER_Start>
 800f8e0:	e7e6      	b.n	800f8b0 <RadioRxBoosted+0x1c>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 800f8e2:	4b03      	ldr	r3, [pc, #12]	; (800f8f0 <RadioRxBoosted+0x5c>)
 800f8e4:	6898      	ldr	r0, [r3, #8]
 800f8e6:	0180      	lsls	r0, r0, #6
 800f8e8:	f001 fa98 	bl	8010e1c <SUBGRF_SetRxBoosted>
}
 800f8ec:	e7ec      	b.n	800f8c8 <RadioRxBoosted+0x34>
 800f8ee:	bf00      	nop
 800f8f0:	20001294 	.word	0x20001294
 800f8f4:	2000127c 	.word	0x2000127c

0800f8f8 <RadioStandby>:
{
 800f8f8:	b508      	push	{r3, lr}
    SUBGRF_SetStandby( STDBY_RC );
 800f8fa:	2000      	movs	r0, #0
 800f8fc:	f001 f892 	bl	8010a24 <SUBGRF_SetStandby>
}
 800f900:	bd08      	pop	{r3, pc}

0800f902 <RadioGetStatus>:
{
 800f902:	b508      	push	{r3, lr}
    switch( SUBGRF_GetOperatingMode( ) )
 800f904:	f001 f888 	bl	8010a18 <SUBGRF_GetOperatingMode>
 800f908:	2805      	cmp	r0, #5
 800f90a:	d007      	beq.n	800f91c <RadioGetStatus+0x1a>
 800f90c:	2807      	cmp	r0, #7
 800f90e:	d007      	beq.n	800f920 <RadioGetStatus+0x1e>
 800f910:	2804      	cmp	r0, #4
 800f912:	d001      	beq.n	800f918 <RadioGetStatus+0x16>
            return RF_IDLE;
 800f914:	2000      	movs	r0, #0
}
 800f916:	bd08      	pop	{r3, pc}
    switch( SUBGRF_GetOperatingMode( ) )
 800f918:	2002      	movs	r0, #2
 800f91a:	e7fc      	b.n	800f916 <RadioGetStatus+0x14>
            return RF_RX_RUNNING;
 800f91c:	2001      	movs	r0, #1
 800f91e:	e7fa      	b.n	800f916 <RadioGetStatus+0x14>
            return RF_CAD;
 800f920:	2003      	movs	r0, #3
 800f922:	e7f8      	b.n	800f916 <RadioGetStatus+0x14>

0800f924 <RadioIrqProcess>:
{
 800f924:	b530      	push	{r4, r5, lr}
 800f926:	b083      	sub	sp, #12
    uint8_t size = 0;
 800f928:	2300      	movs	r3, #0
 800f92a:	f88d 3007 	strb.w	r3, [sp, #7]
    int32_t cfo = 0;
 800f92e:	9300      	str	r3, [sp, #0]
    switch ( SubgRf.RadioIrq )
 800f930:	4b9c      	ldr	r3, [pc, #624]	; (800fba4 <RadioIrqProcess+0x280>)
 800f932:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800f936:	2b20      	cmp	r3, #32
 800f938:	d829      	bhi.n	800f98e <RadioIrqProcess+0x6a>
 800f93a:	b21a      	sxth	r2, r3
 800f93c:	2a00      	cmp	r2, #0
 800f93e:	f000 80eb 	beq.w	800fb18 <RadioIrqProcess+0x1f4>
 800f942:	3b01      	subs	r3, #1
 800f944:	2b1f      	cmp	r3, #31
 800f946:	f200 80e7 	bhi.w	800fb18 <RadioIrqProcess+0x1f4>
 800f94a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800f94e:	005f      	.short	0x005f
 800f950:	00e50075 	.word	0x00e50075
 800f954:	00e500df 	.word	0x00e500df
 800f958:	00e500e5 	.word	0x00e500e5
 800f95c:	00e500e7 	.word	0x00e500e7
 800f960:	00e500e5 	.word	0x00e500e5
 800f964:	00e500e5 	.word	0x00e500e5
 800f968:	00e500e5 	.word	0x00e500e5
 800f96c:	00e500f4 	.word	0x00e500f4
 800f970:	00e500e5 	.word	0x00e500e5
 800f974:	00e500e5 	.word	0x00e500e5
 800f978:	00e500e5 	.word	0x00e500e5
 800f97c:	00e500e5 	.word	0x00e500e5
 800f980:	00e500e5 	.word	0x00e500e5
 800f984:	00e500e5 	.word	0x00e500e5
 800f988:	00e500e5 	.word	0x00e500e5
 800f98c:	00fb      	.short	0x00fb
 800f98e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f992:	f000 80a3 	beq.w	800fadc <RadioIrqProcess+0x1b8>
 800f996:	d924      	bls.n	800f9e2 <RadioIrqProcess+0xbe>
 800f998:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f99c:	f040 80bc 	bne.w	800fb18 <RadioIrqProcess+0x1f4>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 800f9a0:	4b81      	ldr	r3, [pc, #516]	; (800fba8 <RadioIrqProcess+0x284>)
 800f9a2:	2201      	movs	r2, #1
 800f9a4:	2100      	movs	r1, #0
 800f9a6:	2002      	movs	r0, #2
 800f9a8:	f001 ff30 	bl	801180c <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 800f9ac:	f001 f834 	bl	8010a18 <SUBGRF_GetOperatingMode>
 800f9b0:	2804      	cmp	r0, #4
 800f9b2:	f000 809e 	beq.w	800faf2 <RadioIrqProcess+0x1ce>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 800f9b6:	f001 f82f 	bl	8010a18 <SUBGRF_GetOperatingMode>
 800f9ba:	2805      	cmp	r0, #5
 800f9bc:	f040 80ac 	bne.w	800fb18 <RadioIrqProcess+0x1f4>
            TimerStop( &RxTimeoutTimer );
 800f9c0:	487a      	ldr	r0, [pc, #488]	; (800fbac <RadioIrqProcess+0x288>)
 800f9c2:	f002 fa67 	bl	8011e94 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 800f9c6:	2000      	movs	r0, #0
 800f9c8:	f001 f82c 	bl	8010a24 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800f9cc:	4b78      	ldr	r3, [pc, #480]	; (800fbb0 <RadioIrqProcess+0x28c>)
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	f000 80a1 	beq.w	800fb18 <RadioIrqProcess+0x1f4>
 800f9d6:	68db      	ldr	r3, [r3, #12]
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	f000 809d 	beq.w	800fb18 <RadioIrqProcess+0x1f4>
                RadioEvents->RxTimeout( );
 800f9de:	4798      	blx	r3
 800f9e0:	e09a      	b.n	800fb18 <RadioIrqProcess+0x1f4>
    switch ( SubgRf.RadioIrq )
 800f9e2:	2b40      	cmp	r3, #64	; 0x40
 800f9e4:	f000 80c7 	beq.w	800fb76 <RadioIrqProcess+0x252>
 800f9e8:	2b80      	cmp	r3, #128	; 0x80
 800f9ea:	f040 8095 	bne.w	800fb18 <RadioIrqProcess+0x1f4>
        SUBGRF_SetStandby( STDBY_RC );
 800f9ee:	2000      	movs	r0, #0
 800f9f0:	f001 f818 	bl	8010a24 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800f9f4:	4b6e      	ldr	r3, [pc, #440]	; (800fbb0 <RadioIrqProcess+0x28c>)
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	f000 808d 	beq.w	800fb18 <RadioIrqProcess+0x1f4>
 800f9fe:	699b      	ldr	r3, [r3, #24]
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	f000 8089 	beq.w	800fb18 <RadioIrqProcess+0x1f4>
            RadioEvents->CadDone( false );
 800fa06:	2000      	movs	r0, #0
 800fa08:	4798      	blx	r3
 800fa0a:	e085      	b.n	800fb18 <RadioIrqProcess+0x1f4>
        TimerStop( &TxTimeoutTimer );
 800fa0c:	4869      	ldr	r0, [pc, #420]	; (800fbb4 <RadioIrqProcess+0x290>)
 800fa0e:	f002 fa41 	bl	8011e94 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 800fa12:	2000      	movs	r0, #0
 800fa14:	f001 f806 	bl	8010a24 <SUBGRF_SetStandby>
        if ( RFW_Is_LongPacketModeEnabled() == 1 )
 800fa18:	f001 fe14 	bl	8011644 <RFW_Is_LongPacketModeEnabled>
 800fa1c:	2801      	cmp	r0, #1
 800fa1e:	d008      	beq.n	800fa32 <RadioIrqProcess+0x10e>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 800fa20:	4b63      	ldr	r3, [pc, #396]	; (800fbb0 <RadioIrqProcess+0x28c>)
 800fa22:	681b      	ldr	r3, [r3, #0]
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	d077      	beq.n	800fb18 <RadioIrqProcess+0x1f4>
 800fa28:	681b      	ldr	r3, [r3, #0]
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d074      	beq.n	800fb18 <RadioIrqProcess+0x1f4>
            RadioEvents->TxDone( );
 800fa2e:	4798      	blx	r3
 800fa30:	e072      	b.n	800fb18 <RadioIrqProcess+0x1f4>
            RFW_DeInit_TxLongPacket( );
 800fa32:	f001 fe10 	bl	8011656 <RFW_DeInit_TxLongPacket>
 800fa36:	e7f3      	b.n	800fa20 <RadioIrqProcess+0xfc>
        TimerStop( &RxTimeoutTimer );
 800fa38:	485c      	ldr	r0, [pc, #368]	; (800fbac <RadioIrqProcess+0x288>)
 800fa3a:	f002 fa2b 	bl	8011e94 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 800fa3e:	4b59      	ldr	r3, [pc, #356]	; (800fba4 <RadioIrqProcess+0x280>)
 800fa40:	785b      	ldrb	r3, [r3, #1]
 800fa42:	b1f3      	cbz	r3, 800fa82 <RadioIrqProcess+0x15e>
        SUBGRF_GetPayload( RadioBuffer, &size , 255 );
 800fa44:	22ff      	movs	r2, #255	; 0xff
 800fa46:	f10d 0107 	add.w	r1, sp, #7
 800fa4a:	485b      	ldr	r0, [pc, #364]	; (800fbb8 <RadioIrqProcess+0x294>)
 800fa4c:	f001 fcf6 	bl	801143c <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &(SubgRf.PacketStatus) );
 800fa50:	485a      	ldr	r0, [pc, #360]	; (800fbbc <RadioIrqProcess+0x298>)
 800fa52:	f001 f997 	bl	8010d84 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 800fa56:	4b56      	ldr	r3, [pc, #344]	; (800fbb0 <RadioIrqProcess+0x28c>)
 800fa58:	681b      	ldr	r3, [r3, #0]
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d05c      	beq.n	800fb18 <RadioIrqProcess+0x1f4>
 800fa5e:	689c      	ldr	r4, [r3, #8]
 800fa60:	2c00      	cmp	r4, #0
 800fa62:	d059      	beq.n	800fb18 <RadioIrqProcess+0x1f4>
            switch ( SubgRf.PacketStatus.packetType )
 800fa64:	4b4f      	ldr	r3, [pc, #316]	; (800fba4 <RadioIrqProcess+0x280>)
 800fa66:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800fa6a:	2b01      	cmp	r3, #1
 800fa6c:	d11d      	bne.n	800faaa <RadioIrqProcess+0x186>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt, SubgRf.PacketStatus.Params.LoRa.SnrPkt );
 800fa6e:	4a4d      	ldr	r2, [pc, #308]	; (800fba4 <RadioIrqProcess+0x280>)
 800fa70:	f992 3031 	ldrsb.w	r3, [r2, #49]	; 0x31
 800fa74:	f992 2030 	ldrsb.w	r2, [r2, #48]	; 0x30
 800fa78:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800fa7c:	484e      	ldr	r0, [pc, #312]	; (800fbb8 <RadioIrqProcess+0x294>)
 800fa7e:	47a0      	blx	r4
                break;
 800fa80:	e04a      	b.n	800fb18 <RadioIrqProcess+0x1f4>
            SUBGRF_SetStandby( STDBY_RC );
 800fa82:	2000      	movs	r0, #0
 800fa84:	f000 ffce 	bl	8010a24 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( 0x0902, 0x00 );
 800fa88:	2100      	movs	r1, #0
 800fa8a:	f640 1002 	movw	r0, #2306	; 0x902
 800fa8e:	f001 f9b5 	bl	8010dfc <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( 0x0944, SUBGRF_ReadRegister( 0x0944 ) | ( 1 << 1 ) );
 800fa92:	f640 1044 	movw	r0, #2372	; 0x944
 800fa96:	f001 faa3 	bl	8010fe0 <SUBGRF_ReadRegister>
 800fa9a:	f040 0102 	orr.w	r1, r0, #2
 800fa9e:	b2c9      	uxtb	r1, r1
 800faa0:	f640 1044 	movw	r0, #2372	; 0x944
 800faa4:	f001 f9aa 	bl	8010dfc <SUBGRF_WriteRegister>
 800faa8:	e7cc      	b.n	800fa44 <RadioIrqProcess+0x120>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 800faaa:	4c3e      	ldr	r4, [pc, #248]	; (800fba4 <RadioIrqProcess+0x280>)
 800faac:	4669      	mov	r1, sp
 800faae:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800fab0:	f001 fd78 	bl	80115a4 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, (int8_t) DIVR(cfo, 1000) );
 800fab4:	4b3e      	ldr	r3, [pc, #248]	; (800fbb0 <RadioIrqProcess+0x28c>)
 800fab6:	681b      	ldr	r3, [r3, #0]
 800fab8:	689d      	ldr	r5, [r3, #8]
 800faba:	9b00      	ldr	r3, [sp, #0]
 800fabc:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800fac0:	4a3f      	ldr	r2, [pc, #252]	; (800fbc0 <RadioIrqProcess+0x29c>)
 800fac2:	fb82 1203 	smull	r1, r2, r2, r3
 800fac6:	17db      	asrs	r3, r3, #31
 800fac8:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 800facc:	b25b      	sxtb	r3, r3
 800face:	f994 2029 	ldrsb.w	r2, [r4, #41]	; 0x29
 800fad2:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800fad6:	4838      	ldr	r0, [pc, #224]	; (800fbb8 <RadioIrqProcess+0x294>)
 800fad8:	47a8      	blx	r5
                break;
 800fada:	e01d      	b.n	800fb18 <RadioIrqProcess+0x1f4>
        SUBGRF_SetStandby( STDBY_RC );
 800fadc:	2000      	movs	r0, #0
 800fade:	f000 ffa1 	bl	8010a24 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800fae2:	4b33      	ldr	r3, [pc, #204]	; (800fbb0 <RadioIrqProcess+0x28c>)
 800fae4:	681b      	ldr	r3, [r3, #0]
 800fae6:	b1bb      	cbz	r3, 800fb18 <RadioIrqProcess+0x1f4>
 800fae8:	699b      	ldr	r3, [r3, #24]
 800faea:	b1ab      	cbz	r3, 800fb18 <RadioIrqProcess+0x1f4>
            RadioEvents->CadDone( true );
 800faec:	2001      	movs	r0, #1
 800faee:	4798      	blx	r3
 800faf0:	e012      	b.n	800fb18 <RadioIrqProcess+0x1f4>
            TimerStop( &TxTimeoutTimer );
 800faf2:	4830      	ldr	r0, [pc, #192]	; (800fbb4 <RadioIrqProcess+0x290>)
 800faf4:	f002 f9ce 	bl	8011e94 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 800faf8:	2000      	movs	r0, #0
 800fafa:	f000 ff93 	bl	8010a24 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800fafe:	4b2c      	ldr	r3, [pc, #176]	; (800fbb0 <RadioIrqProcess+0x28c>)
 800fb00:	681b      	ldr	r3, [r3, #0]
 800fb02:	b14b      	cbz	r3, 800fb18 <RadioIrqProcess+0x1f4>
 800fb04:	685b      	ldr	r3, [r3, #4]
 800fb06:	b13b      	cbz	r3, 800fb18 <RadioIrqProcess+0x1f4>
                RadioEvents->TxTimeout( );
 800fb08:	4798      	blx	r3
 800fb0a:	e005      	b.n	800fb18 <RadioIrqProcess+0x1f4>
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 800fb0c:	4b2d      	ldr	r3, [pc, #180]	; (800fbc4 <RadioIrqProcess+0x2a0>)
 800fb0e:	2201      	movs	r2, #1
 800fb10:	2100      	movs	r1, #0
 800fb12:	2002      	movs	r0, #2
 800fb14:	f001 fe7a 	bl	801180c <UTIL_ADV_TRACE_COND_FSend>
}
 800fb18:	b003      	add	sp, #12
 800fb1a:	bd30      	pop	{r4, r5, pc}
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 800fb1c:	4b2a      	ldr	r3, [pc, #168]	; (800fbc8 <RadioIrqProcess+0x2a4>)
 800fb1e:	2201      	movs	r2, #1
 800fb20:	2100      	movs	r1, #0
 800fb22:	2002      	movs	r0, #2
 800fb24:	f001 fe72 	bl	801180c <UTIL_ADV_TRACE_COND_FSend>
        if ( 1UL == RFW_Is_Init( ) )
 800fb28:	f001 fd8a 	bl	8011640 <RFW_Is_Init>
 800fb2c:	2801      	cmp	r0, #1
 800fb2e:	d1f3      	bne.n	800fb18 <RadioIrqProcess+0x1f4>
            RFW_ReceivePayload( );
 800fb30:	f001 fd92 	bl	8011658 <RFW_ReceivePayload>
 800fb34:	e7f0      	b.n	800fb18 <RadioIrqProcess+0x1f4>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 800fb36:	4b25      	ldr	r3, [pc, #148]	; (800fbcc <RadioIrqProcess+0x2a8>)
 800fb38:	2201      	movs	r2, #1
 800fb3a:	2100      	movs	r1, #0
 800fb3c:	2002      	movs	r0, #2
 800fb3e:	f001 fe65 	bl	801180c <UTIL_ADV_TRACE_COND_FSend>
        break;
 800fb42:	e7e9      	b.n	800fb18 <RadioIrqProcess+0x1f4>
        TimerStop( &RxTimeoutTimer );
 800fb44:	4819      	ldr	r0, [pc, #100]	; (800fbac <RadioIrqProcess+0x288>)
 800fb46:	f002 f9a5 	bl	8011e94 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 800fb4a:	4b16      	ldr	r3, [pc, #88]	; (800fba4 <RadioIrqProcess+0x280>)
 800fb4c:	785b      	ldrb	r3, [r3, #1]
 800fb4e:	b173      	cbz	r3, 800fb6e <RadioIrqProcess+0x24a>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800fb50:	4b17      	ldr	r3, [pc, #92]	; (800fbb0 <RadioIrqProcess+0x28c>)
 800fb52:	681b      	ldr	r3, [r3, #0]
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d0df      	beq.n	800fb18 <RadioIrqProcess+0x1f4>
 800fb58:	68db      	ldr	r3, [r3, #12]
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	d0dc      	beq.n	800fb18 <RadioIrqProcess+0x1f4>
            RadioEvents->RxTimeout( );
 800fb5e:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 800fb60:	4b1b      	ldr	r3, [pc, #108]	; (800fbd0 <RadioIrqProcess+0x2ac>)
 800fb62:	2201      	movs	r2, #1
 800fb64:	2100      	movs	r1, #0
 800fb66:	2002      	movs	r0, #2
 800fb68:	f001 fe50 	bl	801180c <UTIL_ADV_TRACE_COND_FSend>
 800fb6c:	e7d4      	b.n	800fb18 <RadioIrqProcess+0x1f4>
            SUBGRF_SetStandby( STDBY_RC );
 800fb6e:	2000      	movs	r0, #0
 800fb70:	f000 ff58 	bl	8010a24 <SUBGRF_SetStandby>
 800fb74:	e7ec      	b.n	800fb50 <RadioIrqProcess+0x22c>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 800fb76:	4b17      	ldr	r3, [pc, #92]	; (800fbd4 <RadioIrqProcess+0x2b0>)
 800fb78:	2201      	movs	r2, #1
 800fb7a:	2100      	movs	r1, #0
 800fb7c:	2002      	movs	r0, #2
 800fb7e:	f001 fe45 	bl	801180c <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 800fb82:	4b08      	ldr	r3, [pc, #32]	; (800fba4 <RadioIrqProcess+0x280>)
 800fb84:	785b      	ldrb	r3, [r3, #1]
 800fb86:	b143      	cbz	r3, 800fb9a <RadioIrqProcess+0x276>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 800fb88:	4b09      	ldr	r3, [pc, #36]	; (800fbb0 <RadioIrqProcess+0x28c>)
 800fb8a:	681b      	ldr	r3, [r3, #0]
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d0c3      	beq.n	800fb18 <RadioIrqProcess+0x1f4>
 800fb90:	691b      	ldr	r3, [r3, #16]
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	d0c0      	beq.n	800fb18 <RadioIrqProcess+0x1f4>
            RadioEvents->RxError( );
 800fb96:	4798      	blx	r3
}
 800fb98:	e7be      	b.n	800fb18 <RadioIrqProcess+0x1f4>
            SUBGRF_SetStandby( STDBY_RC );
 800fb9a:	2000      	movs	r0, #0
 800fb9c:	f000 ff42 	bl	8010a24 <SUBGRF_SetStandby>
 800fba0:	e7f2      	b.n	800fb88 <RadioIrqProcess+0x264>
 800fba2:	bf00      	nop
 800fba4:	20001294 	.word	0x20001294
 800fba8:	08017ab8 	.word	0x08017ab8
 800fbac:	2000127c 	.word	0x2000127c
 800fbb0:	20001278 	.word	0x20001278
 800fbb4:	200012ec 	.word	0x200012ec
 800fbb8:	20001178 	.word	0x20001178
 800fbbc:	200012b8 	.word	0x200012b8
 800fbc0:	10624dd3 	.word	0x10624dd3
 800fbc4:	08017acc 	.word	0x08017acc
 800fbc8:	08017ad8 	.word	0x08017ad8
 800fbcc:	08017ae4 	.word	0x08017ae4
 800fbd0:	08017af0 	.word	0x08017af0
 800fbd4:	08017afc 	.word	0x08017afc

0800fbd8 <RadioOnDioIrq>:
{
 800fbd8:	b508      	push	{r3, lr}
    SubgRf.RadioIrq = radioIrq;
 800fbda:	4b03      	ldr	r3, [pc, #12]	; (800fbe8 <RadioOnDioIrq+0x10>)
 800fbdc:	f8a3 0054 	strh.w	r0, [r3, #84]	; 0x54
    RADIO_IRQ_PROCESS();
 800fbe0:	f7ff fea0 	bl	800f924 <RadioIrqProcess>
}
 800fbe4:	bd08      	pop	{r3, pc}
 800fbe6:	bf00      	nop
 800fbe8:	20001294 	.word	0x20001294

0800fbec <RadioGetWakeupTime>:
{
 800fbec:	b508      	push	{r3, lr}
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 800fbee:	f001 fc6a 	bl	80114c6 <SUBGRF_GetRadioWakeUpTime>
}
 800fbf2:	3003      	adds	r0, #3
 800fbf4:	bd08      	pop	{r3, pc}

0800fbf6 <RadioReadRegisters>:
{
 800fbf6:	b508      	push	{r3, lr}
    SUBGRF_ReadRegisters( addr, buffer, size );
 800fbf8:	f001 fbaa 	bl	8011350 <SUBGRF_ReadRegisters>
}
 800fbfc:	bd08      	pop	{r3, pc}

0800fbfe <RadioWriteRegisters>:
{
 800fbfe:	b508      	push	{r3, lr}
    SUBGRF_WriteRegisters( addr, buffer, size );
 800fc00:	f001 faf2 	bl	80111e8 <SUBGRF_WriteRegisters>
}
 800fc04:	bd08      	pop	{r3, pc}

0800fc06 <RadioRssi>:
{
 800fc06:	b508      	push	{r3, lr}
    return SUBGRF_GetRssiInst( );
 800fc08:	f001 f8ae 	bl	8010d68 <SUBGRF_GetRssiInst>
}
 800fc0c:	b200      	sxth	r0, r0
 800fc0e:	bd08      	pop	{r3, pc}

0800fc10 <RadioSetTxContinuousWave>:
{
 800fc10:	b538      	push	{r3, r4, r5, lr}
 800fc12:	460d      	mov	r5, r1
    uint32_t timeout = ( uint32_t )time * 1000;
 800fc14:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800fc18:	fb03 f402 	mul.w	r4, r3, r2
    SUBGRF_SetRfFrequency( freq );
 800fc1c:	f001 f864 	bl	8010ce8 <SUBGRF_SetRfFrequency>
    antswitchpow = SUBGRF_SetRfTxPower( power );
 800fc20:	4628      	mov	r0, r5
 800fc22:	f001 fc39 	bl	8011498 <SUBGRF_SetRfTxPower>
    SUBGRF_SetSwitch(antswitchpow, RFSWITCH_TX);
 800fc26:	2101      	movs	r1, #1
 800fc28:	f001 fc22 	bl	8011470 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 800fc2c:	f000 ff78 	bl	8010b20 <SUBGRF_SetTxContinuousWave>
    TimerSetValue( &TxTimeoutTimer, timeout );
 800fc30:	4d04      	ldr	r5, [pc, #16]	; (800fc44 <RadioSetTxContinuousWave+0x34>)
 800fc32:	4621      	mov	r1, r4
 800fc34:	4628      	mov	r0, r5
 800fc36:	f002 f9cd 	bl	8011fd4 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 800fc3a:	4628      	mov	r0, r5
 800fc3c:	f002 f984 	bl	8011f48 <UTIL_TIMER_Start>
}
 800fc40:	bd38      	pop	{r3, r4, r5, pc}
 800fc42:	bf00      	nop
 800fc44:	200012ec 	.word	0x200012ec

0800fc48 <RadioSetChannel>:
{
 800fc48:	b508      	push	{r3, lr}
    SUBGRF_SetRfFrequency( freq );
 800fc4a:	f001 f84d 	bl	8010ce8 <SUBGRF_SetRfFrequency>
}
 800fc4e:	bd08      	pop	{r3, pc}

0800fc50 <RadioStartCad>:
{
 800fc50:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 800fc52:	2100      	movs	r1, #0
 800fc54:	4b07      	ldr	r3, [pc, #28]	; (800fc74 <RadioStartCad+0x24>)
 800fc56:	f893 0056 	ldrb.w	r0, [r3, #86]	; 0x56
 800fc5a:	f001 fc09 	bl	8011470 <SUBGRF_SetSwitch>
    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 800fc5e:	2300      	movs	r3, #0
 800fc60:	461a      	mov	r2, r3
 800fc62:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800fc66:	4608      	mov	r0, r1
 800fc68:	f001 f805 	bl	8010c76 <SUBGRF_SetDioIrqParams>
    SUBGRF_SetCad( );
 800fc6c:	f000 ff4c 	bl	8010b08 <SUBGRF_SetCad>
}
 800fc70:	bd08      	pop	{r3, pc}
 800fc72:	bf00      	nop
 800fc74:	20001294 	.word	0x20001294

0800fc78 <RadioRx>:
{
 800fc78:	b538      	push	{r3, r4, r5, lr}
 800fc7a:	4604      	mov	r4, r0
    if ( 1UL == RFW_Is_Init( ) )
 800fc7c:	f001 fce0 	bl	8011640 <RFW_Is_Init>
 800fc80:	2801      	cmp	r0, #1
 800fc82:	d014      	beq.n	800fcae <RadioRx+0x36>
      SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800fc84:	2300      	movs	r3, #0
 800fc86:	461a      	mov	r2, r3
 800fc88:	f240 2162 	movw	r1, #610	; 0x262
 800fc8c:	4608      	mov	r0, r1
 800fc8e:	f000 fff2 	bl	8010c76 <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 800fc92:	b97c      	cbnz	r4, 800fcb4 <RadioRx+0x3c>
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 800fc94:	4c0f      	ldr	r4, [pc, #60]	; (800fcd4 <RadioRx+0x5c>)
 800fc96:	2100      	movs	r1, #0
 800fc98:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
 800fc9c:	f001 fbe8 	bl	8011470 <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 800fca0:	7863      	ldrb	r3, [r4, #1]
 800fca2:	b183      	cbz	r3, 800fcc6 <RadioRx+0x4e>
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 800fca4:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800fca8:	f000 fef0 	bl	8010a8c <SUBGRF_SetRx>
}
 800fcac:	bd38      	pop	{r3, r4, r5, pc}
      RFW_ReceiveInit( );
 800fcae:	f001 fccf 	bl	8011650 <RFW_ReceiveInit>
 800fcb2:	e7ee      	b.n	800fc92 <RadioRx+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 800fcb4:	4d08      	ldr	r5, [pc, #32]	; (800fcd8 <RadioRx+0x60>)
 800fcb6:	4621      	mov	r1, r4
 800fcb8:	4628      	mov	r0, r5
 800fcba:	f002 f98b 	bl	8011fd4 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 800fcbe:	4628      	mov	r0, r5
 800fcc0:	f002 f942 	bl	8011f48 <UTIL_TIMER_Start>
 800fcc4:	e7e6      	b.n	800fc94 <RadioRx+0x1c>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 800fcc6:	4b03      	ldr	r3, [pc, #12]	; (800fcd4 <RadioRx+0x5c>)
 800fcc8:	6898      	ldr	r0, [r3, #8]
 800fcca:	0180      	lsls	r0, r0, #6
 800fccc:	f000 fede 	bl	8010a8c <SUBGRF_SetRx>
}
 800fcd0:	e7ec      	b.n	800fcac <RadioRx+0x34>
 800fcd2:	bf00      	nop
 800fcd4:	20001294 	.word	0x20001294
 800fcd8:	2000127c 	.word	0x2000127c

0800fcdc <RadioSleep>:
{
 800fcdc:	b508      	push	{r3, lr}
    SUBGRF_SetSleep( params );
 800fcde:	f04f 0004 	mov.w	r0, #4
 800fce2:	f001 f9d7 	bl	8011094 <SUBGRF_SetSleep>
    RADIO_DELAY_MS( 2 );
 800fce6:	2002      	movs	r0, #2
 800fce8:	f7f2 f822 	bl	8001d30 <HAL_Delay>
}
 800fcec:	bd08      	pop	{r3, pc}
	...

0800fcf0 <RadioSend>:
{
 800fcf0:	b570      	push	{r4, r5, r6, lr}
 800fcf2:	b082      	sub	sp, #8
 800fcf4:	4605      	mov	r5, r0
 800fcf6:	460c      	mov	r4, r1
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 800fcf8:	2300      	movs	r3, #0
 800fcfa:	461a      	mov	r2, r3
 800fcfc:	f240 2101 	movw	r1, #513	; 0x201
 800fd00:	4608      	mov	r0, r1
 800fd02:	f000 ffb8 	bl	8010c76 <SUBGRF_SetDioIrqParams>
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_TX);
 800fd06:	4e5a      	ldr	r6, [pc, #360]	; (800fe70 <RadioSend+0x180>)
 800fd08:	2101      	movs	r1, #1
 800fd0a:	f896 0056 	ldrb.w	r0, [r6, #86]	; 0x56
 800fd0e:	f001 fbaf 	bl	8011470 <SUBGRF_SetSwitch>
    if((SubgRf.Modem==MODEM_LORA) && (SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ))
 800fd12:	7833      	ldrb	r3, [r6, #0]
 800fd14:	2b01      	cmp	r3, #1
 800fd16:	d103      	bne.n	800fd20 <RadioSend+0x30>
 800fd18:	f896 3051 	ldrb.w	r3, [r6, #81]	; 0x51
 800fd1c:	2b06      	cmp	r3, #6
 800fd1e:	d012      	beq.n	800fd46 <RadioSend+0x56>
        SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) | ( 1 << 2 ) );
 800fd20:	f640 0089 	movw	r0, #2185	; 0x889
 800fd24:	f001 f95c 	bl	8010fe0 <SUBGRF_ReadRegister>
 800fd28:	f040 0104 	orr.w	r1, r0, #4
 800fd2c:	b2c9      	uxtb	r1, r1
 800fd2e:	f640 0089 	movw	r0, #2185	; 0x889
 800fd32:	f001 f863 	bl	8010dfc <SUBGRF_WriteRegister>
    switch(SubgRf.Modem)
 800fd36:	4b4e      	ldr	r3, [pc, #312]	; (800fe70 <RadioSend+0x180>)
 800fd38:	781b      	ldrb	r3, [r3, #0]
 800fd3a:	2b03      	cmp	r3, #3
 800fd3c:	d818      	bhi.n	800fd70 <RadioSend+0x80>
 800fd3e:	e8df f003 	tbb	[pc, r3]
 800fd42:	0d22      	.short	0x0d22
 800fd44:	5a4d      	.short	0x5a4d
        SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 800fd46:	f640 0089 	movw	r0, #2185	; 0x889
 800fd4a:	f001 f949 	bl	8010fe0 <SUBGRF_ReadRegister>
 800fd4e:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 800fd52:	f640 0089 	movw	r0, #2185	; 0x889
 800fd56:	f001 f851 	bl	8010dfc <SUBGRF_WriteRegister>
 800fd5a:	e7ec      	b.n	800fd36 <RadioSend+0x46>
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 800fd5c:	4844      	ldr	r0, [pc, #272]	; (800fe70 <RadioSend+0x180>)
 800fd5e:	77c4      	strb	r4, [r0, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800fd60:	300e      	adds	r0, #14
 800fd62:	f001 fa83 	bl	801126c <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 800fd66:	2200      	movs	r2, #0
 800fd68:	4621      	mov	r1, r4
 800fd6a:	4628      	mov	r0, r5
 800fd6c:	f001 fb4d 	bl	801140a <SUBGRF_SendPayload>
    TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 800fd70:	4c40      	ldr	r4, [pc, #256]	; (800fe74 <RadioSend+0x184>)
 800fd72:	4b3f      	ldr	r3, [pc, #252]	; (800fe70 <RadioSend+0x180>)
 800fd74:	6859      	ldr	r1, [r3, #4]
 800fd76:	4620      	mov	r0, r4
 800fd78:	f002 f92c 	bl	8011fd4 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 800fd7c:	4620      	mov	r0, r4
 800fd7e:	f002 f8e3 	bl	8011f48 <UTIL_TIMER_Start>
}
 800fd82:	b002      	add	sp, #8
 800fd84:	bd70      	pop	{r4, r5, r6, pc}
            if ( 1UL == RFW_Is_Init( ) )
 800fd86:	f001 fc5b 	bl	8011640 <RFW_Is_Init>
 800fd8a:	2801      	cmp	r0, #1
 800fd8c:	d00a      	beq.n	800fda4 <RadioSend+0xb4>
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 800fd8e:	4838      	ldr	r0, [pc, #224]	; (800fe70 <RadioSend+0x180>)
 800fd90:	7584      	strb	r4, [r0, #22]
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800fd92:	300e      	adds	r0, #14
 800fd94:	f001 fa6a 	bl	801126c <SUBGRF_SetPacketParams>
              SUBGRF_SendPayload( buffer, size, 0 );
 800fd98:	2200      	movs	r2, #0
 800fd9a:	4621      	mov	r1, r4
 800fd9c:	4628      	mov	r0, r5
 800fd9e:	f001 fb34 	bl	801140a <SUBGRF_SendPayload>
 800fda2:	e7e5      	b.n	800fd70 <RadioSend+0x80>
              if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 800fda4:	f10d 0207 	add.w	r2, sp, #7
 800fda8:	4621      	mov	r1, r4
 800fdaa:	4628      	mov	r0, r5
 800fdac:	f001 fc4d 	bl	801164a <RFW_TransmitInit>
 800fdb0:	b968      	cbnz	r0, 800fdce <RadioSend+0xde>
                  SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 800fdb2:	482f      	ldr	r0, [pc, #188]	; (800fe70 <RadioSend+0x180>)
 800fdb4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800fdb8:	7583      	strb	r3, [r0, #22]
                  SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800fdba:	300e      	adds	r0, #14
 800fdbc:	f001 fa56 	bl	801126c <SUBGRF_SetPacketParams>
                  SUBGRF_SendPayload( buffer, outsize, 0 );
 800fdc0:	2200      	movs	r2, #0
 800fdc2:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800fdc6:	4628      	mov	r0, r5
 800fdc8:	f001 fb1f 	bl	801140a <SUBGRF_SendPayload>
 800fdcc:	e7d0      	b.n	800fd70 <RadioSend+0x80>
                MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n");
 800fdce:	4b2a      	ldr	r3, [pc, #168]	; (800fe78 <RadioSend+0x188>)
 800fdd0:	2201      	movs	r2, #1
 800fdd2:	2100      	movs	r1, #0
 800fdd4:	2002      	movs	r0, #2
 800fdd6:	f001 fd19 	bl	801180c <UTIL_ADV_TRACE_COND_FSend>
                return;
 800fdda:	e7d2      	b.n	800fd82 <RadioSend+0x92>
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 800fddc:	4824      	ldr	r0, [pc, #144]	; (800fe70 <RadioSend+0x180>)
 800fdde:	2302      	movs	r3, #2
 800fde0:	7383      	strb	r3, [r0, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 800fde2:	7684      	strb	r4, [r0, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800fde4:	300e      	adds	r0, #14
 800fde6:	f001 fa41 	bl	801126c <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 800fdea:	2200      	movs	r2, #0
 800fdec:	4621      	mov	r1, r4
 800fdee:	4628      	mov	r0, r5
 800fdf0:	f001 fb0b 	bl	801140a <SUBGRF_SendPayload>
            break;
 800fdf4:	e7bc      	b.n	800fd70 <RadioSend+0x80>
            payload_integration( RadioBuffer, buffer, size );
 800fdf6:	4622      	mov	r2, r4
 800fdf8:	4629      	mov	r1, r5
 800fdfa:	4820      	ldr	r0, [pc, #128]	; (800fe7c <RadioSend+0x18c>)
 800fdfc:	f7ff fca0 	bl	800f740 <payload_integration>
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 800fe00:	4e1b      	ldr	r6, [pc, #108]	; (800fe70 <RadioSend+0x180>)
 800fe02:	2302      	movs	r3, #2
 800fe04:	73b3      	strb	r3, [r6, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 800fe06:	1c65      	adds	r5, r4, #1
 800fe08:	b2ed      	uxtb	r5, r5
 800fe0a:	76b5      	strb	r5, [r6, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800fe0c:	f106 000e 	add.w	r0, r6, #14
 800fe10:	f001 fa2c 	bl	801126c <SUBGRF_SetPacketParams>
            RadioWrite( 0x00F1, 0 ); // clean start-up LSB
 800fe14:	2100      	movs	r1, #0
 800fe16:	20f1      	movs	r0, #241	; 0xf1
 800fe18:	f7ff fd08 	bl	800f82c <RadioWrite>
            RadioWrite( 0x00F0, 0 ); // clean start-up MSB
 800fe1c:	2100      	movs	r1, #0
 800fe1e:	20f0      	movs	r0, #240	; 0xf0
 800fe20:	f7ff fd04 	bl	800f82c <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 800fe24:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 800fe26:	2b64      	cmp	r3, #100	; 0x64
 800fe28:	d019      	beq.n	800fe5e <RadioSend+0x16e>
                RadioWrite( 0x00F3, 0xE1 ); // clean end of frame LSB
 800fe2a:	21e1      	movs	r1, #225	; 0xe1
 800fe2c:	20f3      	movs	r0, #243	; 0xf3
 800fe2e:	f7ff fcfd 	bl	800f82c <RadioWrite>
                RadioWrite( 0x00F2, 0x04 ); // clean end of frame MSB
 800fe32:	2104      	movs	r1, #4
 800fe34:	20f2      	movs	r0, #242	; 0xf2
 800fe36:	f7ff fcf9 	bl	800f82c <RadioWrite>
            uint16_t bitNum = ( size * 8 ) + 2;
 800fe3a:	00e1      	lsls	r1, r4, #3
 800fe3c:	1c8c      	adds	r4, r1, #2
            RadioWrite( 0x00F4, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 800fe3e:	0a09      	lsrs	r1, r1, #8
 800fe40:	20f4      	movs	r0, #244	; 0xf4
 800fe42:	f7ff fcf3 	bl	800f82c <RadioWrite>
            RadioWrite( 0x00F5, bitNum & 0x00FF );             // limit frame
 800fe46:	f004 01fe 	and.w	r1, r4, #254	; 0xfe
 800fe4a:	20f5      	movs	r0, #245	; 0xf5
 800fe4c:	f7ff fcee 	bl	800f82c <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size+1 , 0xFFFFFF );
 800fe50:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800fe54:	4629      	mov	r1, r5
 800fe56:	4809      	ldr	r0, [pc, #36]	; (800fe7c <RadioSend+0x18c>)
 800fe58:	f001 fad7 	bl	801140a <SUBGRF_SendPayload>
            break;
 800fe5c:	e788      	b.n	800fd70 <RadioSend+0x80>
                RadioWrite( 0x00F3, 0x70 ); // clean end of frame LSB
 800fe5e:	2170      	movs	r1, #112	; 0x70
 800fe60:	20f3      	movs	r0, #243	; 0xf3
 800fe62:	f7ff fce3 	bl	800f82c <RadioWrite>
                RadioWrite( 0x00F2, 0x1D ); // clean end of frame MSB
 800fe66:	211d      	movs	r1, #29
 800fe68:	20f2      	movs	r0, #242	; 0xf2
 800fe6a:	f7ff fcdf 	bl	800f82c <RadioWrite>
 800fe6e:	e7e4      	b.n	800fe3a <RadioSend+0x14a>
 800fe70:	20001294 	.word	0x20001294
 800fe74:	200012ec 	.word	0x200012ec
 800fe78:	08017b0c 	.word	0x08017b0c
 800fe7c:	20001178 	.word	0x20001178

0800fe80 <RadioSetModem>:
{
 800fe80:	b510      	push	{r4, lr}
 800fe82:	4604      	mov	r4, r0
    SubgRf.Modem = modem;
 800fe84:	4b19      	ldr	r3, [pc, #100]	; (800feec <RadioSetModem+0x6c>)
 800fe86:	7018      	strb	r0, [r3, #0]
    RFW_SetRadioModem(modem);
 800fe88:	f001 fbe7 	bl	801165a <RFW_SetRadioModem>
    switch( modem )
 800fe8c:	3c01      	subs	r4, #1
 800fe8e:	2c03      	cmp	r4, #3
 800fe90:	d803      	bhi.n	800fe9a <RadioSetModem+0x1a>
 800fe92:	e8df f004 	tbb	[pc, r4]
 800fe96:	1509      	.short	0x1509
 800fe98:	231c      	.short	0x231c
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 800fe9a:	2000      	movs	r0, #0
 800fe9c:	f000 fffe 	bl	8010e9c <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 800fea0:	4b12      	ldr	r3, [pc, #72]	; (800feec <RadioSetModem+0x6c>)
 800fea2:	2200      	movs	r2, #0
 800fea4:	735a      	strb	r2, [r3, #13]
        break;
 800fea6:	e011      	b.n	800fecc <RadioSetModem+0x4c>
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 800fea8:	2001      	movs	r0, #1
 800feaa:	f000 fff7 	bl	8010e9c <SUBGRF_SetPacketType>
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 800feae:	4b0f      	ldr	r3, [pc, #60]	; (800feec <RadioSetModem+0x6c>)
 800feb0:	7b5a      	ldrb	r2, [r3, #13]
 800feb2:	7b18      	ldrb	r0, [r3, #12]
 800feb4:	4282      	cmp	r2, r0
 800feb6:	d009      	beq.n	800fecc <RadioSetModem+0x4c>
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 800feb8:	7358      	strb	r0, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 800feba:	f000 fa81 	bl	80103c0 <RadioSetPublicNetwork>
 800febe:	e005      	b.n	800fecc <RadioSetModem+0x4c>
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 800fec0:	2002      	movs	r0, #2
 800fec2:	f000 ffeb 	bl	8010e9c <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 800fec6:	4b09      	ldr	r3, [pc, #36]	; (800feec <RadioSetModem+0x6c>)
 800fec8:	2200      	movs	r2, #0
 800feca:	735a      	strb	r2, [r3, #13]
}
 800fecc:	bd10      	pop	{r4, pc}
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 800fece:	2002      	movs	r0, #2
 800fed0:	f000 ffe4 	bl	8010e9c <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 800fed4:	4b05      	ldr	r3, [pc, #20]	; (800feec <RadioSetModem+0x6c>)
 800fed6:	2200      	movs	r2, #0
 800fed8:	735a      	strb	r2, [r3, #13]
        break;
 800feda:	e7f7      	b.n	800fecc <RadioSetModem+0x4c>
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 800fedc:	2000      	movs	r0, #0
 800fede:	f000 ffdd 	bl	8010e9c <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 800fee2:	4b02      	ldr	r3, [pc, #8]	; (800feec <RadioSetModem+0x6c>)
 800fee4:	2200      	movs	r2, #0
 800fee6:	735a      	strb	r2, [r3, #13]
}
 800fee8:	e7f0      	b.n	800fecc <RadioSetModem+0x4c>
 800feea:	bf00      	nop
 800feec:	20001294 	.word	0x20001294

0800fef0 <RadioSetTxGenericConfig>:
    }
    return status;
}

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t* config, int8_t power, uint32_t timeout )
{
 800fef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fef4:	b086      	sub	sp, #24
 800fef6:	4605      	mov	r5, r0
 800fef8:	460c      	mov	r4, r1
 800fefa:	4617      	mov	r7, r2
 800fefc:	461e      	mov	r6, r3
    uint8_t syncword[8] = {0};
 800fefe:	2300      	movs	r3, #0
 800ff00:	9304      	str	r3, [sp, #16]
 800ff02:	9305      	str	r3, [sp, #20]
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 800ff04:	f001 fb9b 	bl	801163e <RFW_DeInit>
    switch( modem )
 800ff08:	2d01      	cmp	r5, #1
 800ff0a:	f000 8087 	beq.w	801001c <RadioSetTxGenericConfig+0x12c>
 800ff0e:	2d02      	cmp	r5, #2
 800ff10:	f000 80ef 	beq.w	80100f2 <RadioSetTxGenericConfig+0x202>
 800ff14:	b165      	cbz	r5, 800ff30 <RadioSetTxGenericConfig+0x40>
        break;
    default:
        break;
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 800ff16:	4638      	mov	r0, r7
 800ff18:	f001 fabe 	bl	8011498 <SUBGRF_SetRfTxPower>
 800ff1c:	4c85      	ldr	r4, [pc, #532]	; (8010134 <RadioSetTxGenericConfig+0x244>)
 800ff1e:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 800ff22:	f001 fb91 	bl	8011648 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 800ff26:	6066      	str	r6, [r4, #4]
    return 0;
 800ff28:	2000      	movs	r0, #0
}
 800ff2a:	b006      	add	sp, #24
 800ff2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 800ff30:	68a3      	ldr	r3, [r4, #8]
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	f000 80f2 	beq.w	801011c <RadioSetTxGenericConfig+0x22c>
 800ff38:	6923      	ldr	r3, [r4, #16]
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	f000 80f1 	beq.w	8010122 <RadioSetTxGenericConfig+0x232>
        if( config->fsk.SyncWordLength > 8 )
 800ff40:	7d20      	ldrb	r0, [r4, #20]
 800ff42:	2808      	cmp	r0, #8
 800ff44:	f200 80f0 	bhi.w	8010128 <RadioSetTxGenericConfig+0x238>
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 800ff48:	2100      	movs	r1, #0
 800ff4a:	e007      	b.n	800ff5c <RadioSetTxGenericConfig+0x6c>
                syncword[i] = config->fsk.SyncWord[i];
 800ff4c:	69a3      	ldr	r3, [r4, #24]
 800ff4e:	5c5a      	ldrb	r2, [r3, r1]
 800ff50:	f101 0318 	add.w	r3, r1, #24
 800ff54:	446b      	add	r3, sp
 800ff56:	f803 2c08 	strb.w	r2, [r3, #-8]
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 800ff5a:	3101      	adds	r1, #1
 800ff5c:	4288      	cmp	r0, r1
 800ff5e:	dcf5      	bgt.n	800ff4c <RadioSetTxGenericConfig+0x5c>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800ff60:	4d74      	ldr	r5, [pc, #464]	; (8010134 <RadioSetTxGenericConfig+0x244>)
 800ff62:	f04f 0800 	mov.w	r8, #0
 800ff66:	f885 8038 	strb.w	r8, [r5, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 800ff6a:	68a3      	ldr	r3, [r4, #8]
 800ff6c:	63eb      	str	r3, [r5, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 800ff6e:	7823      	ldrb	r3, [r4, #0]
 800ff70:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 800ff74:	6860      	ldr	r0, [r4, #4]
 800ff76:	f001 fafd 	bl	8011574 <SUBGRF_GetFskBandwidthRegValue>
 800ff7a:	f885 0045 	strb.w	r0, [r5, #69]	; 0x45
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 800ff7e:	68e3      	ldr	r3, [r4, #12]
 800ff80:	642b      	str	r3, [r5, #64]	; 0x40
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800ff82:	f885 800e 	strb.w	r8, [r5, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 800ff86:	6923      	ldr	r3, [r4, #16]
 800ff88:	00db      	lsls	r3, r3, #3
 800ff8a:	822b      	strh	r3, [r5, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 800ff8c:	2304      	movs	r3, #4
 800ff8e:	74ab      	strb	r3, [r5, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 800ff90:	7d23      	ldrb	r3, [r4, #20]
 800ff92:	00db      	lsls	r3, r3, #3
 800ff94:	74eb      	strb	r3, [r5, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 800ff96:	f885 8014 	strb.w	r8, [r5, #20]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 800ff9a:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800ff9e:	2b02      	cmp	r3, #2
 800ffa0:	d008      	beq.n	800ffb4 <RadioSetTxGenericConfig+0xc4>
 800ffa2:	7fa2      	ldrb	r2, [r4, #30]
 800ffa4:	2a02      	cmp	r2, #2
 800ffa6:	d005      	beq.n	800ffb4 <RadioSetTxGenericConfig+0xc4>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 800ffa8:	7fe0      	ldrb	r0, [r4, #31]
 800ffaa:	4962      	ldr	r1, [pc, #392]	; (8010134 <RadioSetTxGenericConfig+0x244>)
 800ffac:	75c8      	strb	r0, [r1, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 800ffae:	760b      	strb	r3, [r1, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 800ffb0:	754a      	strb	r2, [r1, #21]
 800ffb2:	e018      	b.n	800ffe6 <RadioSetTxGenericConfig+0xf6>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 800ffb4:	7fe2      	ldrb	r2, [r4, #31]
 800ffb6:	f102 030f 	add.w	r3, r2, #15
 800ffba:	b2db      	uxtb	r3, r3
 800ffbc:	2b01      	cmp	r3, #1
 800ffbe:	d901      	bls.n	800ffc4 <RadioSetTxGenericConfig+0xd4>
 800ffc0:	2a01      	cmp	r2, #1
 800ffc2:	d128      	bne.n	8010016 <RadioSetTxGenericConfig+0x126>
            ConfigGeneric.rtx = CONFIG_TX;
 800ffc4:	2301      	movs	r3, #1
 800ffc6:	f88d 300c 	strb.w	r3, [sp, #12]
            ConfigGeneric.TxConfig = config;
 800ffca:	9401      	str	r4, [sp, #4]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 800ffcc:	4a5a      	ldr	r2, [pc, #360]	; (8010138 <RadioSetTxGenericConfig+0x248>)
 800ffce:	4b5b      	ldr	r3, [pc, #364]	; (801013c <RadioSetTxGenericConfig+0x24c>)
 800ffd0:	6819      	ldr	r1, [r3, #0]
 800ffd2:	a801      	add	r0, sp, #4
 800ffd4:	f001 fb30 	bl	8011638 <RFW_Init>
 800ffd8:	b9e8      	cbnz	r0, 8010016 <RadioSetTxGenericConfig+0x126>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 800ffda:	4b56      	ldr	r3, [pc, #344]	; (8010134 <RadioSetTxGenericConfig+0x244>)
 800ffdc:	2200      	movs	r2, #0
 800ffde:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 800ffe0:	2101      	movs	r1, #1
 800ffe2:	75d9      	strb	r1, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 800ffe4:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 800ffe6:	f7ff fc87 	bl	800f8f8 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 800ffea:	2000      	movs	r0, #0
 800ffec:	f7ff ff48 	bl	800fe80 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800fff0:	4d50      	ldr	r5, [pc, #320]	; (8010134 <RadioSetTxGenericConfig+0x244>)
 800fff2:	f105 0038 	add.w	r0, r5, #56	; 0x38
 800fff6:	f000 ff6b 	bl	8010ed0 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800fffa:	f105 000e 	add.w	r0, r5, #14
 800fffe:	f001 f935 	bl	801126c <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8010002:	a804      	add	r0, sp, #16
 8010004:	f001 f900 	bl	8011208 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8010008:	8ba0      	ldrh	r0, [r4, #28]
 801000a:	f001 f863 	bl	80110d4 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->fsk.CrcPolynomial );
 801000e:	8c20      	ldrh	r0, [r4, #32]
 8010010:	f001 f917 	bl	8011242 <SUBGRF_SetCrcPolynomial>
        break;
 8010014:	e77f      	b.n	800ff16 <RadioSetTxGenericConfig+0x26>
                return -1;
 8010016:	f04f 30ff 	mov.w	r0, #4294967295
 801001a:	e786      	b.n	800ff2a <RadioSetTxGenericConfig+0x3a>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801001c:	4b45      	ldr	r3, [pc, #276]	; (8010134 <RadioSetTxGenericConfig+0x244>)
 801001e:	2201      	movs	r2, #1
 8010020:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8010024:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8010028:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801002c:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
 8010030:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8010034:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
 8010038:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 801003c:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 8010040:	2b01      	cmp	r3, #1
 8010042:	d036      	beq.n	80100b2 <RadioSetTxGenericConfig+0x1c2>
 8010044:	2b02      	cmp	r3, #2
 8010046:	d039      	beq.n	80100bc <RadioSetTxGenericConfig+0x1cc>
 8010048:	b373      	cbz	r3, 80100a8 <RadioSetTxGenericConfig+0x1b8>
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801004a:	4d3a      	ldr	r5, [pc, #232]	; (8010134 <RadioSetTxGenericConfig+0x244>)
 801004c:	f04f 0801 	mov.w	r8, #1
 8010050:	f885 800e 	strb.w	r8, [r5, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8010054:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 8010056:	83ab      	strh	r3, [r5, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8010058:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 801005c:	77ab      	strb	r3, [r5, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 801005e:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 8010062:	f885 3020 	strb.w	r3, [r5, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8010066:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 801006a:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
        RadioStandby( );
 801006e:	f7ff fc43 	bl	800f8f8 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8010072:	4640      	mov	r0, r8
 8010074:	f7ff ff04 	bl	800fe80 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8010078:	f105 0038 	add.w	r0, r5, #56	; 0x38
 801007c:	f000 ff28 	bl	8010ed0 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8010080:	f105 000e 	add.w	r0, r5, #14
 8010084:	f001 f8f2 	bl	801126c <SUBGRF_SetPacketParams>
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 8010088:	f895 3051 	ldrb.w	r3, [r5, #81]	; 0x51
 801008c:	2b06      	cmp	r3, #6
 801008e:	d025      	beq.n	80100dc <RadioSetTxGenericConfig+0x1ec>
            SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) | ( 1 << 2 ) );
 8010090:	f640 0089 	movw	r0, #2185	; 0x889
 8010094:	f000 ffa4 	bl	8010fe0 <SUBGRF_ReadRegister>
 8010098:	f040 0104 	orr.w	r1, r0, #4
 801009c:	b2c9      	uxtb	r1, r1
 801009e:	f640 0089 	movw	r0, #2185	; 0x889
 80100a2:	f000 feab 	bl	8010dfc <SUBGRF_WriteRegister>
 80100a6:	e736      	b.n	800ff16 <RadioSetTxGenericConfig+0x26>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 80100a8:	4b22      	ldr	r3, [pc, #136]	; (8010134 <RadioSetTxGenericConfig+0x244>)
 80100aa:	2200      	movs	r2, #0
 80100ac:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80100b0:	e7cb      	b.n	801004a <RadioSetTxGenericConfig+0x15a>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 80100b2:	4b20      	ldr	r3, [pc, #128]	; (8010134 <RadioSetTxGenericConfig+0x244>)
 80100b4:	2201      	movs	r2, #1
 80100b6:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80100ba:	e7c6      	b.n	801004a <RadioSetTxGenericConfig+0x15a>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 80100bc:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80100c0:	3b0b      	subs	r3, #11
 80100c2:	b2db      	uxtb	r3, r3
 80100c4:	2b01      	cmp	r3, #1
 80100c6:	d904      	bls.n	80100d2 <RadioSetTxGenericConfig+0x1e2>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 80100c8:	4b1a      	ldr	r3, [pc, #104]	; (8010134 <RadioSetTxGenericConfig+0x244>)
 80100ca:	2200      	movs	r2, #0
 80100cc:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 80100d0:	e7bb      	b.n	801004a <RadioSetTxGenericConfig+0x15a>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 80100d2:	4b18      	ldr	r3, [pc, #96]	; (8010134 <RadioSetTxGenericConfig+0x244>)
 80100d4:	2201      	movs	r2, #1
 80100d6:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 80100da:	e7b6      	b.n	801004a <RadioSetTxGenericConfig+0x15a>
            SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 80100dc:	f640 0089 	movw	r0, #2185	; 0x889
 80100e0:	f000 ff7e 	bl	8010fe0 <SUBGRF_ReadRegister>
 80100e4:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 80100e8:	f640 0089 	movw	r0, #2185	; 0x889
 80100ec:	f000 fe86 	bl	8010dfc <SUBGRF_WriteRegister>
 80100f0:	e711      	b.n	800ff16 <RadioSetTxGenericConfig+0x26>
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 80100f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80100f4:	3b01      	subs	r3, #1
 80100f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80100fa:	d218      	bcs.n	801012e <RadioSetTxGenericConfig+0x23e>
        RadioSetModem( MODEM_BPSK );
 80100fc:	2002      	movs	r0, #2
 80100fe:	f7ff febf 	bl	800fe80 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8010102:	480c      	ldr	r0, [pc, #48]	; (8010134 <RadioSetTxGenericConfig+0x244>)
 8010104:	2302      	movs	r3, #2
 8010106:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 801010a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801010c:	6483      	str	r3, [r0, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 801010e:	2316      	movs	r3, #22
 8010110:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8010114:	3038      	adds	r0, #56	; 0x38
 8010116:	f000 fedb 	bl	8010ed0 <SUBGRF_SetModulationParams>
        break;
 801011a:	e6fc      	b.n	800ff16 <RadioSetTxGenericConfig+0x26>
            return -1;
 801011c:	f04f 30ff 	mov.w	r0, #4294967295
 8010120:	e703      	b.n	800ff2a <RadioSetTxGenericConfig+0x3a>
 8010122:	f04f 30ff 	mov.w	r0, #4294967295
 8010126:	e700      	b.n	800ff2a <RadioSetTxGenericConfig+0x3a>
            return -1;
 8010128:	f04f 30ff 	mov.w	r0, #4294967295
 801012c:	e6fd      	b.n	800ff2a <RadioSetTxGenericConfig+0x3a>
            return -1;
 801012e:	f04f 30ff 	mov.w	r0, #4294967295
 8010132:	e6fa      	b.n	800ff2a <RadioSetTxGenericConfig+0x3a>
 8010134:	20001294 	.word	0x20001294
 8010138:	200012ec 	.word	0x200012ec
 801013c:	20001278 	.word	0x20001278

08010140 <RadioSetRxGenericConfig>:
{
 8010140:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010142:	b087      	sub	sp, #28
 8010144:	4607      	mov	r7, r0
 8010146:	460c      	mov	r4, r1
 8010148:	4615      	mov	r5, r2
 801014a:	461e      	mov	r6, r3
    uint8_t syncword[8] = {0};
 801014c:	2300      	movs	r3, #0
 801014e:	9304      	str	r3, [sp, #16]
 8010150:	9305      	str	r3, [sp, #20]
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8010152:	f001 fa74 	bl	801163e <RFW_DeInit>
    if( rxContinuous != 0 )
 8010156:	b105      	cbz	r5, 801015a <RadioSetRxGenericConfig+0x1a>
        symbTimeout = 0;
 8010158:	2600      	movs	r6, #0
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 801015a:	3d00      	subs	r5, #0
 801015c:	bf18      	it	ne
 801015e:	2501      	movne	r5, #1
 8010160:	4b94      	ldr	r3, [pc, #592]	; (80103b4 <RadioSetRxGenericConfig+0x274>)
 8010162:	705d      	strb	r5, [r3, #1]
    switch( modem )
 8010164:	b12f      	cbz	r7, 8010172 <RadioSetRxGenericConfig+0x32>
 8010166:	2f01      	cmp	r7, #1
 8010168:	f000 8095 	beq.w	8010296 <RadioSetRxGenericConfig+0x156>
 801016c:	2000      	movs	r0, #0
}
 801016e:	b007      	add	sp, #28
 8010170:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 8010172:	68e3      	ldr	r3, [r4, #12]
 8010174:	2b00      	cmp	r3, #0
 8010176:	f000 8111 	beq.w	801039c <RadioSetRxGenericConfig+0x25c>
 801017a:	6923      	ldr	r3, [r4, #16]
 801017c:	2b00      	cmp	r3, #0
 801017e:	f000 8110 	beq.w	80103a2 <RadioSetRxGenericConfig+0x262>
        if( config->fsk.SyncWordLength > 8 )
 8010182:	7d63      	ldrb	r3, [r4, #21]
 8010184:	2b08      	cmp	r3, #8
 8010186:	f200 810f 	bhi.w	80103a8 <RadioSetRxGenericConfig+0x268>
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 801018a:	2200      	movs	r2, #0
 801018c:	e007      	b.n	801019e <RadioSetRxGenericConfig+0x5e>
                syncword[i] = config->fsk.SyncWord[i];
 801018e:	69a1      	ldr	r1, [r4, #24]
 8010190:	5c88      	ldrb	r0, [r1, r2]
 8010192:	f102 0118 	add.w	r1, r2, #24
 8010196:	4469      	add	r1, sp
 8010198:	f801 0c08 	strb.w	r0, [r1, #-8]
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 801019c:	3201      	adds	r2, #1
 801019e:	4293      	cmp	r3, r2
 80101a0:	dcf5      	bgt.n	801018e <RadioSetRxGenericConfig+0x4e>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 80101a2:	6820      	ldr	r0, [r4, #0]
 80101a4:	3800      	subs	r0, #0
 80101a6:	bf18      	it	ne
 80101a8:	2001      	movne	r0, #1
 80101aa:	f000 fcc7 	bl	8010b3c <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80101ae:	4d81      	ldr	r5, [pc, #516]	; (80103b4 <RadioSetRxGenericConfig+0x274>)
 80101b0:	2700      	movs	r7, #0
 80101b2:	f885 7038 	strb.w	r7, [r5, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 80101b6:	68e3      	ldr	r3, [r4, #12]
 80101b8:	63eb      	str	r3, [r5, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = (RadioModShapings_t) config->fsk.ModulationShaping;
 80101ba:	7923      	ldrb	r3, [r4, #4]
 80101bc:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 80101c0:	68a0      	ldr	r0, [r4, #8]
 80101c2:	f001 f9d7 	bl	8011574 <SUBGRF_GetFskBandwidthRegValue>
 80101c6:	f885 0045 	strb.w	r0, [r5, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80101ca:	73af      	strb	r7, [r5, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 80101cc:	6923      	ldr	r3, [r4, #16]
 80101ce:	00db      	lsls	r3, r3, #3
 80101d0:	822b      	strh	r3, [r5, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 80101d2:	7d23      	ldrb	r3, [r4, #20]
 80101d4:	74ab      	strb	r3, [r5, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 80101d6:	7d63      	ldrb	r3, [r4, #21]
 80101d8:	00db      	lsls	r3, r3, #3
 80101da:	74eb      	strb	r3, [r5, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 80101dc:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 80101e0:	752b      	strb	r3, [r5, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 80101e2:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 80101e6:	b973      	cbnz	r3, 8010206 <RadioSetRxGenericConfig+0xc6>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 80101e8:	69e1      	ldr	r1, [r4, #28]
 80101ea:	75a9      	strb	r1, [r5, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 80101ec:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
 80101f0:	2a02      	cmp	r2, #2
 80101f2:	d012      	beq.n	801021a <RadioSetRxGenericConfig+0xda>
 80101f4:	2b02      	cmp	r3, #2
 80101f6:	d010      	beq.n	801021a <RadioSetRxGenericConfig+0xda>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 80101f8:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 80101fc:	496d      	ldr	r1, [pc, #436]	; (80103b4 <RadioSetRxGenericConfig+0x274>)
 80101fe:	75c8      	strb	r0, [r1, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8010200:	760a      	strb	r2, [r1, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 8010202:	754b      	strb	r3, [r1, #21]
 8010204:	e023      	b.n	801024e <RadioSetRxGenericConfig+0x10e>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 8010206:	2b02      	cmp	r3, #2
 8010208:	d003      	beq.n	8010212 <RadioSetRxGenericConfig+0xd2>
          SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 801020a:	4a6a      	ldr	r2, [pc, #424]	; (80103b4 <RadioSetRxGenericConfig+0x274>)
 801020c:	21ff      	movs	r1, #255	; 0xff
 801020e:	7591      	strb	r1, [r2, #22]
 8010210:	e7ec      	b.n	80101ec <RadioSetRxGenericConfig+0xac>
          SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8010212:	4a68      	ldr	r2, [pc, #416]	; (80103b4 <RadioSetRxGenericConfig+0x274>)
 8010214:	21ff      	movs	r1, #255	; 0xff
 8010216:	7591      	strb	r1, [r2, #22]
 8010218:	e7e8      	b.n	80101ec <RadioSetRxGenericConfig+0xac>
          if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801021a:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 801021e:	f102 030f 	add.w	r3, r2, #15
 8010222:	b2db      	uxtb	r3, r3
 8010224:	2b01      	cmp	r3, #1
 8010226:	d901      	bls.n	801022c <RadioSetRxGenericConfig+0xec>
 8010228:	2a01      	cmp	r2, #1
 801022a:	d131      	bne.n	8010290 <RadioSetRxGenericConfig+0x150>
          ConfigGeneric.rtx = CONFIG_RX;
 801022c:	2300      	movs	r3, #0
 801022e:	f88d 300c 	strb.w	r3, [sp, #12]
          ConfigGeneric.RxConfig = config;
 8010232:	9402      	str	r4, [sp, #8]
          if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 8010234:	4a60      	ldr	r2, [pc, #384]	; (80103b8 <RadioSetRxGenericConfig+0x278>)
 8010236:	4b61      	ldr	r3, [pc, #388]	; (80103bc <RadioSetRxGenericConfig+0x27c>)
 8010238:	6819      	ldr	r1, [r3, #0]
 801023a:	a801      	add	r0, sp, #4
 801023c:	f001 f9fc 	bl	8011638 <RFW_Init>
 8010240:	bb30      	cbnz	r0, 8010290 <RadioSetRxGenericConfig+0x150>
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8010242:	4b5c      	ldr	r3, [pc, #368]	; (80103b4 <RadioSetRxGenericConfig+0x274>)
 8010244:	2200      	movs	r2, #0
 8010246:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8010248:	2101      	movs	r1, #1
 801024a:	75d9      	strb	r1, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801024c:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 801024e:	f7ff fb53 	bl	800f8f8 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8010252:	2000      	movs	r0, #0
 8010254:	f7ff fe14 	bl	800fe80 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8010258:	4d56      	ldr	r5, [pc, #344]	; (80103b4 <RadioSetRxGenericConfig+0x274>)
 801025a:	f105 0038 	add.w	r0, r5, #56	; 0x38
 801025e:	f000 fe37 	bl	8010ed0 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8010262:	f105 000e 	add.w	r0, r5, #14
 8010266:	f001 f801 	bl	801126c <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801026a:	a804      	add	r0, sp, #16
 801026c:	f000 ffcc 	bl	8011208 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8010270:	8c20      	ldrh	r0, [r4, #32]
 8010272:	f000 ff2f 	bl	80110d4 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8010276:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
 8010278:	f000 ffe3 	bl	8011242 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 801027c:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8010280:	fb06 f303 	mul.w	r3, r6, r3
 8010284:	68e2      	ldr	r2, [r4, #12]
 8010286:	fbb3 f3f2 	udiv	r3, r3, r2
 801028a:	60ab      	str	r3, [r5, #8]
    return status;
 801028c:	2000      	movs	r0, #0
        break;
 801028e:	e76e      	b.n	801016e <RadioSetRxGenericConfig+0x2e>
            return -1;
 8010290:	f04f 30ff 	mov.w	r0, #4294967295
 8010294:	e76b      	b.n	801016e <RadioSetRxGenericConfig+0x2e>
        if( config->lora.PreambleLen == 0 )
 8010296:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8010298:	2b00      	cmp	r3, #0
 801029a:	f000 8088 	beq.w	80103ae <RadioSetRxGenericConfig+0x26e>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 801029e:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 80102a2:	2b01      	cmp	r3, #1
 80102a4:	d053      	beq.n	801034e <RadioSetRxGenericConfig+0x20e>
            MaxPayloadLength = 0xFF;
 80102a6:	27ff      	movs	r7, #255	; 0xff
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 80102a8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80102aa:	3800      	subs	r0, #0
 80102ac:	bf18      	it	ne
 80102ae:	2001      	movne	r0, #1
 80102b0:	f000 fc44 	bl	8010b3c <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 80102b4:	b2f0      	uxtb	r0, r6
 80102b6:	f000 fdcf 	bl	8010e58 <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80102ba:	4b3e      	ldr	r3, [pc, #248]	; (80103b4 <RadioSetRxGenericConfig+0x274>)
 80102bc:	2201      	movs	r2, #1
 80102be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 80102c2:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 80102c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 80102ca:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 80102ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 80102d2:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
 80102d6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 80102da:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
 80102de:	2b01      	cmp	r3, #1
 80102e0:	d03c      	beq.n	801035c <RadioSetRxGenericConfig+0x21c>
 80102e2:	2b02      	cmp	r3, #2
 80102e4:	d03f      	beq.n	8010366 <RadioSetRxGenericConfig+0x226>
 80102e6:	b3a3      	cbz	r3, 8010352 <RadioSetRxGenericConfig+0x212>
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80102e8:	4d32      	ldr	r5, [pc, #200]	; (80103b4 <RadioSetRxGenericConfig+0x274>)
 80102ea:	2601      	movs	r6, #1
 80102ec:	73ae      	strb	r6, [r5, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 80102ee:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80102f0:	83ab      	strh	r3, [r5, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 80102f2:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 80102f6:	77ab      	strb	r3, [r5, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80102f8:	77ef      	strb	r7, [r5, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 80102fa:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80102fe:	f885 3020 	strb.w	r3, [r5, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8010302:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8010306:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
        RadioStandby( );
 801030a:	f7ff faf5 	bl	800f8f8 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801030e:	4630      	mov	r0, r6
 8010310:	f7ff fdb6 	bl	800fe80 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8010314:	f105 0038 	add.w	r0, r5, #56	; 0x38
 8010318:	f000 fdda 	bl	8010ed0 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801031c:	f105 000e 	add.w	r0, r5, #14
 8010320:	f000 ffa4 	bl	801126c <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8010324:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 8010328:	42b3      	cmp	r3, r6
 801032a:	d02c      	beq.n	8010386 <RadioSetRxGenericConfig+0x246>
            SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 801032c:	f240 7036 	movw	r0, #1846	; 0x736
 8010330:	f000 fe56 	bl	8010fe0 <SUBGRF_ReadRegister>
 8010334:	f040 0104 	orr.w	r1, r0, #4
 8010338:	b2c9      	uxtb	r1, r1
 801033a:	f240 7036 	movw	r0, #1846	; 0x736
 801033e:	f000 fd5d 	bl	8010dfc <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 8010342:	4b1c      	ldr	r3, [pc, #112]	; (80103b4 <RadioSetRxGenericConfig+0x274>)
 8010344:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010348:	609a      	str	r2, [r3, #8]
    return status;
 801034a:	2000      	movs	r0, #0
        break;
 801034c:	e70f      	b.n	801016e <RadioSetRxGenericConfig+0x2e>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 801034e:	7f27      	ldrb	r7, [r4, #28]
 8010350:	e7aa      	b.n	80102a8 <RadioSetRxGenericConfig+0x168>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8010352:	4b18      	ldr	r3, [pc, #96]	; (80103b4 <RadioSetRxGenericConfig+0x274>)
 8010354:	2200      	movs	r2, #0
 8010356:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801035a:	e7c5      	b.n	80102e8 <RadioSetRxGenericConfig+0x1a8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801035c:	4b15      	ldr	r3, [pc, #84]	; (80103b4 <RadioSetRxGenericConfig+0x274>)
 801035e:	2201      	movs	r2, #1
 8010360:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8010364:	e7c0      	b.n	80102e8 <RadioSetRxGenericConfig+0x1a8>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8010366:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 801036a:	3b0b      	subs	r3, #11
 801036c:	b2db      	uxtb	r3, r3
 801036e:	2b01      	cmp	r3, #1
 8010370:	d904      	bls.n	801037c <RadioSetRxGenericConfig+0x23c>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8010372:	4b10      	ldr	r3, [pc, #64]	; (80103b4 <RadioSetRxGenericConfig+0x274>)
 8010374:	2200      	movs	r2, #0
 8010376:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 801037a:	e7b5      	b.n	80102e8 <RadioSetRxGenericConfig+0x1a8>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801037c:	4b0d      	ldr	r3, [pc, #52]	; (80103b4 <RadioSetRxGenericConfig+0x274>)
 801037e:	2201      	movs	r2, #1
 8010380:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8010384:	e7b0      	b.n	80102e8 <RadioSetRxGenericConfig+0x1a8>
            SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 8010386:	f240 7036 	movw	r0, #1846	; 0x736
 801038a:	f000 fe29 	bl	8010fe0 <SUBGRF_ReadRegister>
 801038e:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 8010392:	f240 7036 	movw	r0, #1846	; 0x736
 8010396:	f000 fd31 	bl	8010dfc <SUBGRF_WriteRegister>
 801039a:	e7d2      	b.n	8010342 <RadioSetRxGenericConfig+0x202>
            return -1;
 801039c:	f04f 30ff 	mov.w	r0, #4294967295
 80103a0:	e6e5      	b.n	801016e <RadioSetRxGenericConfig+0x2e>
 80103a2:	f04f 30ff 	mov.w	r0, #4294967295
 80103a6:	e6e2      	b.n	801016e <RadioSetRxGenericConfig+0x2e>
            return -1;
 80103a8:	f04f 30ff 	mov.w	r0, #4294967295
 80103ac:	e6df      	b.n	801016e <RadioSetRxGenericConfig+0x2e>
            return -1;
 80103ae:	f04f 30ff 	mov.w	r0, #4294967295
 80103b2:	e6dc      	b.n	801016e <RadioSetRxGenericConfig+0x2e>
 80103b4:	20001294 	.word	0x20001294
 80103b8:	2000127c 	.word	0x2000127c
 80103bc:	20001278 	.word	0x20001278

080103c0 <RadioSetPublicNetwork>:
{
 80103c0:	b510      	push	{r4, lr}
 80103c2:	4604      	mov	r4, r0
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 80103c4:	4b0e      	ldr	r3, [pc, #56]	; (8010400 <RadioSetPublicNetwork+0x40>)
 80103c6:	7318      	strb	r0, [r3, #12]
 80103c8:	7358      	strb	r0, [r3, #13]
    RadioSetModem( MODEM_LORA );
 80103ca:	2001      	movs	r0, #1
 80103cc:	f7ff fd58 	bl	800fe80 <RadioSetModem>
    if( enable == true )
 80103d0:	b154      	cbz	r4, 80103e8 <RadioSetPublicNetwork+0x28>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 80103d2:	2134      	movs	r1, #52	; 0x34
 80103d4:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 80103d8:	f000 fd10 	bl	8010dfc <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 80103dc:	2144      	movs	r1, #68	; 0x44
 80103de:	f240 7041 	movw	r0, #1857	; 0x741
 80103e2:	f000 fd0b 	bl	8010dfc <SUBGRF_WriteRegister>
}
 80103e6:	bd10      	pop	{r4, pc}
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 80103e8:	2114      	movs	r1, #20
 80103ea:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 80103ee:	f000 fd05 	bl	8010dfc <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 80103f2:	2124      	movs	r1, #36	; 0x24
 80103f4:	f240 7041 	movw	r0, #1857	; 0x741
 80103f8:	f000 fd00 	bl	8010dfc <SUBGRF_WriteRegister>
}
 80103fc:	e7f3      	b.n	80103e6 <RadioSetPublicNetwork+0x26>
 80103fe:	bf00      	nop
 8010400:	20001294 	.word	0x20001294

08010404 <RadioSetTxConfig>:
{
 8010404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010408:	b083      	sub	sp, #12
 801040a:	4604      	mov	r4, r0
 801040c:	460d      	mov	r5, r1
 801040e:	4691      	mov	r9, r2
 8010410:	461f      	mov	r7, r3
 8010412:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 8010416:	f89d 803c 	ldrb.w	r8, [sp, #60]	; 0x3c
 801041a:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 801041e:	f001 f90e 	bl	801163e <RFW_DeInit>
    switch( modem )
 8010422:	2c01      	cmp	r4, #1
 8010424:	d05a      	beq.n	80104dc <RadioSetTxConfig+0xd8>
 8010426:	2c03      	cmp	r4, #3
 8010428:	f000 80ab 	beq.w	8010582 <RadioSetTxConfig+0x17e>
 801042c:	b164      	cbz	r4, 8010448 <RadioSetTxConfig+0x44>
    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 801042e:	4628      	mov	r0, r5
 8010430:	f001 f832 	bl	8011498 <SUBGRF_SetRfTxPower>
 8010434:	4c5b      	ldr	r4, [pc, #364]	; (80105a4 <RadioSetTxConfig+0x1a0>)
 8010436:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect ); /* ST_WORKAROUND: ?????? */
 801043a:	f001 f905 	bl	8011648 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 801043e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010440:	6063      	str	r3, [r4, #4]
}
 8010442:	b003      	add	sp, #12
 8010444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8010448:	4c56      	ldr	r4, [pc, #344]	; (80105a4 <RadioSetTxConfig+0x1a0>)
 801044a:	f04f 0b00 	mov.w	fp, #0
 801044e:	f884 b038 	strb.w	fp, [r4, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8010452:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010454:	63e3      	str	r3, [r4, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8010456:	230b      	movs	r3, #11
 8010458:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801045c:	4638      	mov	r0, r7
 801045e:	f001 f889 	bl	8011574 <SUBGRF_GetFskBandwidthRegValue>
 8010462:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8010466:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801046a:	f884 b00e 	strb.w	fp, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 801046e:	00f6      	lsls	r6, r6, #3
 8010470:	8226      	strh	r6, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8010472:	2304      	movs	r3, #4
 8010474:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8010476:	2318      	movs	r3, #24
 8010478:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801047a:	f884 b014 	strb.w	fp, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 801047e:	f088 0801 	eor.w	r8, r8, #1
 8010482:	f884 8015 	strb.w	r8, [r4, #21]
            if( crcOn == true )
 8010486:	f1ba 0f00 	cmp.w	sl, #0
 801048a:	d023      	beq.n	80104d4 <RadioSetTxConfig+0xd0>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 801048c:	22f2      	movs	r2, #242	; 0xf2
 801048e:	75e2      	strb	r2, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8010490:	4c44      	ldr	r4, [pc, #272]	; (80105a4 <RadioSetTxConfig+0x1a0>)
 8010492:	2301      	movs	r3, #1
 8010494:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 8010496:	f7ff fa2f 	bl	800f8f8 <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 801049a:	4626      	mov	r6, r4
 801049c:	f816 0f38 	ldrb.w	r0, [r6, #56]!
 80104a0:	3800      	subs	r0, #0
 80104a2:	bf18      	it	ne
 80104a4:	2001      	movne	r0, #1
 80104a6:	f7ff fceb 	bl	800fe80 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80104aa:	4630      	mov	r0, r6
 80104ac:	f000 fd10 	bl	8010ed0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80104b0:	f104 000e 	add.w	r0, r4, #14
 80104b4:	f000 feda 	bl	801126c <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80104b8:	4a3b      	ldr	r2, [pc, #236]	; (80105a8 <RadioSetTxConfig+0x1a4>)
 80104ba:	466b      	mov	r3, sp
 80104bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80104c0:	e883 0003 	stmia.w	r3, {r0, r1}
 80104c4:	4618      	mov	r0, r3
 80104c6:	f000 fe9f 	bl	8011208 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80104ca:	f240 10ff 	movw	r0, #511	; 0x1ff
 80104ce:	f000 fe01 	bl	80110d4 <SUBGRF_SetWhiteningSeed>
            break;
 80104d2:	e7ac      	b.n	801042e <RadioSetTxConfig+0x2a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80104d4:	4b33      	ldr	r3, [pc, #204]	; (80105a4 <RadioSetTxConfig+0x1a0>)
 80104d6:	2201      	movs	r2, #1
 80104d8:	75da      	strb	r2, [r3, #23]
 80104da:	e7d9      	b.n	8010490 <RadioSetTxConfig+0x8c>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80104dc:	4a31      	ldr	r2, [pc, #196]	; (80105a4 <RadioSetTxConfig+0x1a0>)
 80104de:	2301      	movs	r3, #1
 80104e0:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 80104e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80104e6:	b2db      	uxtb	r3, r3
 80104e8:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 80104ec:	492f      	ldr	r1, [pc, #188]	; (80105ac <RadioSetTxConfig+0x1a8>)
 80104ee:	5dc9      	ldrb	r1, [r1, r7]
 80104f0:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 80104f4:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
 80104f8:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80104fc:	b91f      	cbnz	r7, 8010506 <RadioSetTxConfig+0x102>
 80104fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010500:	3a0b      	subs	r2, #11
 8010502:	2a01      	cmp	r2, #1
 8010504:	d92f      	bls.n	8010566 <RadioSetTxConfig+0x162>
 8010506:	2f01      	cmp	r7, #1
 8010508:	d02a      	beq.n	8010560 <RadioSetTxConfig+0x15c>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 801050a:	4a26      	ldr	r2, [pc, #152]	; (80105a4 <RadioSetTxConfig+0x1a0>)
 801050c:	2100      	movs	r1, #0
 801050e:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8010512:	4a24      	ldr	r2, [pc, #144]	; (80105a4 <RadioSetTxConfig+0x1a0>)
 8010514:	2101      	movs	r1, #1
 8010516:	7391      	strb	r1, [r2, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8010518:	3b05      	subs	r3, #5
 801051a:	b2db      	uxtb	r3, r3
 801051c:	428b      	cmp	r3, r1
 801051e:	d927      	bls.n	8010570 <RadioSetTxConfig+0x16c>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8010520:	4b20      	ldr	r3, [pc, #128]	; (80105a4 <RadioSetTxConfig+0x1a0>)
 8010522:	839e      	strh	r6, [r3, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8010524:	4c1f      	ldr	r4, [pc, #124]	; (80105a4 <RadioSetTxConfig+0x1a0>)
 8010526:	f884 801e 	strb.w	r8, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801052a:	4b21      	ldr	r3, [pc, #132]	; (80105b0 <RadioSetTxConfig+0x1ac>)
 801052c:	781b      	ldrb	r3, [r3, #0]
 801052e:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8010530:	f884 a020 	strb.w	sl, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8010534:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8010538:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
            RadioStandby( );
 801053c:	f7ff f9dc 	bl	800f8f8 <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8010540:	4626      	mov	r6, r4
 8010542:	f816 0f38 	ldrb.w	r0, [r6, #56]!
 8010546:	3800      	subs	r0, #0
 8010548:	bf18      	it	ne
 801054a:	2001      	movne	r0, #1
 801054c:	f7ff fc98 	bl	800fe80 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8010550:	4630      	mov	r0, r6
 8010552:	f000 fcbd 	bl	8010ed0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8010556:	f104 000e 	add.w	r0, r4, #14
 801055a:	f000 fe87 	bl	801126c <SUBGRF_SetPacketParams>
            break;
 801055e:	e766      	b.n	801042e <RadioSetTxConfig+0x2a>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8010560:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010562:	2a0c      	cmp	r2, #12
 8010564:	d1d1      	bne.n	801050a <RadioSetTxConfig+0x106>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8010566:	4a0f      	ldr	r2, [pc, #60]	; (80105a4 <RadioSetTxConfig+0x1a0>)
 8010568:	2101      	movs	r1, #1
 801056a:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
 801056e:	e7d0      	b.n	8010512 <RadioSetTxConfig+0x10e>
                if( preambleLen < 12 )
 8010570:	2e0b      	cmp	r6, #11
 8010572:	d803      	bhi.n	801057c <RadioSetTxConfig+0x178>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8010574:	4613      	mov	r3, r2
 8010576:	220c      	movs	r2, #12
 8010578:	839a      	strh	r2, [r3, #28]
 801057a:	e7d3      	b.n	8010524 <RadioSetTxConfig+0x120>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801057c:	4b09      	ldr	r3, [pc, #36]	; (80105a4 <RadioSetTxConfig+0x1a0>)
 801057e:	839e      	strh	r6, [r3, #28]
 8010580:	e7d0      	b.n	8010524 <RadioSetTxConfig+0x120>
            RadioSetModem(MODEM_SIGFOX_TX);
 8010582:	2003      	movs	r0, #3
 8010584:	f7ff fc7c 	bl	800fe80 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8010588:	4806      	ldr	r0, [pc, #24]	; (80105a4 <RadioSetTxConfig+0x1a0>)
 801058a:	2302      	movs	r3, #2
 801058c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 8010590:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010592:	6483      	str	r3, [r0, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8010594:	2316      	movs	r3, #22
 8010596:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801059a:	3038      	adds	r0, #56	; 0x38
 801059c:	f000 fc98 	bl	8010ed0 <SUBGRF_SetModulationParams>
            break;
 80105a0:	e745      	b.n	801042e <RadioSetTxConfig+0x2a>
 80105a2:	bf00      	nop
 80105a4:	20001294 	.word	0x20001294
 80105a8:	08016ed8 	.word	0x08016ed8
 80105ac:	08017b24 	.word	0x08017b24
 80105b0:	200000d4 	.word	0x200000d4

080105b4 <RadioSetRxConfig>:
{
 80105b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105b8:	b087      	sub	sp, #28
 80105ba:	4604      	mov	r4, r0
 80105bc:	460e      	mov	r6, r1
 80105be:	4615      	mov	r5, r2
 80105c0:	9301      	str	r3, [sp, #4]
 80105c2:	f8bd 9044 	ldrh.w	r9, [sp, #68]	; 0x44
 80105c6:	f8bd a048 	ldrh.w	sl, [sp, #72]	; 0x48
 80105ca:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 80105ce:	f89d b054 	ldrb.w	fp, [sp, #84]	; 0x54
 80105d2:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
    SubgRf.RxContinuous = rxContinuous;
 80105d6:	4baf      	ldr	r3, [pc, #700]	; (8010894 <RadioSetRxConfig+0x2e0>)
 80105d8:	f883 8001 	strb.w	r8, [r3, #1]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 80105dc:	f001 f82f 	bl	801163e <RFW_DeInit>
    if( rxContinuous == true )
 80105e0:	f1b8 0f00 	cmp.w	r8, #0
 80105e4:	d001      	beq.n	80105ea <RadioSetRxConfig+0x36>
        symbTimeout = 0;
 80105e6:	f04f 0a00 	mov.w	sl, #0
    if( fixLen == true )
 80105ea:	b16f      	cbz	r7, 8010608 <RadioSetRxConfig+0x54>
        MaxPayloadLength = payloadLen;
 80105ec:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 80105f0:	4ba9      	ldr	r3, [pc, #676]	; (8010898 <RadioSetRxConfig+0x2e4>)
 80105f2:	701a      	strb	r2, [r3, #0]
    switch( modem )
 80105f4:	2c01      	cmp	r4, #1
 80105f6:	f000 80d6 	beq.w	80107a6 <RadioSetRxConfig+0x1f2>
 80105fa:	2c04      	cmp	r4, #4
 80105fc:	d008      	beq.n	8010610 <RadioSetRxConfig+0x5c>
 80105fe:	2c00      	cmp	r4, #0
 8010600:	d07c      	beq.n	80106fc <RadioSetRxConfig+0x148>
}
 8010602:	b007      	add	sp, #28
 8010604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        MaxPayloadLength = 0xFF;
 8010608:	4ba3      	ldr	r3, [pc, #652]	; (8010898 <RadioSetRxConfig+0x2e4>)
 801060a:	22ff      	movs	r2, #255	; 0xff
 801060c:	701a      	strb	r2, [r3, #0]
 801060e:	e7f1      	b.n	80105f4 <RadioSetRxConfig+0x40>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 8010610:	2001      	movs	r0, #1
 8010612:	f000 fa93 	bl	8010b3c <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8010616:	4c9f      	ldr	r4, [pc, #636]	; (8010894 <RadioSetRxConfig+0x2e0>)
 8010618:	2700      	movs	r7, #0
 801061a:	f884 7038 	strb.w	r7, [r4, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801061e:	63e5      	str	r5, [r4, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 8010620:	2309      	movs	r3, #9
 8010622:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 8010626:	f44f 7348 	mov.w	r3, #800	; 0x320
 801062a:	6423      	str	r3, [r4, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801062c:	4630      	mov	r0, r6
 801062e:	f000 ffa1 	bl	8011574 <SUBGRF_GetFskBandwidthRegValue>
 8010632:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8010636:	73a7      	strb	r7, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8010638:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801063c:	f8a4 9010 	strh.w	r9, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 8010640:	74a7      	strb	r7, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 8010642:	2310      	movs	r3, #16
 8010644:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8010646:	7527      	strb	r7, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8010648:	7567      	strb	r7, [r4, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 801064a:	4b93      	ldr	r3, [pc, #588]	; (8010898 <RadioSetRxConfig+0x2e4>)
 801064c:	781b      	ldrb	r3, [r3, #0]
 801064e:	75a3      	strb	r3, [r4, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8010650:	2301      	movs	r3, #1
 8010652:	75e3      	strb	r3, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8010654:	7627      	strb	r7, [r4, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 8010656:	2004      	movs	r0, #4
 8010658:	f7ff fc12 	bl	800fe80 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801065c:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8010660:	f000 fc36 	bl	8010ed0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8010664:	f104 000e 	add.w	r0, r4, #14
 8010668:	f000 fe00 	bl	801126c <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 801066c:	ab02      	add	r3, sp, #8
 801066e:	4a8b      	ldr	r2, [pc, #556]	; (801089c <RadioSetRxConfig+0x2e8>)
 8010670:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010674:	e883 0003 	stmia.w	r3, {r0, r1}
 8010678:	4618      	mov	r0, r3
 801067a:	f000 fdc5 	bl	8011208 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 801067e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8010682:	f000 fd27 	bl	80110d4 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(0x8b8);
 8010686:	f640 00b8 	movw	r0, #2232	; 0x8b8
 801068a:	f7ff f8cb 	bl	800f824 <RadioRead>
            RadioWrite(0x8b8, modReg);
 801068e:	f000 01ef 	and.w	r1, r0, #239	; 0xef
 8010692:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8010696:	f7ff f8c9 	bl	800f82c <RadioWrite>
            RadioWrite(0x8b9, 0x4 );
 801069a:	2104      	movs	r1, #4
 801069c:	f640 00b9 	movw	r0, #2233	; 0x8b9
 80106a0:	f7ff f8c4 	bl	800f82c <RadioWrite>
            modReg= RadioRead(0x89b);
 80106a4:	f640 009b 	movw	r0, #2203	; 0x89b
 80106a8:	f7ff f8bc 	bl	800f824 <RadioRead>
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 80106ac:	f000 01e3 	and.w	r1, r0, #227	; 0xe3
            RadioWrite(0x89b, (modReg| (0x1<<3) ) );
 80106b0:	f041 0108 	orr.w	r1, r1, #8
 80106b4:	f640 009b 	movw	r0, #2203	; 0x89b
 80106b8:	f7ff f8b8 	bl	800f82c <RadioWrite>
            modReg= RadioRead(0x6d1);
 80106bc:	f240 60d1 	movw	r0, #1745	; 0x6d1
 80106c0:	f7ff f8b0 	bl	800f824 <RadioRead>
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 80106c4:	f000 01e7 	and.w	r1, r0, #231	; 0xe7
            RadioWrite(0x6d1, (modReg| (0x3<<3) ));
 80106c8:	f041 0118 	orr.w	r1, r1, #24
 80106cc:	f240 60d1 	movw	r0, #1745	; 0x6d1
 80106d0:	f7ff f8ac 	bl	800f82c <RadioWrite>
            modReg= RadioRead(0x6ac);
 80106d4:	f240 60ac 	movw	r0, #1708	; 0x6ac
 80106d8:	f7ff f8a4 	bl	800f824 <RadioRead>
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 80106dc:	f000 018f 	and.w	r1, r0, #143	; 0x8f
            RadioWrite(0x6ac, (modReg| (0x5<<4) ));
 80106e0:	f041 0150 	orr.w	r1, r1, #80	; 0x50
 80106e4:	f240 60ac 	movw	r0, #1708	; 0x6ac
 80106e8:	f7ff f8a0 	bl	800f82c <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 80106ec:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 80106f0:	fb03 f30a 	mul.w	r3, r3, sl
 80106f4:	fbb3 f3f5 	udiv	r3, r3, r5
 80106f8:	60a3      	str	r3, [r4, #8]
            break;
 80106fa:	e782      	b.n	8010602 <RadioSetRxConfig+0x4e>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 80106fc:	2000      	movs	r0, #0
 80106fe:	f000 fa1d 	bl	8010b3c <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8010702:	4c64      	ldr	r4, [pc, #400]	; (8010894 <RadioSetRxConfig+0x2e0>)
 8010704:	f04f 0800 	mov.w	r8, #0
 8010708:	f884 8038 	strb.w	r8, [r4, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801070c:	63e5      	str	r5, [r4, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 801070e:	230b      	movs	r3, #11
 8010710:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8010714:	4630      	mov	r0, r6
 8010716:	f000 ff2d 	bl	8011574 <SUBGRF_GetFskBandwidthRegValue>
 801071a:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801071e:	f884 800e 	strb.w	r8, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8010722:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8010726:	f8a4 9010 	strh.w	r9, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 801072a:	2304      	movs	r3, #4
 801072c:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 801072e:	2318      	movs	r3, #24
 8010730:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8010732:	f884 8014 	strb.w	r8, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8010736:	f087 0701 	eor.w	r7, r7, #1
 801073a:	7567      	strb	r7, [r4, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 801073c:	4b56      	ldr	r3, [pc, #344]	; (8010898 <RadioSetRxConfig+0x2e4>)
 801073e:	781b      	ldrb	r3, [r3, #0]
 8010740:	75a3      	strb	r3, [r4, #22]
            if( crcOn == true )
 8010742:	f1bb 0f00 	cmp.w	fp, #0
 8010746:	d02a      	beq.n	801079e <RadioSetRxConfig+0x1ea>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8010748:	22f2      	movs	r2, #242	; 0xf2
 801074a:	75e2      	strb	r2, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 801074c:	4c51      	ldr	r4, [pc, #324]	; (8010894 <RadioSetRxConfig+0x2e0>)
 801074e:	2301      	movs	r3, #1
 8010750:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 8010752:	f7ff f8d1 	bl	800f8f8 <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8010756:	4626      	mov	r6, r4
 8010758:	f816 0f38 	ldrb.w	r0, [r6, #56]!
 801075c:	3800      	subs	r0, #0
 801075e:	bf18      	it	ne
 8010760:	2001      	movne	r0, #1
 8010762:	f7ff fb8d 	bl	800fe80 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8010766:	4630      	mov	r0, r6
 8010768:	f000 fbb2 	bl	8010ed0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801076c:	f104 000e 	add.w	r0, r4, #14
 8010770:	f000 fd7c 	bl	801126c <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8010774:	4a4a      	ldr	r2, [pc, #296]	; (80108a0 <RadioSetRxConfig+0x2ec>)
 8010776:	ab04      	add	r3, sp, #16
 8010778:	e892 0003 	ldmia.w	r2, {r0, r1}
 801077c:	e883 0003 	stmia.w	r3, {r0, r1}
 8010780:	4618      	mov	r0, r3
 8010782:	f000 fd41 	bl	8011208 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8010786:	f240 10ff 	movw	r0, #511	; 0x1ff
 801078a:	f000 fca3 	bl	80110d4 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 801078e:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8010792:	fb03 f30a 	mul.w	r3, r3, sl
 8010796:	fbb3 f3f5 	udiv	r3, r3, r5
 801079a:	60a3      	str	r3, [r4, #8]
            break;
 801079c:	e731      	b.n	8010602 <RadioSetRxConfig+0x4e>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801079e:	4b3d      	ldr	r3, [pc, #244]	; (8010894 <RadioSetRxConfig+0x2e0>)
 80107a0:	2201      	movs	r2, #1
 80107a2:	75da      	strb	r2, [r3, #23]
 80107a4:	e7d2      	b.n	801074c <RadioSetRxConfig+0x198>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 80107a6:	2000      	movs	r0, #0
 80107a8:	f000 f9c8 	bl	8010b3c <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80107ac:	4a39      	ldr	r2, [pc, #228]	; (8010894 <RadioSetRxConfig+0x2e0>)
 80107ae:	2301      	movs	r3, #1
 80107b0:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 80107b4:	b2eb      	uxtb	r3, r5
 80107b6:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 80107ba:	493a      	ldr	r1, [pc, #232]	; (80108a4 <RadioSetRxConfig+0x2f0>)
 80107bc:	5d89      	ldrb	r1, [r1, r6]
 80107be:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 80107c2:	9901      	ldr	r1, [sp, #4]
 80107c4:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80107c8:	b91e      	cbnz	r6, 80107d2 <RadioSetRxConfig+0x21e>
 80107ca:	f1a5 020b 	sub.w	r2, r5, #11
 80107ce:	2a01      	cmp	r2, #1
 80107d0:	d945      	bls.n	801085e <RadioSetRxConfig+0x2aa>
 80107d2:	2e01      	cmp	r6, #1
 80107d4:	d041      	beq.n	801085a <RadioSetRxConfig+0x2a6>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 80107d6:	4a2f      	ldr	r2, [pc, #188]	; (8010894 <RadioSetRxConfig+0x2e0>)
 80107d8:	2100      	movs	r1, #0
 80107da:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80107de:	4a2d      	ldr	r2, [pc, #180]	; (8010894 <RadioSetRxConfig+0x2e0>)
 80107e0:	2101      	movs	r1, #1
 80107e2:	7391      	strb	r1, [r2, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80107e4:	3b05      	subs	r3, #5
 80107e6:	b2db      	uxtb	r3, r3
 80107e8:	428b      	cmp	r3, r1
 80107ea:	d93d      	bls.n	8010868 <RadioSetRxConfig+0x2b4>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80107ec:	4b29      	ldr	r3, [pc, #164]	; (8010894 <RadioSetRxConfig+0x2e0>)
 80107ee:	f8a3 901c 	strh.w	r9, [r3, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 80107f2:	4c28      	ldr	r4, [pc, #160]	; (8010894 <RadioSetRxConfig+0x2e0>)
 80107f4:	77a7      	strb	r7, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80107f6:	4b28      	ldr	r3, [pc, #160]	; (8010898 <RadioSetRxConfig+0x2e4>)
 80107f8:	781b      	ldrb	r3, [r3, #0]
 80107fa:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 80107fc:	f884 b020 	strb.w	fp, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8010800:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 8010804:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
            RadioStandby( );
 8010808:	f7ff f876 	bl	800f8f8 <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 801080c:	4625      	mov	r5, r4
 801080e:	f815 0f38 	ldrb.w	r0, [r5, #56]!
 8010812:	3800      	subs	r0, #0
 8010814:	bf18      	it	ne
 8010816:	2001      	movne	r0, #1
 8010818:	f7ff fb32 	bl	800fe80 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801081c:	4628      	mov	r0, r5
 801081e:	f000 fb57 	bl	8010ed0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8010822:	f104 000e 	add.w	r0, r4, #14
 8010826:	f000 fd21 	bl	801126c <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 801082a:	fa5f f08a 	uxtb.w	r0, sl
 801082e:	f000 fb13 	bl	8010e58 <SUBGRF_SetLoRaSymbNumTimeout>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8010832:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8010836:	2b01      	cmp	r3, #1
 8010838:	d021      	beq.n	801087e <RadioSetRxConfig+0x2ca>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 801083a:	f240 7036 	movw	r0, #1846	; 0x736
 801083e:	f000 fbcf 	bl	8010fe0 <SUBGRF_ReadRegister>
 8010842:	f040 0104 	orr.w	r1, r0, #4
 8010846:	b2c9      	uxtb	r1, r1
 8010848:	f240 7036 	movw	r0, #1846	; 0x736
 801084c:	f000 fad6 	bl	8010dfc <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8010850:	4b10      	ldr	r3, [pc, #64]	; (8010894 <RadioSetRxConfig+0x2e0>)
 8010852:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010856:	609a      	str	r2, [r3, #8]
}
 8010858:	e6d3      	b.n	8010602 <RadioSetRxConfig+0x4e>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801085a:	2d0c      	cmp	r5, #12
 801085c:	d1bb      	bne.n	80107d6 <RadioSetRxConfig+0x222>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 801085e:	4a0d      	ldr	r2, [pc, #52]	; (8010894 <RadioSetRxConfig+0x2e0>)
 8010860:	2101      	movs	r1, #1
 8010862:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
 8010866:	e7ba      	b.n	80107de <RadioSetRxConfig+0x22a>
                if( preambleLen < 12 )
 8010868:	f1b9 0f0b 	cmp.w	r9, #11
 801086c:	d803      	bhi.n	8010876 <RadioSetRxConfig+0x2c2>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 801086e:	4613      	mov	r3, r2
 8010870:	220c      	movs	r2, #12
 8010872:	839a      	strh	r2, [r3, #28]
 8010874:	e7bd      	b.n	80107f2 <RadioSetRxConfig+0x23e>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8010876:	4b07      	ldr	r3, [pc, #28]	; (8010894 <RadioSetRxConfig+0x2e0>)
 8010878:	f8a3 901c 	strh.w	r9, [r3, #28]
 801087c:	e7b9      	b.n	80107f2 <RadioSetRxConfig+0x23e>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 801087e:	f240 7036 	movw	r0, #1846	; 0x736
 8010882:	f000 fbad 	bl	8010fe0 <SUBGRF_ReadRegister>
 8010886:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 801088a:	f240 7036 	movw	r0, #1846	; 0x736
 801088e:	f000 fab5 	bl	8010dfc <SUBGRF_WriteRegister>
 8010892:	e7dd      	b.n	8010850 <RadioSetRxConfig+0x29c>
 8010894:	20001294 	.word	0x20001294
 8010898:	200000d4 	.word	0x200000d4
 801089c:	08016ee0 	.word	0x08016ee0
 80108a0:	08016ed8 	.word	0x08016ed8
 80108a4:	08017b24 	.word	0x08017b24

080108a8 <RadioRandom>:
{
 80108a8:	b508      	push	{r3, lr}
    RadioSetModem( MODEM_LORA );
 80108aa:	2001      	movs	r0, #1
 80108ac:	f7ff fae8 	bl	800fe80 <RadioSetModem>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80108b0:	2300      	movs	r3, #0
 80108b2:	461a      	mov	r2, r3
 80108b4:	4619      	mov	r1, r3
 80108b6:	4618      	mov	r0, r3
 80108b8:	f000 f9dd 	bl	8010c76 <SUBGRF_SetDioIrqParams>
    rnd = SUBGRF_GetRandom();
 80108bc:	f000 fd58 	bl	8011370 <SUBGRF_GetRandom>
}
 80108c0:	bd08      	pop	{r3, pc}

080108c2 <RadioIsChannelFree>:
{
 80108c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80108c4:	b08b      	sub	sp, #44	; 0x2c
 80108c6:	4604      	mov	r4, r0
 80108c8:	460f      	mov	r7, r1
 80108ca:	4616      	mov	r6, r2
 80108cc:	461d      	mov	r5, r3
    RadioStandby( );
 80108ce:	f7ff f813 	bl	800f8f8 <RadioStandby>
    RadioSetModem( MODEM_FSK );
 80108d2:	2000      	movs	r0, #0
 80108d4:	f7ff fad4 	bl	800fe80 <RadioSetModem>
    RadioSetChannel( freq );
 80108d8:	4620      	mov	r0, r4
 80108da:	f7ff f9b5 	bl	800fc48 <RadioSetChannel>
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 80108de:	2301      	movs	r3, #1
 80108e0:	9309      	str	r3, [sp, #36]	; 0x24
 80108e2:	2400      	movs	r4, #0
 80108e4:	9408      	str	r4, [sp, #32]
 80108e6:	9407      	str	r4, [sp, #28]
 80108e8:	9406      	str	r4, [sp, #24]
 80108ea:	9405      	str	r4, [sp, #20]
 80108ec:	9404      	str	r4, [sp, #16]
 80108ee:	9403      	str	r4, [sp, #12]
 80108f0:	9402      	str	r4, [sp, #8]
 80108f2:	2303      	movs	r3, #3
 80108f4:	9301      	str	r3, [sp, #4]
 80108f6:	9700      	str	r7, [sp, #0]
 80108f8:	4623      	mov	r3, r4
 80108fa:	f44f 7216 	mov.w	r2, #600	; 0x258
 80108fe:	4639      	mov	r1, r7
 8010900:	4620      	mov	r0, r4
 8010902:	f7ff fe57 	bl	80105b4 <RadioSetRxConfig>
    RadioRx( 0 );
 8010906:	4620      	mov	r0, r4
 8010908:	f7ff f9b6 	bl	800fc78 <RadioRx>
    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 801090c:	f7ff f96e 	bl	800fbec <RadioGetWakeupTime>
 8010910:	f7f1 fa0e 	bl	8001d30 <HAL_Delay>
    carrierSenseTime = TimerGetCurrentTime( );
 8010914:	f001 fa7e 	bl	8011e14 <UTIL_TIMER_GetCurrentTime>
 8010918:	4604      	mov	r4, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 801091a:	4620      	mov	r0, r4
 801091c:	f001 fa84 	bl	8011e28 <UTIL_TIMER_GetElapsedTime>
 8010920:	42a8      	cmp	r0, r5
 8010922:	d206      	bcs.n	8010932 <RadioIsChannelFree+0x70>
        rssi = RadioRssi( MODEM_FSK );
 8010924:	2000      	movs	r0, #0
 8010926:	f7ff f96e 	bl	800fc06 <RadioRssi>
        if( rssi > rssiThresh )
 801092a:	42b0      	cmp	r0, r6
 801092c:	ddf5      	ble.n	801091a <RadioIsChannelFree+0x58>
            status = false;
 801092e:	2400      	movs	r4, #0
 8010930:	e000      	b.n	8010934 <RadioIsChannelFree+0x72>
    bool status = true;
 8010932:	2401      	movs	r4, #1
    RadioStandby( );
 8010934:	f7fe ffe0 	bl	800f8f8 <RadioStandby>
}
 8010938:	4620      	mov	r0, r4
 801093a:	b00b      	add	sp, #44	; 0x2c
 801093c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08010940 <RadioInit>:
{
 8010940:	b570      	push	{r4, r5, r6, lr}
 8010942:	b082      	sub	sp, #8
    RadioEvents = events;
 8010944:	4b1d      	ldr	r3, [pc, #116]	; (80109bc <RadioInit+0x7c>)
 8010946:	6018      	str	r0, [r3, #0]
    SubgRf.RxContinuous = false;
 8010948:	4b1d      	ldr	r3, [pc, #116]	; (80109c0 <RadioInit+0x80>)
 801094a:	2400      	movs	r4, #0
 801094c:	705c      	strb	r4, [r3, #1]
    SubgRf.TxTimeout = 0;
 801094e:	605c      	str	r4, [r3, #4]
    SubgRf.RxTimeout = 0;
 8010950:	609c      	str	r4, [r3, #8]
    SUBGRF_Init( RadioOnDioIrq );
 8010952:	481c      	ldr	r0, [pc, #112]	; (80109c4 <RadioInit+0x84>)
 8010954:	f000 fb68 	bl	8011028 <SUBGRF_Init>
    RadioSetPublicNetwork( false );
 8010958:	4620      	mov	r0, r4
 801095a:	f7ff fd31 	bl	80103c0 <RadioSetPublicNetwork>
    SUBGRF_SetRegulatorMode(  );
 801095e:	f000 f8fa 	bl	8010b56 <SUBGRF_SetRegulatorMode>
    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8010962:	4621      	mov	r1, r4
 8010964:	4620      	mov	r0, r4
 8010966:	f000 f9f1 	bl	8010d4c <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams(RFO_LP, 0, RADIO_RAMP_200_US);
 801096a:	2204      	movs	r2, #4
 801096c:	4621      	mov	r1, r4
 801096e:	2001      	movs	r0, #1
 8010970:	f000 fbc9 	bl	8011106 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8010974:	4623      	mov	r3, r4
 8010976:	4622      	mov	r2, r4
 8010978:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801097c:	4608      	mov	r0, r1
 801097e:	f000 f97a 	bl	8010c76 <SUBGRF_SetDioIrqParams>
    RadioSleep();
 8010982:	f7ff f9ab 	bl	800fcdc <RadioSleep>
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8010986:	4e10      	ldr	r6, [pc, #64]	; (80109c8 <RadioInit+0x88>)
 8010988:	9400      	str	r4, [sp, #0]
 801098a:	4b10      	ldr	r3, [pc, #64]	; (80109cc <RadioInit+0x8c>)
 801098c:	4622      	mov	r2, r4
 801098e:	f04f 31ff 	mov.w	r1, #4294967295
 8010992:	4630      	mov	r0, r6
 8010994:	f001 fa20 	bl	8011dd8 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8010998:	4d0d      	ldr	r5, [pc, #52]	; (80109d0 <RadioInit+0x90>)
 801099a:	9400      	str	r4, [sp, #0]
 801099c:	4b0d      	ldr	r3, [pc, #52]	; (80109d4 <RadioInit+0x94>)
 801099e:	4622      	mov	r2, r4
 80109a0:	f04f 31ff 	mov.w	r1, #4294967295
 80109a4:	4628      	mov	r0, r5
 80109a6:	f001 fa17 	bl	8011dd8 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 80109aa:	4630      	mov	r0, r6
 80109ac:	f001 fa72 	bl	8011e94 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 80109b0:	4628      	mov	r0, r5
 80109b2:	f001 fa6f 	bl	8011e94 <UTIL_TIMER_Stop>
}
 80109b6:	b002      	add	sp, #8
 80109b8:	bd70      	pop	{r4, r5, r6, pc}
 80109ba:	bf00      	nop
 80109bc:	20001278 	.word	0x20001278
 80109c0:	20001294 	.word	0x20001294
 80109c4:	0800fbd9 	.word	0x0800fbd9
 80109c8:	200012ec 	.word	0x200012ec
 80109cc:	0800f71d 	.word	0x0800f71d
 80109d0:	2000127c 	.word	0x2000127c
 80109d4:	0800f739 	.word	0x0800f739

080109d8 <SUBGRF_WriteCommand>:
    CRITICAL_SECTION_END();
}

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 80109d8:	b510      	push	{r4, lr}
 80109da:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80109dc:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80109e0:	b672      	cpsid	i
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 80109e2:	460a      	mov	r2, r1
 80109e4:	4601      	mov	r1, r0
 80109e6:	4803      	ldr	r0, [pc, #12]	; (80109f4 <SUBGRF_WriteCommand+0x1c>)
 80109e8:	f7f6 f912 	bl	8006c10 <HAL_SUBGHZ_ExecSetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80109ec:	f384 8810 	msr	PRIMASK, r4
    CRITICAL_SECTION_END();
}
 80109f0:	bd10      	pop	{r4, pc}
 80109f2:	bf00      	nop
 80109f4:	200003b4 	.word	0x200003b4

080109f8 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 80109f8:	b510      	push	{r4, lr}
 80109fa:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80109fc:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010a00:	b672      	cpsid	i
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 8010a02:	460a      	mov	r2, r1
 8010a04:	4601      	mov	r1, r0
 8010a06:	4803      	ldr	r0, [pc, #12]	; (8010a14 <SUBGRF_ReadCommand+0x1c>)
 8010a08:	f7f6 f958 	bl	8006cbc <HAL_SUBGHZ_ExecGetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010a0c:	f384 8810 	msr	PRIMASK, r4
    CRITICAL_SECTION_END();
}
 8010a10:	bd10      	pop	{r4, pc}
 8010a12:	bf00      	nop
 8010a14:	200003b4 	.word	0x200003b4

08010a18 <SUBGRF_GetOperatingMode>:
}
 8010a18:	4b01      	ldr	r3, [pc, #4]	; (8010a20 <SUBGRF_GetOperatingMode+0x8>)
 8010a1a:	7818      	ldrb	r0, [r3, #0]
 8010a1c:	4770      	bx	lr
 8010a1e:	bf00      	nop
 8010a20:	2000130a 	.word	0x2000130a

08010a24 <SUBGRF_SetStandby>:
{
 8010a24:	b500      	push	{lr}
 8010a26:	b083      	sub	sp, #12
 8010a28:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8010a2c:	2201      	movs	r2, #1
 8010a2e:	f10d 0107 	add.w	r1, sp, #7
 8010a32:	2080      	movs	r0, #128	; 0x80
 8010a34:	f7ff ffd0 	bl	80109d8 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 8010a38:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010a3c:	b92b      	cbnz	r3, 8010a4a <SUBGRF_SetStandby+0x26>
        OperatingMode = MODE_STDBY_RC;
 8010a3e:	4b05      	ldr	r3, [pc, #20]	; (8010a54 <SUBGRF_SetStandby+0x30>)
 8010a40:	2201      	movs	r2, #1
 8010a42:	701a      	strb	r2, [r3, #0]
}
 8010a44:	b003      	add	sp, #12
 8010a46:	f85d fb04 	ldr.w	pc, [sp], #4
        OperatingMode = MODE_STDBY_XOSC;
 8010a4a:	4b02      	ldr	r3, [pc, #8]	; (8010a54 <SUBGRF_SetStandby+0x30>)
 8010a4c:	2202      	movs	r2, #2
 8010a4e:	701a      	strb	r2, [r3, #0]
}
 8010a50:	e7f8      	b.n	8010a44 <SUBGRF_SetStandby+0x20>
 8010a52:	bf00      	nop
 8010a54:	2000130a 	.word	0x2000130a

08010a58 <SUBGRF_SetTx>:
{
 8010a58:	b500      	push	{lr}
 8010a5a:	b083      	sub	sp, #12
    OperatingMode = MODE_TX;
 8010a5c:	4b0a      	ldr	r3, [pc, #40]	; (8010a88 <SUBGRF_SetTx+0x30>)
 8010a5e:	2204      	movs	r2, #4
 8010a60:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8010a62:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8010a66:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8010a6a:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8010a6e:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8010a72:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8010a76:	2203      	movs	r2, #3
 8010a78:	a901      	add	r1, sp, #4
 8010a7a:	2083      	movs	r0, #131	; 0x83
 8010a7c:	f7ff ffac 	bl	80109d8 <SUBGRF_WriteCommand>
}
 8010a80:	b003      	add	sp, #12
 8010a82:	f85d fb04 	ldr.w	pc, [sp], #4
 8010a86:	bf00      	nop
 8010a88:	2000130a 	.word	0x2000130a

08010a8c <SUBGRF_SetRx>:
{
 8010a8c:	b500      	push	{lr}
 8010a8e:	b083      	sub	sp, #12
    OperatingMode = MODE_RX;
 8010a90:	4b0a      	ldr	r3, [pc, #40]	; (8010abc <SUBGRF_SetRx+0x30>)
 8010a92:	2205      	movs	r2, #5
 8010a94:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8010a96:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8010a9a:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8010a9e:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8010aa2:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8010aa6:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8010aaa:	2203      	movs	r2, #3
 8010aac:	a901      	add	r1, sp, #4
 8010aae:	2082      	movs	r0, #130	; 0x82
 8010ab0:	f7ff ff92 	bl	80109d8 <SUBGRF_WriteCommand>
}
 8010ab4:	b003      	add	sp, #12
 8010ab6:	f85d fb04 	ldr.w	pc, [sp], #4
 8010aba:	bf00      	nop
 8010abc:	2000130a 	.word	0x2000130a

08010ac0 <SUBGRF_SetRxDutyCycle>:
{
 8010ac0:	b500      	push	{lr}
 8010ac2:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 8010ac4:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8010ac8:	f88d 3000 	strb.w	r3, [sp]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 8010acc:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8010ad0:	f88d 3001 	strb.w	r3, [sp, #1]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 8010ad4:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 8010ad8:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8010adc:	f88d 3003 	strb.w	r3, [sp, #3]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 8010ae0:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8010ae4:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 8010ae8:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 8010aec:	2206      	movs	r2, #6
 8010aee:	4669      	mov	r1, sp
 8010af0:	2094      	movs	r0, #148	; 0x94
 8010af2:	f7ff ff71 	bl	80109d8 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 8010af6:	4b03      	ldr	r3, [pc, #12]	; (8010b04 <SUBGRF_SetRxDutyCycle+0x44>)
 8010af8:	2206      	movs	r2, #6
 8010afa:	701a      	strb	r2, [r3, #0]
}
 8010afc:	b003      	add	sp, #12
 8010afe:	f85d fb04 	ldr.w	pc, [sp], #4
 8010b02:	bf00      	nop
 8010b04:	2000130a 	.word	0x2000130a

08010b08 <SUBGRF_SetCad>:
{
 8010b08:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 8010b0a:	2200      	movs	r2, #0
 8010b0c:	4611      	mov	r1, r2
 8010b0e:	20c5      	movs	r0, #197	; 0xc5
 8010b10:	f7ff ff62 	bl	80109d8 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 8010b14:	4b01      	ldr	r3, [pc, #4]	; (8010b1c <SUBGRF_SetCad+0x14>)
 8010b16:	2207      	movs	r2, #7
 8010b18:	701a      	strb	r2, [r3, #0]
}
 8010b1a:	bd08      	pop	{r3, pc}
 8010b1c:	2000130a 	.word	0x2000130a

08010b20 <SUBGRF_SetTxContinuousWave>:
{
 8010b20:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 8010b22:	2200      	movs	r2, #0
 8010b24:	4611      	mov	r1, r2
 8010b26:	20d1      	movs	r0, #209	; 0xd1
 8010b28:	f7ff ff56 	bl	80109d8 <SUBGRF_WriteCommand>
}
 8010b2c:	bd08      	pop	{r3, pc}

08010b2e <SUBGRF_SetTxInfinitePreamble>:
{
 8010b2e:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 8010b30:	2200      	movs	r2, #0
 8010b32:	4611      	mov	r1, r2
 8010b34:	20d2      	movs	r0, #210	; 0xd2
 8010b36:	f7ff ff4f 	bl	80109d8 <SUBGRF_WriteCommand>
}
 8010b3a:	bd08      	pop	{r3, pc}

08010b3c <SUBGRF_SetStopRxTimerOnPreambleDetect>:
{
 8010b3c:	b500      	push	{lr}
 8010b3e:	b083      	sub	sp, #12
 8010b40:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 8010b44:	2201      	movs	r2, #1
 8010b46:	f10d 0107 	add.w	r1, sp, #7
 8010b4a:	209f      	movs	r0, #159	; 0x9f
 8010b4c:	f7ff ff44 	bl	80109d8 <SUBGRF_WriteCommand>
}
 8010b50:	b003      	add	sp, #12
 8010b52:	f85d fb04 	ldr.w	pc, [sp], #4

08010b56 <SUBGRF_SetRegulatorMode>:
{
 8010b56:	b500      	push	{lr}
 8010b58:	b083      	sub	sp, #12
    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 8010b5a:	f7f2 fd41 	bl	80035e0 <RBI_IsDCDC>
 8010b5e:	2801      	cmp	r0, #1
 8010b60:	d00b      	beq.n	8010b7a <SUBGRF_SetRegulatorMode+0x24>
        mode = USE_LDO ;
 8010b62:	2300      	movs	r3, #0
 8010b64:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 8010b68:	2201      	movs	r2, #1
 8010b6a:	f10d 0107 	add.w	r1, sp, #7
 8010b6e:	2096      	movs	r0, #150	; 0x96
 8010b70:	f7ff ff32 	bl	80109d8 <SUBGRF_WriteCommand>
}
 8010b74:	b003      	add	sp, #12
 8010b76:	f85d fb04 	ldr.w	pc, [sp], #4
        mode = USE_DCDC ;
 8010b7a:	2301      	movs	r3, #1
 8010b7c:	f88d 3007 	strb.w	r3, [sp, #7]
 8010b80:	e7f2      	b.n	8010b68 <SUBGRF_SetRegulatorMode+0x12>

08010b82 <SUBGRF_Calibrate>:
{
 8010b82:	b500      	push	{lr}
 8010b84:	b083      	sub	sp, #12
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8010b86:	f000 0340 	and.w	r3, r0, #64	; 0x40
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8010b8a:	f000 0220 	and.w	r2, r0, #32
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8010b8e:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8010b90:	f000 0210 	and.w	r2, r0, #16
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8010b94:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8010b96:	f000 0208 	and.w	r2, r0, #8
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8010b9a:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8010b9c:	f000 0204 	and.w	r2, r0, #4
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8010ba0:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8010ba2:	f000 0202 	and.w	r2, r0, #2
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8010ba6:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 8010ba8:	f000 0001 	and.w	r0, r0, #1
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8010bac:	4303      	orrs	r3, r0
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8010bae:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 8010bb2:	2201      	movs	r2, #1
 8010bb4:	f10d 0107 	add.w	r1, sp, #7
 8010bb8:	2089      	movs	r0, #137	; 0x89
 8010bba:	f7ff ff0d 	bl	80109d8 <SUBGRF_WriteCommand>
}
 8010bbe:	b003      	add	sp, #12
 8010bc0:	f85d fb04 	ldr.w	pc, [sp], #4

08010bc4 <SUBGRF_CalibrateImage>:
{
 8010bc4:	b500      	push	{lr}
 8010bc6:	b083      	sub	sp, #12
    if( freq > 900000000 )
 8010bc8:	4b1c      	ldr	r3, [pc, #112]	; (8010c3c <SUBGRF_CalibrateImage+0x78>)
 8010bca:	4298      	cmp	r0, r3
 8010bcc:	d90d      	bls.n	8010bea <SUBGRF_CalibrateImage+0x26>
        calFreq[0] = 0xE1;
 8010bce:	23e1      	movs	r3, #225	; 0xe1
 8010bd0:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xE9;
 8010bd4:	23e9      	movs	r3, #233	; 0xe9
 8010bd6:	f88d 3005 	strb.w	r3, [sp, #5]
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 8010bda:	2202      	movs	r2, #2
 8010bdc:	a901      	add	r1, sp, #4
 8010bde:	2098      	movs	r0, #152	; 0x98
 8010be0:	f7ff fefa 	bl	80109d8 <SUBGRF_WriteCommand>
}
 8010be4:	b003      	add	sp, #12
 8010be6:	f85d fb04 	ldr.w	pc, [sp], #4
    else if( freq > 850000000 )
 8010bea:	4b15      	ldr	r3, [pc, #84]	; (8010c40 <SUBGRF_CalibrateImage+0x7c>)
 8010bec:	4298      	cmp	r0, r3
 8010bee:	d906      	bls.n	8010bfe <SUBGRF_CalibrateImage+0x3a>
        calFreq[0] = 0xD7;
 8010bf0:	23d7      	movs	r3, #215	; 0xd7
 8010bf2:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xDB;
 8010bf6:	23db      	movs	r3, #219	; 0xdb
 8010bf8:	f88d 3005 	strb.w	r3, [sp, #5]
 8010bfc:	e7ed      	b.n	8010bda <SUBGRF_CalibrateImage+0x16>
    else if( freq > 770000000 )
 8010bfe:	4b11      	ldr	r3, [pc, #68]	; (8010c44 <SUBGRF_CalibrateImage+0x80>)
 8010c00:	4298      	cmp	r0, r3
 8010c02:	d906      	bls.n	8010c12 <SUBGRF_CalibrateImage+0x4e>
        calFreq[0] = 0xC1;
 8010c04:	23c1      	movs	r3, #193	; 0xc1
 8010c06:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xC5;
 8010c0a:	23c5      	movs	r3, #197	; 0xc5
 8010c0c:	f88d 3005 	strb.w	r3, [sp, #5]
 8010c10:	e7e3      	b.n	8010bda <SUBGRF_CalibrateImage+0x16>
    else if( freq > 460000000 )
 8010c12:	4b0d      	ldr	r3, [pc, #52]	; (8010c48 <SUBGRF_CalibrateImage+0x84>)
 8010c14:	4298      	cmp	r0, r3
 8010c16:	d906      	bls.n	8010c26 <SUBGRF_CalibrateImage+0x62>
        calFreq[0] = 0x75;
 8010c18:	2375      	movs	r3, #117	; 0x75
 8010c1a:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x81;
 8010c1e:	2381      	movs	r3, #129	; 0x81
 8010c20:	f88d 3005 	strb.w	r3, [sp, #5]
 8010c24:	e7d9      	b.n	8010bda <SUBGRF_CalibrateImage+0x16>
    else if( freq > 425000000 )
 8010c26:	4b09      	ldr	r3, [pc, #36]	; (8010c4c <SUBGRF_CalibrateImage+0x88>)
 8010c28:	4298      	cmp	r0, r3
 8010c2a:	d9d6      	bls.n	8010bda <SUBGRF_CalibrateImage+0x16>
        calFreq[0] = 0x6B;
 8010c2c:	236b      	movs	r3, #107	; 0x6b
 8010c2e:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x6F;
 8010c32:	236f      	movs	r3, #111	; 0x6f
 8010c34:	f88d 3005 	strb.w	r3, [sp, #5]
 8010c38:	e7cf      	b.n	8010bda <SUBGRF_CalibrateImage+0x16>
 8010c3a:	bf00      	nop
 8010c3c:	35a4e900 	.word	0x35a4e900
 8010c40:	32a9f880 	.word	0x32a9f880
 8010c44:	2de54480 	.word	0x2de54480
 8010c48:	1b6b0b00 	.word	0x1b6b0b00
 8010c4c:	1954fc40 	.word	0x1954fc40

08010c50 <SUBGRF_SetPaConfig>:
{
 8010c50:	b500      	push	{lr}
 8010c52:	b083      	sub	sp, #12
    buf[0] = paDutyCycle;
 8010c54:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = hpMax;
 8010c58:	f88d 1005 	strb.w	r1, [sp, #5]
    buf[2] = deviceSel;
 8010c5c:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[3] = paLut;
 8010c60:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 8010c64:	2204      	movs	r2, #4
 8010c66:	eb0d 0102 	add.w	r1, sp, r2
 8010c6a:	2095      	movs	r0, #149	; 0x95
 8010c6c:	f7ff feb4 	bl	80109d8 <SUBGRF_WriteCommand>
}
 8010c70:	b003      	add	sp, #12
 8010c72:	f85d fb04 	ldr.w	pc, [sp], #4

08010c76 <SUBGRF_SetDioIrqParams>:
{
 8010c76:	b500      	push	{lr}
 8010c78:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8010c7a:	ea4f 2c10 	mov.w	ip, r0, lsr #8
 8010c7e:	f88d c000 	strb.w	ip, [sp]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8010c82:	f88d 0001 	strb.w	r0, [sp, #1]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8010c86:	0a08      	lsrs	r0, r1, #8
 8010c88:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8010c8c:	f88d 1003 	strb.w	r1, [sp, #3]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8010c90:	0a11      	lsrs	r1, r2, #8
 8010c92:	f88d 1004 	strb.w	r1, [sp, #4]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8010c96:	f88d 2005 	strb.w	r2, [sp, #5]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 8010c9a:	0a1a      	lsrs	r2, r3, #8
 8010c9c:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8010ca0:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8010ca4:	2208      	movs	r2, #8
 8010ca6:	4669      	mov	r1, sp
 8010ca8:	4610      	mov	r0, r2
 8010caa:	f7ff fe95 	bl	80109d8 <SUBGRF_WriteCommand>
}
 8010cae:	b003      	add	sp, #12
 8010cb0:	f85d fb04 	ldr.w	pc, [sp], #4

08010cb4 <SUBGRF_SetTcxoMode>:
{
 8010cb4:	b500      	push	{lr}
 8010cb6:	b083      	sub	sp, #12
    buf[0] = tcxoVoltage & 0x07;
 8010cb8:	f000 0007 	and.w	r0, r0, #7
 8010cbc:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8010cc0:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8010cc4:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8010cc8:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8010ccc:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 8010cd0:	f88d 1007 	strb.w	r1, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8010cd4:	2204      	movs	r2, #4
 8010cd6:	eb0d 0102 	add.w	r1, sp, r2
 8010cda:	2097      	movs	r0, #151	; 0x97
 8010cdc:	f7ff fe7c 	bl	80109d8 <SUBGRF_WriteCommand>
}
 8010ce0:	b003      	add	sp, #12
 8010ce2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08010ce8 <SUBGRF_SetRfFrequency>:
{
 8010ce8:	b510      	push	{r4, lr}
 8010cea:	b082      	sub	sp, #8
 8010cec:	4604      	mov	r4, r0
    if( ImageCalibrated == false )
 8010cee:	4b12      	ldr	r3, [pc, #72]	; (8010d38 <SUBGRF_SetRfFrequency+0x50>)
 8010cf0:	781b      	ldrb	r3, [r3, #0]
 8010cf2:	b1d3      	cbz	r3, 8010d2a <SUBGRF_SetRfFrequency+0x42>
    SX_FREQ_TO_CHANNEL(chan, frequency);   
 8010cf4:	4a11      	ldr	r2, [pc, #68]	; (8010d3c <SUBGRF_SetRfFrequency+0x54>)
 8010cf6:	2300      	movs	r3, #0
 8010cf8:	0660      	lsls	r0, r4, #25
 8010cfa:	09e1      	lsrs	r1, r4, #7
 8010cfc:	f7f0 fa6a 	bl	80011d4 <__aeabi_uldivmod>
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 8010d00:	0e03      	lsrs	r3, r0, #24
 8010d02:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 8010d06:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8010d0a:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 8010d0e:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8010d12:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( chan & 0xFF );
 8010d16:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 8010d1a:	2204      	movs	r2, #4
 8010d1c:	eb0d 0102 	add.w	r1, sp, r2
 8010d20:	2086      	movs	r0, #134	; 0x86
 8010d22:	f7ff fe59 	bl	80109d8 <SUBGRF_WriteCommand>
}
 8010d26:	b002      	add	sp, #8
 8010d28:	bd10      	pop	{r4, pc}
        SUBGRF_CalibrateImage( frequency );
 8010d2a:	f7ff ff4b 	bl	8010bc4 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 8010d2e:	4b02      	ldr	r3, [pc, #8]	; (8010d38 <SUBGRF_SetRfFrequency+0x50>)
 8010d30:	2201      	movs	r2, #1
 8010d32:	701a      	strb	r2, [r3, #0]
 8010d34:	e7de      	b.n	8010cf4 <SUBGRF_SetRfFrequency+0xc>
 8010d36:	bf00      	nop
 8010d38:	20001308 	.word	0x20001308
 8010d3c:	01e84800 	.word	0x01e84800

08010d40 <SUBGRF_GetPacketType>:
}
 8010d40:	4b01      	ldr	r3, [pc, #4]	; (8010d48 <SUBGRF_GetPacketType+0x8>)
 8010d42:	7818      	ldrb	r0, [r3, #0]
 8010d44:	4770      	bx	lr
 8010d46:	bf00      	nop
 8010d48:	2000130b 	.word	0x2000130b

08010d4c <SUBGRF_SetBufferBaseAddress>:
{
 8010d4c:	b500      	push	{lr}
 8010d4e:	b083      	sub	sp, #12
    buf[0] = txBaseAddress;
 8010d50:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = rxBaseAddress;
 8010d54:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8010d58:	2202      	movs	r2, #2
 8010d5a:	a901      	add	r1, sp, #4
 8010d5c:	208f      	movs	r0, #143	; 0x8f
 8010d5e:	f7ff fe3b 	bl	80109d8 <SUBGRF_WriteCommand>
}
 8010d62:	b003      	add	sp, #12
 8010d64:	f85d fb04 	ldr.w	pc, [sp], #4

08010d68 <SUBGRF_GetRssiInst>:
{
 8010d68:	b500      	push	{lr}
 8010d6a:	b083      	sub	sp, #12
    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 8010d6c:	2201      	movs	r2, #1
 8010d6e:	a901      	add	r1, sp, #4
 8010d70:	2015      	movs	r0, #21
 8010d72:	f7ff fe41 	bl	80109f8 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 8010d76:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8010d7a:	4240      	negs	r0, r0
}
 8010d7c:	1040      	asrs	r0, r0, #1
 8010d7e:	b003      	add	sp, #12
 8010d80:	f85d fb04 	ldr.w	pc, [sp], #4

08010d84 <SUBGRF_GetPacketStatus>:
{
 8010d84:	b510      	push	{r4, lr}
 8010d86:	b082      	sub	sp, #8
 8010d88:	4604      	mov	r4, r0
    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 8010d8a:	2203      	movs	r2, #3
 8010d8c:	a901      	add	r1, sp, #4
 8010d8e:	2014      	movs	r0, #20
 8010d90:	f7ff fe32 	bl	80109f8 <SUBGRF_ReadCommand>
    pktStatus->packetType = SUBGRF_GetPacketType( );
 8010d94:	f7ff ffd4 	bl	8010d40 <SUBGRF_GetPacketType>
 8010d98:	7020      	strb	r0, [r4, #0]
    switch( pktStatus->packetType )
 8010d9a:	b148      	cbz	r0, 8010db0 <SUBGRF_GetPacketStatus+0x2c>
 8010d9c:	2801      	cmp	r0, #1
 8010d9e:	d018      	beq.n	8010dd2 <SUBGRF_GetPacketStatus+0x4e>
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 8010da0:	2214      	movs	r2, #20
 8010da2:	2100      	movs	r1, #0
 8010da4:	4620      	mov	r0, r4
 8010da6:	f000 fe52 	bl	8011a4e <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 8010daa:	230f      	movs	r3, #15
 8010dac:	7023      	strb	r3, [r4, #0]
}
 8010dae:	e00e      	b.n	8010dce <SUBGRF_GetPacketStatus+0x4a>
            pktStatus->Params.Gfsk.RxStatus = status[0];
 8010db0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010db4:	7123      	strb	r3, [r4, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 8010db6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8010dba:	425b      	negs	r3, r3
 8010dbc:	105b      	asrs	r3, r3, #1
 8010dbe:	71a3      	strb	r3, [r4, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 8010dc0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8010dc4:	425b      	negs	r3, r3
 8010dc6:	105b      	asrs	r3, r3, #1
 8010dc8:	7163      	strb	r3, [r4, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 8010dca:	2300      	movs	r3, #0
 8010dcc:	60a3      	str	r3, [r4, #8]
}
 8010dce:	b002      	add	sp, #8
 8010dd0:	bd10      	pop	{r4, pc}
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 8010dd2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010dd6:	425b      	negs	r3, r3
 8010dd8:	105b      	asrs	r3, r3, #1
 8010dda:	7323      	strb	r3, [r4, #12]
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 8010ddc:	f99d 3005 	ldrsb.w	r3, [sp, #5]
 8010de0:	3302      	adds	r3, #2
 8010de2:	109b      	asrs	r3, r3, #2
 8010de4:	7363      	strb	r3, [r4, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 8010de6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8010dea:	425b      	negs	r3, r3
 8010dec:	105b      	asrs	r3, r3, #1
 8010dee:	73a3      	strb	r3, [r4, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 8010df0:	4b01      	ldr	r3, [pc, #4]	; (8010df8 <SUBGRF_GetPacketStatus+0x74>)
 8010df2:	681b      	ldr	r3, [r3, #0]
 8010df4:	6123      	str	r3, [r4, #16]
            break;
 8010df6:	e7ea      	b.n	8010dce <SUBGRF_GetPacketStatus+0x4a>
 8010df8:	20001304 	.word	0x20001304

08010dfc <SUBGRF_WriteRegister>:
{
 8010dfc:	b500      	push	{lr}
 8010dfe:	b083      	sub	sp, #12
 8010e00:	f88d 1007 	strb.w	r1, [sp, #7]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 8010e04:	2301      	movs	r3, #1
 8010e06:	f10d 0207 	add.w	r2, sp, #7
 8010e0a:	4601      	mov	r1, r0
 8010e0c:	4802      	ldr	r0, [pc, #8]	; (8010e18 <SUBGRF_WriteRegister+0x1c>)
 8010e0e:	f7f5 fe5b 	bl	8006ac8 <HAL_SUBGHZ_WriteRegisters>
}
 8010e12:	b003      	add	sp, #12
 8010e14:	f85d fb04 	ldr.w	pc, [sp], #4
 8010e18:	200003b4 	.word	0x200003b4

08010e1c <SUBGRF_SetRxBoosted>:
{
 8010e1c:	b510      	push	{r4, lr}
 8010e1e:	b082      	sub	sp, #8
 8010e20:	4604      	mov	r4, r0
    OperatingMode = MODE_RX;
 8010e22:	4b0c      	ldr	r3, [pc, #48]	; (8010e54 <SUBGRF_SetRxBoosted+0x38>)
 8010e24:	2205      	movs	r2, #5
 8010e26:	701a      	strb	r2, [r3, #0]
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 8010e28:	2197      	movs	r1, #151	; 0x97
 8010e2a:	f640 00ac 	movw	r0, #2220	; 0x8ac
 8010e2e:	f7ff ffe5 	bl	8010dfc <SUBGRF_WriteRegister>
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8010e32:	f3c4 4307 	ubfx	r3, r4, #16, #8
 8010e36:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8010e3a:	f3c4 2307 	ubfx	r3, r4, #8, #8
 8010e3e:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8010e42:	f88d 4006 	strb.w	r4, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8010e46:	2203      	movs	r2, #3
 8010e48:	a901      	add	r1, sp, #4
 8010e4a:	2082      	movs	r0, #130	; 0x82
 8010e4c:	f7ff fdc4 	bl	80109d8 <SUBGRF_WriteCommand>
}
 8010e50:	b002      	add	sp, #8
 8010e52:	bd10      	pop	{r4, pc}
 8010e54:	2000130a 	.word	0x2000130a

08010e58 <SUBGRF_SetLoRaSymbNumTimeout>:
{
 8010e58:	b500      	push	{lr}
 8010e5a:	b083      	sub	sp, #12
 8010e5c:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 8010e60:	2201      	movs	r2, #1
 8010e62:	f10d 0107 	add.w	r1, sp, #7
 8010e66:	20a0      	movs	r0, #160	; 0xa0
 8010e68:	f7ff fdb6 	bl	80109d8 <SUBGRF_WriteCommand>
    if( symbNum >= 64 )
 8010e6c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010e70:	2b3f      	cmp	r3, #63	; 0x3f
 8010e72:	d90f      	bls.n	8010e94 <SUBGRF_SetLoRaSymbNumTimeout+0x3c>
        uint8_t mant = symbNum >> 1;
 8010e74:	085b      	lsrs	r3, r3, #1
        uint8_t exp  = 0;
 8010e76:	2200      	movs	r2, #0
        while( mant > 31 )
 8010e78:	e002      	b.n	8010e80 <SUBGRF_SetLoRaSymbNumTimeout+0x28>
            mant >>= 2;
 8010e7a:	089b      	lsrs	r3, r3, #2
            exp++;
 8010e7c:	3201      	adds	r2, #1
 8010e7e:	b2d2      	uxtb	r2, r2
        while( mant > 31 )
 8010e80:	2b1f      	cmp	r3, #31
 8010e82:	d8fa      	bhi.n	8010e7a <SUBGRF_SetLoRaSymbNumTimeout+0x22>
        reg = exp + ( mant << 3 );
 8010e84:	00d9      	lsls	r1, r3, #3
 8010e86:	b2c9      	uxtb	r1, r1
 8010e88:	4411      	add	r1, r2
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 8010e8a:	b2c9      	uxtb	r1, r1
 8010e8c:	f240 7006 	movw	r0, #1798	; 0x706
 8010e90:	f7ff ffb4 	bl	8010dfc <SUBGRF_WriteRegister>
}
 8010e94:	b003      	add	sp, #12
 8010e96:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08010e9c <SUBGRF_SetPacketType>:
{
 8010e9c:	b500      	push	{lr}
 8010e9e:	b083      	sub	sp, #12
 8010ea0:	f88d 0007 	strb.w	r0, [sp, #7]
    PacketType = packetType;
 8010ea4:	b2c3      	uxtb	r3, r0
 8010ea6:	4a09      	ldr	r2, [pc, #36]	; (8010ecc <SUBGRF_SetPacketType+0x30>)
 8010ea8:	7013      	strb	r3, [r2, #0]
    if( packetType == PACKET_TYPE_GFSK )
 8010eaa:	b143      	cbz	r3, 8010ebe <SUBGRF_SetPacketType+0x22>
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8010eac:	2201      	movs	r2, #1
 8010eae:	f10d 0107 	add.w	r1, sp, #7
 8010eb2:	208a      	movs	r0, #138	; 0x8a
 8010eb4:	f7ff fd90 	bl	80109d8 <SUBGRF_WriteCommand>
}
 8010eb8:	b003      	add	sp, #12
 8010eba:	f85d fb04 	ldr.w	pc, [sp], #4
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 8010ebe:	2100      	movs	r1, #0
 8010ec0:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8010ec4:	f7ff ff9a 	bl	8010dfc <SUBGRF_WriteRegister>
 8010ec8:	e7f0      	b.n	8010eac <SUBGRF_SetPacketType+0x10>
 8010eca:	bf00      	nop
 8010ecc:	2000130b 	.word	0x2000130b

08010ed0 <SUBGRF_SetModulationParams>:
{
 8010ed0:	b510      	push	{r4, lr}
 8010ed2:	b082      	sub	sp, #8
 8010ed4:	4604      	mov	r4, r0
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8010ed6:	4b3e      	ldr	r3, [pc, #248]	; (8010fd0 <SUBGRF_SetModulationParams+0x100>)
 8010ed8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010edc:	ab02      	add	r3, sp, #8
 8010ede:	e903 0003 	stmdb	r3, {r0, r1}
    if( PacketType != modulationParams->PacketType )
 8010ee2:	7820      	ldrb	r0, [r4, #0]
 8010ee4:	4b3b      	ldr	r3, [pc, #236]	; (8010fd4 <SUBGRF_SetModulationParams+0x104>)
 8010ee6:	781b      	ldrb	r3, [r3, #0]
 8010ee8:	4298      	cmp	r0, r3
 8010eea:	d106      	bne.n	8010efa <SUBGRF_SetModulationParams+0x2a>
    switch( modulationParams->PacketType )
 8010eec:	7823      	ldrb	r3, [r4, #0]
 8010eee:	2b03      	cmp	r3, #3
 8010ef0:	d82c      	bhi.n	8010f4c <SUBGRF_SetModulationParams+0x7c>
 8010ef2:	e8df f003 	tbb	[pc, r3]
 8010ef6:	4205      	.short	0x4205
 8010ef8:	542d      	.short	0x542d
        SUBGRF_SetPacketType( modulationParams->PacketType );
 8010efa:	f7ff ffcf 	bl	8010e9c <SUBGRF_SetPacketType>
 8010efe:	e7f5      	b.n	8010eec <SUBGRF_SetModulationParams+0x1c>
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 8010f00:	6862      	ldr	r2, [r4, #4]
 8010f02:	4b35      	ldr	r3, [pc, #212]	; (8010fd8 <SUBGRF_SetModulationParams+0x108>)
 8010f04:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8010f08:	0c1a      	lsrs	r2, r3, #16
 8010f0a:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8010f0e:	0a1a      	lsrs	r2, r3, #8
 8010f10:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 8010f14:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8010f18:	7b23      	ldrb	r3, [r4, #12]
 8010f1a:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8010f1e:	7b63      	ldrb	r3, [r4, #13]
 8010f20:	f88d 3004 	strb.w	r3, [sp, #4]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 8010f24:	68a1      	ldr	r1, [r4, #8]
 8010f26:	4a2d      	ldr	r2, [pc, #180]	; (8010fdc <SUBGRF_SetModulationParams+0x10c>)
 8010f28:	2300      	movs	r3, #0
 8010f2a:	0648      	lsls	r0, r1, #25
 8010f2c:	09c9      	lsrs	r1, r1, #7
 8010f2e:	f7f0 f951 	bl	80011d4 <__aeabi_uldivmod>
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8010f32:	0c03      	lsrs	r3, r0, #16
 8010f34:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8010f38:	0a03      	lsrs	r3, r0, #8
 8010f3a:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[7] = ( tempVal& 0xFF );
 8010f3e:	f88d 0007 	strb.w	r0, [sp, #7]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8010f42:	2208      	movs	r2, #8
 8010f44:	4669      	mov	r1, sp
 8010f46:	208b      	movs	r0, #139	; 0x8b
 8010f48:	f7ff fd46 	bl	80109d8 <SUBGRF_WriteCommand>
}
 8010f4c:	b002      	add	sp, #8
 8010f4e:	bd10      	pop	{r4, pc}
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8010f50:	6922      	ldr	r2, [r4, #16]
 8010f52:	4b21      	ldr	r3, [pc, #132]	; (8010fd8 <SUBGRF_SetModulationParams+0x108>)
 8010f54:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8010f58:	0c1a      	lsrs	r2, r3, #16
 8010f5a:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8010f5e:	0a1a      	lsrs	r2, r3, #8
 8010f60:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 8010f64:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8010f68:	7d23      	ldrb	r3, [r4, #20]
 8010f6a:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8010f6e:	2204      	movs	r2, #4
 8010f70:	4669      	mov	r1, sp
 8010f72:	208b      	movs	r0, #139	; 0x8b
 8010f74:	f7ff fd30 	bl	80109d8 <SUBGRF_WriteCommand>
        break;
 8010f78:	e7e8      	b.n	8010f4c <SUBGRF_SetModulationParams+0x7c>
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8010f7a:	7e23      	ldrb	r3, [r4, #24]
 8010f7c:	f88d 3000 	strb.w	r3, [sp]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8010f80:	7e63      	ldrb	r3, [r4, #25]
 8010f82:	f88d 3001 	strb.w	r3, [sp, #1]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8010f86:	7ea3      	ldrb	r3, [r4, #26]
 8010f88:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8010f8c:	7ee3      	ldrb	r3, [r4, #27]
 8010f8e:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8010f92:	2204      	movs	r2, #4
 8010f94:	4669      	mov	r1, sp
 8010f96:	208b      	movs	r0, #139	; 0x8b
 8010f98:	f7ff fd1e 	bl	80109d8 <SUBGRF_WriteCommand>
        break;
 8010f9c:	e7d6      	b.n	8010f4c <SUBGRF_SetModulationParams+0x7c>
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 8010f9e:	6862      	ldr	r2, [r4, #4]
 8010fa0:	4b0d      	ldr	r3, [pc, #52]	; (8010fd8 <SUBGRF_SetModulationParams+0x108>)
 8010fa2:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8010fa6:	0c1a      	lsrs	r2, r3, #16
 8010fa8:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8010fac:	0a1a      	lsrs	r2, r3, #8
 8010fae:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 8010fb2:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8010fb6:	7b23      	ldrb	r3, [r4, #12]
 8010fb8:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8010fbc:	7b63      	ldrb	r3, [r4, #13]
 8010fbe:	f88d 3004 	strb.w	r3, [sp, #4]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8010fc2:	2205      	movs	r2, #5
 8010fc4:	4669      	mov	r1, sp
 8010fc6:	208b      	movs	r0, #139	; 0x8b
 8010fc8:	f7ff fd06 	bl	80109d8 <SUBGRF_WriteCommand>
}
 8010fcc:	e7be      	b.n	8010f4c <SUBGRF_SetModulationParams+0x7c>
 8010fce:	bf00      	nop
 8010fd0:	08016ee8 	.word	0x08016ee8
 8010fd4:	2000130b 	.word	0x2000130b
 8010fd8:	3d090000 	.word	0x3d090000
 8010fdc:	01e84800 	.word	0x01e84800

08010fe0 <SUBGRF_ReadRegister>:
{
 8010fe0:	b500      	push	{lr}
 8010fe2:	b083      	sub	sp, #12
 8010fe4:	4601      	mov	r1, r0
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 8010fe6:	2301      	movs	r3, #1
 8010fe8:	f10d 0207 	add.w	r2, sp, #7
 8010fec:	4803      	ldr	r0, [pc, #12]	; (8010ffc <SUBGRF_ReadRegister+0x1c>)
 8010fee:	f7f5 fdbb 	bl	8006b68 <HAL_SUBGHZ_ReadRegisters>
}
 8010ff2:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8010ff6:	b003      	add	sp, #12
 8010ff8:	f85d fb04 	ldr.w	pc, [sp], #4
 8010ffc:	200003b4 	.word	0x200003b4

08011000 <Radio_SMPS_Set>:
{
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
}

static void Radio_SMPS_Set(uint8_t level)
{
 8011000:	b510      	push	{r4, lr}
 8011002:	4604      	mov	r4, r0
  if ( 1U == RBI_IsDCDC() )
 8011004:	f7f2 faec 	bl	80035e0 <RBI_IsDCDC>
 8011008:	2801      	cmp	r0, #1
 801100a:	d000      	beq.n	801100e <Radio_SMPS_Set+0xe>
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
    modReg&= (~SMPS_DRV_MASK);
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
  }
}
 801100c:	bd10      	pop	{r4, pc}
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 801100e:	f640 1023 	movw	r0, #2339	; 0x923
 8011012:	f7ff ffe5 	bl	8010fe0 <SUBGRF_ReadRegister>
    modReg&= (~SMPS_DRV_MASK);
 8011016:	f000 01f9 	and.w	r1, r0, #249	; 0xf9
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 801101a:	4321      	orrs	r1, r4
 801101c:	f640 1023 	movw	r0, #2339	; 0x923
 8011020:	f7ff feec 	bl	8010dfc <SUBGRF_WriteRegister>
}
 8011024:	e7f2      	b.n	801100c <Radio_SMPS_Set+0xc>
	...

08011028 <SUBGRF_Init>:
{
 8011028:	b508      	push	{r3, lr}
    if ( dioIrq != NULL)
 801102a:	b108      	cbz	r0, 8011030 <SUBGRF_Init+0x8>
        RadioOnDioIrqCb = dioIrq;
 801102c:	4a16      	ldr	r2, [pc, #88]	; (8011088 <SUBGRF_Init+0x60>)
 801102e:	6010      	str	r0, [r2, #0]
    RADIO_INIT();
 8011030:	f7f0 fd7c 	bl	8001b2c <MX_SUBGHZ_Init>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8011034:	2002      	movs	r0, #2
 8011036:	f7ff ffe3 	bl	8011000 <Radio_SMPS_Set>
    ImageCalibrated = false;
 801103a:	2000      	movs	r0, #0
 801103c:	4b13      	ldr	r3, [pc, #76]	; (801108c <SUBGRF_Init+0x64>)
 801103e:	7018      	strb	r0, [r3, #0]
    SUBGRF_SetStandby( STDBY_RC );
 8011040:	f7ff fcf0 	bl	8010a24 <SUBGRF_SetStandby>
    if (1U == RBI_IsTCXO() )
 8011044:	f7f2 fac8 	bl	80035d8 <RBI_IsTCXO>
 8011048:	2801      	cmp	r0, #1
 801104a:	d00f      	beq.n	801106c <SUBGRF_Init+0x44>
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801104c:	2120      	movs	r1, #32
 801104e:	f640 1011 	movw	r0, #2321	; 0x911
 8011052:	f7ff fed3 	bl	8010dfc <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8011056:	2120      	movs	r1, #32
 8011058:	f640 1012 	movw	r0, #2322	; 0x912
 801105c:	f7ff fece 	bl	8010dfc <SUBGRF_WriteRegister>
    RBI_Init();
 8011060:	f7f2 faae 	bl	80035c0 <RBI_Init>
    OperatingMode = MODE_STDBY_RC;
 8011064:	4b0a      	ldr	r3, [pc, #40]	; (8011090 <SUBGRF_Init+0x68>)
 8011066:	2201      	movs	r2, #1
 8011068:	701a      	strb	r2, [r3, #0]
}
 801106a:	bd08      	pop	{r3, pc}
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 801106c:	2140      	movs	r1, #64	; 0x40
 801106e:	f7ff fe21 	bl	8010cb4 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8011072:	2100      	movs	r1, #0
 8011074:	f640 1011 	movw	r0, #2321	; 0x911
 8011078:	f7ff fec0 	bl	8010dfc <SUBGRF_WriteRegister>
        SUBGRF_Calibrate( calibParam );
 801107c:	f04f 007f 	mov.w	r0, #127	; 0x7f
 8011080:	f7ff fd7f 	bl	8010b82 <SUBGRF_Calibrate>
 8011084:	e7ec      	b.n	8011060 <SUBGRF_Init+0x38>
 8011086:	bf00      	nop
 8011088:	2000130c 	.word	0x2000130c
 801108c:	20001308 	.word	0x20001308
 8011090:	2000130a 	.word	0x2000130a

08011094 <SUBGRF_SetSleep>:
{
 8011094:	b510      	push	{r4, lr}
 8011096:	b082      	sub	sp, #8
 8011098:	4604      	mov	r4, r0
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 801109a:	2000      	movs	r0, #0
 801109c:	f7f2 fa94 	bl	80035c8 <RBI_ConfigRFSwitch>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 80110a0:	2002      	movs	r0, #2
 80110a2:	f7ff ffad 	bl	8011000 <Radio_SMPS_Set>
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 80110a6:	f004 0304 	and.w	r3, r4, #4
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 80110aa:	f004 0202 	and.w	r2, r4, #2
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 80110ae:	4313      	orrs	r3, r2
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 80110b0:	f004 0401 	and.w	r4, r4, #1
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 80110b4:	4323      	orrs	r3, r4
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 80110b6:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 80110ba:	2201      	movs	r2, #1
 80110bc:	f10d 0107 	add.w	r1, sp, #7
 80110c0:	2084      	movs	r0, #132	; 0x84
 80110c2:	f7ff fc89 	bl	80109d8 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 80110c6:	4b02      	ldr	r3, [pc, #8]	; (80110d0 <SUBGRF_SetSleep+0x3c>)
 80110c8:	2200      	movs	r2, #0
 80110ca:	701a      	strb	r2, [r3, #0]
}
 80110cc:	b002      	add	sp, #8
 80110ce:	bd10      	pop	{r4, pc}
 80110d0:	2000130a 	.word	0x2000130a

080110d4 <SUBGRF_SetWhiteningSeed>:
{
 80110d4:	b510      	push	{r4, lr}
 80110d6:	4604      	mov	r4, r0
    switch( SUBGRF_GetPacketType( ) )
 80110d8:	f7ff fe32 	bl	8010d40 <SUBGRF_GetPacketType>
 80110dc:	b100      	cbz	r0, 80110e0 <SUBGRF_SetWhiteningSeed+0xc>
}
 80110de:	bd10      	pop	{r4, pc}
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 80110e0:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 80110e4:	f7ff ff7c 	bl	8010fe0 <SUBGRF_ReadRegister>
 80110e8:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 80110ec:	f3c4 2100 	ubfx	r1, r4, #8, #1
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 80110f0:	4301      	orrs	r1, r0
 80110f2:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 80110f6:	f7ff fe81 	bl	8010dfc <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 80110fa:	b2e1      	uxtb	r1, r4
 80110fc:	f240 60b9 	movw	r0, #1721	; 0x6b9
 8011100:	f7ff fe7c 	bl	8010dfc <SUBGRF_WriteRegister>
}
 8011104:	e7eb      	b.n	80110de <SUBGRF_SetWhiteningSeed+0xa>

08011106 <SUBGRF_SetTxParams>:
{
 8011106:	b530      	push	{r4, r5, lr}
 8011108:	b083      	sub	sp, #12
 801110a:	460c      	mov	r4, r1
 801110c:	4615      	mov	r5, r2
    if( paSelect == RFO_LP )
 801110e:	2801      	cmp	r0, #1
 8011110:	d127      	bne.n	8011162 <SUBGRF_SetTxParams+0x5c>
        if( power == 15 )
 8011112:	290f      	cmp	r1, #15
 8011114:	d00d      	beq.n	8011132 <SUBGRF_SetTxParams+0x2c>
            SUBGRF_SetPaConfig( 0x04, 0x00, 0x01, 0x01 );
 8011116:	2301      	movs	r3, #1
 8011118:	461a      	mov	r2, r3
 801111a:	2100      	movs	r1, #0
 801111c:	2004      	movs	r0, #4
 801111e:	f7ff fd97 	bl	8010c50 <SUBGRF_SetPaConfig>
        if( power >= 14 )
 8011122:	2c0d      	cmp	r4, #13
 8011124:	dc0c      	bgt.n	8011140 <SUBGRF_SetTxParams+0x3a>
        else if( power < -17 )
 8011126:	f114 0f11 	cmn.w	r4, #17
 801112a:	da0a      	bge.n	8011142 <SUBGRF_SetTxParams+0x3c>
            power = -17;
 801112c:	f06f 0410 	mvn.w	r4, #16
 8011130:	e007      	b.n	8011142 <SUBGRF_SetTxParams+0x3c>
            SUBGRF_SetPaConfig( 0x06, 0x00, 0x01, 0x01 );
 8011132:	2301      	movs	r3, #1
 8011134:	461a      	mov	r2, r3
 8011136:	2100      	movs	r1, #0
 8011138:	2006      	movs	r0, #6
 801113a:	f7ff fd89 	bl	8010c50 <SUBGRF_SetPaConfig>
 801113e:	e7f0      	b.n	8011122 <SUBGRF_SetTxParams+0x1c>
            power = 14;
 8011140:	240e      	movs	r4, #14
        SUBGRF_WriteRegister( REG_OCP, 0x18 ); // current max is 80 mA for the whole device
 8011142:	2118      	movs	r1, #24
 8011144:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8011148:	f7ff fe58 	bl	8010dfc <SUBGRF_WriteRegister>
    buf[0] = power;
 801114c:	f88d 4004 	strb.w	r4, [sp, #4]
    buf[1] = ( uint8_t )rampTime;
 8011150:	f88d 5005 	strb.w	r5, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_TXPARAMS, buf, 2 );
 8011154:	2202      	movs	r2, #2
 8011156:	a901      	add	r1, sp, #4
 8011158:	208e      	movs	r0, #142	; 0x8e
 801115a:	f7ff fc3d 	bl	80109d8 <SUBGRF_WriteCommand>
}
 801115e:	b003      	add	sp, #12
 8011160:	bd30      	pop	{r4, r5, pc}
        SUBGRF_WriteRegister( REG_TX_CLAMP, SUBGRF_ReadRegister( REG_TX_CLAMP ) | ( 0x0F << 1 ) );
 8011162:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8011166:	f7ff ff3b 	bl	8010fe0 <SUBGRF_ReadRegister>
 801116a:	f040 011e 	orr.w	r1, r0, #30
 801116e:	b2c9      	uxtb	r1, r1
 8011170:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8011174:	f7ff fe42 	bl	8010dfc <SUBGRF_WriteRegister>
        SUBGRF_SetPaConfig( 0x04, 0x07, 0x00, 0x01 );
 8011178:	2301      	movs	r3, #1
 801117a:	2200      	movs	r2, #0
 801117c:	2107      	movs	r1, #7
 801117e:	2004      	movs	r0, #4
 8011180:	f7ff fd66 	bl	8010c50 <SUBGRF_SetPaConfig>
        if( power > 22 )
 8011184:	2c16      	cmp	r4, #22
 8011186:	dc05      	bgt.n	8011194 <SUBGRF_SetTxParams+0x8e>
        else if( power < -9 )
 8011188:	f114 0f09 	cmn.w	r4, #9
 801118c:	da03      	bge.n	8011196 <SUBGRF_SetTxParams+0x90>
            power = -9;
 801118e:	f06f 0408 	mvn.w	r4, #8
 8011192:	e000      	b.n	8011196 <SUBGRF_SetTxParams+0x90>
            power = 22;
 8011194:	2416      	movs	r4, #22
        SUBGRF_WriteRegister( REG_OCP, 0x38 ); // current max 160mA for the whole device
 8011196:	2138      	movs	r1, #56	; 0x38
 8011198:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801119c:	f7ff fe2e 	bl	8010dfc <SUBGRF_WriteRegister>
 80111a0:	e7d4      	b.n	801114c <SUBGRF_SetTxParams+0x46>
	...

080111a4 <SUBGRF_GetRxBufferStatus>:
{
 80111a4:	b530      	push	{r4, r5, lr}
 80111a6:	b083      	sub	sp, #12
 80111a8:	4605      	mov	r5, r0
 80111aa:	460c      	mov	r4, r1
    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 80111ac:	2202      	movs	r2, #2
 80111ae:	a901      	add	r1, sp, #4
 80111b0:	2013      	movs	r0, #19
 80111b2:	f7ff fc21 	bl	80109f8 <SUBGRF_ReadCommand>
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 80111b6:	f7ff fdc3 	bl	8010d40 <SUBGRF_GetPacketType>
 80111ba:	2801      	cmp	r0, #1
 80111bc:	d007      	beq.n	80111ce <SUBGRF_GetRxBufferStatus+0x2a>
        *payloadLength = status[0];
 80111be:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80111c2:	702b      	strb	r3, [r5, #0]
    *rxStartBufferPointer = status[1];
 80111c4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80111c8:	7023      	strb	r3, [r4, #0]
}
 80111ca:	b003      	add	sp, #12
 80111cc:	bd30      	pop	{r4, r5, pc}
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 80111ce:	4b05      	ldr	r3, [pc, #20]	; (80111e4 <SUBGRF_GetRxBufferStatus+0x40>)
 80111d0:	781b      	ldrb	r3, [r3, #0]
 80111d2:	b2db      	uxtb	r3, r3
 80111d4:	2b01      	cmp	r3, #1
 80111d6:	d1f2      	bne.n	80111be <SUBGRF_GetRxBufferStatus+0x1a>
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 80111d8:	f240 7002 	movw	r0, #1794	; 0x702
 80111dc:	f7ff ff00 	bl	8010fe0 <SUBGRF_ReadRegister>
 80111e0:	7028      	strb	r0, [r5, #0]
 80111e2:	e7ef      	b.n	80111c4 <SUBGRF_GetRxBufferStatus+0x20>
 80111e4:	20001309 	.word	0x20001309

080111e8 <SUBGRF_WriteRegisters>:
{
 80111e8:	b510      	push	{r4, lr}
 80111ea:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80111ec:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80111f0:	b672      	cpsid	i
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 80111f2:	460a      	mov	r2, r1
 80111f4:	4601      	mov	r1, r0
 80111f6:	4803      	ldr	r0, [pc, #12]	; (8011204 <SUBGRF_WriteRegisters+0x1c>)
 80111f8:	f7f5 fc66 	bl	8006ac8 <HAL_SUBGHZ_WriteRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80111fc:	f384 8810 	msr	PRIMASK, r4
}
 8011200:	bd10      	pop	{r4, pc}
 8011202:	bf00      	nop
 8011204:	200003b4 	.word	0x200003b4

08011208 <SUBGRF_SetSyncWord>:
{
 8011208:	b508      	push	{r3, lr}
 801120a:	4601      	mov	r1, r0
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 801120c:	2208      	movs	r2, #8
 801120e:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 8011212:	f7ff ffe9 	bl	80111e8 <SUBGRF_WriteRegisters>
}
 8011216:	2000      	movs	r0, #0
 8011218:	bd08      	pop	{r3, pc}

0801121a <SUBGRF_SetCrcSeed>:
{
 801121a:	b500      	push	{lr}
 801121c:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 801121e:	0a03      	lsrs	r3, r0, #8
 8011220:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( seed & 0xFF );
 8011224:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SUBGRF_GetPacketType( ) )
 8011228:	f7ff fd8a 	bl	8010d40 <SUBGRF_GetPacketType>
 801122c:	b110      	cbz	r0, 8011234 <SUBGRF_SetCrcSeed+0x1a>
}
 801122e:	b003      	add	sp, #12
 8011230:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 8011234:	2202      	movs	r2, #2
 8011236:	a901      	add	r1, sp, #4
 8011238:	f240 60bc 	movw	r0, #1724	; 0x6bc
 801123c:	f7ff ffd4 	bl	80111e8 <SUBGRF_WriteRegisters>
}
 8011240:	e7f5      	b.n	801122e <SUBGRF_SetCrcSeed+0x14>

08011242 <SUBGRF_SetCrcPolynomial>:
{
 8011242:	b500      	push	{lr}
 8011244:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8011246:	0a03      	lsrs	r3, r0, #8
 8011248:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 801124c:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SUBGRF_GetPacketType( ) )
 8011250:	f7ff fd76 	bl	8010d40 <SUBGRF_GetPacketType>
 8011254:	b110      	cbz	r0, 801125c <SUBGRF_SetCrcPolynomial+0x1a>
}
 8011256:	b003      	add	sp, #12
 8011258:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 801125c:	2202      	movs	r2, #2
 801125e:	a901      	add	r1, sp, #4
 8011260:	f240 60be 	movw	r0, #1726	; 0x6be
 8011264:	f7ff ffc0 	bl	80111e8 <SUBGRF_WriteRegisters>
}
 8011268:	e7f5      	b.n	8011256 <SUBGRF_SetCrcPolynomial+0x14>
	...

0801126c <SUBGRF_SetPacketParams>:
{
 801126c:	b510      	push	{r4, lr}
 801126e:	b084      	sub	sp, #16
 8011270:	4604      	mov	r4, r0
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8011272:	ab01      	add	r3, sp, #4
 8011274:	4a33      	ldr	r2, [pc, #204]	; (8011344 <SUBGRF_SetPacketParams+0xd8>)
 8011276:	ca07      	ldmia	r2, {r0, r1, r2}
 8011278:	c303      	stmia	r3!, {r0, r1}
 801127a:	701a      	strb	r2, [r3, #0]
    if( PacketType != packetParams->PacketType )
 801127c:	7820      	ldrb	r0, [r4, #0]
 801127e:	4b32      	ldr	r3, [pc, #200]	; (8011348 <SUBGRF_SetPacketParams+0xdc>)
 8011280:	781b      	ldrb	r3, [r3, #0]
 8011282:	4298      	cmp	r0, r3
 8011284:	d106      	bne.n	8011294 <SUBGRF_SetPacketParams+0x28>
    switch( packetParams->PacketType )
 8011286:	7823      	ldrb	r3, [r4, #0]
 8011288:	2b03      	cmp	r3, #3
 801128a:	d82a      	bhi.n	80112e2 <SUBGRF_SetPacketParams+0x76>
 801128c:	e8df f003 	tbb	[pc, r3]
 8011290:	053f4405 	.word	0x053f4405
        SUBGRF_SetPacketType( packetParams->PacketType );
 8011294:	f7ff fe02 	bl	8010e9c <SUBGRF_SetPacketType>
 8011298:	e7f5      	b.n	8011286 <SUBGRF_SetPacketParams+0x1a>
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 801129a:	7a63      	ldrb	r3, [r4, #9]
 801129c:	2bf1      	cmp	r3, #241	; 0xf1
 801129e:	d022      	beq.n	80112e6 <SUBGRF_SetPacketParams+0x7a>
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 80112a0:	2bf2      	cmp	r3, #242	; 0xf2
 80112a2:	d02a      	beq.n	80112fa <SUBGRF_SetPacketParams+0x8e>
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 80112a4:	8862      	ldrh	r2, [r4, #2]
 80112a6:	0a11      	lsrs	r1, r2, #8
 80112a8:	f88d 1004 	strb.w	r1, [sp, #4]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 80112ac:	f88d 2005 	strb.w	r2, [sp, #5]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 80112b0:	7922      	ldrb	r2, [r4, #4]
 80112b2:	f88d 2006 	strb.w	r2, [sp, #6]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 80112b6:	7962      	ldrb	r2, [r4, #5]
 80112b8:	f88d 2007 	strb.w	r2, [sp, #7]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 80112bc:	79a2      	ldrb	r2, [r4, #6]
 80112be:	f88d 2008 	strb.w	r2, [sp, #8]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 80112c2:	79e2      	ldrb	r2, [r4, #7]
 80112c4:	f88d 2009 	strb.w	r2, [sp, #9]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 80112c8:	7a22      	ldrb	r2, [r4, #8]
 80112ca:	f88d 200a 	strb.w	r2, [sp, #10]
        buf[7] = crcVal;
 80112ce:	f88d 300b 	strb.w	r3, [sp, #11]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 80112d2:	7aa3      	ldrb	r3, [r4, #10]
 80112d4:	f88d 300c 	strb.w	r3, [sp, #12]
        n = 9;
 80112d8:	2209      	movs	r2, #9
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 80112da:	a901      	add	r1, sp, #4
 80112dc:	208c      	movs	r0, #140	; 0x8c
 80112de:	f7ff fb7b 	bl	80109d8 <SUBGRF_WriteCommand>
}
 80112e2:	b004      	add	sp, #16
 80112e4:	bd10      	pop	{r4, pc}
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 80112e6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80112ea:	f7ff ff96 	bl	801121a <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 80112ee:	f248 0005 	movw	r0, #32773	; 0x8005
 80112f2:	f7ff ffa6 	bl	8011242 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 80112f6:	2302      	movs	r3, #2
 80112f8:	e7d4      	b.n	80112a4 <SUBGRF_SetPacketParams+0x38>
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 80112fa:	f641 500f 	movw	r0, #7439	; 0x1d0f
 80112fe:	f7ff ff8c 	bl	801121a <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8011302:	f241 0021 	movw	r0, #4129	; 0x1021
 8011306:	f7ff ff9c 	bl	8011242 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 801130a:	2306      	movs	r3, #6
 801130c:	e7ca      	b.n	80112a4 <SUBGRF_SetPacketParams+0x38>
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 801130e:	7b23      	ldrb	r3, [r4, #12]
 8011310:	f88d 3004 	strb.w	r3, [sp, #4]
        n = 1;
 8011314:	2201      	movs	r2, #1
        break;
 8011316:	e7e0      	b.n	80112da <SUBGRF_SetPacketParams+0x6e>
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8011318:	89e3      	ldrh	r3, [r4, #14]
 801131a:	0a1a      	lsrs	r2, r3, #8
 801131c:	f88d 2004 	strb.w	r2, [sp, #4]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8011320:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8011324:	7c23      	ldrb	r3, [r4, #16]
 8011326:	4a09      	ldr	r2, [pc, #36]	; (801134c <SUBGRF_SetPacketParams+0xe0>)
 8011328:	7013      	strb	r3, [r2, #0]
 801132a:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 801132e:	7c63      	ldrb	r3, [r4, #17]
 8011330:	f88d 3007 	strb.w	r3, [sp, #7]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8011334:	7ca3      	ldrb	r3, [r4, #18]
 8011336:	f88d 3008 	strb.w	r3, [sp, #8]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 801133a:	7ce3      	ldrb	r3, [r4, #19]
 801133c:	f88d 3009 	strb.w	r3, [sp, #9]
        n = 6;
 8011340:	2206      	movs	r2, #6
        break;
 8011342:	e7ca      	b.n	80112da <SUBGRF_SetPacketParams+0x6e>
 8011344:	08016ef0 	.word	0x08016ef0
 8011348:	2000130b 	.word	0x2000130b
 801134c:	20001309 	.word	0x20001309

08011350 <SUBGRF_ReadRegisters>:
{
 8011350:	b510      	push	{r4, lr}
 8011352:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011354:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011358:	b672      	cpsid	i
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 801135a:	460a      	mov	r2, r1
 801135c:	4601      	mov	r1, r0
 801135e:	4803      	ldr	r0, [pc, #12]	; (801136c <SUBGRF_ReadRegisters+0x1c>)
 8011360:	f7f5 fc02 	bl	8006b68 <HAL_SUBGHZ_ReadRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011364:	f384 8810 	msr	PRIMASK, r4
}
 8011368:	bd10      	pop	{r4, pc}
 801136a:	bf00      	nop
 801136c:	200003b4 	.word	0x200003b4

08011370 <SUBGRF_GetRandom>:
{
 8011370:	b570      	push	{r4, r5, r6, lr}
 8011372:	b082      	sub	sp, #8
    uint32_t number = 0;
 8011374:	2600      	movs	r6, #0
 8011376:	9601      	str	r6, [sp, #4]
    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 8011378:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801137c:	f7ff fe30 	bl	8010fe0 <SUBGRF_ReadRegister>
 8011380:	4605      	mov	r5, r0
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 8011382:	f000 01fe 	and.w	r1, r0, #254	; 0xfe
 8011386:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801138a:	f7ff fd37 	bl	8010dfc <SUBGRF_WriteRegister>
    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 801138e:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8011392:	f7ff fe25 	bl	8010fe0 <SUBGRF_ReadRegister>
 8011396:	4604      	mov	r4, r0
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 8011398:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 801139c:	f640 00e5 	movw	r0, #2277	; 0x8e5
 80113a0:	f7ff fd2c 	bl	8010dfc <SUBGRF_WriteRegister>
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 80113a4:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80113a8:	f7ff fb70 	bl	8010a8c <SUBGRF_SetRx>
    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 80113ac:	2204      	movs	r2, #4
 80113ae:	eb0d 0102 	add.w	r1, sp, r2
 80113b2:	f640 0019 	movw	r0, #2073	; 0x819
 80113b6:	f7ff ffcb 	bl	8011350 <SUBGRF_ReadRegisters>
    SUBGRF_SetStandby( STDBY_RC );
 80113ba:	4630      	mov	r0, r6
 80113bc:	f7ff fb32 	bl	8010a24 <SUBGRF_SetStandby>
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 80113c0:	4629      	mov	r1, r5
 80113c2:	f640 00e2 	movw	r0, #2274	; 0x8e2
 80113c6:	f7ff fd19 	bl	8010dfc <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 80113ca:	4621      	mov	r1, r4
 80113cc:	f640 00e5 	movw	r0, #2277	; 0x8e5
 80113d0:	f7ff fd14 	bl	8010dfc <SUBGRF_WriteRegister>
}
 80113d4:	9801      	ldr	r0, [sp, #4]
 80113d6:	b002      	add	sp, #8
 80113d8:	bd70      	pop	{r4, r5, r6, pc}
	...

080113dc <SUBGRF_WriteBuffer>:
{
 80113dc:	b510      	push	{r4, lr}
 80113de:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80113e0:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80113e4:	b672      	cpsid	i
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 80113e6:	460a      	mov	r2, r1
 80113e8:	4601      	mov	r1, r0
 80113ea:	4803      	ldr	r0, [pc, #12]	; (80113f8 <SUBGRF_WriteBuffer+0x1c>)
 80113ec:	f7f5 fd12 	bl	8006e14 <HAL_SUBGHZ_WriteBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80113f0:	f384 8810 	msr	PRIMASK, r4
}
 80113f4:	bd10      	pop	{r4, pc}
 80113f6:	bf00      	nop
 80113f8:	200003b4 	.word	0x200003b4

080113fc <SUBGRF_SetPayload>:
{
 80113fc:	b508      	push	{r3, lr}
 80113fe:	460a      	mov	r2, r1
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8011400:	4601      	mov	r1, r0
 8011402:	2000      	movs	r0, #0
 8011404:	f7ff ffea 	bl	80113dc <SUBGRF_WriteBuffer>
}
 8011408:	bd08      	pop	{r3, pc}

0801140a <SUBGRF_SendPayload>:
{
 801140a:	b510      	push	{r4, lr}
 801140c:	4614      	mov	r4, r2
    SUBGRF_SetPayload( payload, size );
 801140e:	f7ff fff5 	bl	80113fc <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8011412:	4620      	mov	r0, r4
 8011414:	f7ff fb20 	bl	8010a58 <SUBGRF_SetTx>
}
 8011418:	bd10      	pop	{r4, pc}
	...

0801141c <SUBGRF_ReadBuffer>:
{
 801141c:	b510      	push	{r4, lr}
 801141e:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011420:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011424:	b672      	cpsid	i
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 8011426:	460a      	mov	r2, r1
 8011428:	4601      	mov	r1, r0
 801142a:	4803      	ldr	r0, [pc, #12]	; (8011438 <SUBGRF_ReadBuffer+0x1c>)
 801142c:	f7f5 fd3c 	bl	8006ea8 <HAL_SUBGHZ_ReadBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011430:	f384 8810 	msr	PRIMASK, r4
}
 8011434:	bd10      	pop	{r4, pc}
 8011436:	bf00      	nop
 8011438:	200003b4 	.word	0x200003b4

0801143c <SUBGRF_GetPayload>:
{
 801143c:	b570      	push	{r4, r5, r6, lr}
 801143e:	b082      	sub	sp, #8
 8011440:	4606      	mov	r6, r0
 8011442:	460c      	mov	r4, r1
 8011444:	4615      	mov	r5, r2
    uint8_t offset = 0;
 8011446:	2300      	movs	r3, #0
 8011448:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_GetRxBufferStatus( size, &offset );
 801144c:	f10d 0107 	add.w	r1, sp, #7
 8011450:	4620      	mov	r0, r4
 8011452:	f7ff fea7 	bl	80111a4 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 8011456:	7822      	ldrb	r2, [r4, #0]
 8011458:	42aa      	cmp	r2, r5
 801145a:	d902      	bls.n	8011462 <SUBGRF_GetPayload+0x26>
        return 1;
 801145c:	2001      	movs	r0, #1
}
 801145e:	b002      	add	sp, #8
 8011460:	bd70      	pop	{r4, r5, r6, pc}
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8011462:	4631      	mov	r1, r6
 8011464:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8011468:	f7ff ffd8 	bl	801141c <SUBGRF_ReadBuffer>
    return 0;
 801146c:	2000      	movs	r0, #0
 801146e:	e7f6      	b.n	801145e <SUBGRF_GetPayload+0x22>

08011470 <SUBGRF_SetSwitch>:
{
 8011470:	b510      	push	{r4, lr}
    if (rxtx == RFSWITCH_TX)
 8011472:	2901      	cmp	r1, #1
 8011474:	d003      	beq.n	801147e <SUBGRF_SetSwitch+0xe>
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 8011476:	2001      	movs	r0, #1
    RBI_ConfigRFSwitch(state);
 8011478:	f7f2 f8a6 	bl	80035c8 <RBI_ConfigRFSwitch>
}
 801147c:	bd10      	pop	{r4, pc}
 801147e:	4604      	mov	r4, r0
 8011480:	4608      	mov	r0, r1
        if (paSelect == RFO_LP)
 8011482:	2c01      	cmp	r4, #1
 8011484:	d003      	beq.n	801148e <SUBGRF_SetSwitch+0x1e>
        if (paSelect == RFO_HP)
 8011486:	2c02      	cmp	r4, #2
 8011488:	d1f6      	bne.n	8011478 <SUBGRF_SetSwitch+0x8>
            state = RBI_SWITCH_RFO_HP;
 801148a:	2003      	movs	r0, #3
 801148c:	e7f4      	b.n	8011478 <SUBGRF_SetSwitch+0x8>
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 801148e:	2004      	movs	r0, #4
 8011490:	f7ff fdb6 	bl	8011000 <Radio_SMPS_Set>
            state = RBI_SWITCH_RFO_LP;
 8011494:	2002      	movs	r0, #2
 8011496:	e7f6      	b.n	8011486 <SUBGRF_SetSwitch+0x16>

08011498 <SUBGRF_SetRfTxPower>:
{
 8011498:	b538      	push	{r3, r4, r5, lr}
 801149a:	4604      	mov	r4, r0
    int32_t TxConfig = RBI_GetTxConfig();
 801149c:	f7f2 f898 	bl	80035d0 <RBI_GetTxConfig>
    switch (TxConfig)
 80114a0:	b148      	cbz	r0, 80114b6 <SUBGRF_SetRfTxPower+0x1e>
 80114a2:	2802      	cmp	r0, #2
 80114a4:	d10d      	bne.n	80114c2 <SUBGRF_SetRfTxPower+0x2a>
            paSelect = RFO_HP;
 80114a6:	2502      	movs	r5, #2
    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 80114a8:	2202      	movs	r2, #2
 80114aa:	4621      	mov	r1, r4
 80114ac:	4628      	mov	r0, r5
 80114ae:	f7ff fe2a 	bl	8011106 <SUBGRF_SetTxParams>
}
 80114b2:	4628      	mov	r0, r5
 80114b4:	bd38      	pop	{r3, r4, r5, pc}
            if (power > 15)
 80114b6:	2c0f      	cmp	r4, #15
 80114b8:	dc01      	bgt.n	80114be <SUBGRF_SetRfTxPower+0x26>
                paSelect = RFO_LP;
 80114ba:	2501      	movs	r5, #1
 80114bc:	e7f4      	b.n	80114a8 <SUBGRF_SetRfTxPower+0x10>
                paSelect = RFO_HP;
 80114be:	2502      	movs	r5, #2
 80114c0:	e7f2      	b.n	80114a8 <SUBGRF_SetRfTxPower+0x10>
    switch (TxConfig)
 80114c2:	2501      	movs	r5, #1
 80114c4:	e7f0      	b.n	80114a8 <SUBGRF_SetRfTxPower+0x10>

080114c6 <SUBGRF_GetRadioWakeUpTime>:
}
 80114c6:	2001      	movs	r0, #1
 80114c8:	4770      	bx	lr
	...

080114cc <HAL_SUBGHZ_TxCpltCallback>:
{
 80114cc:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_TX_DONE );
 80114ce:	4b02      	ldr	r3, [pc, #8]	; (80114d8 <HAL_SUBGHZ_TxCpltCallback+0xc>)
 80114d0:	681b      	ldr	r3, [r3, #0]
 80114d2:	2001      	movs	r0, #1
 80114d4:	4798      	blx	r3
}
 80114d6:	bd08      	pop	{r3, pc}
 80114d8:	2000130c 	.word	0x2000130c

080114dc <HAL_SUBGHZ_RxCpltCallback>:
{
 80114dc:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_DONE );
 80114de:	4b02      	ldr	r3, [pc, #8]	; (80114e8 <HAL_SUBGHZ_RxCpltCallback+0xc>)
 80114e0:	681b      	ldr	r3, [r3, #0]
 80114e2:	2002      	movs	r0, #2
 80114e4:	4798      	blx	r3
}
 80114e6:	bd08      	pop	{r3, pc}
 80114e8:	2000130c 	.word	0x2000130c

080114ec <HAL_SUBGHZ_CRCErrorCallback>:
{
 80114ec:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 80114ee:	4b02      	ldr	r3, [pc, #8]	; (80114f8 <HAL_SUBGHZ_CRCErrorCallback+0xc>)
 80114f0:	681b      	ldr	r3, [r3, #0]
 80114f2:	2040      	movs	r0, #64	; 0x40
 80114f4:	4798      	blx	r3
}
 80114f6:	bd08      	pop	{r3, pc}
 80114f8:	2000130c 	.word	0x2000130c

080114fc <HAL_SUBGHZ_CADStatusCallback>:
{
 80114fc:	b508      	push	{r3, lr}
    switch (cadstatus)
 80114fe:	b111      	cbz	r1, 8011506 <HAL_SUBGHZ_CADStatusCallback+0xa>
 8011500:	2901      	cmp	r1, #1
 8011502:	d005      	beq.n	8011510 <HAL_SUBGHZ_CADStatusCallback+0x14>
}
 8011504:	bd08      	pop	{r3, pc}
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 8011506:	4b05      	ldr	r3, [pc, #20]	; (801151c <HAL_SUBGHZ_CADStatusCallback+0x20>)
 8011508:	681b      	ldr	r3, [r3, #0]
 801150a:	2080      	movs	r0, #128	; 0x80
 801150c:	4798      	blx	r3
            break;
 801150e:	e7f9      	b.n	8011504 <HAL_SUBGHZ_CADStatusCallback+0x8>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 8011510:	4b02      	ldr	r3, [pc, #8]	; (801151c <HAL_SUBGHZ_CADStatusCallback+0x20>)
 8011512:	681b      	ldr	r3, [r3, #0]
 8011514:	f44f 7080 	mov.w	r0, #256	; 0x100
 8011518:	4798      	blx	r3
}
 801151a:	e7f3      	b.n	8011504 <HAL_SUBGHZ_CADStatusCallback+0x8>
 801151c:	2000130c 	.word	0x2000130c

08011520 <HAL_SUBGHZ_RxTxTimeoutCallback>:
{
 8011520:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 8011522:	4b03      	ldr	r3, [pc, #12]	; (8011530 <HAL_SUBGHZ_RxTxTimeoutCallback+0x10>)
 8011524:	681b      	ldr	r3, [r3, #0]
 8011526:	f44f 7000 	mov.w	r0, #512	; 0x200
 801152a:	4798      	blx	r3
}
 801152c:	bd08      	pop	{r3, pc}
 801152e:	bf00      	nop
 8011530:	2000130c 	.word	0x2000130c

08011534 <HAL_SUBGHZ_HeaderErrorCallback>:
{
 8011534:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 8011536:	4b02      	ldr	r3, [pc, #8]	; (8011540 <HAL_SUBGHZ_HeaderErrorCallback+0xc>)
 8011538:	681b      	ldr	r3, [r3, #0]
 801153a:	2020      	movs	r0, #32
 801153c:	4798      	blx	r3
}
 801153e:	bd08      	pop	{r3, pc}
 8011540:	2000130c 	.word	0x2000130c

08011544 <HAL_SUBGHZ_PreambleDetectedCallback>:
{
 8011544:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 8011546:	4b02      	ldr	r3, [pc, #8]	; (8011550 <HAL_SUBGHZ_PreambleDetectedCallback+0xc>)
 8011548:	681b      	ldr	r3, [r3, #0]
 801154a:	2004      	movs	r0, #4
 801154c:	4798      	blx	r3
}
 801154e:	bd08      	pop	{r3, pc}
 8011550:	2000130c 	.word	0x2000130c

08011554 <HAL_SUBGHZ_SyncWordValidCallback>:
{
 8011554:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 8011556:	4b02      	ldr	r3, [pc, #8]	; (8011560 <HAL_SUBGHZ_SyncWordValidCallback+0xc>)
 8011558:	681b      	ldr	r3, [r3, #0]
 801155a:	2008      	movs	r0, #8
 801155c:	4798      	blx	r3
}
 801155e:	bd08      	pop	{r3, pc}
 8011560:	2000130c 	.word	0x2000130c

08011564 <HAL_SUBGHZ_HeaderValidCallback>:
{
 8011564:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 8011566:	4b02      	ldr	r3, [pc, #8]	; (8011570 <HAL_SUBGHZ_HeaderValidCallback+0xc>)
 8011568:	681b      	ldr	r3, [r3, #0]
 801156a:	2010      	movs	r0, #16
 801156c:	4798      	blx	r3
}
 801156e:	bd08      	pop	{r3, pc}
 8011570:	2000130c 	.word	0x2000130c

08011574 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
    uint8_t i;

    if( bandwidth == 0 )
 8011574:	4601      	mov	r1, r0
 8011576:	b188      	cbz	r0, 801159c <SUBGRF_GetFskBandwidthRegValue+0x28>
    {
        return( 0x1F );
    }

    /* ST_WORKAROUND_BEGIN: Simplified loop */
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8011578:	2300      	movs	r3, #0
 801157a:	2b15      	cmp	r3, #21
 801157c:	d80d      	bhi.n	801159a <SUBGRF_GetFskBandwidthRegValue+0x26>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 801157e:	4618      	mov	r0, r3
 8011580:	4a07      	ldr	r2, [pc, #28]	; (80115a0 <SUBGRF_GetFskBandwidthRegValue+0x2c>)
 8011582:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8011586:	428a      	cmp	r2, r1
 8011588:	d802      	bhi.n	8011590 <SUBGRF_GetFskBandwidthRegValue+0x1c>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801158a:	3301      	adds	r3, #1
 801158c:	b2db      	uxtb	r3, r3
 801158e:	e7f4      	b.n	801157a <SUBGRF_GetFskBandwidthRegValue+0x6>
        {
            return FskBandwidths[i].RegValue;
 8011590:	4b03      	ldr	r3, [pc, #12]	; (80115a0 <SUBGRF_GetFskBandwidthRegValue+0x2c>)
 8011592:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8011596:	7918      	ldrb	r0, [r3, #4]
 8011598:	4770      	bx	lr
        }
    }
    /* ST_WORKAROUND_END */
    // ERROR: Value not found
    while( 1 );
 801159a:	e7fe      	b.n	801159a <SUBGRF_GetFskBandwidthRegValue+0x26>
        return( 0x1F );
 801159c:	201f      	movs	r0, #31
}
 801159e:	4770      	bx	lr
 80115a0:	08017bac 	.word	0x08017bac

080115a4 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 80115a4:	b570      	push	{r4, r5, r6, lr}
 80115a6:	b082      	sub	sp, #8
 80115a8:	4605      	mov	r5, r0
 80115aa:	460c      	mov	r4, r1
  uint8_t BwMant[] = {4, 8, 10, 12};
 80115ac:	4b1d      	ldr	r3, [pc, #116]	; (8011624 <SUBGRF_GetCFO+0x80>)
 80115ae:	9301      	str	r3, [sp, #4]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSEL ));
 80115b0:	f640 0007 	movw	r0, #2055	; 0x807
 80115b4:	f7ff fd14 	bl	8010fe0 <SUBGRF_ReadRegister>
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 80115b8:	f3c0 03c1 	ubfx	r3, r0, #3, #2
 80115bc:	3308      	adds	r3, #8
 80115be:	446b      	add	r3, sp
 80115c0:	f813 2c04 	ldrb.w	r2, [r3, #-4]
  uint8_t bandwidth_exp = reg & 0x7;
 80115c4:	f000 0307 	and.w	r3, r0, #7
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp - 1 )));
 80115c8:	3b01      	subs	r3, #1
 80115ca:	fa02 f303 	lsl.w	r3, r2, r3
 80115ce:	4a16      	ldr	r2, [pc, #88]	; (8011628 <SUBGRF_GetCFO+0x84>)
 80115d0:	fbb2 f2f3 	udiv	r2, r2, r3
  uint32_t cf_osr = cf_fs / bitRate;
 80115d4:	fbb2 f0f5 	udiv	r0, r2, r5
  uint8_t interp = 1;
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 80115d8:	2807      	cmp	r0, #7
 80115da:	d921      	bls.n	8011620 <SUBGRF_GetCFO+0x7c>
  uint8_t interp = 1;
 80115dc:	2301      	movs	r3, #1
  {
    interp = 2;
  }
  if (cf_osr * interp < 4)
 80115de:	fb03 f000 	mul.w	r0, r3, r0
 80115e2:	2803      	cmp	r0, #3
 80115e4:	d800      	bhi.n	80115e8 <SUBGRF_GetCFO+0x44>
  {
    interp = 4;
 80115e6:	2304      	movs	r3, #4
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 80115e8:	fb02 f503 	mul.w	r5, r2, r3
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_CFO_H ) & 0xF ) << 8;
 80115ec:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 80115f0:	f7ff fcf6 	bl	8010fe0 <SUBGRF_ReadRegister>
 80115f4:	0206      	lsls	r6, r0, #8
 80115f6:	f406 6670 	and.w	r6, r6, #3840	; 0xf00
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_CFO_L );
 80115fa:	f240 60b1 	movw	r0, #1713	; 0x6b1
 80115fe:	f7ff fcef 	bl	8010fe0 <SUBGRF_ReadRegister>
 8011602:	4330      	orrs	r0, r6
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 8011604:	f410 6f00 	tst.w	r0, #2048	; 0x800
 8011608:	d003      	beq.n	8011612 <SUBGRF_GetCFO+0x6e>
  {
    cfo_bin |= 0xFFFFF000;
 801160a:	ea6f 5000 	mvn.w	r0, r0, lsl #20
 801160e:	ea6f 5010 	mvn.w	r0, r0, lsr #20
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 8011612:	096b      	lsrs	r3, r5, #5
 8011614:	fb03 f000 	mul.w	r0, r3, r0
 8011618:	11c0      	asrs	r0, r0, #7
 801161a:	6020      	str	r0, [r4, #0]
}
 801161c:	b002      	add	sp, #8
 801161e:	bd70      	pop	{r4, r5, r6, pc}
    interp = 2;
 8011620:	2302      	movs	r3, #2
 8011622:	e7dc      	b.n	80115de <SUBGRF_GetCFO+0x3a>
 8011624:	0c0a0804 	.word	0x0c0a0804
 8011628:	01e84800 	.word	0x01e84800

0801162c <RFW_TransmitLongPacket>:
  }
#else
  status= -1;
#endif
  return status;
}
 801162c:	f04f 30ff 	mov.w	r0, #4294967295
 8011630:	4770      	bx	lr

08011632 <RFW_ReceiveLongPacket>:
  }
#else
  status= -1;
#endif
  return status;
}
 8011632:	f04f 30ff 	mov.w	r0, #4294967295
 8011636:	4770      	bx	lr

08011638 <RFW_Init>:
  TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
  return 0;
#else
  return -1;
#endif
}
 8011638:	f04f 30ff 	mov.w	r0, #4294967295
 801163c:	4770      	bx	lr

0801163e <RFW_DeInit>:
void RFW_DeInit( void)
{
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Enable=0; /*Disable the RFWPacket decoding*/
#endif
}
 801163e:	4770      	bx	lr

08011640 <RFW_Is_Init>:
#if (RFW_ENABLE ==1 )
  return RFWPacket.Init.Enable;
#else
  return 0;
#endif
}
 8011640:	2000      	movs	r0, #0
 8011642:	4770      	bx	lr

08011644 <RFW_Is_LongPacketModeEnabled>:
#if (RFW_ENABLE ==1 )
  return RFWPacket.LongPacketModeEnable;
#else
  return 0;
#endif
}
 8011644:	2000      	movs	r0, #0
 8011646:	4770      	bx	lr

08011648 <RFW_SetAntSwitch>:
void RFW_SetAntSwitch( uint8_t AntSwitch)
{
#if (RFW_ENABLE ==1 )
  RFWPacket.AntSwitchPaSelect=AntSwitch;
#endif
}
 8011648:	4770      	bx	lr

0801164a <RFW_TransmitInit>:
    
    status= 0;
  }
#endif
  return status;
}
 801164a:	f04f 30ff 	mov.w	r0, #4294967295
 801164e:	4770      	bx	lr

08011650 <RFW_ReceiveInit>:
  RFWPacket.LongPacketModeEnable=0;
  return 0;
#else
  return -1;
#endif
}
 8011650:	f04f 30ff 	mov.w	r0, #4294967295
 8011654:	4770      	bx	lr

08011656 <RFW_DeInit_TxLongPacket>:
  /*long packet WA*/
  uint8_t reg = SUBGRF_ReadRegister(SUBGHZ_PKTCTL1A);
  SUBGRF_WriteRegister(SUBGHZ_PKTCTL1A, reg & ~0x02);//clear infinite_sequence bit
  SUBGRF_WriteRegister(SUBGHZ_RTXPLDLEN, 0xFF); //RxTxPldLen: reset to 0xFF
#endif
}
 8011656:	4770      	bx	lr

08011658 <RFW_ReceivePayload>:
    /*timeout*/
    SUBGRF_SetStandby( STDBY_RC );
    RFWPacket.Init.RadioEvents->RxTimeout( );
  }
#endif
}
 8011658:	4770      	bx	lr

0801165a <RFW_SetRadioModem>:
void RFW_SetRadioModem(RadioModems_t Modem)
{
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Modem= Modem;
#endif
}
 801165a:	4770      	bx	lr

0801165c <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 801165c:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801165e:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011662:	b672      	cpsid	i
  uint16_t freesize;
  int16_t ret = -1;

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 8011664:	4b1e      	ldr	r3, [pc, #120]	; (80116e0 <TRACE_AllocateBufer+0x84>)
 8011666:	f8b3 e012 	ldrh.w	lr, [r3, #18]
 801166a:	8a1a      	ldrh	r2, [r3, #16]
 801166c:	4596      	cmp	lr, r2
 801166e:	d011      	beq.n	8011694 <TRACE_AllocateBufer+0x38>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8011670:	4596      	cmp	lr, r2
 8011672:	d921      	bls.n	80116b8 <TRACE_AllocateBufer+0x5c>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 8011674:	f5ce 6380 	rsb	r3, lr, #1024	; 0x400
 8011678:	b29b      	uxth	r3, r3
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 801167a:	4283      	cmp	r3, r0
 801167c:	d81f      	bhi.n	80116be <TRACE_AllocateBufer+0x62>
 801167e:	4282      	cmp	r2, r0
 8011680:	d91d      	bls.n	80116be <TRACE_AllocateBufer+0x62>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 8011682:	4b17      	ldr	r3, [pc, #92]	; (80116e0 <TRACE_AllocateBufer+0x84>)
 8011684:	2401      	movs	r4, #1
 8011686:	709c      	strb	r4, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 8011688:	f8a3 e000 	strh.w	lr, [r3]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 801168c:	2400      	movs	r4, #0
 801168e:	825c      	strh	r4, [r3, #18]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 8011690:	4613      	mov	r3, r2
 8011692:	e014      	b.n	80116be <TRACE_AllocateBufer+0x62>
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 8011694:	f5ce 6380 	rsb	r3, lr, #1024	; 0x400
 8011698:	b29b      	uxth	r3, r3
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 801169a:	4298      	cmp	r0, r3
 801169c:	d30f      	bcc.n	80116be <TRACE_AllocateBufer+0x62>
 801169e:	4282      	cmp	r2, r0
 80116a0:	d90d      	bls.n	80116be <TRACE_AllocateBufer+0x62>
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 80116a2:	4b0f      	ldr	r3, [pc, #60]	; (80116e0 <TRACE_AllocateBufer+0x84>)
 80116a4:	2401      	movs	r4, #1
 80116a6:	709c      	strb	r4, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 80116a8:	f8a3 e000 	strh.w	lr, [r3]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 80116ac:	f04f 0e00 	mov.w	lr, #0
 80116b0:	f8a3 e012 	strh.w	lr, [r3, #18]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 80116b4:	4613      	mov	r3, r2
 80116b6:	e002      	b.n	80116be <TRACE_AllocateBufer+0x62>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 80116b8:	eba2 020e 	sub.w	r2, r2, lr
 80116bc:	b293      	uxth	r3, r2
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 80116be:	4283      	cmp	r3, r0
 80116c0:	d90a      	bls.n	80116d8 <TRACE_AllocateBufer+0x7c>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 80116c2:	4a07      	ldr	r2, [pc, #28]	; (80116e0 <TRACE_AllocateBufer+0x84>)
 80116c4:	8a53      	ldrh	r3, [r2, #18]
 80116c6:	800b      	strh	r3, [r1, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 80116c8:	4403      	add	r3, r0
 80116ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80116ce:	8253      	strh	r3, [r2, #18]
    ret = 0;
 80116d0:	2000      	movs	r0, #0
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80116d2:	f38c 8810 	msr	PRIMASK, ip
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
}
 80116d6:	bd10      	pop	{r4, pc}
  int16_t ret = -1;
 80116d8:	f04f 30ff 	mov.w	r0, #4294967295
 80116dc:	e7f9      	b.n	80116d2 <TRACE_AllocateBufer+0x76>
 80116de:	bf00      	nop
 80116e0:	20001710 	.word	0x20001710

080116e4 <TRACE_Lock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80116e4:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80116e8:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_Lock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock++;
 80116ea:	4a03      	ldr	r2, [pc, #12]	; (80116f8 <TRACE_Lock+0x14>)
 80116ec:	8ad3      	ldrh	r3, [r2, #22]
 80116ee:	3301      	adds	r3, #1
 80116f0:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80116f2:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 80116f6:	4770      	bx	lr
 80116f8:	20001710 	.word	0x20001710

080116fc <TRACE_UnLock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80116fc:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011700:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_UnLock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock--;
 8011702:	4a03      	ldr	r2, [pc, #12]	; (8011710 <TRACE_UnLock+0x14>)
 8011704:	8ad3      	ldrh	r3, [r2, #22]
 8011706:	3b01      	subs	r3, #1
 8011708:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801170a:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801170e:	4770      	bx	lr
 8011710:	20001710 	.word	0x20001710

08011714 <TRACE_IsLocked>:
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 8011714:	4b02      	ldr	r3, [pc, #8]	; (8011720 <TRACE_IsLocked+0xc>)
 8011716:	8ad8      	ldrh	r0, [r3, #22]
}
 8011718:	3800      	subs	r0, #0
 801171a:	bf18      	it	ne
 801171c:	2001      	movne	r0, #1
 801171e:	4770      	bx	lr
 8011720:	20001710 	.word	0x20001710

08011724 <UTIL_ADV_TRACE_Init>:
{
 8011724:	b508      	push	{r3, lr}
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 8011726:	2218      	movs	r2, #24
 8011728:	2100      	movs	r1, #0
 801172a:	4807      	ldr	r0, [pc, #28]	; (8011748 <UTIL_ADV_TRACE_Init+0x24>)
 801172c:	f000 f98f 	bl	8011a4e <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 8011730:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8011734:	2100      	movs	r1, #0
 8011736:	4805      	ldr	r0, [pc, #20]	; (801174c <UTIL_ADV_TRACE_Init+0x28>)
 8011738:	f000 f989 	bl	8011a4e <UTIL_MEM_set_8>
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 801173c:	4b04      	ldr	r3, [pc, #16]	; (8011750 <UTIL_ADV_TRACE_Init+0x2c>)
 801173e:	681b      	ldr	r3, [r3, #0]
 8011740:	4804      	ldr	r0, [pc, #16]	; (8011754 <UTIL_ADV_TRACE_Init+0x30>)
 8011742:	4798      	blx	r3
}
 8011744:	bd08      	pop	{r3, pc}
 8011746:	bf00      	nop
 8011748:	20001710 	.word	0x20001710
 801174c:	20001310 	.word	0x20001310
 8011750:	08016f78 	.word	0x08016f78
 8011754:	080118d5 	.word	0x080118d5

08011758 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
  ADV_TRACE_Ctx.timestamp_func = *cb;
 8011758:	4b01      	ldr	r3, [pc, #4]	; (8011760 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x8>)
 801175a:	6058      	str	r0, [r3, #4]
}
 801175c:	4770      	bx	lr
 801175e:	bf00      	nop
 8011760:	20001710 	.word	0x20001710

08011764 <UTIL_ADV_TRACE_SetVerboseLevel>:
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 8011764:	4b01      	ldr	r3, [pc, #4]	; (801176c <UTIL_ADV_TRACE_SetVerboseLevel+0x8>)
 8011766:	7218      	strb	r0, [r3, #8]
}
 8011768:	4770      	bx	lr
 801176a:	bf00      	nop
 801176c:	20001710 	.word	0x20001710

08011770 <TRACE_Send>:
{
 8011770:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011772:	f3ef 8310 	mrs	r3, PRIMASK
 8011776:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 8011778:	b672      	cpsid	i
  if(TRACE_IsLocked() == 0u)
 801177a:	f7ff ffcb 	bl	8011714 <TRACE_IsLocked>
 801177e:	b118      	cbz	r0, 8011788 <TRACE_Send+0x18>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011780:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 8011784:	2000      	movs	r0, #0
}
 8011786:	bd70      	pop	{r4, r5, r6, pc}
    TRACE_Lock();
 8011788:	f7ff ffac 	bl	80116e4 <TRACE_Lock>
    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 801178c:	4b1c      	ldr	r3, [pc, #112]	; (8011800 <TRACE_Send+0x90>)
 801178e:	8a1a      	ldrh	r2, [r3, #16]
 8011790:	8a5b      	ldrh	r3, [r3, #18]
 8011792:	429a      	cmp	r2, r3
 8011794:	d02e      	beq.n	80117f4 <TRACE_Send+0x84>
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 8011796:	491a      	ldr	r1, [pc, #104]	; (8011800 <TRACE_Send+0x90>)
 8011798:	7889      	ldrb	r1, [r1, #2]
 801179a:	2901      	cmp	r1, #1
 801179c:	d017      	beq.n	80117ce <TRACE_Send+0x5e>
      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801179e:	4a18      	ldr	r2, [pc, #96]	; (8011800 <TRACE_Send+0x90>)
 80117a0:	7892      	ldrb	r2, [r2, #2]
 80117a2:	b932      	cbnz	r2, 80117b2 <TRACE_Send+0x42>
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 80117a4:	4a16      	ldr	r2, [pc, #88]	; (8011800 <TRACE_Send+0x90>)
 80117a6:	8a12      	ldrh	r2, [r2, #16]
 80117a8:	4293      	cmp	r3, r2
 80117aa:	d91e      	bls.n	80117ea <TRACE_Send+0x7a>
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 80117ac:	1a9b      	subs	r3, r3, r2
 80117ae:	4a14      	ldr	r2, [pc, #80]	; (8011800 <TRACE_Send+0x90>)
 80117b0:	8293      	strh	r3, [r2, #20]
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 80117b2:	4e13      	ldr	r6, [pc, #76]	; (8011800 <TRACE_Send+0x90>)
 80117b4:	8a33      	ldrh	r3, [r6, #16]
 80117b6:	4d13      	ldr	r5, [pc, #76]	; (8011804 <TRACE_Send+0x94>)
 80117b8:	441d      	add	r5, r3
 80117ba:	f384 8810 	msr	PRIMASK, r4
      UTIL_ADV_TRACE_PreSendHook();
 80117be:	f7f0 faa5 	bl	8001d0c <UTIL_ADV_TRACE_PreSendHook>
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 80117c2:	4b11      	ldr	r3, [pc, #68]	; (8011808 <TRACE_Send+0x98>)
 80117c4:	68db      	ldr	r3, [r3, #12]
 80117c6:	8ab1      	ldrh	r1, [r6, #20]
 80117c8:	4628      	mov	r0, r5
 80117ca:	4798      	blx	r3
 80117cc:	e7db      	b.n	8011786 <TRACE_Send+0x16>
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 80117ce:	480c      	ldr	r0, [pc, #48]	; (8011800 <TRACE_Send+0x90>)
 80117d0:	8801      	ldrh	r1, [r0, #0]
 80117d2:	1a8a      	subs	r2, r1, r2
 80117d4:	b292      	uxth	r2, r2
 80117d6:	8282      	strh	r2, [r0, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 80117d8:	2102      	movs	r1, #2
 80117da:	7081      	strb	r1, [r0, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 80117dc:	2100      	movs	r1, #0
 80117de:	8001      	strh	r1, [r0, #0]
        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 80117e0:	2a00      	cmp	r2, #0
 80117e2:	d1dc      	bne.n	801179e <TRACE_Send+0x2e>
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 80117e4:	7081      	strb	r1, [r0, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 80117e6:	8201      	strh	r1, [r0, #16]
 80117e8:	e7d9      	b.n	801179e <TRACE_Send+0x2e>
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 80117ea:	f5c2 6280 	rsb	r2, r2, #1024	; 0x400
 80117ee:	4b04      	ldr	r3, [pc, #16]	; (8011800 <TRACE_Send+0x90>)
 80117f0:	829a      	strh	r2, [r3, #20]
 80117f2:	e7de      	b.n	80117b2 <TRACE_Send+0x42>
      TRACE_UnLock();
 80117f4:	f7ff ff82 	bl	80116fc <TRACE_UnLock>
 80117f8:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 80117fc:	2000      	movs	r0, #0
}
 80117fe:	e7c2      	b.n	8011786 <TRACE_Send+0x16>
 8011800:	20001710 	.word	0x20001710
 8011804:	20001310 	.word	0x20001310
 8011808:	08016f78 	.word	0x08016f78

0801180c <UTIL_ADV_TRACE_COND_FSend>:
{
 801180c:	b408      	push	{r3}
 801180e:	b530      	push	{r4, r5, lr}
 8011810:	b086      	sub	sp, #24
 8011812:	9c09      	ldr	r4, [sp, #36]	; 0x24
  uint16_t timestamp_size = 0u;
 8011814:	2300      	movs	r3, #0
 8011816:	f8ad 3002 	strh.w	r3, [sp, #2]
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801181a:	4b2b      	ldr	r3, [pc, #172]	; (80118c8 <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 801181c:	7a1b      	ldrb	r3, [r3, #8]
 801181e:	4283      	cmp	r3, r0
 8011820:	d34c      	bcc.n	80118bc <UTIL_ADV_TRACE_COND_FSend+0xb0>
  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 8011822:	4b29      	ldr	r3, [pc, #164]	; (80118c8 <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 8011824:	68db      	ldr	r3, [r3, #12]
 8011826:	4399      	bics	r1, r3
 8011828:	d14b      	bne.n	80118c2 <UTIL_ADV_TRACE_COND_FSend+0xb6>
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 801182a:	4b27      	ldr	r3, [pc, #156]	; (80118c8 <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 801182c:	685b      	ldr	r3, [r3, #4]
 801182e:	b123      	cbz	r3, 801183a <UTIL_ADV_TRACE_COND_FSend+0x2e>
 8011830:	b11a      	cbz	r2, 801183a <UTIL_ADV_TRACE_COND_FSend+0x2e>
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 8011832:	f10d 0102 	add.w	r1, sp, #2
 8011836:	a801      	add	r0, sp, #4
 8011838:	4798      	blx	r3
  va_start( vaArgs, strFormat);
 801183a:	ab0a      	add	r3, sp, #40	; 0x28
 801183c:	9305      	str	r3, [sp, #20]
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801183e:	4622      	mov	r2, r4
 8011840:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011844:	4821      	ldr	r0, [pc, #132]	; (80118cc <UTIL_ADV_TRACE_COND_FSend+0xc0>)
 8011846:	f000 fcc3 	bl	80121d0 <tiny_vsnprintf_like>
 801184a:	b285      	uxth	r5, r0
  TRACE_Lock();
 801184c:	f7ff ff4a 	bl	80116e4 <TRACE_Lock>
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 8011850:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8011854:	18e8      	adds	r0, r5, r3
 8011856:	4669      	mov	r1, sp
 8011858:	b280      	uxth	r0, r0
 801185a:	f7ff feff 	bl	801165c <TRACE_AllocateBufer>
 801185e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8011862:	d026      	beq.n	80118b2 <UTIL_ADV_TRACE_COND_FSend+0xa6>
    for (idx = 0u; idx < timestamp_size; idx++)
 8011864:	2300      	movs	r3, #0
 8011866:	e00d      	b.n	8011884 <UTIL_ADV_TRACE_COND_FSend+0x78>
      ADV_TRACE_Buffer[writepos] = buf[idx];
 8011868:	f8bd 2000 	ldrh.w	r2, [sp]
 801186c:	f103 0118 	add.w	r1, r3, #24
 8011870:	4469      	add	r1, sp
 8011872:	f811 0c14 	ldrb.w	r0, [r1, #-20]
 8011876:	4916      	ldr	r1, [pc, #88]	; (80118d0 <UTIL_ADV_TRACE_COND_FSend+0xc4>)
 8011878:	5488      	strb	r0, [r1, r2]
      writepos = writepos + 1u;
 801187a:	3201      	adds	r2, #1
 801187c:	f8ad 2000 	strh.w	r2, [sp]
    for (idx = 0u; idx < timestamp_size; idx++)
 8011880:	3301      	adds	r3, #1
 8011882:	b29b      	uxth	r3, r3
 8011884:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8011888:	429a      	cmp	r2, r3
 801188a:	d8ed      	bhi.n	8011868 <UTIL_ADV_TRACE_COND_FSend+0x5c>
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801188c:	f8bd 0000 	ldrh.w	r0, [sp]
 8011890:	9b05      	ldr	r3, [sp, #20]
 8011892:	4622      	mov	r2, r4
 8011894:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011898:	4c0d      	ldr	r4, [pc, #52]	; (80118d0 <UTIL_ADV_TRACE_COND_FSend+0xc4>)
 801189a:	4420      	add	r0, r4
 801189c:	f000 fc98 	bl	80121d0 <tiny_vsnprintf_like>
    TRACE_UnLock();
 80118a0:	f7ff ff2c 	bl	80116fc <TRACE_UnLock>
    return TRACE_Send();
 80118a4:	f7ff ff64 	bl	8011770 <TRACE_Send>
}
 80118a8:	b006      	add	sp, #24
 80118aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80118ae:	b001      	add	sp, #4
 80118b0:	4770      	bx	lr
  TRACE_UnLock();
 80118b2:	f7ff ff23 	bl	80116fc <TRACE_UnLock>
  return UTIL_ADV_TRACE_MEM_FULL;
 80118b6:	f06f 0002 	mvn.w	r0, #2
 80118ba:	e7f5      	b.n	80118a8 <UTIL_ADV_TRACE_COND_FSend+0x9c>
    return UTIL_ADV_TRACE_GIVEUP;
 80118bc:	f06f 0004 	mvn.w	r0, #4
 80118c0:	e7f2      	b.n	80118a8 <UTIL_ADV_TRACE_COND_FSend+0x9c>
    return UTIL_ADV_TRACE_REGIONMASKED;
 80118c2:	f06f 0005 	mvn.w	r0, #5
 80118c6:	e7ef      	b.n	80118a8 <UTIL_ADV_TRACE_COND_FSend+0x9c>
 80118c8:	20001710 	.word	0x20001710
 80118cc:	20001728 	.word	0x20001728
 80118d0:	20001310 	.word	0x20001310

080118d4 <TRACE_TxCpltCallback>:
{
 80118d4:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80118d6:	f3ef 8310 	mrs	r3, PRIMASK
 80118da:	4619      	mov	r1, r3
  __ASM volatile ("cpsid i" : : : "memory");
 80118dc:	b672      	cpsid	i
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 80118de:	4b26      	ldr	r3, [pc, #152]	; (8011978 <TRACE_TxCpltCallback+0xa4>)
 80118e0:	789b      	ldrb	r3, [r3, #2]
 80118e2:	2b02      	cmp	r3, #2
 80118e4:	d016      	beq.n	8011914 <TRACE_TxCpltCallback+0x40>
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 80118e6:	4a24      	ldr	r2, [pc, #144]	; (8011978 <TRACE_TxCpltCallback+0xa4>)
 80118e8:	8a13      	ldrh	r3, [r2, #16]
 80118ea:	8a90      	ldrh	r0, [r2, #20]
 80118ec:	4403      	add	r3, r0
 80118ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80118f2:	8213      	strh	r3, [r2, #16]
  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 80118f4:	4b20      	ldr	r3, [pc, #128]	; (8011978 <TRACE_TxCpltCallback+0xa4>)
 80118f6:	8a1a      	ldrh	r2, [r3, #16]
 80118f8:	8a5b      	ldrh	r3, [r3, #18]
 80118fa:	429a      	cmp	r2, r3
 80118fc:	d003      	beq.n	8011906 <TRACE_TxCpltCallback+0x32>
 80118fe:	481e      	ldr	r0, [pc, #120]	; (8011978 <TRACE_TxCpltCallback+0xa4>)
 8011900:	8ac0      	ldrh	r0, [r0, #22]
 8011902:	2801      	cmp	r0, #1
 8011904:	d00b      	beq.n	801191e <TRACE_TxCpltCallback+0x4a>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011906:	f381 8810 	msr	PRIMASK, r1
    UTIL_ADV_TRACE_PostSendHook();
 801190a:	f7f0 fa05 	bl	8001d18 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 801190e:	f7ff fef5 	bl	80116fc <TRACE_UnLock>
}
 8011912:	bd10      	pop	{r4, pc}
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8011914:	4b18      	ldr	r3, [pc, #96]	; (8011978 <TRACE_TxCpltCallback+0xa4>)
 8011916:	2200      	movs	r2, #0
 8011918:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 801191a:	821a      	strh	r2, [r3, #16]
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
 801191c:	e7ea      	b.n	80118f4 <TRACE_TxCpltCallback+0x20>
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801191e:	4816      	ldr	r0, [pc, #88]	; (8011978 <TRACE_TxCpltCallback+0xa4>)
 8011920:	7880      	ldrb	r0, [r0, #2]
 8011922:	2801      	cmp	r0, #1
 8011924:	d014      	beq.n	8011950 <TRACE_TxCpltCallback+0x7c>
    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 8011926:	4a14      	ldr	r2, [pc, #80]	; (8011978 <TRACE_TxCpltCallback+0xa4>)
 8011928:	7892      	ldrb	r2, [r2, #2]
 801192a:	b932      	cbnz	r2, 801193a <TRACE_TxCpltCallback+0x66>
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801192c:	4a12      	ldr	r2, [pc, #72]	; (8011978 <TRACE_TxCpltCallback+0xa4>)
 801192e:	8a12      	ldrh	r2, [r2, #16]
 8011930:	4293      	cmp	r3, r2
 8011932:	d91b      	bls.n	801196c <TRACE_TxCpltCallback+0x98>
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 8011934:	1a9b      	subs	r3, r3, r2
 8011936:	4a10      	ldr	r2, [pc, #64]	; (8011978 <TRACE_TxCpltCallback+0xa4>)
 8011938:	8293      	strh	r3, [r2, #20]
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801193a:	4b0f      	ldr	r3, [pc, #60]	; (8011978 <TRACE_TxCpltCallback+0xa4>)
 801193c:	8a1a      	ldrh	r2, [r3, #16]
 801193e:	480f      	ldr	r0, [pc, #60]	; (801197c <TRACE_TxCpltCallback+0xa8>)
 8011940:	4410      	add	r0, r2
 8011942:	f381 8810 	msr	PRIMASK, r1
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 8011946:	4a0e      	ldr	r2, [pc, #56]	; (8011980 <TRACE_TxCpltCallback+0xac>)
 8011948:	68d2      	ldr	r2, [r2, #12]
 801194a:	8a99      	ldrh	r1, [r3, #20]
 801194c:	4790      	blx	r2
 801194e:	e7e0      	b.n	8011912 <TRACE_TxCpltCallback+0x3e>
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 8011950:	4c09      	ldr	r4, [pc, #36]	; (8011978 <TRACE_TxCpltCallback+0xa4>)
 8011952:	8820      	ldrh	r0, [r4, #0]
 8011954:	1a82      	subs	r2, r0, r2
 8011956:	b292      	uxth	r2, r2
 8011958:	82a2      	strh	r2, [r4, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801195a:	2002      	movs	r0, #2
 801195c:	70a0      	strb	r0, [r4, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 801195e:	2000      	movs	r0, #0
 8011960:	8020      	strh	r0, [r4, #0]
      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 8011962:	2a00      	cmp	r2, #0
 8011964:	d1df      	bne.n	8011926 <TRACE_TxCpltCallback+0x52>
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8011966:	70a0      	strb	r0, [r4, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 8011968:	8220      	strh	r0, [r4, #16]
 801196a:	e7dc      	b.n	8011926 <TRACE_TxCpltCallback+0x52>
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801196c:	f5c2 6280 	rsb	r2, r2, #1024	; 0x400
 8011970:	4b01      	ldr	r3, [pc, #4]	; (8011978 <TRACE_TxCpltCallback+0xa4>)
 8011972:	829a      	strh	r2, [r3, #20]
 8011974:	e7e1      	b.n	801193a <TRACE_TxCpltCallback+0x66>
 8011976:	bf00      	nop
 8011978:	20001710 	.word	0x20001710
 801197c:	20001310 	.word	0x20001310
 8011980:	08016f78 	.word	0x08016f78

08011984 <UTIL_LPM_Init>:
/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8011984:	2300      	movs	r3, #0
 8011986:	4a02      	ldr	r2, [pc, #8]	; (8011990 <UTIL_LPM_Init+0xc>)
 8011988:	6013      	str	r3, [r2, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801198a:	4a02      	ldr	r2, [pc, #8]	; (8011994 <UTIL_LPM_Init+0x10>)
 801198c:	6013      	str	r3, [r2, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 801198e:	4770      	bx	lr
 8011990:	2000192c 	.word	0x2000192c
 8011994:	20001928 	.word	0x20001928

08011998 <UTIL_LPM_SetStopMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011998:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801199c:	b672      	cpsid	i

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch( state )
 801199e:	b141      	cbz	r1, 80119b2 <UTIL_LPM_SetStopMode+0x1a>
 80119a0:	2901      	cmp	r1, #1
 80119a2:	d103      	bne.n	80119ac <UTIL_LPM_SetStopMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 80119a4:	4906      	ldr	r1, [pc, #24]	; (80119c0 <UTIL_LPM_SetStopMode+0x28>)
 80119a6:	680a      	ldr	r2, [r1, #0]
 80119a8:	4302      	orrs	r2, r0
 80119aa:	600a      	str	r2, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80119ac:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 80119b0:	4770      	bx	lr
      StopModeDisable &= ( ~lpm_id_bm );
 80119b2:	4903      	ldr	r1, [pc, #12]	; (80119c0 <UTIL_LPM_SetStopMode+0x28>)
 80119b4:	680a      	ldr	r2, [r1, #0]
 80119b6:	ea22 0200 	bic.w	r2, r2, r0
 80119ba:	600a      	str	r2, [r1, #0]
      break;
 80119bc:	e7f6      	b.n	80119ac <UTIL_LPM_SetStopMode+0x14>
 80119be:	bf00      	nop
 80119c0:	2000192c 	.word	0x2000192c

080119c4 <UTIL_LPM_SetOffMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80119c4:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80119c8:	b672      	cpsid	i

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch(state)
 80119ca:	b141      	cbz	r1, 80119de <UTIL_LPM_SetOffMode+0x1a>
 80119cc:	2901      	cmp	r1, #1
 80119ce:	d103      	bne.n	80119d8 <UTIL_LPM_SetOffMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 80119d0:	4906      	ldr	r1, [pc, #24]	; (80119ec <UTIL_LPM_SetOffMode+0x28>)
 80119d2:	680a      	ldr	r2, [r1, #0]
 80119d4:	4302      	orrs	r2, r0
 80119d6:	600a      	str	r2, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80119d8:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 80119dc:	4770      	bx	lr
      OffModeDisable &= ( ~lpm_id_bm );
 80119de:	4903      	ldr	r1, [pc, #12]	; (80119ec <UTIL_LPM_SetOffMode+0x28>)
 80119e0:	680a      	ldr	r2, [r1, #0]
 80119e2:	ea22 0200 	bic.w	r2, r2, r0
 80119e6:	600a      	str	r2, [r1, #0]
      break;
 80119e8:	e7f6      	b.n	80119d8 <UTIL_LPM_SetOffMode+0x14>
 80119ea:	bf00      	nop
 80119ec:	20001928 	.word	0x20001928

080119f0 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 80119f0:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80119f2:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80119f6:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 80119f8:	4b0c      	ldr	r3, [pc, #48]	; (8011a2c <UTIL_LPM_EnterLowPower+0x3c>)
 80119fa:	681b      	ldr	r3, [r3, #0]
 80119fc:	b13b      	cbz	r3, 8011a0e <UTIL_LPM_EnterLowPower+0x1e>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 80119fe:	4d0c      	ldr	r5, [pc, #48]	; (8011a30 <UTIL_LPM_EnterLowPower+0x40>)
 8011a00:	682b      	ldr	r3, [r5, #0]
 8011a02:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 8011a04:	686b      	ldr	r3, [r5, #4]
 8011a06:	4798      	blx	r3
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011a08:	f384 8810 	msr	PRIMASK, r4
      UTIL_PowerDriver.ExitOffMode( );
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 8011a0c:	bd38      	pop	{r3, r4, r5, pc}
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 8011a0e:	4b09      	ldr	r3, [pc, #36]	; (8011a34 <UTIL_LPM_EnterLowPower+0x44>)
 8011a10:	681b      	ldr	r3, [r3, #0]
 8011a12:	b12b      	cbz	r3, 8011a20 <UTIL_LPM_EnterLowPower+0x30>
        UTIL_PowerDriver.EnterStopMode( );
 8011a14:	4d06      	ldr	r5, [pc, #24]	; (8011a30 <UTIL_LPM_EnterLowPower+0x40>)
 8011a16:	68ab      	ldr	r3, [r5, #8]
 8011a18:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 8011a1a:	68eb      	ldr	r3, [r5, #12]
 8011a1c:	4798      	blx	r3
 8011a1e:	e7f3      	b.n	8011a08 <UTIL_LPM_EnterLowPower+0x18>
      UTIL_PowerDriver.EnterOffMode( );
 8011a20:	4d03      	ldr	r5, [pc, #12]	; (8011a30 <UTIL_LPM_EnterLowPower+0x40>)
 8011a22:	692b      	ldr	r3, [r5, #16]
 8011a24:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 8011a26:	696b      	ldr	r3, [r5, #20]
 8011a28:	4798      	blx	r3
 8011a2a:	e7ed      	b.n	8011a08 <UTIL_LPM_EnterLowPower+0x18>
 8011a2c:	2000192c 	.word	0x2000192c
 8011a30:	08016f08 	.word	0x08016f08
 8011a34:	20001928 	.word	0x20001928

08011a38 <UTIL_MEM_cpy_8>:
void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  uint8_t* src8= (uint8_t *) src;

  while( size-- )
 8011a38:	e004      	b.n	8011a44 <UTIL_MEM_cpy_8+0xc>
    {
        *dst8++ = *src8++;
 8011a3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011a3e:	f800 2b01 	strb.w	r2, [r0], #1
  while( size-- )
 8011a42:	461a      	mov	r2, r3
 8011a44:	1e53      	subs	r3, r2, #1
 8011a46:	b29b      	uxth	r3, r3
 8011a48:	2a00      	cmp	r2, #0
 8011a4a:	d1f6      	bne.n	8011a3a <UTIL_MEM_cpy_8+0x2>
    }
}
 8011a4c:	4770      	bx	lr

08011a4e <UTIL_MEM_set_8>:
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  while( size-- )
 8011a4e:	e002      	b.n	8011a56 <UTIL_MEM_set_8+0x8>
  {
    *dst8++ = value;
 8011a50:	f800 1b01 	strb.w	r1, [r0], #1
  while( size-- )
 8011a54:	461a      	mov	r2, r3
 8011a56:	1e53      	subs	r3, r2, #1
 8011a58:	b29b      	uxth	r3, r3
 8011a5a:	2a00      	cmp	r2, #0
 8011a5c:	d1f8      	bne.n	8011a50 <UTIL_MEM_set_8+0x2>
  }
}
 8011a5e:	4770      	bx	lr

08011a60 <UTIL_SEQ_SetTask>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011a60:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011a64:	b672      	cpsid	i

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );

  TaskSet |= TaskId_bm;
 8011a66:	4a06      	ldr	r2, [pc, #24]	; (8011a80 <UTIL_SEQ_SetTask+0x20>)
 8011a68:	6813      	ldr	r3, [r2, #0]
 8011a6a:	4303      	orrs	r3, r0
 8011a6c:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8011a6e:	4a05      	ldr	r2, [pc, #20]	; (8011a84 <UTIL_SEQ_SetTask+0x24>)
 8011a70:	f852 3031 	ldr.w	r3, [r2, r1, lsl #3]
 8011a74:	4303      	orrs	r3, r0
 8011a76:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011a7a:	f38c 8810 	msr	PRIMASK, ip

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
}
 8011a7e:	4770      	bx	lr
 8011a80:	200019cc 	.word	0x200019cc
 8011a84:	200019bc 	.word	0x200019bc

08011a88 <UTIL_SEQ_PreIdle>:
{
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
}
 8011a88:	4770      	bx	lr

08011a8a <UTIL_SEQ_PostIdle>:
{
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
}
 8011a8a:	4770      	bx	lr

08011a8c <SEQ_BitPosition>:
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
  uint8_t n = 0U;

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 8011a8c:	0c03      	lsrs	r3, r0, #16
 8011a8e:	041b      	lsls	r3, r3, #16
 8011a90:	b9b3      	cbnz	r3, 8011ac0 <SEQ_BitPosition+0x34>
 8011a92:	0400      	lsls	r0, r0, #16
 8011a94:	2310      	movs	r3, #16
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 8011a96:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8011a9a:	d102      	bne.n	8011aa2 <SEQ_BitPosition+0x16>
 8011a9c:	3308      	adds	r3, #8
 8011a9e:	b2db      	uxtb	r3, r3
 8011aa0:	0200      	lsls	r0, r0, #8
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 8011aa2:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8011aa6:	d102      	bne.n	8011aae <SEQ_BitPosition+0x22>
 8011aa8:	3304      	adds	r3, #4
 8011aaa:	b2db      	uxtb	r3, r3
 8011aac:	0100      	lsls	r0, r0, #4

  n += SEQ_clz_table_4bit[Value >> (32-4)];
 8011aae:	0f00      	lsrs	r0, r0, #28
 8011ab0:	4a04      	ldr	r2, [pc, #16]	; (8011ac4 <SEQ_BitPosition+0x38>)
 8011ab2:	5c10      	ldrb	r0, [r2, r0]
 8011ab4:	4418      	add	r0, r3
 8011ab6:	b2c0      	uxtb	r0, r0

  return (uint8_t)(31U-n);
 8011ab8:	f1c0 001f 	rsb	r0, r0, #31
}
 8011abc:	b2c0      	uxtb	r0, r0
 8011abe:	4770      	bx	lr
  uint8_t n = 0U;
 8011ac0:	2300      	movs	r3, #0
 8011ac2:	e7e8      	b.n	8011a96 <SEQ_BitPosition+0xa>
 8011ac4:	08017c5c 	.word	0x08017c5c

08011ac8 <UTIL_SEQ_Run>:
{
 8011ac8:	b570      	push	{r4, r5, r6, lr}
  super_mask_backup = SuperMask;
 8011aca:	4b3b      	ldr	r3, [pc, #236]	; (8011bb8 <UTIL_SEQ_Run+0xf0>)
 8011acc:	681c      	ldr	r4, [r3, #0]
  SuperMask &= Mask_bm;
 8011ace:	4020      	ands	r0, r4
 8011ad0:	6018      	str	r0, [r3, #0]
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 8011ad2:	e03f      	b.n	8011b54 <UTIL_SEQ_Run+0x8c>
      counter++;
 8011ad4:	3301      	adds	r3, #1
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 8011ad6:	4839      	ldr	r0, [pc, #228]	; (8011bbc <UTIL_SEQ_Run+0xf4>)
 8011ad8:	f850 0033 	ldr.w	r0, [r0, r3, lsl #3]
 8011adc:	4008      	ands	r0, r1
 8011ade:	4010      	ands	r0, r2
 8011ae0:	d0f8      	beq.n	8011ad4 <UTIL_SEQ_Run+0xc>
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8011ae2:	4a36      	ldr	r2, [pc, #216]	; (8011bbc <UTIL_SEQ_Run+0xf4>)
 8011ae4:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8011ae8:	6852      	ldr	r2, [r2, #4]
 8011aea:	4210      	tst	r0, r2
 8011aec:	d105      	bne.n	8011afa <UTIL_SEQ_Run+0x32>
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8011aee:	4a33      	ldr	r2, [pc, #204]	; (8011bbc <UTIL_SEQ_Run+0xf4>)
 8011af0:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8011af4:	f04f 31ff 	mov.w	r1, #4294967295
 8011af8:	6051      	str	r1, [r2, #4]
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8011afa:	4d30      	ldr	r5, [pc, #192]	; (8011bbc <UTIL_SEQ_Run+0xf4>)
 8011afc:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8011b00:	686e      	ldr	r6, [r5, #4]
 8011b02:	4030      	ands	r0, r6
 8011b04:	f7ff ffc2 	bl	8011a8c <SEQ_BitPosition>
 8011b08:	4a2d      	ldr	r2, [pc, #180]	; (8011bc0 <UTIL_SEQ_Run+0xf8>)
 8011b0a:	6010      	str	r0, [r2, #0]
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8011b0c:	2301      	movs	r3, #1
 8011b0e:	fa03 f000 	lsl.w	r0, r3, r0
 8011b12:	ea26 0600 	bic.w	r6, r6, r0
 8011b16:	606e      	str	r6, [r5, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011b18:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011b1c:	b672      	cpsid	i
    TaskSet &= ~(1U << CurrentTaskIdx);
 8011b1e:	6812      	ldr	r2, [r2, #0]
 8011b20:	4093      	lsls	r3, r2
 8011b22:	43dd      	mvns	r5, r3
 8011b24:	4927      	ldr	r1, [pc, #156]	; (8011bc4 <UTIL_SEQ_Run+0xfc>)
 8011b26:	680a      	ldr	r2, [r1, #0]
 8011b28:	ea22 0203 	bic.w	r2, r2, r3
 8011b2c:	600a      	str	r2, [r1, #0]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8011b2e:	2302      	movs	r3, #2
 8011b30:	e006      	b.n	8011b40 <UTIL_SEQ_Run+0x78>
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8011b32:	3b01      	subs	r3, #1
 8011b34:	4921      	ldr	r1, [pc, #132]	; (8011bbc <UTIL_SEQ_Run+0xf4>)
 8011b36:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 8011b3a:	402a      	ands	r2, r5
 8011b3c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8011b40:	2b00      	cmp	r3, #0
 8011b42:	d1f6      	bne.n	8011b32 <UTIL_SEQ_Run+0x6a>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011b44:	f380 8810 	msr	PRIMASK, r0
    TaskCb[CurrentTaskIdx]( );
 8011b48:	4b1d      	ldr	r3, [pc, #116]	; (8011bc0 <UTIL_SEQ_Run+0xf8>)
 8011b4a:	681a      	ldr	r2, [r3, #0]
 8011b4c:	4b1e      	ldr	r3, [pc, #120]	; (8011bc8 <UTIL_SEQ_Run+0x100>)
 8011b4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011b52:	4798      	blx	r3
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 8011b54:	4b1d      	ldr	r3, [pc, #116]	; (8011bcc <UTIL_SEQ_Run+0x104>)
 8011b56:	6819      	ldr	r1, [r3, #0]
 8011b58:	4b1a      	ldr	r3, [pc, #104]	; (8011bc4 <UTIL_SEQ_Run+0xfc>)
 8011b5a:	681b      	ldr	r3, [r3, #0]
 8011b5c:	400b      	ands	r3, r1
 8011b5e:	4a16      	ldr	r2, [pc, #88]	; (8011bb8 <UTIL_SEQ_Run+0xf0>)
 8011b60:	6812      	ldr	r2, [r2, #0]
 8011b62:	4213      	tst	r3, r2
 8011b64:	d005      	beq.n	8011b72 <UTIL_SEQ_Run+0xaa>
 8011b66:	4b1a      	ldr	r3, [pc, #104]	; (8011bd0 <UTIL_SEQ_Run+0x108>)
 8011b68:	681b      	ldr	r3, [r3, #0]
 8011b6a:	481a      	ldr	r0, [pc, #104]	; (8011bd4 <UTIL_SEQ_Run+0x10c>)
 8011b6c:	6800      	ldr	r0, [r0, #0]
 8011b6e:	4003      	ands	r3, r0
 8011b70:	d0b1      	beq.n	8011ad6 <UTIL_SEQ_Run+0xe>
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8011b72:	4b13      	ldr	r3, [pc, #76]	; (8011bc0 <UTIL_SEQ_Run+0xf8>)
 8011b74:	f04f 32ff 	mov.w	r2, #4294967295
 8011b78:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8011b7a:	f7ff ff85 	bl	8011a88 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011b7e:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011b82:	b672      	cpsid	i
  if (!(((TaskSet & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 8011b84:	4b0f      	ldr	r3, [pc, #60]	; (8011bc4 <UTIL_SEQ_Run+0xfc>)
 8011b86:	681b      	ldr	r3, [r3, #0]
 8011b88:	4a10      	ldr	r2, [pc, #64]	; (8011bcc <UTIL_SEQ_Run+0x104>)
 8011b8a:	6812      	ldr	r2, [r2, #0]
 8011b8c:	4013      	ands	r3, r2
 8011b8e:	4a0a      	ldr	r2, [pc, #40]	; (8011bb8 <UTIL_SEQ_Run+0xf0>)
 8011b90:	6812      	ldr	r2, [r2, #0]
 8011b92:	4213      	tst	r3, r2
 8011b94:	d105      	bne.n	8011ba2 <UTIL_SEQ_Run+0xda>
 8011b96:	4b0e      	ldr	r3, [pc, #56]	; (8011bd0 <UTIL_SEQ_Run+0x108>)
 8011b98:	681a      	ldr	r2, [r3, #0]
 8011b9a:	4b0e      	ldr	r3, [pc, #56]	; (8011bd4 <UTIL_SEQ_Run+0x10c>)
 8011b9c:	681b      	ldr	r3, [r3, #0]
 8011b9e:	421a      	tst	r2, r3
 8011ba0:	d006      	beq.n	8011bb0 <UTIL_SEQ_Run+0xe8>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011ba2:	f385 8810 	msr	PRIMASK, r5
  UTIL_SEQ_PostIdle( );
 8011ba6:	f7ff ff70 	bl	8011a8a <UTIL_SEQ_PostIdle>
  SuperMask = super_mask_backup;
 8011baa:	4b03      	ldr	r3, [pc, #12]	; (8011bb8 <UTIL_SEQ_Run+0xf0>)
 8011bac:	601c      	str	r4, [r3, #0]
}
 8011bae:	bd70      	pop	{r4, r5, r6, pc}
	UTIL_SEQ_Idle( );
 8011bb0:	f7f0 f82a 	bl	8001c08 <UTIL_SEQ_Idle>
 8011bb4:	e7f5      	b.n	8011ba2 <UTIL_SEQ_Run+0xda>
 8011bb6:	bf00      	nop
 8011bb8:	200000d8 	.word	0x200000d8
 8011bbc:	200019bc 	.word	0x200019bc
 8011bc0:	20001930 	.word	0x20001930
 8011bc4:	200019cc 	.word	0x200019cc
 8011bc8:	2000193c 	.word	0x2000193c
 8011bcc:	200000dc 	.word	0x200000dc
 8011bd0:	20001934 	.word	0x20001934
 8011bd4:	20001938 	.word	0x20001938

08011bd8 <UTIL_SEQ_RegTask>:
{
 8011bd8:	b538      	push	{r3, r4, r5, lr}
 8011bda:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011bdc:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011be0:	b672      	cpsid	i
  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8011be2:	f7ff ff53 	bl	8011a8c <SEQ_BitPosition>
 8011be6:	4b03      	ldr	r3, [pc, #12]	; (8011bf4 <UTIL_SEQ_RegTask+0x1c>)
 8011be8:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011bec:	f385 8810 	msr	PRIMASK, r5
}
 8011bf0:	bd38      	pop	{r3, r4, r5, pc}
 8011bf2:	bf00      	nop
 8011bf4:	2000193c 	.word	0x2000193c

08011bf8 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 8011bf8:	b082      	sub	sp, #8
 8011bfa:	b082      	sub	sp, #8
 8011bfc:	f10d 0c08 	add.w	ip, sp, #8
 8011c00:	e90c 0006 	stmdb	ip, {r1, r2}
 8011c04:	9303      	str	r3, [sp, #12]
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 8011c06:	2200      	movs	r2, #0
 8011c08:	6002      	str	r2, [r0, #0]
 8011c0a:	8082      	strh	r2, [r0, #4]

  c.Seconds = a.Seconds + b.Seconds;
 8011c0c:	440b      	add	r3, r1
 8011c0e:	6003      	str	r3, [r0, #0]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 8011c10:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8011c14:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8011c18:	440a      	add	r2, r1
 8011c1a:	b291      	uxth	r1, r2
 8011c1c:	b212      	sxth	r2, r2
 8011c1e:	8082      	strh	r2, [r0, #4]
  if( c.SubSeconds >= 1000 )
 8011c20:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8011c24:	db04      	blt.n	8011c30 <SysTimeAdd+0x38>
  {
    c.Seconds++;
 8011c26:	3301      	adds	r3, #1
 8011c28:	6003      	str	r3, [r0, #0]
    c.SubSeconds -= 1000;
 8011c2a:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
 8011c2e:	8081      	strh	r1, [r0, #4]
  }
  return c;
}
 8011c30:	b002      	add	sp, #8
 8011c32:	b002      	add	sp, #8
 8011c34:	4770      	bx	lr

08011c36 <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 8011c36:	b082      	sub	sp, #8
 8011c38:	b082      	sub	sp, #8
 8011c3a:	f10d 0c08 	add.w	ip, sp, #8
 8011c3e:	e90c 0006 	stmdb	ip, {r1, r2}
 8011c42:	9303      	str	r3, [sp, #12]
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 8011c44:	2200      	movs	r2, #0
 8011c46:	6002      	str	r2, [r0, #0]
 8011c48:	8082      	strh	r2, [r0, #4]

  c.Seconds = a.Seconds - b.Seconds;
 8011c4a:	1acb      	subs	r3, r1, r3
 8011c4c:	6003      	str	r3, [r0, #0]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 8011c4e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8011c52:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8011c56:	1a52      	subs	r2, r2, r1
 8011c58:	b291      	uxth	r1, r2
 8011c5a:	b212      	sxth	r2, r2
 8011c5c:	8082      	strh	r2, [r0, #4]
  if( c.SubSeconds < 0 )
 8011c5e:	2a00      	cmp	r2, #0
 8011c60:	db02      	blt.n	8011c68 <SysTimeSub+0x32>
  {
    c.Seconds--;
    c.SubSeconds += 1000;
  }
  return c;
}
 8011c62:	b002      	add	sp, #8
 8011c64:	b002      	add	sp, #8
 8011c66:	4770      	bx	lr
    c.Seconds--;
 8011c68:	3b01      	subs	r3, #1
 8011c6a:	6003      	str	r3, [r0, #0]
    c.SubSeconds += 1000;
 8011c6c:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
 8011c70:	8081      	strh	r1, [r0, #4]
  return c;
 8011c72:	e7f6      	b.n	8011c62 <SysTimeSub+0x2c>

08011c74 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 8011c74:	b530      	push	{r4, r5, lr}
 8011c76:	b089      	sub	sp, #36	; 0x24
 8011c78:	ac02      	add	r4, sp, #8
 8011c7a:	e884 0003 	stmia.w	r4, {r0, r1}
  SysTime_t DeltaTime;
  
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8011c7e:	2300      	movs	r3, #0
 8011c80:	9304      	str	r3, [sp, #16]
 8011c82:	f8ad 3014 	strh.w	r3, [sp, #20]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8011c86:	4d0b      	ldr	r5, [pc, #44]	; (8011cb4 <SysTimeSet+0x40>)
 8011c88:	692b      	ldr	r3, [r5, #16]
 8011c8a:	a805      	add	r0, sp, #20
 8011c8c:	4798      	blx	r3
 8011c8e:	4603      	mov	r3, r0
 8011c90:	9004      	str	r0, [sp, #16]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 8011c92:	9a05      	ldr	r2, [sp, #20]
 8011c94:	9200      	str	r2, [sp, #0]
 8011c96:	e894 0006 	ldmia.w	r4, {r1, r2}
 8011c9a:	a806      	add	r0, sp, #24
 8011c9c:	f7ff ffcb 	bl	8011c36 <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 8011ca0:	682b      	ldr	r3, [r5, #0]
 8011ca2:	9806      	ldr	r0, [sp, #24]
 8011ca4:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 8011ca6:	68ab      	ldr	r3, [r5, #8]
 8011ca8:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 8011cac:	4798      	blx	r3
}
 8011cae:	b009      	add	sp, #36	; 0x24
 8011cb0:	bd30      	pop	{r4, r5, pc}
 8011cb2:	bf00      	nop
 8011cb4:	08016f38 	.word	0x08016f38

08011cb8 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 8011cb8:	b530      	push	{r4, r5, lr}
 8011cba:	b087      	sub	sp, #28
 8011cbc:	4604      	mov	r4, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8011cbe:	2300      	movs	r3, #0
 8011cc0:	9304      	str	r3, [sp, #16]
 8011cc2:	f8ad 3014 	strh.w	r3, [sp, #20]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 8011cc6:	6003      	str	r3, [r0, #0]
 8011cc8:	8083      	strh	r3, [r0, #4]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8011cca:	4d0b      	ldr	r5, [pc, #44]	; (8011cf8 <SysTimeGet+0x40>)
 8011ccc:	692b      	ldr	r3, [r5, #16]
 8011cce:	a805      	add	r0, sp, #20
 8011cd0:	4798      	blx	r3
 8011cd2:	9004      	str	r0, [sp, #16]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8011cd4:	68eb      	ldr	r3, [r5, #12]
 8011cd6:	4798      	blx	r3
 8011cd8:	f8ad 000c 	strh.w	r0, [sp, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8011cdc:	686b      	ldr	r3, [r5, #4]
 8011cde:	4798      	blx	r3
 8011ce0:	9002      	str	r0, [sp, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 8011ce2:	9b05      	ldr	r3, [sp, #20]
 8011ce4:	9300      	str	r3, [sp, #0]
 8011ce6:	9b04      	ldr	r3, [sp, #16]
 8011ce8:	aa02      	add	r2, sp, #8
 8011cea:	ca06      	ldmia	r2, {r1, r2}
 8011cec:	4620      	mov	r0, r4
 8011cee:	f7ff ff83 	bl	8011bf8 <SysTimeAdd>

  return sysTime;
}
 8011cf2:	4620      	mov	r0, r4
 8011cf4:	b007      	add	sp, #28
 8011cf6:	bd30      	pop	{r4, r5, pc}
 8011cf8:	08016f38 	.word	0x08016f38

08011cfc <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 8011cfc:	b530      	push	{r4, r5, lr}
 8011cfe:	b083      	sub	sp, #12
 8011d00:	4604      	mov	r4, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8011d02:	2300      	movs	r3, #0
 8011d04:	9300      	str	r3, [sp, #0]
 8011d06:	f8ad 3004 	strh.w	r3, [sp, #4]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8011d0a:	4b06      	ldr	r3, [pc, #24]	; (8011d24 <SysTimeGetMcuTime+0x28>)
 8011d0c:	691b      	ldr	r3, [r3, #16]
 8011d0e:	466d      	mov	r5, sp
 8011d10:	a801      	add	r0, sp, #4
 8011d12:	4798      	blx	r3
 8011d14:	9000      	str	r0, [sp, #0]
  
  return calendarTime;
 8011d16:	e895 0003 	ldmia.w	r5, {r0, r1}
 8011d1a:	e884 0003 	stmia.w	r4, {r0, r1}
}
 8011d1e:	4620      	mov	r0, r4
 8011d20:	b003      	add	sp, #12
 8011d22:	bd30      	pop	{r4, r5, pc}
 8011d24:	08016f38 	.word	0x08016f38

08011d28 <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 8011d28:	b530      	push	{r4, r5, lr}
 8011d2a:	b089      	sub	sp, #36	; 0x24
 8011d2c:	ac02      	add	r4, sp, #8
 8011d2e:	e884 0003 	stmia.w	r4, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8011d32:	4d0c      	ldr	r5, [pc, #48]	; (8011d64 <SysTimeToMs+0x3c>)
 8011d34:	68eb      	ldr	r3, [r5, #12]
 8011d36:	4798      	blx	r3
 8011d38:	f8ad 001c 	strh.w	r0, [sp, #28]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8011d3c:	686b      	ldr	r3, [r5, #4]
 8011d3e:	4798      	blx	r3
 8011d40:	4603      	mov	r3, r0
 8011d42:	9006      	str	r0, [sp, #24]
  
  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 8011d44:	9a07      	ldr	r2, [sp, #28]
 8011d46:	9200      	str	r2, [sp, #0]
 8011d48:	e894 0006 	ldmia.w	r4, {r1, r2}
 8011d4c:	a804      	add	r0, sp, #16
 8011d4e:	f7ff ff72 	bl	8011c36 <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 8011d52:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
}
 8011d56:	9a04      	ldr	r2, [sp, #16]
 8011d58:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8011d5c:	fb00 3002 	mla	r0, r0, r2, r3
 8011d60:	b009      	add	sp, #36	; 0x24
 8011d62:	bd30      	pop	{r4, r5, pc}
 8011d64:	08016f38 	.word	0x08016f38

08011d68 <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 8011d68:	b530      	push	{r4, r5, lr}
 8011d6a:	b087      	sub	sp, #28
 8011d6c:	4604      	mov	r4, r0
  uint32_t seconds = timeMs / 1000;
 8011d6e:	4b12      	ldr	r3, [pc, #72]	; (8011db8 <SysTimeFromMs+0x50>)
 8011d70:	fba3 2301 	umull	r2, r3, r3, r1
 8011d74:	099b      	lsrs	r3, r3, #6
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 8011d76:	9304      	str	r3, [sp, #16]
 8011d78:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 8011d7c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8011d80:	eba1 01c3 	sub.w	r1, r1, r3, lsl #3
 8011d84:	f8ad 1014 	strh.w	r1, [sp, #20]
  SysTime_t DeltaTime = { 0 };
 8011d88:	2300      	movs	r3, #0
 8011d8a:	9302      	str	r3, [sp, #8]
 8011d8c:	9303      	str	r3, [sp, #12]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8011d8e:	4d0b      	ldr	r5, [pc, #44]	; (8011dbc <SysTimeFromMs+0x54>)
 8011d90:	68eb      	ldr	r3, [r5, #12]
 8011d92:	4798      	blx	r3
 8011d94:	f8ad 000c 	strh.w	r0, [sp, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8011d98:	686b      	ldr	r3, [r5, #4]
 8011d9a:	4798      	blx	r3
 8011d9c:	4603      	mov	r3, r0
 8011d9e:	9002      	str	r0, [sp, #8]
  return SysTimeAdd( sysTime, DeltaTime );
 8011da0:	9a03      	ldr	r2, [sp, #12]
 8011da2:	9200      	str	r2, [sp, #0]
 8011da4:	aa06      	add	r2, sp, #24
 8011da6:	e912 0006 	ldmdb	r2, {r1, r2}
 8011daa:	4620      	mov	r0, r4
 8011dac:	f7ff ff24 	bl	8011bf8 <SysTimeAdd>
}
 8011db0:	4620      	mov	r0, r4
 8011db2:	b007      	add	sp, #28
 8011db4:	bd30      	pop	{r4, r5, pc}
 8011db6:	bf00      	nop
 8011db8:	10624dd3 	.word	0x10624dd3
 8011dbc:	08016f38 	.word	0x08016f38

08011dc0 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 8011dc0:	b508      	push	{r3, lr}
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 8011dc2:	4b03      	ldr	r3, [pc, #12]	; (8011dd0 <UTIL_TIMER_Init+0x10>)
 8011dc4:	2200      	movs	r2, #0
 8011dc6:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 8011dc8:	4b02      	ldr	r3, [pc, #8]	; (8011dd4 <UTIL_TIMER_Init+0x14>)
 8011dca:	681b      	ldr	r3, [r3, #0]
 8011dcc:	4798      	blx	r3
}
 8011dce:	bd08      	pop	{r3, pc}
 8011dd0:	200019d0 	.word	0x200019d0
 8011dd4:	08016f4c 	.word	0x08016f4c

08011dd8 <UTIL_TIMER_Create>:
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
  if((TimerObject != NULL) && (Callback != NULL))
 8011dd8:	b1a8      	cbz	r0, 8011e06 <UTIL_TIMER_Create+0x2e>
{
 8011dda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ddc:	4617      	mov	r7, r2
 8011dde:	461e      	mov	r6, r3
 8011de0:	4604      	mov	r4, r0
  if((TimerObject != NULL) && (Callback != NULL))
 8011de2:	b193      	cbz	r3, 8011e0a <UTIL_TIMER_Create+0x32>
  {
    TimerObject->Timestamp = 0U;
 8011de4:	2500      	movs	r5, #0
 8011de6:	6005      	str	r5, [r0, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 8011de8:	4b09      	ldr	r3, [pc, #36]	; (8011e10 <UTIL_TIMER_Create+0x38>)
 8011dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011dec:	4608      	mov	r0, r1
 8011dee:	4798      	blx	r3
 8011df0:	6060      	str	r0, [r4, #4]
    TimerObject->IsPending = 0U;
 8011df2:	7225      	strb	r5, [r4, #8]
    TimerObject->IsRunning = 0U;
 8011df4:	7265      	strb	r5, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 8011df6:	72a5      	strb	r5, [r4, #10]
    TimerObject->Callback = Callback;
 8011df8:	60e6      	str	r6, [r4, #12]
    TimerObject->argument = Argument;
 8011dfa:	9b06      	ldr	r3, [sp, #24]
 8011dfc:	6123      	str	r3, [r4, #16]
    TimerObject->Mode = Mode;
 8011dfe:	72e7      	strb	r7, [r4, #11]
    TimerObject->Next = NULL;
 8011e00:	6165      	str	r5, [r4, #20]
    return UTIL_TIMER_OK;
 8011e02:	4628      	mov	r0, r5
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
  }
}
 8011e04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return UTIL_TIMER_INVALID_PARAM;
 8011e06:	2001      	movs	r0, #1
}
 8011e08:	4770      	bx	lr
    return UTIL_TIMER_INVALID_PARAM;
 8011e0a:	2001      	movs	r0, #1
 8011e0c:	e7fa      	b.n	8011e04 <UTIL_TIMER_Create+0x2c>
 8011e0e:	bf00      	nop
 8011e10:	08016f4c 	.word	0x08016f4c

08011e14 <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 8011e14:	b510      	push	{r4, lr}
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 8011e16:	4c03      	ldr	r4, [pc, #12]	; (8011e24 <UTIL_TIMER_GetCurrentTime+0x10>)
 8011e18:	69e3      	ldr	r3, [r4, #28]
 8011e1a:	4798      	blx	r3
  return  UTIL_TimerDriver.Tick2ms(now);
 8011e1c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8011e1e:	4798      	blx	r3
}
 8011e20:	bd10      	pop	{r4, pc}
 8011e22:	bf00      	nop
 8011e24:	08016f4c 	.word	0x08016f4c

08011e28 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 8011e28:	b570      	push	{r4, r5, r6, lr}
 8011e2a:	4606      	mov	r6, r0
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 8011e2c:	4d05      	ldr	r5, [pc, #20]	; (8011e44 <UTIL_TIMER_GetElapsedTime+0x1c>)
 8011e2e:	69eb      	ldr	r3, [r5, #28]
 8011e30:	4798      	blx	r3
 8011e32:	4604      	mov	r4, r0
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 8011e34:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011e36:	4630      	mov	r0, r6
 8011e38:	4798      	blx	r3
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 8011e3a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8011e3c:	1a20      	subs	r0, r4, r0
 8011e3e:	4798      	blx	r3
}
 8011e40:	bd70      	pop	{r4, r5, r6, pc}
 8011e42:	bf00      	nop
 8011e44:	08016f4c 	.word	0x08016f4c

08011e48 <TimerExists>:
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8011e48:	4b05      	ldr	r3, [pc, #20]	; (8011e60 <TimerExists+0x18>)
 8011e4a:	681b      	ldr	r3, [r3, #0]

  while( cur != NULL )
 8011e4c:	e000      	b.n	8011e50 <TimerExists+0x8>
  {
    if( cur == TimerObject )
    {
      return true;
    }
    cur = cur->Next;
 8011e4e:	695b      	ldr	r3, [r3, #20]
  while( cur != NULL )
 8011e50:	b11b      	cbz	r3, 8011e5a <TimerExists+0x12>
    if( cur == TimerObject )
 8011e52:	4283      	cmp	r3, r0
 8011e54:	d1fb      	bne.n	8011e4e <TimerExists+0x6>
      return true;
 8011e56:	2001      	movs	r0, #1
  }
  return false;
}
 8011e58:	4770      	bx	lr
  return false;
 8011e5a:	2000      	movs	r0, #0
 8011e5c:	4770      	bx	lr
 8011e5e:	bf00      	nop
 8011e60:	200019d0 	.word	0x200019d0

08011e64 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 8011e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e66:	4604      	mov	r4, r0
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 8011e68:	4e09      	ldr	r6, [pc, #36]	; (8011e90 <TimerSetTimeout+0x2c>)
 8011e6a:	6a33      	ldr	r3, [r6, #32]
 8011e6c:	4798      	blx	r3
 8011e6e:	4605      	mov	r5, r0
  TimerObject->IsPending = 1;
 8011e70:	2301      	movs	r3, #1
 8011e72:	7223      	strb	r3, [r4, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 8011e74:	6827      	ldr	r7, [r4, #0]
 8011e76:	69b6      	ldr	r6, [r6, #24]
 8011e78:	47b0      	blx	r6
 8011e7a:	4428      	add	r0, r5
 8011e7c:	4287      	cmp	r7, r0
 8011e7e:	d202      	bcs.n	8011e86 <TimerSetTimeout+0x22>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 8011e80:	47b0      	blx	r6
 8011e82:	4428      	add	r0, r5
 8011e84:	6020      	str	r0, [r4, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 8011e86:	4b02      	ldr	r3, [pc, #8]	; (8011e90 <TimerSetTimeout+0x2c>)
 8011e88:	689b      	ldr	r3, [r3, #8]
 8011e8a:	6820      	ldr	r0, [r4, #0]
 8011e8c:	4798      	blx	r3
}
 8011e8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011e90:	08016f4c 	.word	0x08016f4c

08011e94 <UTIL_TIMER_Stop>:
  if (NULL != TimerObject)
 8011e94:	b368      	cbz	r0, 8011ef2 <UTIL_TIMER_Stop+0x5e>
{
 8011e96:	b510      	push	{r4, lr}
 8011e98:	4602      	mov	r2, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011e9a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011e9e:	b672      	cpsid	i
    UTIL_TIMER_Object_t* prev = TimerListHead;
 8011ea0:	4b15      	ldr	r3, [pc, #84]	; (8011ef8 <UTIL_TIMER_Stop+0x64>)
 8011ea2:	6819      	ldr	r1, [r3, #0]
    TimerObject->IsReloadStopped = 1U;
 8011ea4:	2301      	movs	r3, #1
 8011ea6:	7283      	strb	r3, [r0, #10]
    if(NULL != TimerListHead)
 8011ea8:	b1e1      	cbz	r1, 8011ee4 <UTIL_TIMER_Stop+0x50>
      TimerObject->IsRunning = 0U;
 8011eaa:	2300      	movs	r3, #0
 8011eac:	7243      	strb	r3, [r0, #9]
      if( TimerListHead == TimerObject ) /* Stop the Head */
 8011eae:	4288      	cmp	r0, r1
 8011eb0:	d006      	beq.n	8011ec0 <UTIL_TIMER_Stop+0x2c>
    UTIL_TIMER_Object_t* cur = TimerListHead;
 8011eb2:	460b      	mov	r3, r1
        while( cur != NULL )
 8011eb4:	b1b3      	cbz	r3, 8011ee4 <UTIL_TIMER_Stop+0x50>
          if( cur == TimerObject )
 8011eb6:	4293      	cmp	r3, r2
 8011eb8:	d011      	beq.n	8011ede <UTIL_TIMER_Stop+0x4a>
            prev = cur;
 8011eba:	4619      	mov	r1, r3
            cur = cur->Next;
 8011ebc:	695b      	ldr	r3, [r3, #20]
 8011ebe:	e7f9      	b.n	8011eb4 <UTIL_TIMER_Stop+0x20>
          TimerListHead->IsPending = 0;
 8011ec0:	720b      	strb	r3, [r1, #8]
          if( TimerListHead->Next != NULL )
 8011ec2:	6948      	ldr	r0, [r1, #20]
 8011ec4:	b120      	cbz	r0, 8011ed0 <UTIL_TIMER_Stop+0x3c>
            TimerListHead = TimerListHead->Next;
 8011ec6:	4b0c      	ldr	r3, [pc, #48]	; (8011ef8 <UTIL_TIMER_Stop+0x64>)
 8011ec8:	6018      	str	r0, [r3, #0]
            TimerSetTimeout( TimerListHead );
 8011eca:	f7ff ffcb 	bl	8011e64 <TimerSetTimeout>
 8011ece:	e009      	b.n	8011ee4 <UTIL_TIMER_Stop+0x50>
            UTIL_TimerDriver.StopTimerEvt( );
 8011ed0:	4b0a      	ldr	r3, [pc, #40]	; (8011efc <UTIL_TIMER_Stop+0x68>)
 8011ed2:	68db      	ldr	r3, [r3, #12]
 8011ed4:	4798      	blx	r3
            TimerListHead = NULL;
 8011ed6:	4b08      	ldr	r3, [pc, #32]	; (8011ef8 <UTIL_TIMER_Stop+0x64>)
 8011ed8:	2200      	movs	r2, #0
 8011eda:	601a      	str	r2, [r3, #0]
 8011edc:	e002      	b.n	8011ee4 <UTIL_TIMER_Stop+0x50>
            if( cur->Next != NULL )
 8011ede:	695b      	ldr	r3, [r3, #20]
 8011ee0:	b123      	cbz	r3, 8011eec <UTIL_TIMER_Stop+0x58>
              prev->Next = cur;
 8011ee2:	614b      	str	r3, [r1, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011ee4:	f384 8810 	msr	PRIMASK, r4
}
 8011ee8:	2000      	movs	r0, #0
}
 8011eea:	bd10      	pop	{r4, pc}
              prev->Next = cur;
 8011eec:	2300      	movs	r3, #0
 8011eee:	614b      	str	r3, [r1, #20]
 8011ef0:	e7f8      	b.n	8011ee4 <UTIL_TIMER_Stop+0x50>
    ret = UTIL_TIMER_INVALID_PARAM;
 8011ef2:	2001      	movs	r0, #1
}
 8011ef4:	4770      	bx	lr
 8011ef6:	bf00      	nop
 8011ef8:	200019d0 	.word	0x200019d0
 8011efc:	08016f4c 	.word	0x08016f4c

08011f00 <TimerInsertTimer>:
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8011f00:	4b09      	ldr	r3, [pc, #36]	; (8011f28 <TimerInsertTimer+0x28>)
 8011f02:	681a      	ldr	r2, [r3, #0]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 8011f04:	6953      	ldr	r3, [r2, #20]

  while (cur->Next != NULL )
 8011f06:	e001      	b.n	8011f0c <TimerInsertTimer+0xc>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
    {
        cur = next;
 8011f08:	461a      	mov	r2, r3
        next = next->Next;
 8011f0a:	695b      	ldr	r3, [r3, #20]
  while (cur->Next != NULL )
 8011f0c:	6951      	ldr	r1, [r2, #20]
 8011f0e:	b139      	cbz	r1, 8011f20 <TimerInsertTimer+0x20>
    if( TimerObject->Timestamp  > next->Timestamp )
 8011f10:	6819      	ldr	r1, [r3, #0]
 8011f12:	f8d0 c000 	ldr.w	ip, [r0]
 8011f16:	458c      	cmp	ip, r1
 8011f18:	d8f6      	bhi.n	8011f08 <TimerInsertTimer+0x8>
    }
    else
    {
        cur->Next = TimerObject;
 8011f1a:	6150      	str	r0, [r2, #20]
        TimerObject->Next = next;
 8011f1c:	6143      	str	r3, [r0, #20]
        return;
 8011f1e:	4770      	bx	lr

    }
  }
  cur->Next = TimerObject;
 8011f20:	6150      	str	r0, [r2, #20]
  TimerObject->Next = NULL;
 8011f22:	2300      	movs	r3, #0
 8011f24:	6143      	str	r3, [r0, #20]
}
 8011f26:	4770      	bx	lr
 8011f28:	200019d0 	.word	0x200019d0

08011f2c <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 8011f2c:	b508      	push	{r3, lr}
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8011f2e:	4b05      	ldr	r3, [pc, #20]	; (8011f44 <TimerInsertNewHeadTimer+0x18>)
 8011f30:	681b      	ldr	r3, [r3, #0]

  if( cur != NULL )
 8011f32:	b10b      	cbz	r3, 8011f38 <TimerInsertNewHeadTimer+0xc>
  {
    cur->IsPending = 0;
 8011f34:	2200      	movs	r2, #0
 8011f36:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 8011f38:	6143      	str	r3, [r0, #20]
  TimerListHead = TimerObject;
 8011f3a:	4b02      	ldr	r3, [pc, #8]	; (8011f44 <TimerInsertNewHeadTimer+0x18>)
 8011f3c:	6018      	str	r0, [r3, #0]
  TimerSetTimeout( TimerListHead );
 8011f3e:	f7ff ff91 	bl	8011e64 <TimerSetTimeout>
}
 8011f42:	bd08      	pop	{r3, pc}
 8011f44:	200019d0 	.word	0x200019d0

08011f48 <UTIL_TIMER_Start>:
{
 8011f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 8011f4a:	2800      	cmp	r0, #0
 8011f4c:	d036      	beq.n	8011fbc <UTIL_TIMER_Start+0x74>
 8011f4e:	4604      	mov	r4, r0
 8011f50:	f7ff ff7a 	bl	8011e48 <TimerExists>
 8011f54:	2800      	cmp	r0, #0
 8011f56:	d134      	bne.n	8011fc2 <UTIL_TIMER_Start+0x7a>
 8011f58:	7a65      	ldrb	r5, [r4, #9]
 8011f5a:	2d00      	cmp	r5, #0
 8011f5c:	d133      	bne.n	8011fc6 <UTIL_TIMER_Start+0x7e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011f5e:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011f62:	b672      	cpsid	i
    ticks = TimerObject->ReloadValue;
 8011f64:	6867      	ldr	r7, [r4, #4]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 8011f66:	4b19      	ldr	r3, [pc, #100]	; (8011fcc <UTIL_TIMER_Start+0x84>)
 8011f68:	6a1b      	ldr	r3, [r3, #32]
 8011f6a:	4798      	blx	r3
    if( ticks < minValue )
 8011f6c:	4287      	cmp	r7, r0
 8011f6e:	d300      	bcc.n	8011f72 <UTIL_TIMER_Start+0x2a>
    ticks = TimerObject->ReloadValue;
 8011f70:	4638      	mov	r0, r7
    TimerObject->Timestamp = ticks;
 8011f72:	6020      	str	r0, [r4, #0]
    TimerObject->IsPending = 0U;
 8011f74:	2300      	movs	r3, #0
 8011f76:	7223      	strb	r3, [r4, #8]
    TimerObject->IsRunning = 1U;
 8011f78:	2201      	movs	r2, #1
 8011f7a:	7262      	strb	r2, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 8011f7c:	72a3      	strb	r3, [r4, #10]
    if( TimerListHead == NULL )
 8011f7e:	4b14      	ldr	r3, [pc, #80]	; (8011fd0 <UTIL_TIMER_Start+0x88>)
 8011f80:	681b      	ldr	r3, [r3, #0]
 8011f82:	b183      	cbz	r3, 8011fa6 <UTIL_TIMER_Start+0x5e>
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 8011f84:	4b11      	ldr	r3, [pc, #68]	; (8011fcc <UTIL_TIMER_Start+0x84>)
 8011f86:	699b      	ldr	r3, [r3, #24]
 8011f88:	4798      	blx	r3
      TimerObject->Timestamp += elapsedTime;
 8011f8a:	6823      	ldr	r3, [r4, #0]
 8011f8c:	4418      	add	r0, r3
 8011f8e:	6020      	str	r0, [r4, #0]
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 8011f90:	4b0f      	ldr	r3, [pc, #60]	; (8011fd0 <UTIL_TIMER_Start+0x88>)
 8011f92:	681b      	ldr	r3, [r3, #0]
 8011f94:	681b      	ldr	r3, [r3, #0]
 8011f96:	4298      	cmp	r0, r3
 8011f98:	d20c      	bcs.n	8011fb4 <UTIL_TIMER_Start+0x6c>
        TimerInsertNewHeadTimer( TimerObject);
 8011f9a:	4620      	mov	r0, r4
 8011f9c:	f7ff ffc6 	bl	8011f2c <TimerInsertNewHeadTimer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011fa0:	f386 8810 	msr	PRIMASK, r6
}
 8011fa4:	e00b      	b.n	8011fbe <UTIL_TIMER_Start+0x76>
      UTIL_TimerDriver.SetTimerContext();
 8011fa6:	4b09      	ldr	r3, [pc, #36]	; (8011fcc <UTIL_TIMER_Start+0x84>)
 8011fa8:	691b      	ldr	r3, [r3, #16]
 8011faa:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 8011fac:	4620      	mov	r0, r4
 8011fae:	f7ff ffbd 	bl	8011f2c <TimerInsertNewHeadTimer>
 8011fb2:	e7f5      	b.n	8011fa0 <UTIL_TIMER_Start+0x58>
        TimerInsertTimer( TimerObject);
 8011fb4:	4620      	mov	r0, r4
 8011fb6:	f7ff ffa3 	bl	8011f00 <TimerInsertTimer>
 8011fba:	e7f1      	b.n	8011fa0 <UTIL_TIMER_Start+0x58>
    ret =  UTIL_TIMER_INVALID_PARAM;
 8011fbc:	2501      	movs	r5, #1
}
 8011fbe:	4628      	mov	r0, r5
 8011fc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret =  UTIL_TIMER_INVALID_PARAM;
 8011fc2:	2501      	movs	r5, #1
 8011fc4:	e7fb      	b.n	8011fbe <UTIL_TIMER_Start+0x76>
 8011fc6:	2501      	movs	r5, #1
 8011fc8:	e7f9      	b.n	8011fbe <UTIL_TIMER_Start+0x76>
 8011fca:	bf00      	nop
 8011fcc:	08016f4c 	.word	0x08016f4c
 8011fd0:	200019d0 	.word	0x200019d0

08011fd4 <UTIL_TIMER_SetPeriod>:
  if(NULL == TimerObject)
 8011fd4:	b198      	cbz	r0, 8011ffe <UTIL_TIMER_SetPeriod+0x2a>
{
 8011fd6:	b510      	push	{r4, lr}
 8011fd8:	4604      	mov	r4, r0
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 8011fda:	4b0a      	ldr	r3, [pc, #40]	; (8012004 <UTIL_TIMER_SetPeriod+0x30>)
 8011fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011fde:	4608      	mov	r0, r1
 8011fe0:	4798      	blx	r3
 8011fe2:	6060      	str	r0, [r4, #4]
    if(TimerExists(TimerObject))
 8011fe4:	4620      	mov	r0, r4
 8011fe6:	f7ff ff2f 	bl	8011e48 <TimerExists>
 8011fea:	b908      	cbnz	r0, 8011ff0 <UTIL_TIMER_SetPeriod+0x1c>
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 8011fec:	2000      	movs	r0, #0
}
 8011fee:	bd10      	pop	{r4, pc}
      (void)UTIL_TIMER_Stop(TimerObject);
 8011ff0:	4620      	mov	r0, r4
 8011ff2:	f7ff ff4f 	bl	8011e94 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 8011ff6:	4620      	mov	r0, r4
 8011ff8:	f7ff ffa6 	bl	8011f48 <UTIL_TIMER_Start>
 8011ffc:	e7f7      	b.n	8011fee <UTIL_TIMER_SetPeriod+0x1a>
	  ret = UTIL_TIMER_INVALID_PARAM;
 8011ffe:	2001      	movs	r0, #1
}
 8012000:	4770      	bx	lr
 8012002:	bf00      	nop
 8012004:	08016f4c 	.word	0x08016f4c

08012008 <UTIL_TIMER_IRQ_Handler>:
{
 8012008:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801200a:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801200e:	b672      	cpsid	i
  old  =  UTIL_TimerDriver.GetTimerContext( );
 8012010:	4c1e      	ldr	r4, [pc, #120]	; (801208c <UTIL_TIMER_IRQ_Handler+0x84>)
 8012012:	6963      	ldr	r3, [r4, #20]
 8012014:	4798      	blx	r3
 8012016:	4606      	mov	r6, r0
  now  =  UTIL_TimerDriver.SetTimerContext( );
 8012018:	6923      	ldr	r3, [r4, #16]
 801201a:	4798      	blx	r3
  DeltaContext = now  - old; /*intentional wrap around */
 801201c:	1b84      	subs	r4, r0, r6
  if ( TimerListHead != NULL )
 801201e:	4b1c      	ldr	r3, [pc, #112]	; (8012090 <UTIL_TIMER_IRQ_Handler+0x88>)
 8012020:	681b      	ldr	r3, [r3, #0]
 8012022:	b923      	cbnz	r3, 801202e <UTIL_TIMER_IRQ_Handler+0x26>
 8012024:	e018      	b.n	8012058 <UTIL_TIMER_IRQ_Handler+0x50>
        cur->Timestamp = 0;
 8012026:	2200      	movs	r2, #0
 8012028:	601a      	str	r2, [r3, #0]
      cur = cur->Next;
 801202a:	695b      	ldr	r3, [r3, #20]
    } while(cur != NULL);
 801202c:	b1a3      	cbz	r3, 8012058 <UTIL_TIMER_IRQ_Handler+0x50>
      if (cur->Timestamp > DeltaContext)
 801202e:	681a      	ldr	r2, [r3, #0]
 8012030:	42a2      	cmp	r2, r4
 8012032:	d9f8      	bls.n	8012026 <UTIL_TIMER_IRQ_Handler+0x1e>
        cur->Timestamp -= DeltaContext;
 8012034:	1a31      	subs	r1, r6, r0
 8012036:	440a      	add	r2, r1
 8012038:	601a      	str	r2, [r3, #0]
 801203a:	e7f6      	b.n	801202a <UTIL_TIMER_IRQ_Handler+0x22>
      cur = TimerListHead;
 801203c:	4b14      	ldr	r3, [pc, #80]	; (8012090 <UTIL_TIMER_IRQ_Handler+0x88>)
 801203e:	681c      	ldr	r4, [r3, #0]
      TimerListHead = TimerListHead->Next;
 8012040:	6962      	ldr	r2, [r4, #20]
 8012042:	601a      	str	r2, [r3, #0]
      cur->IsPending = 0;
 8012044:	2300      	movs	r3, #0
 8012046:	7223      	strb	r3, [r4, #8]
      cur->IsRunning = 0;
 8012048:	7263      	strb	r3, [r4, #9]
      cur->Callback(cur->argument);
 801204a:	68e3      	ldr	r3, [r4, #12]
 801204c:	6920      	ldr	r0, [r4, #16]
 801204e:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 8012050:	8963      	ldrh	r3, [r4, #10]
 8012052:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012056:	d012      	beq.n	801207e <UTIL_TIMER_IRQ_Handler+0x76>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 8012058:	4b0d      	ldr	r3, [pc, #52]	; (8012090 <UTIL_TIMER_IRQ_Handler+0x88>)
 801205a:	681b      	ldr	r3, [r3, #0]
 801205c:	b13b      	cbz	r3, 801206e <UTIL_TIMER_IRQ_Handler+0x66>
 801205e:	681c      	ldr	r4, [r3, #0]
 8012060:	2c00      	cmp	r4, #0
 8012062:	d0eb      	beq.n	801203c <UTIL_TIMER_IRQ_Handler+0x34>
 8012064:	4b09      	ldr	r3, [pc, #36]	; (801208c <UTIL_TIMER_IRQ_Handler+0x84>)
 8012066:	699b      	ldr	r3, [r3, #24]
 8012068:	4798      	blx	r3
 801206a:	4284      	cmp	r4, r0
 801206c:	d3e6      	bcc.n	801203c <UTIL_TIMER_IRQ_Handler+0x34>
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 801206e:	4b08      	ldr	r3, [pc, #32]	; (8012090 <UTIL_TIMER_IRQ_Handler+0x88>)
 8012070:	6818      	ldr	r0, [r3, #0]
 8012072:	b108      	cbz	r0, 8012078 <UTIL_TIMER_IRQ_Handler+0x70>
 8012074:	7a03      	ldrb	r3, [r0, #8]
 8012076:	b133      	cbz	r3, 8012086 <UTIL_TIMER_IRQ_Handler+0x7e>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012078:	f385 8810 	msr	PRIMASK, r5
}
 801207c:	bd70      	pop	{r4, r5, r6, pc}
        (void)UTIL_TIMER_Start(cur);
 801207e:	4620      	mov	r0, r4
 8012080:	f7ff ff62 	bl	8011f48 <UTIL_TIMER_Start>
 8012084:	e7e8      	b.n	8012058 <UTIL_TIMER_IRQ_Handler+0x50>
    TimerSetTimeout( TimerListHead );
 8012086:	f7ff feed 	bl	8011e64 <TimerSetTimeout>
 801208a:	e7f5      	b.n	8012078 <UTIL_TIMER_IRQ_Handler+0x70>
 801208c:	08016f4c 	.word	0x08016f4c
 8012090:	200019d0 	.word	0x200019d0

08012094 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 8012094:	4601      	mov	r1, r0
  int i = 0;
 8012096:	2000      	movs	r0, #0
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 8012098:	e008      	b.n	80120ac <ee_skip_atoi+0x18>
 801209a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801209e:	1c53      	adds	r3, r2, #1
 80120a0:	600b      	str	r3, [r1, #0]
 80120a2:	7813      	ldrb	r3, [r2, #0]
 80120a4:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80120a8:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 80120ac:	680a      	ldr	r2, [r1, #0]
 80120ae:	7813      	ldrb	r3, [r2, #0]
 80120b0:	3b30      	subs	r3, #48	; 0x30
 80120b2:	b2db      	uxtb	r3, r3
 80120b4:	2b09      	cmp	r3, #9
 80120b6:	d9f0      	bls.n	801209a <ee_skip_atoi+0x6>
  return i;
}
 80120b8:	4770      	bx	lr
	...

080120bc <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 80120bc:	e92d 45f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, lr}
 80120c0:	b093      	sub	sp, #76	; 0x4c
 80120c2:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80120c4:	9e1c      	ldr	r6, [sp, #112]	; 0x70
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 80120c6:	f016 0f40 	tst.w	r6, #64	; 0x40
 80120ca:	d110      	bne.n	80120ee <ee_number+0x32>
  char *dig = lower_digits;
 80120cc:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 80121c8 <ee_number+0x10c>
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 80120d0:	1e9f      	subs	r7, r3, #2
 80120d2:	2f22      	cmp	r7, #34	; 0x22
 80120d4:	d875      	bhi.n	80121c2 <ee_number+0x106>
  
  c = (type & ZEROPAD) ? '0' : ' ';
 80120d6:	f016 0401 	ands.w	r4, r6, #1
 80120da:	d00b      	beq.n	80120f4 <ee_number+0x38>
 80120dc:	f04f 0e30 	mov.w	lr, #48	; 0x30
  sign = 0;
  if (type & SIGN)
 80120e0:	f016 0f02 	tst.w	r6, #2
 80120e4:	d00f      	beq.n	8012106 <ee_number+0x4a>
  {
    if (num < 0)
 80120e6:	2a00      	cmp	r2, #0
 80120e8:	db07      	blt.n	80120fa <ee_number+0x3e>
  sign = 0;
 80120ea:	2700      	movs	r7, #0
 80120ec:	e00c      	b.n	8012108 <ee_number+0x4c>
  if (type & UPPERCASE)  dig = upper_digits;
 80120ee:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 80121cc <ee_number+0x110>
 80120f2:	e7ed      	b.n	80120d0 <ee_number+0x14>
  c = (type & ZEROPAD) ? '0' : ' ';
 80120f4:	f04f 0e20 	mov.w	lr, #32
 80120f8:	e7f2      	b.n	80120e0 <ee_number+0x24>
    {
      sign = '-';
      num = -num;
 80120fa:	4252      	negs	r2, r2
      size--;
 80120fc:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 80120fe:	3e01      	subs	r6, #1
 8012100:	961a      	str	r6, [sp, #104]	; 0x68
      sign = '-';
 8012102:	272d      	movs	r7, #45	; 0x2d
 8012104:	e000      	b.n	8012108 <ee_number+0x4c>
  sign = 0;
 8012106:	2700      	movs	r7, #0
  }
#endif
  
  i = 0;

  if (num == 0)
 8012108:	bb5a      	cbnz	r2, 8012162 <ee_number+0xa6>
    tmp[i++] = '0';
 801210a:	2330      	movs	r3, #48	; 0x30
 801210c:	f88d 3004 	strb.w	r3, [sp, #4]
 8012110:	f04f 0c01 	mov.w	ip, #1
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
      num = ((unsigned long) num) / (unsigned) base;
    }
  }

  if (i > precision) precision = i;
 8012114:	45ac      	cmp	ip, r5
 8012116:	dd00      	ble.n	801211a <ee_number+0x5e>
 8012118:	4665      	mov	r5, ip
  size -= precision;
 801211a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801211c:	1b5b      	subs	r3, r3, r5
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 801211e:	b31c      	cbz	r4, 8012168 <ee_number+0xac>
  if (sign) ASSIGN_STR(sign);
 8012120:	b11f      	cbz	r7, 801212a <ee_number+0x6e>
 8012122:	f800 7b01 	strb.w	r7, [r0], #1
 8012126:	3901      	subs	r1, #1
 8012128:	d007      	beq.n	801213a <ee_number+0x7e>
    }
  }
#endif
  
#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 801212a:	2b00      	cmp	r3, #0
 801212c:	f103 33ff 	add.w	r3, r3, #4294967295
 8012130:	dd24      	ble.n	801217c <ee_number+0xc0>
 8012132:	f800 eb01 	strb.w	lr, [r0], #1
 8012136:	3901      	subs	r1, #1
 8012138:	d1f7      	bne.n	801212a <ee_number+0x6e>
  while (i < precision--) ASSIGN_STR('0');
  while (i-- > 0) ASSIGN_STR(tmp[i]);
  while (size-- > 0) ASSIGN_STR(' ');

  return str;
}
 801213a:	b013      	add	sp, #76	; 0x4c
 801213c:	e8bd 85f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, pc}
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 8012140:	fbb2 f6f3 	udiv	r6, r2, r3
 8012144:	fb03 2216 	mls	r2, r3, r6, r2
 8012148:	f81a 8002 	ldrb.w	r8, [sl, r2]
 801214c:	f10c 0248 	add.w	r2, ip, #72	; 0x48
 8012150:	446a      	add	r2, sp
 8012152:	f802 8c44 	strb.w	r8, [r2, #-68]
      num = ((unsigned long) num) / (unsigned) base;
 8012156:	4632      	mov	r2, r6
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 8012158:	f10c 0c01 	add.w	ip, ip, #1
    while (num != 0)
 801215c:	2a00      	cmp	r2, #0
 801215e:	d1ef      	bne.n	8012140 <ee_number+0x84>
 8012160:	e7d8      	b.n	8012114 <ee_number+0x58>
  i = 0;
 8012162:	f04f 0c00 	mov.w	ip, #0
 8012166:	e7f9      	b.n	801215c <ee_number+0xa0>
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 8012168:	2b00      	cmp	r3, #0
 801216a:	f103 33ff 	add.w	r3, r3, #4294967295
 801216e:	ddd7      	ble.n	8012120 <ee_number+0x64>
 8012170:	2220      	movs	r2, #32
 8012172:	f800 2b01 	strb.w	r2, [r0], #1
 8012176:	3901      	subs	r1, #1
 8012178:	d1f6      	bne.n	8012168 <ee_number+0xac>
 801217a:	e7de      	b.n	801213a <ee_number+0x7e>
  while (i < precision--) ASSIGN_STR('0');
 801217c:	4565      	cmp	r5, ip
 801217e:	f105 35ff 	add.w	r5, r5, #4294967295
 8012182:	dd05      	ble.n	8012190 <ee_number+0xd4>
 8012184:	2230      	movs	r2, #48	; 0x30
 8012186:	f800 2b01 	strb.w	r2, [r0], #1
 801218a:	3901      	subs	r1, #1
 801218c:	d1f6      	bne.n	801217c <ee_number+0xc0>
 801218e:	e7d4      	b.n	801213a <ee_number+0x7e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 8012190:	4662      	mov	r2, ip
 8012192:	2a00      	cmp	r2, #0
 8012194:	f10c 3cff 	add.w	ip, ip, #4294967295
 8012198:	dd09      	ble.n	80121ae <ee_number+0xf2>
 801219a:	f10c 0248 	add.w	r2, ip, #72	; 0x48
 801219e:	446a      	add	r2, sp
 80121a0:	f812 2c44 	ldrb.w	r2, [r2, #-68]
 80121a4:	f800 2b01 	strb.w	r2, [r0], #1
 80121a8:	3901      	subs	r1, #1
 80121aa:	d1f1      	bne.n	8012190 <ee_number+0xd4>
 80121ac:	e7c5      	b.n	801213a <ee_number+0x7e>
  while (size-- > 0) ASSIGN_STR(' ');
 80121ae:	2b00      	cmp	r3, #0
 80121b0:	f103 33ff 	add.w	r3, r3, #4294967295
 80121b4:	ddc1      	ble.n	801213a <ee_number+0x7e>
 80121b6:	2220      	movs	r2, #32
 80121b8:	f800 2b01 	strb.w	r2, [r0], #1
 80121bc:	3901      	subs	r1, #1
 80121be:	d1f6      	bne.n	80121ae <ee_number+0xf2>
 80121c0:	e7bb      	b.n	801213a <ee_number+0x7e>
  if (base < 2 || base > 36) return 0;
 80121c2:	2000      	movs	r0, #0
 80121c4:	e7b9      	b.n	801213a <ee_number+0x7e>
 80121c6:	bf00      	nop
 80121c8:	08017c6c 	.word	0x08017c6c
 80121cc:	08017c94 	.word	0x08017c94

080121d0 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 80121d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80121d4:	b087      	sub	sp, #28
 80121d6:	9205      	str	r2, [sp, #20]
 80121d8:	9304      	str	r3, [sp, #16]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 80121da:	1e0f      	subs	r7, r1, #0
 80121dc:	f340 80b8 	ble.w	8012350 <tiny_vsnprintf_like+0x180>
 80121e0:	4606      	mov	r6, r0
  {
    return 0;
  }
  
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 80121e2:	4604      	mov	r4, r0
 80121e4:	e004      	b.n	80121f0 <tiny_vsnprintf_like+0x20>
  {
    CHECK_STR_SIZE(buf, str, size);
    
    if (*fmt != '%')
    {
      *str++ = *fmt;
 80121e6:	f804 2b01 	strb.w	r2, [r4], #1
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 80121ea:	9b05      	ldr	r3, [sp, #20]
 80121ec:	3301      	adds	r3, #1
 80121ee:	9305      	str	r3, [sp, #20]
 80121f0:	9905      	ldr	r1, [sp, #20]
 80121f2:	780a      	ldrb	r2, [r1, #0]
 80121f4:	b922      	cbnz	r2, 8012200 <tiny_vsnprintf_like+0x30>
 80121f6:	1ba3      	subs	r3, r4, r6
 80121f8:	1e78      	subs	r0, r7, #1
 80121fa:	4283      	cmp	r3, r0
 80121fc:	f2c0 80a2 	blt.w	8012344 <tiny_vsnprintf_like+0x174>
    CHECK_STR_SIZE(buf, str, size);
 8012200:	1ba3      	subs	r3, r4, r6
 8012202:	f107 38ff 	add.w	r8, r7, #4294967295
 8012206:	4543      	cmp	r3, r8
 8012208:	f280 809c 	bge.w	8012344 <tiny_vsnprintf_like+0x174>
    if (*fmt != '%')
 801220c:	2a25      	cmp	r2, #37	; 0x25
 801220e:	d1ea      	bne.n	80121e6 <tiny_vsnprintf_like+0x16>
                  
    // Process flags
    flags = 0;
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 8012210:	1c4b      	adds	r3, r1, #1
 8012212:	9305      	str	r3, [sp, #20]
    if (*fmt == '0')
 8012214:	784b      	ldrb	r3, [r1, #1]
 8012216:	2b30      	cmp	r3, #48	; 0x30
 8012218:	d020      	beq.n	801225c <tiny_vsnprintf_like+0x8c>
    flags = 0;
 801221a:	f04f 0900 	mov.w	r9, #0
    }
#endif
    
    // Get field width
    field_width = -1;
    if (is_digit(*fmt))
 801221e:	3b30      	subs	r3, #48	; 0x30
 8012220:	b2db      	uxtb	r3, r3
 8012222:	2b09      	cmp	r3, #9
 8012224:	d91d      	bls.n	8012262 <tiny_vsnprintf_like+0x92>
    field_width = -1;
 8012226:	f04f 35ff 	mov.w	r5, #4294967295
#endif
    
    // Default base
    base = 10;

    switch (*fmt)
 801222a:	9b05      	ldr	r3, [sp, #20]
 801222c:	781a      	ldrb	r2, [r3, #0]
 801222e:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
 8012232:	2b20      	cmp	r3, #32
 8012234:	d867      	bhi.n	8012306 <tiny_vsnprintf_like+0x136>
 8012236:	e8df f003 	tbb	[pc, r3]
 801223a:	664a      	.short	0x664a
 801223c:	66666666 	.word	0x66666666
 8012240:	66666666 	.word	0x66666666
 8012244:	66621e66 	.word	0x66621e66
 8012248:	62666666 	.word	0x62666666
 801224c:	66666666 	.word	0x66666666
 8012250:	66666666 	.word	0x66666666
 8012254:	19662866 	.word	0x19662866
 8012258:	6666      	.short	0x6666
 801225a:	7c          	.byte	0x7c
 801225b:	00          	.byte	0x00
      flags |= ZEROPAD;
 801225c:	f04f 0901 	mov.w	r9, #1
 8012260:	e7dd      	b.n	801221e <tiny_vsnprintf_like+0x4e>
      field_width = ee_skip_atoi(&fmt);
 8012262:	a805      	add	r0, sp, #20
 8012264:	f7ff ff16 	bl	8012094 <ee_skip_atoi>
 8012268:	4605      	mov	r5, r0
 801226a:	e7de      	b.n	801222a <tiny_vsnprintf_like+0x5a>
    switch (*fmt)
 801226c:	230a      	movs	r3, #10
 801226e:	e031      	b.n	80122d4 <tiny_vsnprintf_like+0x104>
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 8012270:	2320      	movs	r3, #32
 8012272:	f804 3b01 	strb.w	r3, [r4], #1
 8012276:	3d01      	subs	r5, #1
 8012278:	2d00      	cmp	r5, #0
 801227a:	dcf9      	bgt.n	8012270 <tiny_vsnprintf_like+0xa0>
        *str++ = (unsigned char) va_arg(args, int);
 801227c:	9b04      	ldr	r3, [sp, #16]
 801227e:	1d1a      	adds	r2, r3, #4
 8012280:	9204      	str	r2, [sp, #16]
 8012282:	781b      	ldrb	r3, [r3, #0]
 8012284:	f804 3b01 	strb.w	r3, [r4], #1
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 8012288:	e7af      	b.n	80121ea <tiny_vsnprintf_like+0x1a>

      case 's':
        s = va_arg(args, char *);
 801228a:	9b04      	ldr	r3, [sp, #16]
 801228c:	1d1a      	adds	r2, r3, #4
 801228e:	9204      	str	r2, [sp, #16]
 8012290:	f8d3 8000 	ldr.w	r8, [r3]
        if (!s) s = "<NULL>";
 8012294:	f1b8 0f00 	cmp.w	r8, #0
 8012298:	d003      	beq.n	80122a2 <tiny_vsnprintf_like+0xd2>
#ifdef TINY_PRINTF
        len = strlen(s);
 801229a:	4640      	mov	r0, r8
 801229c:	f7ed ffc0 	bl	8000220 <strlen>
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 80122a0:	e006      	b.n	80122b0 <tiny_vsnprintf_like+0xe0>
        if (!s) s = "<NULL>";
 80122a2:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8012354 <tiny_vsnprintf_like+0x184>
 80122a6:	e7f8      	b.n	801229a <tiny_vsnprintf_like+0xca>
          while (len < field_width--) *str++ = ' ';
 80122a8:	2220      	movs	r2, #32
 80122aa:	f804 2b01 	strb.w	r2, [r4], #1
 80122ae:	461d      	mov	r5, r3
 80122b0:	1e6b      	subs	r3, r5, #1
 80122b2:	4285      	cmp	r5, r0
 80122b4:	dcf8      	bgt.n	80122a8 <tiny_vsnprintf_like+0xd8>
        for (i = 0; i < len; ++i) *str++ = *s++;
 80122b6:	2200      	movs	r2, #0
 80122b8:	e006      	b.n	80122c8 <tiny_vsnprintf_like+0xf8>
 80122ba:	4643      	mov	r3, r8
 80122bc:	f813 1b01 	ldrb.w	r1, [r3], #1
 80122c0:	f804 1b01 	strb.w	r1, [r4], #1
 80122c4:	3201      	adds	r2, #1
 80122c6:	4698      	mov	r8, r3
 80122c8:	4282      	cmp	r2, r0
 80122ca:	dbf6      	blt.n	80122ba <tiny_vsnprintf_like+0xea>
 80122cc:	e78d      	b.n	80121ea <tiny_vsnprintf_like+0x1a>
        base = 8;
        break;
#endif
      
      case 'X':
        flags |= UPPERCASE;
 80122ce:	f049 0940 	orr.w	r9, r9, #64	; 0x40

      case 'x':
        base = 16;
 80122d2:	2310      	movs	r3, #16
        continue;
    }

    if (qualifier == 'l')
      num = va_arg(args, unsigned long);
    else if (flags & SIGN)
 80122d4:	f019 0f02 	tst.w	r9, #2
 80122d8:	d02f      	beq.n	801233a <tiny_vsnprintf_like+0x16a>
      num = va_arg(args, int);
 80122da:	9a04      	ldr	r2, [sp, #16]
 80122dc:	1d11      	adds	r1, r2, #4
 80122de:	9104      	str	r1, [sp, #16]
 80122e0:	6812      	ldr	r2, [r2, #0]
    else
      num = va_arg(args, unsigned int);

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 80122e2:	1ba1      	subs	r1, r4, r6
 80122e4:	f8cd 9008 	str.w	r9, [sp, #8]
 80122e8:	f04f 30ff 	mov.w	r0, #4294967295
 80122ec:	9001      	str	r0, [sp, #4]
 80122ee:	9500      	str	r5, [sp, #0]
 80122f0:	eba8 0101 	sub.w	r1, r8, r1
 80122f4:	4620      	mov	r0, r4
 80122f6:	f7ff fee1 	bl	80120bc <ee_number>
 80122fa:	4604      	mov	r4, r0
 80122fc:	e775      	b.n	80121ea <tiny_vsnprintf_like+0x1a>
        flags |= SIGN;
 80122fe:	f049 0902 	orr.w	r9, r9, #2
    base = 10;
 8012302:	230a      	movs	r3, #10
 8012304:	e7e6      	b.n	80122d4 <tiny_vsnprintf_like+0x104>
        if (*fmt != '%') *str++ = '%';
 8012306:	2a25      	cmp	r2, #37	; 0x25
 8012308:	d002      	beq.n	8012310 <tiny_vsnprintf_like+0x140>
 801230a:	2325      	movs	r3, #37	; 0x25
 801230c:	f804 3b01 	strb.w	r3, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 8012310:	1ba3      	subs	r3, r4, r6
 8012312:	4598      	cmp	r8, r3
 8012314:	dd0f      	ble.n	8012336 <tiny_vsnprintf_like+0x166>
        if (*fmt)
 8012316:	9b05      	ldr	r3, [sp, #20]
 8012318:	781a      	ldrb	r2, [r3, #0]
 801231a:	b13a      	cbz	r2, 801232c <tiny_vsnprintf_like+0x15c>
          *str++ = *fmt;
 801231c:	f804 2b01 	strb.w	r2, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 8012320:	1ba3      	subs	r3, r4, r6
 8012322:	4598      	cmp	r8, r3
 8012324:	f73f af61 	bgt.w	80121ea <tiny_vsnprintf_like+0x1a>
    base = 10;
 8012328:	230a      	movs	r3, #10
 801232a:	e7d3      	b.n	80122d4 <tiny_vsnprintf_like+0x104>
          --fmt;
 801232c:	3b01      	subs	r3, #1
 801232e:	9305      	str	r3, [sp, #20]
 8012330:	e7f6      	b.n	8012320 <tiny_vsnprintf_like+0x150>
        base = 16;
 8012332:	2310      	movs	r3, #16
 8012334:	e7ce      	b.n	80122d4 <tiny_vsnprintf_like+0x104>
    base = 10;
 8012336:	230a      	movs	r3, #10
 8012338:	e7cc      	b.n	80122d4 <tiny_vsnprintf_like+0x104>
      num = va_arg(args, unsigned int);
 801233a:	9a04      	ldr	r2, [sp, #16]
 801233c:	1d11      	adds	r1, r2, #4
 801233e:	9104      	str	r1, [sp, #16]
 8012340:	6812      	ldr	r2, [r2, #0]
 8012342:	e7ce      	b.n	80122e2 <tiny_vsnprintf_like+0x112>
  }

  *str = '\0';
 8012344:	2300      	movs	r3, #0
 8012346:	7023      	strb	r3, [r4, #0]
  return str - buf;
 8012348:	1ba0      	subs	r0, r4, r6
}
 801234a:	b007      	add	sp, #28
 801234c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return 0;
 8012350:	2000      	movs	r0, #0
 8012352:	e7fa      	b.n	801234a <tiny_vsnprintf_like+0x17a>
 8012354:	08017cbc 	.word	0x08017cbc

08012358 <gcvt>:
 8012358:	b5f0      	push	{r4, r5, r6, r7, lr}
 801235a:	461c      	mov	r4, r3
 801235c:	b085      	sub	sp, #20
 801235e:	2300      	movs	r3, #0
 8012360:	4615      	mov	r5, r2
 8012362:	2200      	movs	r2, #0
 8012364:	4606      	mov	r6, r0
 8012366:	460f      	mov	r7, r1
 8012368:	f7ee fb90 	bl	8000a8c <__aeabi_dcmplt>
 801236c:	4623      	mov	r3, r4
 801236e:	b118      	cbz	r0, 8012378 <gcvt+0x20>
 8012370:	222d      	movs	r2, #45	; 0x2d
 8012372:	f803 2b01 	strb.w	r2, [r3], #1
 8012376:	3d01      	subs	r5, #1
 8012378:	2267      	movs	r2, #103	; 0x67
 801237a:	2100      	movs	r1, #0
 801237c:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8012380:	e9cd 5300 	strd	r5, r3, [sp]
 8012384:	4905      	ldr	r1, [pc, #20]	; (801239c <gcvt+0x44>)
 8012386:	4632      	mov	r2, r6
 8012388:	6808      	ldr	r0, [r1, #0]
 801238a:	463b      	mov	r3, r7
 801238c:	f003 fb34 	bl	80159f8 <_gcvt>
 8012390:	2800      	cmp	r0, #0
 8012392:	bf14      	ite	ne
 8012394:	4620      	movne	r0, r4
 8012396:	2000      	moveq	r0, #0
 8012398:	b005      	add	sp, #20
 801239a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801239c:	20000138 	.word	0x20000138

080123a0 <__cvt>:
 80123a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80123a4:	b088      	sub	sp, #32
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	461f      	mov	r7, r3
 80123aa:	4614      	mov	r4, r2
 80123ac:	bfb8      	it	lt
 80123ae:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80123b2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80123b4:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80123b6:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80123ba:	bfb6      	itet	lt
 80123bc:	461f      	movlt	r7, r3
 80123be:	2300      	movge	r3, #0
 80123c0:	232d      	movlt	r3, #45	; 0x2d
 80123c2:	7013      	strb	r3, [r2, #0]
 80123c4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80123c6:	f023 0820 	bic.w	r8, r3, #32
 80123ca:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80123ce:	d005      	beq.n	80123dc <__cvt+0x3c>
 80123d0:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80123d4:	d100      	bne.n	80123d8 <__cvt+0x38>
 80123d6:	3501      	adds	r5, #1
 80123d8:	2302      	movs	r3, #2
 80123da:	e000      	b.n	80123de <__cvt+0x3e>
 80123dc:	2303      	movs	r3, #3
 80123de:	aa07      	add	r2, sp, #28
 80123e0:	9204      	str	r2, [sp, #16]
 80123e2:	aa06      	add	r2, sp, #24
 80123e4:	e9cd a202 	strd	sl, r2, [sp, #8]
 80123e8:	e9cd 3500 	strd	r3, r5, [sp]
 80123ec:	4622      	mov	r2, r4
 80123ee:	463b      	mov	r3, r7
 80123f0:	f001 f85a 	bl	80134a8 <_dtoa_r>
 80123f4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80123f8:	4606      	mov	r6, r0
 80123fa:	d102      	bne.n	8012402 <__cvt+0x62>
 80123fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80123fe:	07db      	lsls	r3, r3, #31
 8012400:	d522      	bpl.n	8012448 <__cvt+0xa8>
 8012402:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8012406:	eb06 0905 	add.w	r9, r6, r5
 801240a:	d110      	bne.n	801242e <__cvt+0x8e>
 801240c:	7833      	ldrb	r3, [r6, #0]
 801240e:	2b30      	cmp	r3, #48	; 0x30
 8012410:	d10a      	bne.n	8012428 <__cvt+0x88>
 8012412:	2200      	movs	r2, #0
 8012414:	2300      	movs	r3, #0
 8012416:	4620      	mov	r0, r4
 8012418:	4639      	mov	r1, r7
 801241a:	f7ee fb2d 	bl	8000a78 <__aeabi_dcmpeq>
 801241e:	b918      	cbnz	r0, 8012428 <__cvt+0x88>
 8012420:	f1c5 0501 	rsb	r5, r5, #1
 8012424:	f8ca 5000 	str.w	r5, [sl]
 8012428:	f8da 3000 	ldr.w	r3, [sl]
 801242c:	4499      	add	r9, r3
 801242e:	2200      	movs	r2, #0
 8012430:	2300      	movs	r3, #0
 8012432:	4620      	mov	r0, r4
 8012434:	4639      	mov	r1, r7
 8012436:	f7ee fb1f 	bl	8000a78 <__aeabi_dcmpeq>
 801243a:	b108      	cbz	r0, 8012440 <__cvt+0xa0>
 801243c:	f8cd 901c 	str.w	r9, [sp, #28]
 8012440:	2230      	movs	r2, #48	; 0x30
 8012442:	9b07      	ldr	r3, [sp, #28]
 8012444:	454b      	cmp	r3, r9
 8012446:	d307      	bcc.n	8012458 <__cvt+0xb8>
 8012448:	9b07      	ldr	r3, [sp, #28]
 801244a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801244c:	1b9b      	subs	r3, r3, r6
 801244e:	4630      	mov	r0, r6
 8012450:	6013      	str	r3, [r2, #0]
 8012452:	b008      	add	sp, #32
 8012454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012458:	1c59      	adds	r1, r3, #1
 801245a:	9107      	str	r1, [sp, #28]
 801245c:	701a      	strb	r2, [r3, #0]
 801245e:	e7f0      	b.n	8012442 <__cvt+0xa2>

08012460 <__exponent>:
 8012460:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012462:	4603      	mov	r3, r0
 8012464:	2900      	cmp	r1, #0
 8012466:	bfb8      	it	lt
 8012468:	4249      	neglt	r1, r1
 801246a:	f803 2b02 	strb.w	r2, [r3], #2
 801246e:	bfb4      	ite	lt
 8012470:	222d      	movlt	r2, #45	; 0x2d
 8012472:	222b      	movge	r2, #43	; 0x2b
 8012474:	2909      	cmp	r1, #9
 8012476:	7042      	strb	r2, [r0, #1]
 8012478:	dd2a      	ble.n	80124d0 <__exponent+0x70>
 801247a:	f10d 0207 	add.w	r2, sp, #7
 801247e:	4617      	mov	r7, r2
 8012480:	260a      	movs	r6, #10
 8012482:	4694      	mov	ip, r2
 8012484:	fb91 f5f6 	sdiv	r5, r1, r6
 8012488:	fb06 1415 	mls	r4, r6, r5, r1
 801248c:	3430      	adds	r4, #48	; 0x30
 801248e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8012492:	460c      	mov	r4, r1
 8012494:	2c63      	cmp	r4, #99	; 0x63
 8012496:	f102 32ff 	add.w	r2, r2, #4294967295
 801249a:	4629      	mov	r1, r5
 801249c:	dcf1      	bgt.n	8012482 <__exponent+0x22>
 801249e:	3130      	adds	r1, #48	; 0x30
 80124a0:	f1ac 0402 	sub.w	r4, ip, #2
 80124a4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80124a8:	1c41      	adds	r1, r0, #1
 80124aa:	4622      	mov	r2, r4
 80124ac:	42ba      	cmp	r2, r7
 80124ae:	d30a      	bcc.n	80124c6 <__exponent+0x66>
 80124b0:	f10d 0209 	add.w	r2, sp, #9
 80124b4:	eba2 020c 	sub.w	r2, r2, ip
 80124b8:	42bc      	cmp	r4, r7
 80124ba:	bf88      	it	hi
 80124bc:	2200      	movhi	r2, #0
 80124be:	4413      	add	r3, r2
 80124c0:	1a18      	subs	r0, r3, r0
 80124c2:	b003      	add	sp, #12
 80124c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80124c6:	f812 5b01 	ldrb.w	r5, [r2], #1
 80124ca:	f801 5f01 	strb.w	r5, [r1, #1]!
 80124ce:	e7ed      	b.n	80124ac <__exponent+0x4c>
 80124d0:	2330      	movs	r3, #48	; 0x30
 80124d2:	3130      	adds	r1, #48	; 0x30
 80124d4:	7083      	strb	r3, [r0, #2]
 80124d6:	70c1      	strb	r1, [r0, #3]
 80124d8:	1d03      	adds	r3, r0, #4
 80124da:	e7f1      	b.n	80124c0 <__exponent+0x60>

080124dc <_printf_float>:
 80124dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124e0:	b091      	sub	sp, #68	; 0x44
 80124e2:	460c      	mov	r4, r1
 80124e4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80124e8:	4616      	mov	r6, r2
 80124ea:	461f      	mov	r7, r3
 80124ec:	4605      	mov	r5, r0
 80124ee:	f000 fed9 	bl	80132a4 <_localeconv_r>
 80124f2:	6803      	ldr	r3, [r0, #0]
 80124f4:	9309      	str	r3, [sp, #36]	; 0x24
 80124f6:	4618      	mov	r0, r3
 80124f8:	f7ed fe92 	bl	8000220 <strlen>
 80124fc:	2300      	movs	r3, #0
 80124fe:	930e      	str	r3, [sp, #56]	; 0x38
 8012500:	f8d8 3000 	ldr.w	r3, [r8]
 8012504:	900a      	str	r0, [sp, #40]	; 0x28
 8012506:	3307      	adds	r3, #7
 8012508:	f023 0307 	bic.w	r3, r3, #7
 801250c:	f103 0208 	add.w	r2, r3, #8
 8012510:	f894 9018 	ldrb.w	r9, [r4, #24]
 8012514:	f8d4 b000 	ldr.w	fp, [r4]
 8012518:	f8c8 2000 	str.w	r2, [r8]
 801251c:	e9d3 a800 	ldrd	sl, r8, [r3]
 8012520:	4652      	mov	r2, sl
 8012522:	4643      	mov	r3, r8
 8012524:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8012528:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 801252c:	930b      	str	r3, [sp, #44]	; 0x2c
 801252e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012530:	4b9c      	ldr	r3, [pc, #624]	; (80127a4 <_printf_float+0x2c8>)
 8012532:	f04f 32ff 	mov.w	r2, #4294967295
 8012536:	4650      	mov	r0, sl
 8012538:	f7ee fad0 	bl	8000adc <__aeabi_dcmpun>
 801253c:	bb70      	cbnz	r0, 801259c <_printf_float+0xc0>
 801253e:	4b99      	ldr	r3, [pc, #612]	; (80127a4 <_printf_float+0x2c8>)
 8012540:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012542:	f04f 32ff 	mov.w	r2, #4294967295
 8012546:	4650      	mov	r0, sl
 8012548:	f7ee faaa 	bl	8000aa0 <__aeabi_dcmple>
 801254c:	bb30      	cbnz	r0, 801259c <_printf_float+0xc0>
 801254e:	2200      	movs	r2, #0
 8012550:	2300      	movs	r3, #0
 8012552:	4650      	mov	r0, sl
 8012554:	4641      	mov	r1, r8
 8012556:	f7ee fa99 	bl	8000a8c <__aeabi_dcmplt>
 801255a:	b110      	cbz	r0, 8012562 <_printf_float+0x86>
 801255c:	232d      	movs	r3, #45	; 0x2d
 801255e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012562:	4a91      	ldr	r2, [pc, #580]	; (80127a8 <_printf_float+0x2cc>)
 8012564:	4b91      	ldr	r3, [pc, #580]	; (80127ac <_printf_float+0x2d0>)
 8012566:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 801256a:	bf94      	ite	ls
 801256c:	4690      	movls	r8, r2
 801256e:	4698      	movhi	r8, r3
 8012570:	2303      	movs	r3, #3
 8012572:	6123      	str	r3, [r4, #16]
 8012574:	f02b 0304 	bic.w	r3, fp, #4
 8012578:	6023      	str	r3, [r4, #0]
 801257a:	f04f 0a00 	mov.w	sl, #0
 801257e:	9700      	str	r7, [sp, #0]
 8012580:	4633      	mov	r3, r6
 8012582:	aa0f      	add	r2, sp, #60	; 0x3c
 8012584:	4621      	mov	r1, r4
 8012586:	4628      	mov	r0, r5
 8012588:	f000 f9d4 	bl	8012934 <_printf_common>
 801258c:	3001      	adds	r0, #1
 801258e:	f040 808f 	bne.w	80126b0 <_printf_float+0x1d4>
 8012592:	f04f 30ff 	mov.w	r0, #4294967295
 8012596:	b011      	add	sp, #68	; 0x44
 8012598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801259c:	4652      	mov	r2, sl
 801259e:	4643      	mov	r3, r8
 80125a0:	4650      	mov	r0, sl
 80125a2:	4641      	mov	r1, r8
 80125a4:	f7ee fa9a 	bl	8000adc <__aeabi_dcmpun>
 80125a8:	b140      	cbz	r0, 80125bc <_printf_float+0xe0>
 80125aa:	f1b8 0f00 	cmp.w	r8, #0
 80125ae:	bfbc      	itt	lt
 80125b0:	232d      	movlt	r3, #45	; 0x2d
 80125b2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80125b6:	4a7e      	ldr	r2, [pc, #504]	; (80127b0 <_printf_float+0x2d4>)
 80125b8:	4b7e      	ldr	r3, [pc, #504]	; (80127b4 <_printf_float+0x2d8>)
 80125ba:	e7d4      	b.n	8012566 <_printf_float+0x8a>
 80125bc:	6863      	ldr	r3, [r4, #4]
 80125be:	1c5a      	adds	r2, r3, #1
 80125c0:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80125c4:	d142      	bne.n	801264c <_printf_float+0x170>
 80125c6:	2306      	movs	r3, #6
 80125c8:	6063      	str	r3, [r4, #4]
 80125ca:	2200      	movs	r2, #0
 80125cc:	9206      	str	r2, [sp, #24]
 80125ce:	aa0e      	add	r2, sp, #56	; 0x38
 80125d0:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80125d4:	aa0d      	add	r2, sp, #52	; 0x34
 80125d6:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80125da:	9203      	str	r2, [sp, #12]
 80125dc:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80125e0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80125e4:	6023      	str	r3, [r4, #0]
 80125e6:	6863      	ldr	r3, [r4, #4]
 80125e8:	9300      	str	r3, [sp, #0]
 80125ea:	4652      	mov	r2, sl
 80125ec:	4643      	mov	r3, r8
 80125ee:	4628      	mov	r0, r5
 80125f0:	910b      	str	r1, [sp, #44]	; 0x2c
 80125f2:	f7ff fed5 	bl	80123a0 <__cvt>
 80125f6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80125f8:	2947      	cmp	r1, #71	; 0x47
 80125fa:	4680      	mov	r8, r0
 80125fc:	990d      	ldr	r1, [sp, #52]	; 0x34
 80125fe:	d108      	bne.n	8012612 <_printf_float+0x136>
 8012600:	1cc8      	adds	r0, r1, #3
 8012602:	db02      	blt.n	801260a <_printf_float+0x12e>
 8012604:	6863      	ldr	r3, [r4, #4]
 8012606:	4299      	cmp	r1, r3
 8012608:	dd40      	ble.n	801268c <_printf_float+0x1b0>
 801260a:	f1a9 0902 	sub.w	r9, r9, #2
 801260e:	fa5f f989 	uxtb.w	r9, r9
 8012612:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8012616:	d81f      	bhi.n	8012658 <_printf_float+0x17c>
 8012618:	3901      	subs	r1, #1
 801261a:	464a      	mov	r2, r9
 801261c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8012620:	910d      	str	r1, [sp, #52]	; 0x34
 8012622:	f7ff ff1d 	bl	8012460 <__exponent>
 8012626:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012628:	1813      	adds	r3, r2, r0
 801262a:	2a01      	cmp	r2, #1
 801262c:	4682      	mov	sl, r0
 801262e:	6123      	str	r3, [r4, #16]
 8012630:	dc02      	bgt.n	8012638 <_printf_float+0x15c>
 8012632:	6822      	ldr	r2, [r4, #0]
 8012634:	07d2      	lsls	r2, r2, #31
 8012636:	d501      	bpl.n	801263c <_printf_float+0x160>
 8012638:	3301      	adds	r3, #1
 801263a:	6123      	str	r3, [r4, #16]
 801263c:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8012640:	2b00      	cmp	r3, #0
 8012642:	d09c      	beq.n	801257e <_printf_float+0xa2>
 8012644:	232d      	movs	r3, #45	; 0x2d
 8012646:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801264a:	e798      	b.n	801257e <_printf_float+0xa2>
 801264c:	2947      	cmp	r1, #71	; 0x47
 801264e:	d1bc      	bne.n	80125ca <_printf_float+0xee>
 8012650:	2b00      	cmp	r3, #0
 8012652:	d1ba      	bne.n	80125ca <_printf_float+0xee>
 8012654:	2301      	movs	r3, #1
 8012656:	e7b7      	b.n	80125c8 <_printf_float+0xec>
 8012658:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 801265c:	d118      	bne.n	8012690 <_printf_float+0x1b4>
 801265e:	2900      	cmp	r1, #0
 8012660:	6863      	ldr	r3, [r4, #4]
 8012662:	dd0b      	ble.n	801267c <_printf_float+0x1a0>
 8012664:	6121      	str	r1, [r4, #16]
 8012666:	b913      	cbnz	r3, 801266e <_printf_float+0x192>
 8012668:	6822      	ldr	r2, [r4, #0]
 801266a:	07d0      	lsls	r0, r2, #31
 801266c:	d502      	bpl.n	8012674 <_printf_float+0x198>
 801266e:	3301      	adds	r3, #1
 8012670:	440b      	add	r3, r1
 8012672:	6123      	str	r3, [r4, #16]
 8012674:	65a1      	str	r1, [r4, #88]	; 0x58
 8012676:	f04f 0a00 	mov.w	sl, #0
 801267a:	e7df      	b.n	801263c <_printf_float+0x160>
 801267c:	b913      	cbnz	r3, 8012684 <_printf_float+0x1a8>
 801267e:	6822      	ldr	r2, [r4, #0]
 8012680:	07d2      	lsls	r2, r2, #31
 8012682:	d501      	bpl.n	8012688 <_printf_float+0x1ac>
 8012684:	3302      	adds	r3, #2
 8012686:	e7f4      	b.n	8012672 <_printf_float+0x196>
 8012688:	2301      	movs	r3, #1
 801268a:	e7f2      	b.n	8012672 <_printf_float+0x196>
 801268c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8012690:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012692:	4299      	cmp	r1, r3
 8012694:	db05      	blt.n	80126a2 <_printf_float+0x1c6>
 8012696:	6823      	ldr	r3, [r4, #0]
 8012698:	6121      	str	r1, [r4, #16]
 801269a:	07d8      	lsls	r0, r3, #31
 801269c:	d5ea      	bpl.n	8012674 <_printf_float+0x198>
 801269e:	1c4b      	adds	r3, r1, #1
 80126a0:	e7e7      	b.n	8012672 <_printf_float+0x196>
 80126a2:	2900      	cmp	r1, #0
 80126a4:	bfd4      	ite	le
 80126a6:	f1c1 0202 	rsble	r2, r1, #2
 80126aa:	2201      	movgt	r2, #1
 80126ac:	4413      	add	r3, r2
 80126ae:	e7e0      	b.n	8012672 <_printf_float+0x196>
 80126b0:	6823      	ldr	r3, [r4, #0]
 80126b2:	055a      	lsls	r2, r3, #21
 80126b4:	d407      	bmi.n	80126c6 <_printf_float+0x1ea>
 80126b6:	6923      	ldr	r3, [r4, #16]
 80126b8:	4642      	mov	r2, r8
 80126ba:	4631      	mov	r1, r6
 80126bc:	4628      	mov	r0, r5
 80126be:	47b8      	blx	r7
 80126c0:	3001      	adds	r0, #1
 80126c2:	d12b      	bne.n	801271c <_printf_float+0x240>
 80126c4:	e765      	b.n	8012592 <_printf_float+0xb6>
 80126c6:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80126ca:	f240 80dc 	bls.w	8012886 <_printf_float+0x3aa>
 80126ce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80126d2:	2200      	movs	r2, #0
 80126d4:	2300      	movs	r3, #0
 80126d6:	f7ee f9cf 	bl	8000a78 <__aeabi_dcmpeq>
 80126da:	2800      	cmp	r0, #0
 80126dc:	d033      	beq.n	8012746 <_printf_float+0x26a>
 80126de:	4a36      	ldr	r2, [pc, #216]	; (80127b8 <_printf_float+0x2dc>)
 80126e0:	2301      	movs	r3, #1
 80126e2:	4631      	mov	r1, r6
 80126e4:	4628      	mov	r0, r5
 80126e6:	47b8      	blx	r7
 80126e8:	3001      	adds	r0, #1
 80126ea:	f43f af52 	beq.w	8012592 <_printf_float+0xb6>
 80126ee:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80126f2:	429a      	cmp	r2, r3
 80126f4:	db02      	blt.n	80126fc <_printf_float+0x220>
 80126f6:	6823      	ldr	r3, [r4, #0]
 80126f8:	07d8      	lsls	r0, r3, #31
 80126fa:	d50f      	bpl.n	801271c <_printf_float+0x240>
 80126fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012700:	4631      	mov	r1, r6
 8012702:	4628      	mov	r0, r5
 8012704:	47b8      	blx	r7
 8012706:	3001      	adds	r0, #1
 8012708:	f43f af43 	beq.w	8012592 <_printf_float+0xb6>
 801270c:	f04f 0800 	mov.w	r8, #0
 8012710:	f104 091a 	add.w	r9, r4, #26
 8012714:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012716:	3b01      	subs	r3, #1
 8012718:	4543      	cmp	r3, r8
 801271a:	dc09      	bgt.n	8012730 <_printf_float+0x254>
 801271c:	6823      	ldr	r3, [r4, #0]
 801271e:	079b      	lsls	r3, r3, #30
 8012720:	f100 8103 	bmi.w	801292a <_printf_float+0x44e>
 8012724:	68e0      	ldr	r0, [r4, #12]
 8012726:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012728:	4298      	cmp	r0, r3
 801272a:	bfb8      	it	lt
 801272c:	4618      	movlt	r0, r3
 801272e:	e732      	b.n	8012596 <_printf_float+0xba>
 8012730:	2301      	movs	r3, #1
 8012732:	464a      	mov	r2, r9
 8012734:	4631      	mov	r1, r6
 8012736:	4628      	mov	r0, r5
 8012738:	47b8      	blx	r7
 801273a:	3001      	adds	r0, #1
 801273c:	f43f af29 	beq.w	8012592 <_printf_float+0xb6>
 8012740:	f108 0801 	add.w	r8, r8, #1
 8012744:	e7e6      	b.n	8012714 <_printf_float+0x238>
 8012746:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012748:	2b00      	cmp	r3, #0
 801274a:	dc37      	bgt.n	80127bc <_printf_float+0x2e0>
 801274c:	4a1a      	ldr	r2, [pc, #104]	; (80127b8 <_printf_float+0x2dc>)
 801274e:	2301      	movs	r3, #1
 8012750:	4631      	mov	r1, r6
 8012752:	4628      	mov	r0, r5
 8012754:	47b8      	blx	r7
 8012756:	3001      	adds	r0, #1
 8012758:	f43f af1b 	beq.w	8012592 <_printf_float+0xb6>
 801275c:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8012760:	4313      	orrs	r3, r2
 8012762:	d102      	bne.n	801276a <_printf_float+0x28e>
 8012764:	6823      	ldr	r3, [r4, #0]
 8012766:	07d9      	lsls	r1, r3, #31
 8012768:	d5d8      	bpl.n	801271c <_printf_float+0x240>
 801276a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801276e:	4631      	mov	r1, r6
 8012770:	4628      	mov	r0, r5
 8012772:	47b8      	blx	r7
 8012774:	3001      	adds	r0, #1
 8012776:	f43f af0c 	beq.w	8012592 <_printf_float+0xb6>
 801277a:	f04f 0900 	mov.w	r9, #0
 801277e:	f104 0a1a 	add.w	sl, r4, #26
 8012782:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012784:	425b      	negs	r3, r3
 8012786:	454b      	cmp	r3, r9
 8012788:	dc01      	bgt.n	801278e <_printf_float+0x2b2>
 801278a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801278c:	e794      	b.n	80126b8 <_printf_float+0x1dc>
 801278e:	2301      	movs	r3, #1
 8012790:	4652      	mov	r2, sl
 8012792:	4631      	mov	r1, r6
 8012794:	4628      	mov	r0, r5
 8012796:	47b8      	blx	r7
 8012798:	3001      	adds	r0, #1
 801279a:	f43f aefa 	beq.w	8012592 <_printf_float+0xb6>
 801279e:	f109 0901 	add.w	r9, r9, #1
 80127a2:	e7ee      	b.n	8012782 <_printf_float+0x2a6>
 80127a4:	7fefffff 	.word	0x7fefffff
 80127a8:	08017cc3 	.word	0x08017cc3
 80127ac:	08017cc7 	.word	0x08017cc7
 80127b0:	08017ccb 	.word	0x08017ccb
 80127b4:	08017ccf 	.word	0x08017ccf
 80127b8:	08017cd3 	.word	0x08017cd3
 80127bc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80127be:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80127c0:	429a      	cmp	r2, r3
 80127c2:	bfa8      	it	ge
 80127c4:	461a      	movge	r2, r3
 80127c6:	2a00      	cmp	r2, #0
 80127c8:	4691      	mov	r9, r2
 80127ca:	dc37      	bgt.n	801283c <_printf_float+0x360>
 80127cc:	f04f 0b00 	mov.w	fp, #0
 80127d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80127d4:	f104 021a 	add.w	r2, r4, #26
 80127d8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80127dc:	ebaa 0309 	sub.w	r3, sl, r9
 80127e0:	455b      	cmp	r3, fp
 80127e2:	dc33      	bgt.n	801284c <_printf_float+0x370>
 80127e4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80127e8:	429a      	cmp	r2, r3
 80127ea:	db3b      	blt.n	8012864 <_printf_float+0x388>
 80127ec:	6823      	ldr	r3, [r4, #0]
 80127ee:	07da      	lsls	r2, r3, #31
 80127f0:	d438      	bmi.n	8012864 <_printf_float+0x388>
 80127f2:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80127f6:	eba2 0903 	sub.w	r9, r2, r3
 80127fa:	eba2 020a 	sub.w	r2, r2, sl
 80127fe:	4591      	cmp	r9, r2
 8012800:	bfa8      	it	ge
 8012802:	4691      	movge	r9, r2
 8012804:	f1b9 0f00 	cmp.w	r9, #0
 8012808:	dc34      	bgt.n	8012874 <_printf_float+0x398>
 801280a:	f04f 0800 	mov.w	r8, #0
 801280e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012812:	f104 0a1a 	add.w	sl, r4, #26
 8012816:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 801281a:	1a9b      	subs	r3, r3, r2
 801281c:	eba3 0309 	sub.w	r3, r3, r9
 8012820:	4543      	cmp	r3, r8
 8012822:	f77f af7b 	ble.w	801271c <_printf_float+0x240>
 8012826:	2301      	movs	r3, #1
 8012828:	4652      	mov	r2, sl
 801282a:	4631      	mov	r1, r6
 801282c:	4628      	mov	r0, r5
 801282e:	47b8      	blx	r7
 8012830:	3001      	adds	r0, #1
 8012832:	f43f aeae 	beq.w	8012592 <_printf_float+0xb6>
 8012836:	f108 0801 	add.w	r8, r8, #1
 801283a:	e7ec      	b.n	8012816 <_printf_float+0x33a>
 801283c:	4613      	mov	r3, r2
 801283e:	4631      	mov	r1, r6
 8012840:	4642      	mov	r2, r8
 8012842:	4628      	mov	r0, r5
 8012844:	47b8      	blx	r7
 8012846:	3001      	adds	r0, #1
 8012848:	d1c0      	bne.n	80127cc <_printf_float+0x2f0>
 801284a:	e6a2      	b.n	8012592 <_printf_float+0xb6>
 801284c:	2301      	movs	r3, #1
 801284e:	4631      	mov	r1, r6
 8012850:	4628      	mov	r0, r5
 8012852:	920b      	str	r2, [sp, #44]	; 0x2c
 8012854:	47b8      	blx	r7
 8012856:	3001      	adds	r0, #1
 8012858:	f43f ae9b 	beq.w	8012592 <_printf_float+0xb6>
 801285c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801285e:	f10b 0b01 	add.w	fp, fp, #1
 8012862:	e7b9      	b.n	80127d8 <_printf_float+0x2fc>
 8012864:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012868:	4631      	mov	r1, r6
 801286a:	4628      	mov	r0, r5
 801286c:	47b8      	blx	r7
 801286e:	3001      	adds	r0, #1
 8012870:	d1bf      	bne.n	80127f2 <_printf_float+0x316>
 8012872:	e68e      	b.n	8012592 <_printf_float+0xb6>
 8012874:	464b      	mov	r3, r9
 8012876:	eb08 020a 	add.w	r2, r8, sl
 801287a:	4631      	mov	r1, r6
 801287c:	4628      	mov	r0, r5
 801287e:	47b8      	blx	r7
 8012880:	3001      	adds	r0, #1
 8012882:	d1c2      	bne.n	801280a <_printf_float+0x32e>
 8012884:	e685      	b.n	8012592 <_printf_float+0xb6>
 8012886:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012888:	2a01      	cmp	r2, #1
 801288a:	dc01      	bgt.n	8012890 <_printf_float+0x3b4>
 801288c:	07db      	lsls	r3, r3, #31
 801288e:	d539      	bpl.n	8012904 <_printf_float+0x428>
 8012890:	2301      	movs	r3, #1
 8012892:	4642      	mov	r2, r8
 8012894:	4631      	mov	r1, r6
 8012896:	4628      	mov	r0, r5
 8012898:	47b8      	blx	r7
 801289a:	3001      	adds	r0, #1
 801289c:	f43f ae79 	beq.w	8012592 <_printf_float+0xb6>
 80128a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80128a4:	4631      	mov	r1, r6
 80128a6:	4628      	mov	r0, r5
 80128a8:	47b8      	blx	r7
 80128aa:	3001      	adds	r0, #1
 80128ac:	f43f ae71 	beq.w	8012592 <_printf_float+0xb6>
 80128b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80128b4:	2200      	movs	r2, #0
 80128b6:	2300      	movs	r3, #0
 80128b8:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 80128bc:	f7ee f8dc 	bl	8000a78 <__aeabi_dcmpeq>
 80128c0:	b9d8      	cbnz	r0, 80128fa <_printf_float+0x41e>
 80128c2:	f109 33ff 	add.w	r3, r9, #4294967295
 80128c6:	f108 0201 	add.w	r2, r8, #1
 80128ca:	4631      	mov	r1, r6
 80128cc:	4628      	mov	r0, r5
 80128ce:	47b8      	blx	r7
 80128d0:	3001      	adds	r0, #1
 80128d2:	d10e      	bne.n	80128f2 <_printf_float+0x416>
 80128d4:	e65d      	b.n	8012592 <_printf_float+0xb6>
 80128d6:	2301      	movs	r3, #1
 80128d8:	464a      	mov	r2, r9
 80128da:	4631      	mov	r1, r6
 80128dc:	4628      	mov	r0, r5
 80128de:	47b8      	blx	r7
 80128e0:	3001      	adds	r0, #1
 80128e2:	f43f ae56 	beq.w	8012592 <_printf_float+0xb6>
 80128e6:	f108 0801 	add.w	r8, r8, #1
 80128ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80128ec:	3b01      	subs	r3, #1
 80128ee:	4543      	cmp	r3, r8
 80128f0:	dcf1      	bgt.n	80128d6 <_printf_float+0x3fa>
 80128f2:	4653      	mov	r3, sl
 80128f4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80128f8:	e6df      	b.n	80126ba <_printf_float+0x1de>
 80128fa:	f04f 0800 	mov.w	r8, #0
 80128fe:	f104 091a 	add.w	r9, r4, #26
 8012902:	e7f2      	b.n	80128ea <_printf_float+0x40e>
 8012904:	2301      	movs	r3, #1
 8012906:	4642      	mov	r2, r8
 8012908:	e7df      	b.n	80128ca <_printf_float+0x3ee>
 801290a:	2301      	movs	r3, #1
 801290c:	464a      	mov	r2, r9
 801290e:	4631      	mov	r1, r6
 8012910:	4628      	mov	r0, r5
 8012912:	47b8      	blx	r7
 8012914:	3001      	adds	r0, #1
 8012916:	f43f ae3c 	beq.w	8012592 <_printf_float+0xb6>
 801291a:	f108 0801 	add.w	r8, r8, #1
 801291e:	68e3      	ldr	r3, [r4, #12]
 8012920:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8012922:	1a5b      	subs	r3, r3, r1
 8012924:	4543      	cmp	r3, r8
 8012926:	dcf0      	bgt.n	801290a <_printf_float+0x42e>
 8012928:	e6fc      	b.n	8012724 <_printf_float+0x248>
 801292a:	f04f 0800 	mov.w	r8, #0
 801292e:	f104 0919 	add.w	r9, r4, #25
 8012932:	e7f4      	b.n	801291e <_printf_float+0x442>

08012934 <_printf_common>:
 8012934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012938:	4616      	mov	r6, r2
 801293a:	4699      	mov	r9, r3
 801293c:	688a      	ldr	r2, [r1, #8]
 801293e:	690b      	ldr	r3, [r1, #16]
 8012940:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012944:	4293      	cmp	r3, r2
 8012946:	bfb8      	it	lt
 8012948:	4613      	movlt	r3, r2
 801294a:	6033      	str	r3, [r6, #0]
 801294c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012950:	4607      	mov	r7, r0
 8012952:	460c      	mov	r4, r1
 8012954:	b10a      	cbz	r2, 801295a <_printf_common+0x26>
 8012956:	3301      	adds	r3, #1
 8012958:	6033      	str	r3, [r6, #0]
 801295a:	6823      	ldr	r3, [r4, #0]
 801295c:	0699      	lsls	r1, r3, #26
 801295e:	bf42      	ittt	mi
 8012960:	6833      	ldrmi	r3, [r6, #0]
 8012962:	3302      	addmi	r3, #2
 8012964:	6033      	strmi	r3, [r6, #0]
 8012966:	6825      	ldr	r5, [r4, #0]
 8012968:	f015 0506 	ands.w	r5, r5, #6
 801296c:	d106      	bne.n	801297c <_printf_common+0x48>
 801296e:	f104 0a19 	add.w	sl, r4, #25
 8012972:	68e3      	ldr	r3, [r4, #12]
 8012974:	6832      	ldr	r2, [r6, #0]
 8012976:	1a9b      	subs	r3, r3, r2
 8012978:	42ab      	cmp	r3, r5
 801297a:	dc26      	bgt.n	80129ca <_printf_common+0x96>
 801297c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012980:	1e13      	subs	r3, r2, #0
 8012982:	6822      	ldr	r2, [r4, #0]
 8012984:	bf18      	it	ne
 8012986:	2301      	movne	r3, #1
 8012988:	0692      	lsls	r2, r2, #26
 801298a:	d42b      	bmi.n	80129e4 <_printf_common+0xb0>
 801298c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012990:	4649      	mov	r1, r9
 8012992:	4638      	mov	r0, r7
 8012994:	47c0      	blx	r8
 8012996:	3001      	adds	r0, #1
 8012998:	d01e      	beq.n	80129d8 <_printf_common+0xa4>
 801299a:	6823      	ldr	r3, [r4, #0]
 801299c:	6922      	ldr	r2, [r4, #16]
 801299e:	f003 0306 	and.w	r3, r3, #6
 80129a2:	2b04      	cmp	r3, #4
 80129a4:	bf02      	ittt	eq
 80129a6:	68e5      	ldreq	r5, [r4, #12]
 80129a8:	6833      	ldreq	r3, [r6, #0]
 80129aa:	1aed      	subeq	r5, r5, r3
 80129ac:	68a3      	ldr	r3, [r4, #8]
 80129ae:	bf0c      	ite	eq
 80129b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80129b4:	2500      	movne	r5, #0
 80129b6:	4293      	cmp	r3, r2
 80129b8:	bfc4      	itt	gt
 80129ba:	1a9b      	subgt	r3, r3, r2
 80129bc:	18ed      	addgt	r5, r5, r3
 80129be:	2600      	movs	r6, #0
 80129c0:	341a      	adds	r4, #26
 80129c2:	42b5      	cmp	r5, r6
 80129c4:	d11a      	bne.n	80129fc <_printf_common+0xc8>
 80129c6:	2000      	movs	r0, #0
 80129c8:	e008      	b.n	80129dc <_printf_common+0xa8>
 80129ca:	2301      	movs	r3, #1
 80129cc:	4652      	mov	r2, sl
 80129ce:	4649      	mov	r1, r9
 80129d0:	4638      	mov	r0, r7
 80129d2:	47c0      	blx	r8
 80129d4:	3001      	adds	r0, #1
 80129d6:	d103      	bne.n	80129e0 <_printf_common+0xac>
 80129d8:	f04f 30ff 	mov.w	r0, #4294967295
 80129dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80129e0:	3501      	adds	r5, #1
 80129e2:	e7c6      	b.n	8012972 <_printf_common+0x3e>
 80129e4:	18e1      	adds	r1, r4, r3
 80129e6:	1c5a      	adds	r2, r3, #1
 80129e8:	2030      	movs	r0, #48	; 0x30
 80129ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80129ee:	4422      	add	r2, r4
 80129f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80129f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80129f8:	3302      	adds	r3, #2
 80129fa:	e7c7      	b.n	801298c <_printf_common+0x58>
 80129fc:	2301      	movs	r3, #1
 80129fe:	4622      	mov	r2, r4
 8012a00:	4649      	mov	r1, r9
 8012a02:	4638      	mov	r0, r7
 8012a04:	47c0      	blx	r8
 8012a06:	3001      	adds	r0, #1
 8012a08:	d0e6      	beq.n	80129d8 <_printf_common+0xa4>
 8012a0a:	3601      	adds	r6, #1
 8012a0c:	e7d9      	b.n	80129c2 <_printf_common+0x8e>
	...

08012a10 <_printf_i>:
 8012a10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012a14:	7e0f      	ldrb	r7, [r1, #24]
 8012a16:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012a18:	2f78      	cmp	r7, #120	; 0x78
 8012a1a:	4691      	mov	r9, r2
 8012a1c:	4680      	mov	r8, r0
 8012a1e:	460c      	mov	r4, r1
 8012a20:	469a      	mov	sl, r3
 8012a22:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8012a26:	d807      	bhi.n	8012a38 <_printf_i+0x28>
 8012a28:	2f62      	cmp	r7, #98	; 0x62
 8012a2a:	d80a      	bhi.n	8012a42 <_printf_i+0x32>
 8012a2c:	2f00      	cmp	r7, #0
 8012a2e:	f000 80d4 	beq.w	8012bda <_printf_i+0x1ca>
 8012a32:	2f58      	cmp	r7, #88	; 0x58
 8012a34:	f000 80c0 	beq.w	8012bb8 <_printf_i+0x1a8>
 8012a38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012a3c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012a40:	e03a      	b.n	8012ab8 <_printf_i+0xa8>
 8012a42:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8012a46:	2b15      	cmp	r3, #21
 8012a48:	d8f6      	bhi.n	8012a38 <_printf_i+0x28>
 8012a4a:	a101      	add	r1, pc, #4	; (adr r1, 8012a50 <_printf_i+0x40>)
 8012a4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012a50:	08012aa9 	.word	0x08012aa9
 8012a54:	08012abd 	.word	0x08012abd
 8012a58:	08012a39 	.word	0x08012a39
 8012a5c:	08012a39 	.word	0x08012a39
 8012a60:	08012a39 	.word	0x08012a39
 8012a64:	08012a39 	.word	0x08012a39
 8012a68:	08012abd 	.word	0x08012abd
 8012a6c:	08012a39 	.word	0x08012a39
 8012a70:	08012a39 	.word	0x08012a39
 8012a74:	08012a39 	.word	0x08012a39
 8012a78:	08012a39 	.word	0x08012a39
 8012a7c:	08012bc1 	.word	0x08012bc1
 8012a80:	08012ae9 	.word	0x08012ae9
 8012a84:	08012b7b 	.word	0x08012b7b
 8012a88:	08012a39 	.word	0x08012a39
 8012a8c:	08012a39 	.word	0x08012a39
 8012a90:	08012be3 	.word	0x08012be3
 8012a94:	08012a39 	.word	0x08012a39
 8012a98:	08012ae9 	.word	0x08012ae9
 8012a9c:	08012a39 	.word	0x08012a39
 8012aa0:	08012a39 	.word	0x08012a39
 8012aa4:	08012b83 	.word	0x08012b83
 8012aa8:	682b      	ldr	r3, [r5, #0]
 8012aaa:	1d1a      	adds	r2, r3, #4
 8012aac:	681b      	ldr	r3, [r3, #0]
 8012aae:	602a      	str	r2, [r5, #0]
 8012ab0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012ab4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012ab8:	2301      	movs	r3, #1
 8012aba:	e09f      	b.n	8012bfc <_printf_i+0x1ec>
 8012abc:	6820      	ldr	r0, [r4, #0]
 8012abe:	682b      	ldr	r3, [r5, #0]
 8012ac0:	0607      	lsls	r7, r0, #24
 8012ac2:	f103 0104 	add.w	r1, r3, #4
 8012ac6:	6029      	str	r1, [r5, #0]
 8012ac8:	d501      	bpl.n	8012ace <_printf_i+0xbe>
 8012aca:	681e      	ldr	r6, [r3, #0]
 8012acc:	e003      	b.n	8012ad6 <_printf_i+0xc6>
 8012ace:	0646      	lsls	r6, r0, #25
 8012ad0:	d5fb      	bpl.n	8012aca <_printf_i+0xba>
 8012ad2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8012ad6:	2e00      	cmp	r6, #0
 8012ad8:	da03      	bge.n	8012ae2 <_printf_i+0xd2>
 8012ada:	232d      	movs	r3, #45	; 0x2d
 8012adc:	4276      	negs	r6, r6
 8012ade:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012ae2:	485a      	ldr	r0, [pc, #360]	; (8012c4c <_printf_i+0x23c>)
 8012ae4:	230a      	movs	r3, #10
 8012ae6:	e012      	b.n	8012b0e <_printf_i+0xfe>
 8012ae8:	682b      	ldr	r3, [r5, #0]
 8012aea:	6820      	ldr	r0, [r4, #0]
 8012aec:	1d19      	adds	r1, r3, #4
 8012aee:	6029      	str	r1, [r5, #0]
 8012af0:	0605      	lsls	r5, r0, #24
 8012af2:	d501      	bpl.n	8012af8 <_printf_i+0xe8>
 8012af4:	681e      	ldr	r6, [r3, #0]
 8012af6:	e002      	b.n	8012afe <_printf_i+0xee>
 8012af8:	0641      	lsls	r1, r0, #25
 8012afa:	d5fb      	bpl.n	8012af4 <_printf_i+0xe4>
 8012afc:	881e      	ldrh	r6, [r3, #0]
 8012afe:	4853      	ldr	r0, [pc, #332]	; (8012c4c <_printf_i+0x23c>)
 8012b00:	2f6f      	cmp	r7, #111	; 0x6f
 8012b02:	bf0c      	ite	eq
 8012b04:	2308      	moveq	r3, #8
 8012b06:	230a      	movne	r3, #10
 8012b08:	2100      	movs	r1, #0
 8012b0a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012b0e:	6865      	ldr	r5, [r4, #4]
 8012b10:	60a5      	str	r5, [r4, #8]
 8012b12:	2d00      	cmp	r5, #0
 8012b14:	bfa2      	ittt	ge
 8012b16:	6821      	ldrge	r1, [r4, #0]
 8012b18:	f021 0104 	bicge.w	r1, r1, #4
 8012b1c:	6021      	strge	r1, [r4, #0]
 8012b1e:	b90e      	cbnz	r6, 8012b24 <_printf_i+0x114>
 8012b20:	2d00      	cmp	r5, #0
 8012b22:	d04b      	beq.n	8012bbc <_printf_i+0x1ac>
 8012b24:	4615      	mov	r5, r2
 8012b26:	fbb6 f1f3 	udiv	r1, r6, r3
 8012b2a:	fb03 6711 	mls	r7, r3, r1, r6
 8012b2e:	5dc7      	ldrb	r7, [r0, r7]
 8012b30:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8012b34:	4637      	mov	r7, r6
 8012b36:	42bb      	cmp	r3, r7
 8012b38:	460e      	mov	r6, r1
 8012b3a:	d9f4      	bls.n	8012b26 <_printf_i+0x116>
 8012b3c:	2b08      	cmp	r3, #8
 8012b3e:	d10b      	bne.n	8012b58 <_printf_i+0x148>
 8012b40:	6823      	ldr	r3, [r4, #0]
 8012b42:	07de      	lsls	r6, r3, #31
 8012b44:	d508      	bpl.n	8012b58 <_printf_i+0x148>
 8012b46:	6923      	ldr	r3, [r4, #16]
 8012b48:	6861      	ldr	r1, [r4, #4]
 8012b4a:	4299      	cmp	r1, r3
 8012b4c:	bfde      	ittt	le
 8012b4e:	2330      	movle	r3, #48	; 0x30
 8012b50:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012b54:	f105 35ff 	addle.w	r5, r5, #4294967295
 8012b58:	1b52      	subs	r2, r2, r5
 8012b5a:	6122      	str	r2, [r4, #16]
 8012b5c:	f8cd a000 	str.w	sl, [sp]
 8012b60:	464b      	mov	r3, r9
 8012b62:	aa03      	add	r2, sp, #12
 8012b64:	4621      	mov	r1, r4
 8012b66:	4640      	mov	r0, r8
 8012b68:	f7ff fee4 	bl	8012934 <_printf_common>
 8012b6c:	3001      	adds	r0, #1
 8012b6e:	d14a      	bne.n	8012c06 <_printf_i+0x1f6>
 8012b70:	f04f 30ff 	mov.w	r0, #4294967295
 8012b74:	b004      	add	sp, #16
 8012b76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012b7a:	6823      	ldr	r3, [r4, #0]
 8012b7c:	f043 0320 	orr.w	r3, r3, #32
 8012b80:	6023      	str	r3, [r4, #0]
 8012b82:	4833      	ldr	r0, [pc, #204]	; (8012c50 <_printf_i+0x240>)
 8012b84:	2778      	movs	r7, #120	; 0x78
 8012b86:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8012b8a:	6823      	ldr	r3, [r4, #0]
 8012b8c:	6829      	ldr	r1, [r5, #0]
 8012b8e:	061f      	lsls	r7, r3, #24
 8012b90:	f851 6b04 	ldr.w	r6, [r1], #4
 8012b94:	d402      	bmi.n	8012b9c <_printf_i+0x18c>
 8012b96:	065f      	lsls	r7, r3, #25
 8012b98:	bf48      	it	mi
 8012b9a:	b2b6      	uxthmi	r6, r6
 8012b9c:	07df      	lsls	r7, r3, #31
 8012b9e:	bf48      	it	mi
 8012ba0:	f043 0320 	orrmi.w	r3, r3, #32
 8012ba4:	6029      	str	r1, [r5, #0]
 8012ba6:	bf48      	it	mi
 8012ba8:	6023      	strmi	r3, [r4, #0]
 8012baa:	b91e      	cbnz	r6, 8012bb4 <_printf_i+0x1a4>
 8012bac:	6823      	ldr	r3, [r4, #0]
 8012bae:	f023 0320 	bic.w	r3, r3, #32
 8012bb2:	6023      	str	r3, [r4, #0]
 8012bb4:	2310      	movs	r3, #16
 8012bb6:	e7a7      	b.n	8012b08 <_printf_i+0xf8>
 8012bb8:	4824      	ldr	r0, [pc, #144]	; (8012c4c <_printf_i+0x23c>)
 8012bba:	e7e4      	b.n	8012b86 <_printf_i+0x176>
 8012bbc:	4615      	mov	r5, r2
 8012bbe:	e7bd      	b.n	8012b3c <_printf_i+0x12c>
 8012bc0:	682b      	ldr	r3, [r5, #0]
 8012bc2:	6826      	ldr	r6, [r4, #0]
 8012bc4:	6961      	ldr	r1, [r4, #20]
 8012bc6:	1d18      	adds	r0, r3, #4
 8012bc8:	6028      	str	r0, [r5, #0]
 8012bca:	0635      	lsls	r5, r6, #24
 8012bcc:	681b      	ldr	r3, [r3, #0]
 8012bce:	d501      	bpl.n	8012bd4 <_printf_i+0x1c4>
 8012bd0:	6019      	str	r1, [r3, #0]
 8012bd2:	e002      	b.n	8012bda <_printf_i+0x1ca>
 8012bd4:	0670      	lsls	r0, r6, #25
 8012bd6:	d5fb      	bpl.n	8012bd0 <_printf_i+0x1c0>
 8012bd8:	8019      	strh	r1, [r3, #0]
 8012bda:	2300      	movs	r3, #0
 8012bdc:	6123      	str	r3, [r4, #16]
 8012bde:	4615      	mov	r5, r2
 8012be0:	e7bc      	b.n	8012b5c <_printf_i+0x14c>
 8012be2:	682b      	ldr	r3, [r5, #0]
 8012be4:	1d1a      	adds	r2, r3, #4
 8012be6:	602a      	str	r2, [r5, #0]
 8012be8:	681d      	ldr	r5, [r3, #0]
 8012bea:	6862      	ldr	r2, [r4, #4]
 8012bec:	2100      	movs	r1, #0
 8012bee:	4628      	mov	r0, r5
 8012bf0:	f7ed fac6 	bl	8000180 <memchr>
 8012bf4:	b108      	cbz	r0, 8012bfa <_printf_i+0x1ea>
 8012bf6:	1b40      	subs	r0, r0, r5
 8012bf8:	6060      	str	r0, [r4, #4]
 8012bfa:	6863      	ldr	r3, [r4, #4]
 8012bfc:	6123      	str	r3, [r4, #16]
 8012bfe:	2300      	movs	r3, #0
 8012c00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012c04:	e7aa      	b.n	8012b5c <_printf_i+0x14c>
 8012c06:	6923      	ldr	r3, [r4, #16]
 8012c08:	462a      	mov	r2, r5
 8012c0a:	4649      	mov	r1, r9
 8012c0c:	4640      	mov	r0, r8
 8012c0e:	47d0      	blx	sl
 8012c10:	3001      	adds	r0, #1
 8012c12:	d0ad      	beq.n	8012b70 <_printf_i+0x160>
 8012c14:	6823      	ldr	r3, [r4, #0]
 8012c16:	079b      	lsls	r3, r3, #30
 8012c18:	d413      	bmi.n	8012c42 <_printf_i+0x232>
 8012c1a:	68e0      	ldr	r0, [r4, #12]
 8012c1c:	9b03      	ldr	r3, [sp, #12]
 8012c1e:	4298      	cmp	r0, r3
 8012c20:	bfb8      	it	lt
 8012c22:	4618      	movlt	r0, r3
 8012c24:	e7a6      	b.n	8012b74 <_printf_i+0x164>
 8012c26:	2301      	movs	r3, #1
 8012c28:	4632      	mov	r2, r6
 8012c2a:	4649      	mov	r1, r9
 8012c2c:	4640      	mov	r0, r8
 8012c2e:	47d0      	blx	sl
 8012c30:	3001      	adds	r0, #1
 8012c32:	d09d      	beq.n	8012b70 <_printf_i+0x160>
 8012c34:	3501      	adds	r5, #1
 8012c36:	68e3      	ldr	r3, [r4, #12]
 8012c38:	9903      	ldr	r1, [sp, #12]
 8012c3a:	1a5b      	subs	r3, r3, r1
 8012c3c:	42ab      	cmp	r3, r5
 8012c3e:	dcf2      	bgt.n	8012c26 <_printf_i+0x216>
 8012c40:	e7eb      	b.n	8012c1a <_printf_i+0x20a>
 8012c42:	2500      	movs	r5, #0
 8012c44:	f104 0619 	add.w	r6, r4, #25
 8012c48:	e7f5      	b.n	8012c36 <_printf_i+0x226>
 8012c4a:	bf00      	nop
 8012c4c:	08017cd5 	.word	0x08017cd5
 8012c50:	08017ce6 	.word	0x08017ce6

08012c54 <_scanf_float>:
 8012c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c58:	b087      	sub	sp, #28
 8012c5a:	4617      	mov	r7, r2
 8012c5c:	9303      	str	r3, [sp, #12]
 8012c5e:	688b      	ldr	r3, [r1, #8]
 8012c60:	1e5a      	subs	r2, r3, #1
 8012c62:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8012c66:	bf83      	ittte	hi
 8012c68:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8012c6c:	195b      	addhi	r3, r3, r5
 8012c6e:	9302      	strhi	r3, [sp, #8]
 8012c70:	2300      	movls	r3, #0
 8012c72:	bf86      	itte	hi
 8012c74:	f240 135d 	movwhi	r3, #349	; 0x15d
 8012c78:	608b      	strhi	r3, [r1, #8]
 8012c7a:	9302      	strls	r3, [sp, #8]
 8012c7c:	680b      	ldr	r3, [r1, #0]
 8012c7e:	468b      	mov	fp, r1
 8012c80:	2500      	movs	r5, #0
 8012c82:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8012c86:	f84b 3b1c 	str.w	r3, [fp], #28
 8012c8a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8012c8e:	4680      	mov	r8, r0
 8012c90:	460c      	mov	r4, r1
 8012c92:	465e      	mov	r6, fp
 8012c94:	46aa      	mov	sl, r5
 8012c96:	46a9      	mov	r9, r5
 8012c98:	9501      	str	r5, [sp, #4]
 8012c9a:	68a2      	ldr	r2, [r4, #8]
 8012c9c:	b152      	cbz	r2, 8012cb4 <_scanf_float+0x60>
 8012c9e:	683b      	ldr	r3, [r7, #0]
 8012ca0:	781b      	ldrb	r3, [r3, #0]
 8012ca2:	2b4e      	cmp	r3, #78	; 0x4e
 8012ca4:	d864      	bhi.n	8012d70 <_scanf_float+0x11c>
 8012ca6:	2b40      	cmp	r3, #64	; 0x40
 8012ca8:	d83c      	bhi.n	8012d24 <_scanf_float+0xd0>
 8012caa:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8012cae:	b2c8      	uxtb	r0, r1
 8012cb0:	280e      	cmp	r0, #14
 8012cb2:	d93a      	bls.n	8012d2a <_scanf_float+0xd6>
 8012cb4:	f1b9 0f00 	cmp.w	r9, #0
 8012cb8:	d003      	beq.n	8012cc2 <_scanf_float+0x6e>
 8012cba:	6823      	ldr	r3, [r4, #0]
 8012cbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012cc0:	6023      	str	r3, [r4, #0]
 8012cc2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012cc6:	f1ba 0f01 	cmp.w	sl, #1
 8012cca:	f200 8113 	bhi.w	8012ef4 <_scanf_float+0x2a0>
 8012cce:	455e      	cmp	r6, fp
 8012cd0:	f200 8105 	bhi.w	8012ede <_scanf_float+0x28a>
 8012cd4:	2501      	movs	r5, #1
 8012cd6:	4628      	mov	r0, r5
 8012cd8:	b007      	add	sp, #28
 8012cda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012cde:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8012ce2:	2a0d      	cmp	r2, #13
 8012ce4:	d8e6      	bhi.n	8012cb4 <_scanf_float+0x60>
 8012ce6:	a101      	add	r1, pc, #4	; (adr r1, 8012cec <_scanf_float+0x98>)
 8012ce8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8012cec:	08012e2b 	.word	0x08012e2b
 8012cf0:	08012cb5 	.word	0x08012cb5
 8012cf4:	08012cb5 	.word	0x08012cb5
 8012cf8:	08012cb5 	.word	0x08012cb5
 8012cfc:	08012e8b 	.word	0x08012e8b
 8012d00:	08012e63 	.word	0x08012e63
 8012d04:	08012cb5 	.word	0x08012cb5
 8012d08:	08012cb5 	.word	0x08012cb5
 8012d0c:	08012e39 	.word	0x08012e39
 8012d10:	08012cb5 	.word	0x08012cb5
 8012d14:	08012cb5 	.word	0x08012cb5
 8012d18:	08012cb5 	.word	0x08012cb5
 8012d1c:	08012cb5 	.word	0x08012cb5
 8012d20:	08012df1 	.word	0x08012df1
 8012d24:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8012d28:	e7db      	b.n	8012ce2 <_scanf_float+0x8e>
 8012d2a:	290e      	cmp	r1, #14
 8012d2c:	d8c2      	bhi.n	8012cb4 <_scanf_float+0x60>
 8012d2e:	a001      	add	r0, pc, #4	; (adr r0, 8012d34 <_scanf_float+0xe0>)
 8012d30:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8012d34:	08012de3 	.word	0x08012de3
 8012d38:	08012cb5 	.word	0x08012cb5
 8012d3c:	08012de3 	.word	0x08012de3
 8012d40:	08012e77 	.word	0x08012e77
 8012d44:	08012cb5 	.word	0x08012cb5
 8012d48:	08012d91 	.word	0x08012d91
 8012d4c:	08012dcd 	.word	0x08012dcd
 8012d50:	08012dcd 	.word	0x08012dcd
 8012d54:	08012dcd 	.word	0x08012dcd
 8012d58:	08012dcd 	.word	0x08012dcd
 8012d5c:	08012dcd 	.word	0x08012dcd
 8012d60:	08012dcd 	.word	0x08012dcd
 8012d64:	08012dcd 	.word	0x08012dcd
 8012d68:	08012dcd 	.word	0x08012dcd
 8012d6c:	08012dcd 	.word	0x08012dcd
 8012d70:	2b6e      	cmp	r3, #110	; 0x6e
 8012d72:	d809      	bhi.n	8012d88 <_scanf_float+0x134>
 8012d74:	2b60      	cmp	r3, #96	; 0x60
 8012d76:	d8b2      	bhi.n	8012cde <_scanf_float+0x8a>
 8012d78:	2b54      	cmp	r3, #84	; 0x54
 8012d7a:	d077      	beq.n	8012e6c <_scanf_float+0x218>
 8012d7c:	2b59      	cmp	r3, #89	; 0x59
 8012d7e:	d199      	bne.n	8012cb4 <_scanf_float+0x60>
 8012d80:	2d07      	cmp	r5, #7
 8012d82:	d197      	bne.n	8012cb4 <_scanf_float+0x60>
 8012d84:	2508      	movs	r5, #8
 8012d86:	e029      	b.n	8012ddc <_scanf_float+0x188>
 8012d88:	2b74      	cmp	r3, #116	; 0x74
 8012d8a:	d06f      	beq.n	8012e6c <_scanf_float+0x218>
 8012d8c:	2b79      	cmp	r3, #121	; 0x79
 8012d8e:	e7f6      	b.n	8012d7e <_scanf_float+0x12a>
 8012d90:	6821      	ldr	r1, [r4, #0]
 8012d92:	05c8      	lsls	r0, r1, #23
 8012d94:	d51a      	bpl.n	8012dcc <_scanf_float+0x178>
 8012d96:	9b02      	ldr	r3, [sp, #8]
 8012d98:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8012d9c:	6021      	str	r1, [r4, #0]
 8012d9e:	f109 0901 	add.w	r9, r9, #1
 8012da2:	b11b      	cbz	r3, 8012dac <_scanf_float+0x158>
 8012da4:	3b01      	subs	r3, #1
 8012da6:	3201      	adds	r2, #1
 8012da8:	9302      	str	r3, [sp, #8]
 8012daa:	60a2      	str	r2, [r4, #8]
 8012dac:	68a3      	ldr	r3, [r4, #8]
 8012dae:	3b01      	subs	r3, #1
 8012db0:	60a3      	str	r3, [r4, #8]
 8012db2:	6923      	ldr	r3, [r4, #16]
 8012db4:	3301      	adds	r3, #1
 8012db6:	6123      	str	r3, [r4, #16]
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	3b01      	subs	r3, #1
 8012dbc:	2b00      	cmp	r3, #0
 8012dbe:	607b      	str	r3, [r7, #4]
 8012dc0:	f340 8084 	ble.w	8012ecc <_scanf_float+0x278>
 8012dc4:	683b      	ldr	r3, [r7, #0]
 8012dc6:	3301      	adds	r3, #1
 8012dc8:	603b      	str	r3, [r7, #0]
 8012dca:	e766      	b.n	8012c9a <_scanf_float+0x46>
 8012dcc:	eb1a 0f05 	cmn.w	sl, r5
 8012dd0:	f47f af70 	bne.w	8012cb4 <_scanf_float+0x60>
 8012dd4:	6822      	ldr	r2, [r4, #0]
 8012dd6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8012dda:	6022      	str	r2, [r4, #0]
 8012ddc:	f806 3b01 	strb.w	r3, [r6], #1
 8012de0:	e7e4      	b.n	8012dac <_scanf_float+0x158>
 8012de2:	6822      	ldr	r2, [r4, #0]
 8012de4:	0610      	lsls	r0, r2, #24
 8012de6:	f57f af65 	bpl.w	8012cb4 <_scanf_float+0x60>
 8012dea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8012dee:	e7f4      	b.n	8012dda <_scanf_float+0x186>
 8012df0:	f1ba 0f00 	cmp.w	sl, #0
 8012df4:	d10e      	bne.n	8012e14 <_scanf_float+0x1c0>
 8012df6:	f1b9 0f00 	cmp.w	r9, #0
 8012dfa:	d10e      	bne.n	8012e1a <_scanf_float+0x1c6>
 8012dfc:	6822      	ldr	r2, [r4, #0]
 8012dfe:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8012e02:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8012e06:	d108      	bne.n	8012e1a <_scanf_float+0x1c6>
 8012e08:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8012e0c:	6022      	str	r2, [r4, #0]
 8012e0e:	f04f 0a01 	mov.w	sl, #1
 8012e12:	e7e3      	b.n	8012ddc <_scanf_float+0x188>
 8012e14:	f1ba 0f02 	cmp.w	sl, #2
 8012e18:	d055      	beq.n	8012ec6 <_scanf_float+0x272>
 8012e1a:	2d01      	cmp	r5, #1
 8012e1c:	d002      	beq.n	8012e24 <_scanf_float+0x1d0>
 8012e1e:	2d04      	cmp	r5, #4
 8012e20:	f47f af48 	bne.w	8012cb4 <_scanf_float+0x60>
 8012e24:	3501      	adds	r5, #1
 8012e26:	b2ed      	uxtb	r5, r5
 8012e28:	e7d8      	b.n	8012ddc <_scanf_float+0x188>
 8012e2a:	f1ba 0f01 	cmp.w	sl, #1
 8012e2e:	f47f af41 	bne.w	8012cb4 <_scanf_float+0x60>
 8012e32:	f04f 0a02 	mov.w	sl, #2
 8012e36:	e7d1      	b.n	8012ddc <_scanf_float+0x188>
 8012e38:	b97d      	cbnz	r5, 8012e5a <_scanf_float+0x206>
 8012e3a:	f1b9 0f00 	cmp.w	r9, #0
 8012e3e:	f47f af3c 	bne.w	8012cba <_scanf_float+0x66>
 8012e42:	6822      	ldr	r2, [r4, #0]
 8012e44:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8012e48:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8012e4c:	f47f af39 	bne.w	8012cc2 <_scanf_float+0x6e>
 8012e50:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8012e54:	6022      	str	r2, [r4, #0]
 8012e56:	2501      	movs	r5, #1
 8012e58:	e7c0      	b.n	8012ddc <_scanf_float+0x188>
 8012e5a:	2d03      	cmp	r5, #3
 8012e5c:	d0e2      	beq.n	8012e24 <_scanf_float+0x1d0>
 8012e5e:	2d05      	cmp	r5, #5
 8012e60:	e7de      	b.n	8012e20 <_scanf_float+0x1cc>
 8012e62:	2d02      	cmp	r5, #2
 8012e64:	f47f af26 	bne.w	8012cb4 <_scanf_float+0x60>
 8012e68:	2503      	movs	r5, #3
 8012e6a:	e7b7      	b.n	8012ddc <_scanf_float+0x188>
 8012e6c:	2d06      	cmp	r5, #6
 8012e6e:	f47f af21 	bne.w	8012cb4 <_scanf_float+0x60>
 8012e72:	2507      	movs	r5, #7
 8012e74:	e7b2      	b.n	8012ddc <_scanf_float+0x188>
 8012e76:	6822      	ldr	r2, [r4, #0]
 8012e78:	0591      	lsls	r1, r2, #22
 8012e7a:	f57f af1b 	bpl.w	8012cb4 <_scanf_float+0x60>
 8012e7e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8012e82:	6022      	str	r2, [r4, #0]
 8012e84:	f8cd 9004 	str.w	r9, [sp, #4]
 8012e88:	e7a8      	b.n	8012ddc <_scanf_float+0x188>
 8012e8a:	6822      	ldr	r2, [r4, #0]
 8012e8c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8012e90:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8012e94:	d006      	beq.n	8012ea4 <_scanf_float+0x250>
 8012e96:	0550      	lsls	r0, r2, #21
 8012e98:	f57f af0c 	bpl.w	8012cb4 <_scanf_float+0x60>
 8012e9c:	f1b9 0f00 	cmp.w	r9, #0
 8012ea0:	f43f af0f 	beq.w	8012cc2 <_scanf_float+0x6e>
 8012ea4:	0591      	lsls	r1, r2, #22
 8012ea6:	bf58      	it	pl
 8012ea8:	9901      	ldrpl	r1, [sp, #4]
 8012eaa:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8012eae:	bf58      	it	pl
 8012eb0:	eba9 0101 	subpl.w	r1, r9, r1
 8012eb4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8012eb8:	bf58      	it	pl
 8012eba:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8012ebe:	6022      	str	r2, [r4, #0]
 8012ec0:	f04f 0900 	mov.w	r9, #0
 8012ec4:	e78a      	b.n	8012ddc <_scanf_float+0x188>
 8012ec6:	f04f 0a03 	mov.w	sl, #3
 8012eca:	e787      	b.n	8012ddc <_scanf_float+0x188>
 8012ecc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8012ed0:	4639      	mov	r1, r7
 8012ed2:	4640      	mov	r0, r8
 8012ed4:	4798      	blx	r3
 8012ed6:	2800      	cmp	r0, #0
 8012ed8:	f43f aedf 	beq.w	8012c9a <_scanf_float+0x46>
 8012edc:	e6ea      	b.n	8012cb4 <_scanf_float+0x60>
 8012ede:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012ee2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8012ee6:	463a      	mov	r2, r7
 8012ee8:	4640      	mov	r0, r8
 8012eea:	4798      	blx	r3
 8012eec:	6923      	ldr	r3, [r4, #16]
 8012eee:	3b01      	subs	r3, #1
 8012ef0:	6123      	str	r3, [r4, #16]
 8012ef2:	e6ec      	b.n	8012cce <_scanf_float+0x7a>
 8012ef4:	1e6b      	subs	r3, r5, #1
 8012ef6:	2b06      	cmp	r3, #6
 8012ef8:	d825      	bhi.n	8012f46 <_scanf_float+0x2f2>
 8012efa:	2d02      	cmp	r5, #2
 8012efc:	d836      	bhi.n	8012f6c <_scanf_float+0x318>
 8012efe:	455e      	cmp	r6, fp
 8012f00:	f67f aee8 	bls.w	8012cd4 <_scanf_float+0x80>
 8012f04:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012f08:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8012f0c:	463a      	mov	r2, r7
 8012f0e:	4640      	mov	r0, r8
 8012f10:	4798      	blx	r3
 8012f12:	6923      	ldr	r3, [r4, #16]
 8012f14:	3b01      	subs	r3, #1
 8012f16:	6123      	str	r3, [r4, #16]
 8012f18:	e7f1      	b.n	8012efe <_scanf_float+0x2aa>
 8012f1a:	9802      	ldr	r0, [sp, #8]
 8012f1c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012f20:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8012f24:	9002      	str	r0, [sp, #8]
 8012f26:	463a      	mov	r2, r7
 8012f28:	4640      	mov	r0, r8
 8012f2a:	4798      	blx	r3
 8012f2c:	6923      	ldr	r3, [r4, #16]
 8012f2e:	3b01      	subs	r3, #1
 8012f30:	6123      	str	r3, [r4, #16]
 8012f32:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012f36:	fa5f fa8a 	uxtb.w	sl, sl
 8012f3a:	f1ba 0f02 	cmp.w	sl, #2
 8012f3e:	d1ec      	bne.n	8012f1a <_scanf_float+0x2c6>
 8012f40:	3d03      	subs	r5, #3
 8012f42:	b2ed      	uxtb	r5, r5
 8012f44:	1b76      	subs	r6, r6, r5
 8012f46:	6823      	ldr	r3, [r4, #0]
 8012f48:	05da      	lsls	r2, r3, #23
 8012f4a:	d52f      	bpl.n	8012fac <_scanf_float+0x358>
 8012f4c:	055b      	lsls	r3, r3, #21
 8012f4e:	d510      	bpl.n	8012f72 <_scanf_float+0x31e>
 8012f50:	455e      	cmp	r6, fp
 8012f52:	f67f aebf 	bls.w	8012cd4 <_scanf_float+0x80>
 8012f56:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012f5a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8012f5e:	463a      	mov	r2, r7
 8012f60:	4640      	mov	r0, r8
 8012f62:	4798      	blx	r3
 8012f64:	6923      	ldr	r3, [r4, #16]
 8012f66:	3b01      	subs	r3, #1
 8012f68:	6123      	str	r3, [r4, #16]
 8012f6a:	e7f1      	b.n	8012f50 <_scanf_float+0x2fc>
 8012f6c:	46aa      	mov	sl, r5
 8012f6e:	9602      	str	r6, [sp, #8]
 8012f70:	e7df      	b.n	8012f32 <_scanf_float+0x2de>
 8012f72:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8012f76:	6923      	ldr	r3, [r4, #16]
 8012f78:	2965      	cmp	r1, #101	; 0x65
 8012f7a:	f103 33ff 	add.w	r3, r3, #4294967295
 8012f7e:	f106 35ff 	add.w	r5, r6, #4294967295
 8012f82:	6123      	str	r3, [r4, #16]
 8012f84:	d00c      	beq.n	8012fa0 <_scanf_float+0x34c>
 8012f86:	2945      	cmp	r1, #69	; 0x45
 8012f88:	d00a      	beq.n	8012fa0 <_scanf_float+0x34c>
 8012f8a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012f8e:	463a      	mov	r2, r7
 8012f90:	4640      	mov	r0, r8
 8012f92:	4798      	blx	r3
 8012f94:	6923      	ldr	r3, [r4, #16]
 8012f96:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8012f9a:	3b01      	subs	r3, #1
 8012f9c:	1eb5      	subs	r5, r6, #2
 8012f9e:	6123      	str	r3, [r4, #16]
 8012fa0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012fa4:	463a      	mov	r2, r7
 8012fa6:	4640      	mov	r0, r8
 8012fa8:	4798      	blx	r3
 8012faa:	462e      	mov	r6, r5
 8012fac:	6825      	ldr	r5, [r4, #0]
 8012fae:	f015 0510 	ands.w	r5, r5, #16
 8012fb2:	d155      	bne.n	8013060 <_scanf_float+0x40c>
 8012fb4:	7035      	strb	r5, [r6, #0]
 8012fb6:	6823      	ldr	r3, [r4, #0]
 8012fb8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8012fbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012fc0:	d11d      	bne.n	8012ffe <_scanf_float+0x3aa>
 8012fc2:	9b01      	ldr	r3, [sp, #4]
 8012fc4:	454b      	cmp	r3, r9
 8012fc6:	eba3 0209 	sub.w	r2, r3, r9
 8012fca:	d125      	bne.n	8013018 <_scanf_float+0x3c4>
 8012fcc:	2200      	movs	r2, #0
 8012fce:	4659      	mov	r1, fp
 8012fd0:	4640      	mov	r0, r8
 8012fd2:	f002 fc11 	bl	80157f8 <_strtod_r>
 8012fd6:	9b03      	ldr	r3, [sp, #12]
 8012fd8:	f8d4 c000 	ldr.w	ip, [r4]
 8012fdc:	681b      	ldr	r3, [r3, #0]
 8012fde:	f01c 0f02 	tst.w	ip, #2
 8012fe2:	4606      	mov	r6, r0
 8012fe4:	460f      	mov	r7, r1
 8012fe6:	f103 0204 	add.w	r2, r3, #4
 8012fea:	d020      	beq.n	801302e <_scanf_float+0x3da>
 8012fec:	9903      	ldr	r1, [sp, #12]
 8012fee:	600a      	str	r2, [r1, #0]
 8012ff0:	681b      	ldr	r3, [r3, #0]
 8012ff2:	e9c3 6700 	strd	r6, r7, [r3]
 8012ff6:	68e3      	ldr	r3, [r4, #12]
 8012ff8:	3301      	adds	r3, #1
 8012ffa:	60e3      	str	r3, [r4, #12]
 8012ffc:	e66b      	b.n	8012cd6 <_scanf_float+0x82>
 8012ffe:	9b04      	ldr	r3, [sp, #16]
 8013000:	2b00      	cmp	r3, #0
 8013002:	d0e3      	beq.n	8012fcc <_scanf_float+0x378>
 8013004:	9905      	ldr	r1, [sp, #20]
 8013006:	230a      	movs	r3, #10
 8013008:	462a      	mov	r2, r5
 801300a:	3101      	adds	r1, #1
 801300c:	4640      	mov	r0, r8
 801300e:	f002 fc77 	bl	8015900 <_strtol_r>
 8013012:	9b04      	ldr	r3, [sp, #16]
 8013014:	9e05      	ldr	r6, [sp, #20]
 8013016:	1ac2      	subs	r2, r0, r3
 8013018:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801301c:	429e      	cmp	r6, r3
 801301e:	bf28      	it	cs
 8013020:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8013024:	490f      	ldr	r1, [pc, #60]	; (8013064 <_scanf_float+0x410>)
 8013026:	4630      	mov	r0, r6
 8013028:	f000 f8d0 	bl	80131cc <siprintf>
 801302c:	e7ce      	b.n	8012fcc <_scanf_float+0x378>
 801302e:	f01c 0f04 	tst.w	ip, #4
 8013032:	d1db      	bne.n	8012fec <_scanf_float+0x398>
 8013034:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8013038:	f8cc 2000 	str.w	r2, [ip]
 801303c:	f8d3 8000 	ldr.w	r8, [r3]
 8013040:	4602      	mov	r2, r0
 8013042:	460b      	mov	r3, r1
 8013044:	f7ed fd4a 	bl	8000adc <__aeabi_dcmpun>
 8013048:	b128      	cbz	r0, 8013056 <_scanf_float+0x402>
 801304a:	4807      	ldr	r0, [pc, #28]	; (8013068 <_scanf_float+0x414>)
 801304c:	f000 f9a0 	bl	8013390 <nanf>
 8013050:	f8c8 0000 	str.w	r0, [r8]
 8013054:	e7cf      	b.n	8012ff6 <_scanf_float+0x3a2>
 8013056:	4630      	mov	r0, r6
 8013058:	4639      	mov	r1, r7
 801305a:	f7ed fd9d 	bl	8000b98 <__aeabi_d2f>
 801305e:	e7f7      	b.n	8013050 <_scanf_float+0x3fc>
 8013060:	2500      	movs	r5, #0
 8013062:	e638      	b.n	8012cd6 <_scanf_float+0x82>
 8013064:	08017cf7 	.word	0x08017cf7
 8013068:	0801808d 	.word	0x0801808d

0801306c <std>:
 801306c:	2300      	movs	r3, #0
 801306e:	b510      	push	{r4, lr}
 8013070:	4604      	mov	r4, r0
 8013072:	e9c0 3300 	strd	r3, r3, [r0]
 8013076:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801307a:	6083      	str	r3, [r0, #8]
 801307c:	8181      	strh	r1, [r0, #12]
 801307e:	6643      	str	r3, [r0, #100]	; 0x64
 8013080:	81c2      	strh	r2, [r0, #14]
 8013082:	6183      	str	r3, [r0, #24]
 8013084:	4619      	mov	r1, r3
 8013086:	2208      	movs	r2, #8
 8013088:	305c      	adds	r0, #92	; 0x5c
 801308a:	f000 f902 	bl	8013292 <memset>
 801308e:	4b05      	ldr	r3, [pc, #20]	; (80130a4 <std+0x38>)
 8013090:	6263      	str	r3, [r4, #36]	; 0x24
 8013092:	4b05      	ldr	r3, [pc, #20]	; (80130a8 <std+0x3c>)
 8013094:	62a3      	str	r3, [r4, #40]	; 0x28
 8013096:	4b05      	ldr	r3, [pc, #20]	; (80130ac <std+0x40>)
 8013098:	62e3      	str	r3, [r4, #44]	; 0x2c
 801309a:	4b05      	ldr	r3, [pc, #20]	; (80130b0 <std+0x44>)
 801309c:	6224      	str	r4, [r4, #32]
 801309e:	6323      	str	r3, [r4, #48]	; 0x30
 80130a0:	bd10      	pop	{r4, pc}
 80130a2:	bf00      	nop
 80130a4:	0801320d 	.word	0x0801320d
 80130a8:	0801322f 	.word	0x0801322f
 80130ac:	08013267 	.word	0x08013267
 80130b0:	0801328b 	.word	0x0801328b

080130b4 <stdio_exit_handler>:
 80130b4:	4a02      	ldr	r2, [pc, #8]	; (80130c0 <stdio_exit_handler+0xc>)
 80130b6:	4903      	ldr	r1, [pc, #12]	; (80130c4 <stdio_exit_handler+0x10>)
 80130b8:	4803      	ldr	r0, [pc, #12]	; (80130c8 <stdio_exit_handler+0x14>)
 80130ba:	f000 b869 	b.w	8013190 <_fwalk_sglue>
 80130be:	bf00      	nop
 80130c0:	200000e0 	.word	0x200000e0
 80130c4:	08015f2d 	.word	0x08015f2d
 80130c8:	200000ec 	.word	0x200000ec

080130cc <cleanup_stdio>:
 80130cc:	6841      	ldr	r1, [r0, #4]
 80130ce:	4b0c      	ldr	r3, [pc, #48]	; (8013100 <cleanup_stdio+0x34>)
 80130d0:	4299      	cmp	r1, r3
 80130d2:	b510      	push	{r4, lr}
 80130d4:	4604      	mov	r4, r0
 80130d6:	d001      	beq.n	80130dc <cleanup_stdio+0x10>
 80130d8:	f002 ff28 	bl	8015f2c <_fflush_r>
 80130dc:	68a1      	ldr	r1, [r4, #8]
 80130de:	4b09      	ldr	r3, [pc, #36]	; (8013104 <cleanup_stdio+0x38>)
 80130e0:	4299      	cmp	r1, r3
 80130e2:	d002      	beq.n	80130ea <cleanup_stdio+0x1e>
 80130e4:	4620      	mov	r0, r4
 80130e6:	f002 ff21 	bl	8015f2c <_fflush_r>
 80130ea:	68e1      	ldr	r1, [r4, #12]
 80130ec:	4b06      	ldr	r3, [pc, #24]	; (8013108 <cleanup_stdio+0x3c>)
 80130ee:	4299      	cmp	r1, r3
 80130f0:	d004      	beq.n	80130fc <cleanup_stdio+0x30>
 80130f2:	4620      	mov	r0, r4
 80130f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80130f8:	f002 bf18 	b.w	8015f2c <_fflush_r>
 80130fc:	bd10      	pop	{r4, pc}
 80130fe:	bf00      	nop
 8013100:	200019d4 	.word	0x200019d4
 8013104:	20001a3c 	.word	0x20001a3c
 8013108:	20001aa4 	.word	0x20001aa4

0801310c <global_stdio_init.part.0>:
 801310c:	b510      	push	{r4, lr}
 801310e:	4b0b      	ldr	r3, [pc, #44]	; (801313c <global_stdio_init.part.0+0x30>)
 8013110:	4c0b      	ldr	r4, [pc, #44]	; (8013140 <global_stdio_init.part.0+0x34>)
 8013112:	4a0c      	ldr	r2, [pc, #48]	; (8013144 <global_stdio_init.part.0+0x38>)
 8013114:	601a      	str	r2, [r3, #0]
 8013116:	4620      	mov	r0, r4
 8013118:	2200      	movs	r2, #0
 801311a:	2104      	movs	r1, #4
 801311c:	f7ff ffa6 	bl	801306c <std>
 8013120:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8013124:	2201      	movs	r2, #1
 8013126:	2109      	movs	r1, #9
 8013128:	f7ff ffa0 	bl	801306c <std>
 801312c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8013130:	2202      	movs	r2, #2
 8013132:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013136:	2112      	movs	r1, #18
 8013138:	f7ff bf98 	b.w	801306c <std>
 801313c:	20001b0c 	.word	0x20001b0c
 8013140:	200019d4 	.word	0x200019d4
 8013144:	080130b5 	.word	0x080130b5

08013148 <__sfp_lock_acquire>:
 8013148:	4801      	ldr	r0, [pc, #4]	; (8013150 <__sfp_lock_acquire+0x8>)
 801314a:	f000 b91f 	b.w	801338c <__retarget_lock_acquire_recursive>
 801314e:	bf00      	nop
 8013150:	20001b15 	.word	0x20001b15

08013154 <__sfp_lock_release>:
 8013154:	4801      	ldr	r0, [pc, #4]	; (801315c <__sfp_lock_release+0x8>)
 8013156:	f000 b91a 	b.w	801338e <__retarget_lock_release_recursive>
 801315a:	bf00      	nop
 801315c:	20001b15 	.word	0x20001b15

08013160 <__sinit>:
 8013160:	b510      	push	{r4, lr}
 8013162:	4604      	mov	r4, r0
 8013164:	f7ff fff0 	bl	8013148 <__sfp_lock_acquire>
 8013168:	6a23      	ldr	r3, [r4, #32]
 801316a:	b11b      	cbz	r3, 8013174 <__sinit+0x14>
 801316c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013170:	f7ff bff0 	b.w	8013154 <__sfp_lock_release>
 8013174:	4b04      	ldr	r3, [pc, #16]	; (8013188 <__sinit+0x28>)
 8013176:	6223      	str	r3, [r4, #32]
 8013178:	4b04      	ldr	r3, [pc, #16]	; (801318c <__sinit+0x2c>)
 801317a:	681b      	ldr	r3, [r3, #0]
 801317c:	2b00      	cmp	r3, #0
 801317e:	d1f5      	bne.n	801316c <__sinit+0xc>
 8013180:	f7ff ffc4 	bl	801310c <global_stdio_init.part.0>
 8013184:	e7f2      	b.n	801316c <__sinit+0xc>
 8013186:	bf00      	nop
 8013188:	080130cd 	.word	0x080130cd
 801318c:	20001b0c 	.word	0x20001b0c

08013190 <_fwalk_sglue>:
 8013190:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013194:	4607      	mov	r7, r0
 8013196:	4688      	mov	r8, r1
 8013198:	4614      	mov	r4, r2
 801319a:	2600      	movs	r6, #0
 801319c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80131a0:	f1b9 0901 	subs.w	r9, r9, #1
 80131a4:	d505      	bpl.n	80131b2 <_fwalk_sglue+0x22>
 80131a6:	6824      	ldr	r4, [r4, #0]
 80131a8:	2c00      	cmp	r4, #0
 80131aa:	d1f7      	bne.n	801319c <_fwalk_sglue+0xc>
 80131ac:	4630      	mov	r0, r6
 80131ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80131b2:	89ab      	ldrh	r3, [r5, #12]
 80131b4:	2b01      	cmp	r3, #1
 80131b6:	d907      	bls.n	80131c8 <_fwalk_sglue+0x38>
 80131b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80131bc:	3301      	adds	r3, #1
 80131be:	d003      	beq.n	80131c8 <_fwalk_sglue+0x38>
 80131c0:	4629      	mov	r1, r5
 80131c2:	4638      	mov	r0, r7
 80131c4:	47c0      	blx	r8
 80131c6:	4306      	orrs	r6, r0
 80131c8:	3568      	adds	r5, #104	; 0x68
 80131ca:	e7e9      	b.n	80131a0 <_fwalk_sglue+0x10>

080131cc <siprintf>:
 80131cc:	b40e      	push	{r1, r2, r3}
 80131ce:	b500      	push	{lr}
 80131d0:	b09c      	sub	sp, #112	; 0x70
 80131d2:	ab1d      	add	r3, sp, #116	; 0x74
 80131d4:	9002      	str	r0, [sp, #8]
 80131d6:	9006      	str	r0, [sp, #24]
 80131d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80131dc:	4809      	ldr	r0, [pc, #36]	; (8013204 <siprintf+0x38>)
 80131de:	9107      	str	r1, [sp, #28]
 80131e0:	9104      	str	r1, [sp, #16]
 80131e2:	4909      	ldr	r1, [pc, #36]	; (8013208 <siprintf+0x3c>)
 80131e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80131e8:	9105      	str	r1, [sp, #20]
 80131ea:	6800      	ldr	r0, [r0, #0]
 80131ec:	9301      	str	r3, [sp, #4]
 80131ee:	a902      	add	r1, sp, #8
 80131f0:	f002 fd1c 	bl	8015c2c <_svfiprintf_r>
 80131f4:	9b02      	ldr	r3, [sp, #8]
 80131f6:	2200      	movs	r2, #0
 80131f8:	701a      	strb	r2, [r3, #0]
 80131fa:	b01c      	add	sp, #112	; 0x70
 80131fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8013200:	b003      	add	sp, #12
 8013202:	4770      	bx	lr
 8013204:	20000138 	.word	0x20000138
 8013208:	ffff0208 	.word	0xffff0208

0801320c <__sread>:
 801320c:	b510      	push	{r4, lr}
 801320e:	460c      	mov	r4, r1
 8013210:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013214:	f000 f86c 	bl	80132f0 <_read_r>
 8013218:	2800      	cmp	r0, #0
 801321a:	bfab      	itete	ge
 801321c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801321e:	89a3      	ldrhlt	r3, [r4, #12]
 8013220:	181b      	addge	r3, r3, r0
 8013222:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013226:	bfac      	ite	ge
 8013228:	6563      	strge	r3, [r4, #84]	; 0x54
 801322a:	81a3      	strhlt	r3, [r4, #12]
 801322c:	bd10      	pop	{r4, pc}

0801322e <__swrite>:
 801322e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013232:	461f      	mov	r7, r3
 8013234:	898b      	ldrh	r3, [r1, #12]
 8013236:	05db      	lsls	r3, r3, #23
 8013238:	4605      	mov	r5, r0
 801323a:	460c      	mov	r4, r1
 801323c:	4616      	mov	r6, r2
 801323e:	d505      	bpl.n	801324c <__swrite+0x1e>
 8013240:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013244:	2302      	movs	r3, #2
 8013246:	2200      	movs	r2, #0
 8013248:	f000 f840 	bl	80132cc <_lseek_r>
 801324c:	89a3      	ldrh	r3, [r4, #12]
 801324e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013252:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013256:	81a3      	strh	r3, [r4, #12]
 8013258:	4632      	mov	r2, r6
 801325a:	463b      	mov	r3, r7
 801325c:	4628      	mov	r0, r5
 801325e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013262:	f000 b857 	b.w	8013314 <_write_r>

08013266 <__sseek>:
 8013266:	b510      	push	{r4, lr}
 8013268:	460c      	mov	r4, r1
 801326a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801326e:	f000 f82d 	bl	80132cc <_lseek_r>
 8013272:	1c43      	adds	r3, r0, #1
 8013274:	89a3      	ldrh	r3, [r4, #12]
 8013276:	bf15      	itete	ne
 8013278:	6560      	strne	r0, [r4, #84]	; 0x54
 801327a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801327e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013282:	81a3      	strheq	r3, [r4, #12]
 8013284:	bf18      	it	ne
 8013286:	81a3      	strhne	r3, [r4, #12]
 8013288:	bd10      	pop	{r4, pc}

0801328a <__sclose>:
 801328a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801328e:	f000 b80d 	b.w	80132ac <_close_r>

08013292 <memset>:
 8013292:	4402      	add	r2, r0
 8013294:	4603      	mov	r3, r0
 8013296:	4293      	cmp	r3, r2
 8013298:	d100      	bne.n	801329c <memset+0xa>
 801329a:	4770      	bx	lr
 801329c:	f803 1b01 	strb.w	r1, [r3], #1
 80132a0:	e7f9      	b.n	8013296 <memset+0x4>
	...

080132a4 <_localeconv_r>:
 80132a4:	4800      	ldr	r0, [pc, #0]	; (80132a8 <_localeconv_r+0x4>)
 80132a6:	4770      	bx	lr
 80132a8:	2000022c 	.word	0x2000022c

080132ac <_close_r>:
 80132ac:	b538      	push	{r3, r4, r5, lr}
 80132ae:	4d06      	ldr	r5, [pc, #24]	; (80132c8 <_close_r+0x1c>)
 80132b0:	2300      	movs	r3, #0
 80132b2:	4604      	mov	r4, r0
 80132b4:	4608      	mov	r0, r1
 80132b6:	602b      	str	r3, [r5, #0]
 80132b8:	f7ee fd9e 	bl	8001df8 <_close>
 80132bc:	1c43      	adds	r3, r0, #1
 80132be:	d102      	bne.n	80132c6 <_close_r+0x1a>
 80132c0:	682b      	ldr	r3, [r5, #0]
 80132c2:	b103      	cbz	r3, 80132c6 <_close_r+0x1a>
 80132c4:	6023      	str	r3, [r4, #0]
 80132c6:	bd38      	pop	{r3, r4, r5, pc}
 80132c8:	20001b10 	.word	0x20001b10

080132cc <_lseek_r>:
 80132cc:	b538      	push	{r3, r4, r5, lr}
 80132ce:	4d07      	ldr	r5, [pc, #28]	; (80132ec <_lseek_r+0x20>)
 80132d0:	4604      	mov	r4, r0
 80132d2:	4608      	mov	r0, r1
 80132d4:	4611      	mov	r1, r2
 80132d6:	2200      	movs	r2, #0
 80132d8:	602a      	str	r2, [r5, #0]
 80132da:	461a      	mov	r2, r3
 80132dc:	f7ee fd96 	bl	8001e0c <_lseek>
 80132e0:	1c43      	adds	r3, r0, #1
 80132e2:	d102      	bne.n	80132ea <_lseek_r+0x1e>
 80132e4:	682b      	ldr	r3, [r5, #0]
 80132e6:	b103      	cbz	r3, 80132ea <_lseek_r+0x1e>
 80132e8:	6023      	str	r3, [r4, #0]
 80132ea:	bd38      	pop	{r3, r4, r5, pc}
 80132ec:	20001b10 	.word	0x20001b10

080132f0 <_read_r>:
 80132f0:	b538      	push	{r3, r4, r5, lr}
 80132f2:	4d07      	ldr	r5, [pc, #28]	; (8013310 <_read_r+0x20>)
 80132f4:	4604      	mov	r4, r0
 80132f6:	4608      	mov	r0, r1
 80132f8:	4611      	mov	r1, r2
 80132fa:	2200      	movs	r2, #0
 80132fc:	602a      	str	r2, [r5, #0]
 80132fe:	461a      	mov	r2, r3
 8013300:	f7ee fd5c 	bl	8001dbc <_read>
 8013304:	1c43      	adds	r3, r0, #1
 8013306:	d102      	bne.n	801330e <_read_r+0x1e>
 8013308:	682b      	ldr	r3, [r5, #0]
 801330a:	b103      	cbz	r3, 801330e <_read_r+0x1e>
 801330c:	6023      	str	r3, [r4, #0]
 801330e:	bd38      	pop	{r3, r4, r5, pc}
 8013310:	20001b10 	.word	0x20001b10

08013314 <_write_r>:
 8013314:	b538      	push	{r3, r4, r5, lr}
 8013316:	4d07      	ldr	r5, [pc, #28]	; (8013334 <_write_r+0x20>)
 8013318:	4604      	mov	r4, r0
 801331a:	4608      	mov	r0, r1
 801331c:	4611      	mov	r1, r2
 801331e:	2200      	movs	r2, #0
 8013320:	602a      	str	r2, [r5, #0]
 8013322:	461a      	mov	r2, r3
 8013324:	f7ee fd5a 	bl	8001ddc <_write>
 8013328:	1c43      	adds	r3, r0, #1
 801332a:	d102      	bne.n	8013332 <_write_r+0x1e>
 801332c:	682b      	ldr	r3, [r5, #0]
 801332e:	b103      	cbz	r3, 8013332 <_write_r+0x1e>
 8013330:	6023      	str	r3, [r4, #0]
 8013332:	bd38      	pop	{r3, r4, r5, pc}
 8013334:	20001b10 	.word	0x20001b10

08013338 <__errno>:
 8013338:	4b01      	ldr	r3, [pc, #4]	; (8013340 <__errno+0x8>)
 801333a:	6818      	ldr	r0, [r3, #0]
 801333c:	4770      	bx	lr
 801333e:	bf00      	nop
 8013340:	20000138 	.word	0x20000138

08013344 <__libc_init_array>:
 8013344:	b570      	push	{r4, r5, r6, lr}
 8013346:	4d0d      	ldr	r5, [pc, #52]	; (801337c <__libc_init_array+0x38>)
 8013348:	4c0d      	ldr	r4, [pc, #52]	; (8013380 <__libc_init_array+0x3c>)
 801334a:	1b64      	subs	r4, r4, r5
 801334c:	10a4      	asrs	r4, r4, #2
 801334e:	2600      	movs	r6, #0
 8013350:	42a6      	cmp	r6, r4
 8013352:	d109      	bne.n	8013368 <__libc_init_array+0x24>
 8013354:	4d0b      	ldr	r5, [pc, #44]	; (8013384 <__libc_init_array+0x40>)
 8013356:	4c0c      	ldr	r4, [pc, #48]	; (8013388 <__libc_init_array+0x44>)
 8013358:	f003 fd82 	bl	8016e60 <_init>
 801335c:	1b64      	subs	r4, r4, r5
 801335e:	10a4      	asrs	r4, r4, #2
 8013360:	2600      	movs	r6, #0
 8013362:	42a6      	cmp	r6, r4
 8013364:	d105      	bne.n	8013372 <__libc_init_array+0x2e>
 8013366:	bd70      	pop	{r4, r5, r6, pc}
 8013368:	f855 3b04 	ldr.w	r3, [r5], #4
 801336c:	4798      	blx	r3
 801336e:	3601      	adds	r6, #1
 8013370:	e7ee      	b.n	8013350 <__libc_init_array+0xc>
 8013372:	f855 3b04 	ldr.w	r3, [r5], #4
 8013376:	4798      	blx	r3
 8013378:	3601      	adds	r6, #1
 801337a:	e7f2      	b.n	8013362 <__libc_init_array+0x1e>
 801337c:	080180f8 	.word	0x080180f8
 8013380:	080180f8 	.word	0x080180f8
 8013384:	080180f8 	.word	0x080180f8
 8013388:	080180fc 	.word	0x080180fc

0801338c <__retarget_lock_acquire_recursive>:
 801338c:	4770      	bx	lr

0801338e <__retarget_lock_release_recursive>:
 801338e:	4770      	bx	lr

08013390 <nanf>:
 8013390:	4800      	ldr	r0, [pc, #0]	; (8013394 <nanf+0x4>)
 8013392:	4770      	bx	lr
 8013394:	7fc00000 	.word	0x7fc00000

08013398 <quorem>:
 8013398:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801339c:	6903      	ldr	r3, [r0, #16]
 801339e:	690c      	ldr	r4, [r1, #16]
 80133a0:	42a3      	cmp	r3, r4
 80133a2:	4607      	mov	r7, r0
 80133a4:	db7b      	blt.n	801349e <quorem+0x106>
 80133a6:	3c01      	subs	r4, #1
 80133a8:	f101 0814 	add.w	r8, r1, #20
 80133ac:	f100 0514 	add.w	r5, r0, #20
 80133b0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80133b4:	9301      	str	r3, [sp, #4]
 80133b6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80133ba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80133be:	3301      	adds	r3, #1
 80133c0:	429a      	cmp	r2, r3
 80133c2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80133c6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80133ca:	fbb2 f6f3 	udiv	r6, r2, r3
 80133ce:	d32e      	bcc.n	801342e <quorem+0x96>
 80133d0:	f04f 0e00 	mov.w	lr, #0
 80133d4:	4640      	mov	r0, r8
 80133d6:	46ac      	mov	ip, r5
 80133d8:	46f2      	mov	sl, lr
 80133da:	f850 2b04 	ldr.w	r2, [r0], #4
 80133de:	b293      	uxth	r3, r2
 80133e0:	fb06 e303 	mla	r3, r6, r3, lr
 80133e4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80133e8:	0c1a      	lsrs	r2, r3, #16
 80133ea:	b29b      	uxth	r3, r3
 80133ec:	fb06 220e 	mla	r2, r6, lr, r2
 80133f0:	ebaa 0303 	sub.w	r3, sl, r3
 80133f4:	f8dc a000 	ldr.w	sl, [ip]
 80133f8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80133fc:	b292      	uxth	r2, r2
 80133fe:	fa13 f38a 	uxtah	r3, r3, sl
 8013402:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8013406:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801340a:	b29b      	uxth	r3, r3
 801340c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013410:	4581      	cmp	r9, r0
 8013412:	f84c 3b04 	str.w	r3, [ip], #4
 8013416:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801341a:	d2de      	bcs.n	80133da <quorem+0x42>
 801341c:	f855 300b 	ldr.w	r3, [r5, fp]
 8013420:	b92b      	cbnz	r3, 801342e <quorem+0x96>
 8013422:	9b01      	ldr	r3, [sp, #4]
 8013424:	3b04      	subs	r3, #4
 8013426:	429d      	cmp	r5, r3
 8013428:	461a      	mov	r2, r3
 801342a:	d32c      	bcc.n	8013486 <quorem+0xee>
 801342c:	613c      	str	r4, [r7, #16]
 801342e:	4638      	mov	r0, r7
 8013430:	f001 f9de 	bl	80147f0 <__mcmp>
 8013434:	2800      	cmp	r0, #0
 8013436:	db22      	blt.n	801347e <quorem+0xe6>
 8013438:	3601      	adds	r6, #1
 801343a:	4629      	mov	r1, r5
 801343c:	2000      	movs	r0, #0
 801343e:	f858 2b04 	ldr.w	r2, [r8], #4
 8013442:	f8d1 c000 	ldr.w	ip, [r1]
 8013446:	b293      	uxth	r3, r2
 8013448:	1ac3      	subs	r3, r0, r3
 801344a:	0c12      	lsrs	r2, r2, #16
 801344c:	fa13 f38c 	uxtah	r3, r3, ip
 8013450:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8013454:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013458:	b29b      	uxth	r3, r3
 801345a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801345e:	45c1      	cmp	r9, r8
 8013460:	f841 3b04 	str.w	r3, [r1], #4
 8013464:	ea4f 4022 	mov.w	r0, r2, asr #16
 8013468:	d2e9      	bcs.n	801343e <quorem+0xa6>
 801346a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801346e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013472:	b922      	cbnz	r2, 801347e <quorem+0xe6>
 8013474:	3b04      	subs	r3, #4
 8013476:	429d      	cmp	r5, r3
 8013478:	461a      	mov	r2, r3
 801347a:	d30a      	bcc.n	8013492 <quorem+0xfa>
 801347c:	613c      	str	r4, [r7, #16]
 801347e:	4630      	mov	r0, r6
 8013480:	b003      	add	sp, #12
 8013482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013486:	6812      	ldr	r2, [r2, #0]
 8013488:	3b04      	subs	r3, #4
 801348a:	2a00      	cmp	r2, #0
 801348c:	d1ce      	bne.n	801342c <quorem+0x94>
 801348e:	3c01      	subs	r4, #1
 8013490:	e7c9      	b.n	8013426 <quorem+0x8e>
 8013492:	6812      	ldr	r2, [r2, #0]
 8013494:	3b04      	subs	r3, #4
 8013496:	2a00      	cmp	r2, #0
 8013498:	d1f0      	bne.n	801347c <quorem+0xe4>
 801349a:	3c01      	subs	r4, #1
 801349c:	e7eb      	b.n	8013476 <quorem+0xde>
 801349e:	2000      	movs	r0, #0
 80134a0:	e7ee      	b.n	8013480 <quorem+0xe8>
 80134a2:	0000      	movs	r0, r0
 80134a4:	0000      	movs	r0, r0
	...

080134a8 <_dtoa_r>:
 80134a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134ac:	69c4      	ldr	r4, [r0, #28]
 80134ae:	b099      	sub	sp, #100	; 0x64
 80134b0:	4616      	mov	r6, r2
 80134b2:	461f      	mov	r7, r3
 80134b4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80134b8:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80134bc:	4605      	mov	r5, r0
 80134be:	b974      	cbnz	r4, 80134de <_dtoa_r+0x36>
 80134c0:	2010      	movs	r0, #16
 80134c2:	f000 fe1b 	bl	80140fc <malloc>
 80134c6:	4602      	mov	r2, r0
 80134c8:	61e8      	str	r0, [r5, #28]
 80134ca:	b920      	cbnz	r0, 80134d6 <_dtoa_r+0x2e>
 80134cc:	4baa      	ldr	r3, [pc, #680]	; (8013778 <_dtoa_r+0x2d0>)
 80134ce:	21ef      	movs	r1, #239	; 0xef
 80134d0:	48aa      	ldr	r0, [pc, #680]	; (801377c <_dtoa_r+0x2d4>)
 80134d2:	f002 fdab 	bl	801602c <__assert_func>
 80134d6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80134da:	6004      	str	r4, [r0, #0]
 80134dc:	60c4      	str	r4, [r0, #12]
 80134de:	69eb      	ldr	r3, [r5, #28]
 80134e0:	6819      	ldr	r1, [r3, #0]
 80134e2:	b151      	cbz	r1, 80134fa <_dtoa_r+0x52>
 80134e4:	685a      	ldr	r2, [r3, #4]
 80134e6:	604a      	str	r2, [r1, #4]
 80134e8:	2301      	movs	r3, #1
 80134ea:	4093      	lsls	r3, r2
 80134ec:	608b      	str	r3, [r1, #8]
 80134ee:	4628      	mov	r0, r5
 80134f0:	f000 fef8 	bl	80142e4 <_Bfree>
 80134f4:	69eb      	ldr	r3, [r5, #28]
 80134f6:	2200      	movs	r2, #0
 80134f8:	601a      	str	r2, [r3, #0]
 80134fa:	1e3b      	subs	r3, r7, #0
 80134fc:	bfb9      	ittee	lt
 80134fe:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8013502:	9305      	strlt	r3, [sp, #20]
 8013504:	2300      	movge	r3, #0
 8013506:	f8c8 3000 	strge.w	r3, [r8]
 801350a:	f8dd 9014 	ldr.w	r9, [sp, #20]
 801350e:	4b9c      	ldr	r3, [pc, #624]	; (8013780 <_dtoa_r+0x2d8>)
 8013510:	bfbc      	itt	lt
 8013512:	2201      	movlt	r2, #1
 8013514:	f8c8 2000 	strlt.w	r2, [r8]
 8013518:	ea33 0309 	bics.w	r3, r3, r9
 801351c:	d119      	bne.n	8013552 <_dtoa_r+0xaa>
 801351e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8013520:	f242 730f 	movw	r3, #9999	; 0x270f
 8013524:	6013      	str	r3, [r2, #0]
 8013526:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801352a:	4333      	orrs	r3, r6
 801352c:	f000 8587 	beq.w	801403e <_dtoa_r+0xb96>
 8013530:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8013532:	b953      	cbnz	r3, 801354a <_dtoa_r+0xa2>
 8013534:	4b93      	ldr	r3, [pc, #588]	; (8013784 <_dtoa_r+0x2dc>)
 8013536:	e023      	b.n	8013580 <_dtoa_r+0xd8>
 8013538:	4b93      	ldr	r3, [pc, #588]	; (8013788 <_dtoa_r+0x2e0>)
 801353a:	9303      	str	r3, [sp, #12]
 801353c:	3308      	adds	r3, #8
 801353e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8013540:	6013      	str	r3, [r2, #0]
 8013542:	9803      	ldr	r0, [sp, #12]
 8013544:	b019      	add	sp, #100	; 0x64
 8013546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801354a:	4b8e      	ldr	r3, [pc, #568]	; (8013784 <_dtoa_r+0x2dc>)
 801354c:	9303      	str	r3, [sp, #12]
 801354e:	3303      	adds	r3, #3
 8013550:	e7f5      	b.n	801353e <_dtoa_r+0x96>
 8013552:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8013556:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 801355a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801355e:	2200      	movs	r2, #0
 8013560:	2300      	movs	r3, #0
 8013562:	f7ed fa89 	bl	8000a78 <__aeabi_dcmpeq>
 8013566:	4680      	mov	r8, r0
 8013568:	b160      	cbz	r0, 8013584 <_dtoa_r+0xdc>
 801356a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801356c:	2301      	movs	r3, #1
 801356e:	6013      	str	r3, [r2, #0]
 8013570:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8013572:	2b00      	cmp	r3, #0
 8013574:	f000 8560 	beq.w	8014038 <_dtoa_r+0xb90>
 8013578:	4b84      	ldr	r3, [pc, #528]	; (801378c <_dtoa_r+0x2e4>)
 801357a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801357c:	6013      	str	r3, [r2, #0]
 801357e:	3b01      	subs	r3, #1
 8013580:	9303      	str	r3, [sp, #12]
 8013582:	e7de      	b.n	8013542 <_dtoa_r+0x9a>
 8013584:	ab16      	add	r3, sp, #88	; 0x58
 8013586:	9301      	str	r3, [sp, #4]
 8013588:	ab17      	add	r3, sp, #92	; 0x5c
 801358a:	9300      	str	r3, [sp, #0]
 801358c:	4628      	mov	r0, r5
 801358e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8013592:	f001 fa39 	bl	8014a08 <__d2b>
 8013596:	f3c9 540a 	ubfx	r4, r9, #20, #11
 801359a:	4682      	mov	sl, r0
 801359c:	2c00      	cmp	r4, #0
 801359e:	d07d      	beq.n	801369c <_dtoa_r+0x1f4>
 80135a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80135a2:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80135a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80135aa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80135ae:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80135b2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80135b6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80135ba:	4619      	mov	r1, r3
 80135bc:	2200      	movs	r2, #0
 80135be:	4b74      	ldr	r3, [pc, #464]	; (8013790 <_dtoa_r+0x2e8>)
 80135c0:	f7ec fe3a 	bl	8000238 <__aeabi_dsub>
 80135c4:	a366      	add	r3, pc, #408	; (adr r3, 8013760 <_dtoa_r+0x2b8>)
 80135c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135ca:	f7ec ffed 	bl	80005a8 <__aeabi_dmul>
 80135ce:	a366      	add	r3, pc, #408	; (adr r3, 8013768 <_dtoa_r+0x2c0>)
 80135d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135d4:	f7ec fe32 	bl	800023c <__adddf3>
 80135d8:	4606      	mov	r6, r0
 80135da:	4620      	mov	r0, r4
 80135dc:	460f      	mov	r7, r1
 80135de:	f7ec ff79 	bl	80004d4 <__aeabi_i2d>
 80135e2:	a363      	add	r3, pc, #396	; (adr r3, 8013770 <_dtoa_r+0x2c8>)
 80135e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135e8:	f7ec ffde 	bl	80005a8 <__aeabi_dmul>
 80135ec:	4602      	mov	r2, r0
 80135ee:	460b      	mov	r3, r1
 80135f0:	4630      	mov	r0, r6
 80135f2:	4639      	mov	r1, r7
 80135f4:	f7ec fe22 	bl	800023c <__adddf3>
 80135f8:	4606      	mov	r6, r0
 80135fa:	460f      	mov	r7, r1
 80135fc:	f7ed fa84 	bl	8000b08 <__aeabi_d2iz>
 8013600:	2200      	movs	r2, #0
 8013602:	4683      	mov	fp, r0
 8013604:	2300      	movs	r3, #0
 8013606:	4630      	mov	r0, r6
 8013608:	4639      	mov	r1, r7
 801360a:	f7ed fa3f 	bl	8000a8c <__aeabi_dcmplt>
 801360e:	b148      	cbz	r0, 8013624 <_dtoa_r+0x17c>
 8013610:	4658      	mov	r0, fp
 8013612:	f7ec ff5f 	bl	80004d4 <__aeabi_i2d>
 8013616:	4632      	mov	r2, r6
 8013618:	463b      	mov	r3, r7
 801361a:	f7ed fa2d 	bl	8000a78 <__aeabi_dcmpeq>
 801361e:	b908      	cbnz	r0, 8013624 <_dtoa_r+0x17c>
 8013620:	f10b 3bff 	add.w	fp, fp, #4294967295
 8013624:	f1bb 0f16 	cmp.w	fp, #22
 8013628:	d856      	bhi.n	80136d8 <_dtoa_r+0x230>
 801362a:	4b5a      	ldr	r3, [pc, #360]	; (8013794 <_dtoa_r+0x2ec>)
 801362c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8013630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013634:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8013638:	f7ed fa28 	bl	8000a8c <__aeabi_dcmplt>
 801363c:	2800      	cmp	r0, #0
 801363e:	d04d      	beq.n	80136dc <_dtoa_r+0x234>
 8013640:	f10b 3bff 	add.w	fp, fp, #4294967295
 8013644:	2300      	movs	r3, #0
 8013646:	930f      	str	r3, [sp, #60]	; 0x3c
 8013648:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801364a:	1b1b      	subs	r3, r3, r4
 801364c:	1e5a      	subs	r2, r3, #1
 801364e:	bf44      	itt	mi
 8013650:	f1c3 0901 	rsbmi	r9, r3, #1
 8013654:	2300      	movmi	r3, #0
 8013656:	9209      	str	r2, [sp, #36]	; 0x24
 8013658:	bf54      	ite	pl
 801365a:	f04f 0900 	movpl.w	r9, #0
 801365e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8013660:	f1bb 0f00 	cmp.w	fp, #0
 8013664:	db3c      	blt.n	80136e0 <_dtoa_r+0x238>
 8013666:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013668:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 801366c:	445b      	add	r3, fp
 801366e:	9309      	str	r3, [sp, #36]	; 0x24
 8013670:	2300      	movs	r3, #0
 8013672:	930a      	str	r3, [sp, #40]	; 0x28
 8013674:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8013676:	2b09      	cmp	r3, #9
 8013678:	d866      	bhi.n	8013748 <_dtoa_r+0x2a0>
 801367a:	2b05      	cmp	r3, #5
 801367c:	bfc4      	itt	gt
 801367e:	3b04      	subgt	r3, #4
 8013680:	9322      	strgt	r3, [sp, #136]	; 0x88
 8013682:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8013684:	f1a3 0302 	sub.w	r3, r3, #2
 8013688:	bfcc      	ite	gt
 801368a:	2400      	movgt	r4, #0
 801368c:	2401      	movle	r4, #1
 801368e:	2b03      	cmp	r3, #3
 8013690:	f200 8084 	bhi.w	801379c <_dtoa_r+0x2f4>
 8013694:	e8df f003 	tbb	[pc, r3]
 8013698:	5637392c 	.word	0x5637392c
 801369c:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80136a0:	441c      	add	r4, r3
 80136a2:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80136a6:	2b20      	cmp	r3, #32
 80136a8:	bfc1      	itttt	gt
 80136aa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80136ae:	fa09 f903 	lslgt.w	r9, r9, r3
 80136b2:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 80136b6:	fa26 f303 	lsrgt.w	r3, r6, r3
 80136ba:	bfd6      	itet	le
 80136bc:	f1c3 0320 	rsble	r3, r3, #32
 80136c0:	ea49 0003 	orrgt.w	r0, r9, r3
 80136c4:	fa06 f003 	lslle.w	r0, r6, r3
 80136c8:	f7ec fef4 	bl	80004b4 <__aeabi_ui2d>
 80136cc:	2201      	movs	r2, #1
 80136ce:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80136d2:	3c01      	subs	r4, #1
 80136d4:	9213      	str	r2, [sp, #76]	; 0x4c
 80136d6:	e770      	b.n	80135ba <_dtoa_r+0x112>
 80136d8:	2301      	movs	r3, #1
 80136da:	e7b4      	b.n	8013646 <_dtoa_r+0x19e>
 80136dc:	900f      	str	r0, [sp, #60]	; 0x3c
 80136de:	e7b3      	b.n	8013648 <_dtoa_r+0x1a0>
 80136e0:	f1cb 0300 	rsb	r3, fp, #0
 80136e4:	930a      	str	r3, [sp, #40]	; 0x28
 80136e6:	2300      	movs	r3, #0
 80136e8:	eba9 090b 	sub.w	r9, r9, fp
 80136ec:	930e      	str	r3, [sp, #56]	; 0x38
 80136ee:	e7c1      	b.n	8013674 <_dtoa_r+0x1cc>
 80136f0:	2300      	movs	r3, #0
 80136f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80136f4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80136f6:	2b00      	cmp	r3, #0
 80136f8:	dc53      	bgt.n	80137a2 <_dtoa_r+0x2fa>
 80136fa:	2301      	movs	r3, #1
 80136fc:	9306      	str	r3, [sp, #24]
 80136fe:	9308      	str	r3, [sp, #32]
 8013700:	461a      	mov	r2, r3
 8013702:	9223      	str	r2, [sp, #140]	; 0x8c
 8013704:	e00b      	b.n	801371e <_dtoa_r+0x276>
 8013706:	2301      	movs	r3, #1
 8013708:	e7f3      	b.n	80136f2 <_dtoa_r+0x24a>
 801370a:	2300      	movs	r3, #0
 801370c:	930b      	str	r3, [sp, #44]	; 0x2c
 801370e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8013710:	445b      	add	r3, fp
 8013712:	9306      	str	r3, [sp, #24]
 8013714:	3301      	adds	r3, #1
 8013716:	2b01      	cmp	r3, #1
 8013718:	9308      	str	r3, [sp, #32]
 801371a:	bfb8      	it	lt
 801371c:	2301      	movlt	r3, #1
 801371e:	69e8      	ldr	r0, [r5, #28]
 8013720:	2100      	movs	r1, #0
 8013722:	2204      	movs	r2, #4
 8013724:	f102 0614 	add.w	r6, r2, #20
 8013728:	429e      	cmp	r6, r3
 801372a:	d93e      	bls.n	80137aa <_dtoa_r+0x302>
 801372c:	6041      	str	r1, [r0, #4]
 801372e:	4628      	mov	r0, r5
 8013730:	f000 fd98 	bl	8014264 <_Balloc>
 8013734:	9003      	str	r0, [sp, #12]
 8013736:	2800      	cmp	r0, #0
 8013738:	d13a      	bne.n	80137b0 <_dtoa_r+0x308>
 801373a:	4b17      	ldr	r3, [pc, #92]	; (8013798 <_dtoa_r+0x2f0>)
 801373c:	4602      	mov	r2, r0
 801373e:	f240 11af 	movw	r1, #431	; 0x1af
 8013742:	e6c5      	b.n	80134d0 <_dtoa_r+0x28>
 8013744:	2301      	movs	r3, #1
 8013746:	e7e1      	b.n	801370c <_dtoa_r+0x264>
 8013748:	2401      	movs	r4, #1
 801374a:	2300      	movs	r3, #0
 801374c:	9322      	str	r3, [sp, #136]	; 0x88
 801374e:	940b      	str	r4, [sp, #44]	; 0x2c
 8013750:	f04f 33ff 	mov.w	r3, #4294967295
 8013754:	9306      	str	r3, [sp, #24]
 8013756:	9308      	str	r3, [sp, #32]
 8013758:	2200      	movs	r2, #0
 801375a:	2312      	movs	r3, #18
 801375c:	e7d1      	b.n	8013702 <_dtoa_r+0x25a>
 801375e:	bf00      	nop
 8013760:	636f4361 	.word	0x636f4361
 8013764:	3fd287a7 	.word	0x3fd287a7
 8013768:	8b60c8b3 	.word	0x8b60c8b3
 801376c:	3fc68a28 	.word	0x3fc68a28
 8013770:	509f79fb 	.word	0x509f79fb
 8013774:	3fd34413 	.word	0x3fd34413
 8013778:	08017d09 	.word	0x08017d09
 801377c:	08017d20 	.word	0x08017d20
 8013780:	7ff00000 	.word	0x7ff00000
 8013784:	08017d05 	.word	0x08017d05
 8013788:	08017cfc 	.word	0x08017cfc
 801378c:	08017cd4 	.word	0x08017cd4
 8013790:	3ff80000 	.word	0x3ff80000
 8013794:	08017e10 	.word	0x08017e10
 8013798:	08017d78 	.word	0x08017d78
 801379c:	2301      	movs	r3, #1
 801379e:	930b      	str	r3, [sp, #44]	; 0x2c
 80137a0:	e7d6      	b.n	8013750 <_dtoa_r+0x2a8>
 80137a2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80137a4:	9306      	str	r3, [sp, #24]
 80137a6:	9308      	str	r3, [sp, #32]
 80137a8:	e7b9      	b.n	801371e <_dtoa_r+0x276>
 80137aa:	3101      	adds	r1, #1
 80137ac:	0052      	lsls	r2, r2, #1
 80137ae:	e7b9      	b.n	8013724 <_dtoa_r+0x27c>
 80137b0:	69eb      	ldr	r3, [r5, #28]
 80137b2:	9a03      	ldr	r2, [sp, #12]
 80137b4:	601a      	str	r2, [r3, #0]
 80137b6:	9b08      	ldr	r3, [sp, #32]
 80137b8:	2b0e      	cmp	r3, #14
 80137ba:	f200 80a8 	bhi.w	801390e <_dtoa_r+0x466>
 80137be:	2c00      	cmp	r4, #0
 80137c0:	f000 80a5 	beq.w	801390e <_dtoa_r+0x466>
 80137c4:	f1bb 0f00 	cmp.w	fp, #0
 80137c8:	dd34      	ble.n	8013834 <_dtoa_r+0x38c>
 80137ca:	4b9a      	ldr	r3, [pc, #616]	; (8013a34 <_dtoa_r+0x58c>)
 80137cc:	f00b 020f 	and.w	r2, fp, #15
 80137d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80137d4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80137d8:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80137dc:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80137e0:	ea4f 142b 	mov.w	r4, fp, asr #4
 80137e4:	d016      	beq.n	8013814 <_dtoa_r+0x36c>
 80137e6:	4b94      	ldr	r3, [pc, #592]	; (8013a38 <_dtoa_r+0x590>)
 80137e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80137ec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80137f0:	f7ed f804 	bl	80007fc <__aeabi_ddiv>
 80137f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80137f8:	f004 040f 	and.w	r4, r4, #15
 80137fc:	2703      	movs	r7, #3
 80137fe:	4e8e      	ldr	r6, [pc, #568]	; (8013a38 <_dtoa_r+0x590>)
 8013800:	b954      	cbnz	r4, 8013818 <_dtoa_r+0x370>
 8013802:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8013806:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801380a:	f7ec fff7 	bl	80007fc <__aeabi_ddiv>
 801380e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013812:	e029      	b.n	8013868 <_dtoa_r+0x3c0>
 8013814:	2702      	movs	r7, #2
 8013816:	e7f2      	b.n	80137fe <_dtoa_r+0x356>
 8013818:	07e1      	lsls	r1, r4, #31
 801381a:	d508      	bpl.n	801382e <_dtoa_r+0x386>
 801381c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8013820:	e9d6 2300 	ldrd	r2, r3, [r6]
 8013824:	f7ec fec0 	bl	80005a8 <__aeabi_dmul>
 8013828:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 801382c:	3701      	adds	r7, #1
 801382e:	1064      	asrs	r4, r4, #1
 8013830:	3608      	adds	r6, #8
 8013832:	e7e5      	b.n	8013800 <_dtoa_r+0x358>
 8013834:	f000 80a5 	beq.w	8013982 <_dtoa_r+0x4da>
 8013838:	f1cb 0400 	rsb	r4, fp, #0
 801383c:	4b7d      	ldr	r3, [pc, #500]	; (8013a34 <_dtoa_r+0x58c>)
 801383e:	4e7e      	ldr	r6, [pc, #504]	; (8013a38 <_dtoa_r+0x590>)
 8013840:	f004 020f 	and.w	r2, r4, #15
 8013844:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013848:	e9d3 2300 	ldrd	r2, r3, [r3]
 801384c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8013850:	f7ec feaa 	bl	80005a8 <__aeabi_dmul>
 8013854:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013858:	1124      	asrs	r4, r4, #4
 801385a:	2300      	movs	r3, #0
 801385c:	2702      	movs	r7, #2
 801385e:	2c00      	cmp	r4, #0
 8013860:	f040 8084 	bne.w	801396c <_dtoa_r+0x4c4>
 8013864:	2b00      	cmp	r3, #0
 8013866:	d1d2      	bne.n	801380e <_dtoa_r+0x366>
 8013868:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 801386c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8013870:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013872:	2b00      	cmp	r3, #0
 8013874:	f000 8087 	beq.w	8013986 <_dtoa_r+0x4de>
 8013878:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801387c:	4b6f      	ldr	r3, [pc, #444]	; (8013a3c <_dtoa_r+0x594>)
 801387e:	2200      	movs	r2, #0
 8013880:	f7ed f904 	bl	8000a8c <__aeabi_dcmplt>
 8013884:	2800      	cmp	r0, #0
 8013886:	d07e      	beq.n	8013986 <_dtoa_r+0x4de>
 8013888:	9b08      	ldr	r3, [sp, #32]
 801388a:	2b00      	cmp	r3, #0
 801388c:	d07b      	beq.n	8013986 <_dtoa_r+0x4de>
 801388e:	9b06      	ldr	r3, [sp, #24]
 8013890:	2b00      	cmp	r3, #0
 8013892:	dd38      	ble.n	8013906 <_dtoa_r+0x45e>
 8013894:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8013898:	4b69      	ldr	r3, [pc, #420]	; (8013a40 <_dtoa_r+0x598>)
 801389a:	2200      	movs	r2, #0
 801389c:	f7ec fe84 	bl	80005a8 <__aeabi_dmul>
 80138a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80138a4:	9c06      	ldr	r4, [sp, #24]
 80138a6:	f10b 38ff 	add.w	r8, fp, #4294967295
 80138aa:	3701      	adds	r7, #1
 80138ac:	4638      	mov	r0, r7
 80138ae:	f7ec fe11 	bl	80004d4 <__aeabi_i2d>
 80138b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80138b6:	f7ec fe77 	bl	80005a8 <__aeabi_dmul>
 80138ba:	4b62      	ldr	r3, [pc, #392]	; (8013a44 <_dtoa_r+0x59c>)
 80138bc:	2200      	movs	r2, #0
 80138be:	f7ec fcbd 	bl	800023c <__adddf3>
 80138c2:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80138c6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80138ca:	9611      	str	r6, [sp, #68]	; 0x44
 80138cc:	2c00      	cmp	r4, #0
 80138ce:	d15d      	bne.n	801398c <_dtoa_r+0x4e4>
 80138d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80138d4:	4b5c      	ldr	r3, [pc, #368]	; (8013a48 <_dtoa_r+0x5a0>)
 80138d6:	2200      	movs	r2, #0
 80138d8:	f7ec fcae 	bl	8000238 <__aeabi_dsub>
 80138dc:	4602      	mov	r2, r0
 80138de:	460b      	mov	r3, r1
 80138e0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80138e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80138e6:	4633      	mov	r3, r6
 80138e8:	f7ed f8ee 	bl	8000ac8 <__aeabi_dcmpgt>
 80138ec:	2800      	cmp	r0, #0
 80138ee:	f040 8295 	bne.w	8013e1c <_dtoa_r+0x974>
 80138f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80138f6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80138f8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80138fc:	f7ed f8c6 	bl	8000a8c <__aeabi_dcmplt>
 8013900:	2800      	cmp	r0, #0
 8013902:	f040 8289 	bne.w	8013e18 <_dtoa_r+0x970>
 8013906:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 801390a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 801390e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013910:	2b00      	cmp	r3, #0
 8013912:	f2c0 8151 	blt.w	8013bb8 <_dtoa_r+0x710>
 8013916:	f1bb 0f0e 	cmp.w	fp, #14
 801391a:	f300 814d 	bgt.w	8013bb8 <_dtoa_r+0x710>
 801391e:	4b45      	ldr	r3, [pc, #276]	; (8013a34 <_dtoa_r+0x58c>)
 8013920:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8013924:	e9d3 3400 	ldrd	r3, r4, [r3]
 8013928:	e9cd 3406 	strd	r3, r4, [sp, #24]
 801392c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801392e:	2b00      	cmp	r3, #0
 8013930:	f280 80da 	bge.w	8013ae8 <_dtoa_r+0x640>
 8013934:	9b08      	ldr	r3, [sp, #32]
 8013936:	2b00      	cmp	r3, #0
 8013938:	f300 80d6 	bgt.w	8013ae8 <_dtoa_r+0x640>
 801393c:	f040 826b 	bne.w	8013e16 <_dtoa_r+0x96e>
 8013940:	4b41      	ldr	r3, [pc, #260]	; (8013a48 <_dtoa_r+0x5a0>)
 8013942:	2200      	movs	r2, #0
 8013944:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013948:	f7ec fe2e 	bl	80005a8 <__aeabi_dmul>
 801394c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013950:	f7ed f8b0 	bl	8000ab4 <__aeabi_dcmpge>
 8013954:	9c08      	ldr	r4, [sp, #32]
 8013956:	4626      	mov	r6, r4
 8013958:	2800      	cmp	r0, #0
 801395a:	f040 8241 	bne.w	8013de0 <_dtoa_r+0x938>
 801395e:	9f03      	ldr	r7, [sp, #12]
 8013960:	2331      	movs	r3, #49	; 0x31
 8013962:	f807 3b01 	strb.w	r3, [r7], #1
 8013966:	f10b 0b01 	add.w	fp, fp, #1
 801396a:	e23d      	b.n	8013de8 <_dtoa_r+0x940>
 801396c:	07e2      	lsls	r2, r4, #31
 801396e:	d505      	bpl.n	801397c <_dtoa_r+0x4d4>
 8013970:	e9d6 2300 	ldrd	r2, r3, [r6]
 8013974:	f7ec fe18 	bl	80005a8 <__aeabi_dmul>
 8013978:	3701      	adds	r7, #1
 801397a:	2301      	movs	r3, #1
 801397c:	1064      	asrs	r4, r4, #1
 801397e:	3608      	adds	r6, #8
 8013980:	e76d      	b.n	801385e <_dtoa_r+0x3b6>
 8013982:	2702      	movs	r7, #2
 8013984:	e770      	b.n	8013868 <_dtoa_r+0x3c0>
 8013986:	9c08      	ldr	r4, [sp, #32]
 8013988:	46d8      	mov	r8, fp
 801398a:	e78f      	b.n	80138ac <_dtoa_r+0x404>
 801398c:	9903      	ldr	r1, [sp, #12]
 801398e:	4b29      	ldr	r3, [pc, #164]	; (8013a34 <_dtoa_r+0x58c>)
 8013990:	4421      	add	r1, r4
 8013992:	9112      	str	r1, [sp, #72]	; 0x48
 8013994:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013996:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801399a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 801399e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80139a2:	2900      	cmp	r1, #0
 80139a4:	d054      	beq.n	8013a50 <_dtoa_r+0x5a8>
 80139a6:	4929      	ldr	r1, [pc, #164]	; (8013a4c <_dtoa_r+0x5a4>)
 80139a8:	2000      	movs	r0, #0
 80139aa:	f7ec ff27 	bl	80007fc <__aeabi_ddiv>
 80139ae:	463b      	mov	r3, r7
 80139b0:	4632      	mov	r2, r6
 80139b2:	f7ec fc41 	bl	8000238 <__aeabi_dsub>
 80139b6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80139ba:	9f03      	ldr	r7, [sp, #12]
 80139bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80139c0:	f7ed f8a2 	bl	8000b08 <__aeabi_d2iz>
 80139c4:	4604      	mov	r4, r0
 80139c6:	f7ec fd85 	bl	80004d4 <__aeabi_i2d>
 80139ca:	4602      	mov	r2, r0
 80139cc:	460b      	mov	r3, r1
 80139ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80139d2:	f7ec fc31 	bl	8000238 <__aeabi_dsub>
 80139d6:	3430      	adds	r4, #48	; 0x30
 80139d8:	4602      	mov	r2, r0
 80139da:	460b      	mov	r3, r1
 80139dc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80139e0:	f807 4b01 	strb.w	r4, [r7], #1
 80139e4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80139e8:	f7ed f850 	bl	8000a8c <__aeabi_dcmplt>
 80139ec:	2800      	cmp	r0, #0
 80139ee:	d173      	bne.n	8013ad8 <_dtoa_r+0x630>
 80139f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80139f4:	4911      	ldr	r1, [pc, #68]	; (8013a3c <_dtoa_r+0x594>)
 80139f6:	2000      	movs	r0, #0
 80139f8:	f7ec fc1e 	bl	8000238 <__aeabi_dsub>
 80139fc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8013a00:	f7ed f844 	bl	8000a8c <__aeabi_dcmplt>
 8013a04:	2800      	cmp	r0, #0
 8013a06:	f040 80b6 	bne.w	8013b76 <_dtoa_r+0x6ce>
 8013a0a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013a0c:	429f      	cmp	r7, r3
 8013a0e:	f43f af7a 	beq.w	8013906 <_dtoa_r+0x45e>
 8013a12:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8013a16:	4b0a      	ldr	r3, [pc, #40]	; (8013a40 <_dtoa_r+0x598>)
 8013a18:	2200      	movs	r2, #0
 8013a1a:	f7ec fdc5 	bl	80005a8 <__aeabi_dmul>
 8013a1e:	4b08      	ldr	r3, [pc, #32]	; (8013a40 <_dtoa_r+0x598>)
 8013a20:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8013a24:	2200      	movs	r2, #0
 8013a26:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013a2a:	f7ec fdbd 	bl	80005a8 <__aeabi_dmul>
 8013a2e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013a32:	e7c3      	b.n	80139bc <_dtoa_r+0x514>
 8013a34:	08017e10 	.word	0x08017e10
 8013a38:	08017de8 	.word	0x08017de8
 8013a3c:	3ff00000 	.word	0x3ff00000
 8013a40:	40240000 	.word	0x40240000
 8013a44:	401c0000 	.word	0x401c0000
 8013a48:	40140000 	.word	0x40140000
 8013a4c:	3fe00000 	.word	0x3fe00000
 8013a50:	4630      	mov	r0, r6
 8013a52:	4639      	mov	r1, r7
 8013a54:	f7ec fda8 	bl	80005a8 <__aeabi_dmul>
 8013a58:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8013a5c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013a5e:	9c03      	ldr	r4, [sp, #12]
 8013a60:	9314      	str	r3, [sp, #80]	; 0x50
 8013a62:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013a66:	f7ed f84f 	bl	8000b08 <__aeabi_d2iz>
 8013a6a:	9015      	str	r0, [sp, #84]	; 0x54
 8013a6c:	f7ec fd32 	bl	80004d4 <__aeabi_i2d>
 8013a70:	4602      	mov	r2, r0
 8013a72:	460b      	mov	r3, r1
 8013a74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013a78:	f7ec fbde 	bl	8000238 <__aeabi_dsub>
 8013a7c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013a7e:	3330      	adds	r3, #48	; 0x30
 8013a80:	f804 3b01 	strb.w	r3, [r4], #1
 8013a84:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013a86:	429c      	cmp	r4, r3
 8013a88:	4606      	mov	r6, r0
 8013a8a:	460f      	mov	r7, r1
 8013a8c:	f04f 0200 	mov.w	r2, #0
 8013a90:	d124      	bne.n	8013adc <_dtoa_r+0x634>
 8013a92:	4bb0      	ldr	r3, [pc, #704]	; (8013d54 <_dtoa_r+0x8ac>)
 8013a94:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8013a98:	f7ec fbd0 	bl	800023c <__adddf3>
 8013a9c:	4602      	mov	r2, r0
 8013a9e:	460b      	mov	r3, r1
 8013aa0:	4630      	mov	r0, r6
 8013aa2:	4639      	mov	r1, r7
 8013aa4:	f7ed f810 	bl	8000ac8 <__aeabi_dcmpgt>
 8013aa8:	2800      	cmp	r0, #0
 8013aaa:	d163      	bne.n	8013b74 <_dtoa_r+0x6cc>
 8013aac:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8013ab0:	49a8      	ldr	r1, [pc, #672]	; (8013d54 <_dtoa_r+0x8ac>)
 8013ab2:	2000      	movs	r0, #0
 8013ab4:	f7ec fbc0 	bl	8000238 <__aeabi_dsub>
 8013ab8:	4602      	mov	r2, r0
 8013aba:	460b      	mov	r3, r1
 8013abc:	4630      	mov	r0, r6
 8013abe:	4639      	mov	r1, r7
 8013ac0:	f7ec ffe4 	bl	8000a8c <__aeabi_dcmplt>
 8013ac4:	2800      	cmp	r0, #0
 8013ac6:	f43f af1e 	beq.w	8013906 <_dtoa_r+0x45e>
 8013aca:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8013acc:	1e7b      	subs	r3, r7, #1
 8013ace:	9314      	str	r3, [sp, #80]	; 0x50
 8013ad0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8013ad4:	2b30      	cmp	r3, #48	; 0x30
 8013ad6:	d0f8      	beq.n	8013aca <_dtoa_r+0x622>
 8013ad8:	46c3      	mov	fp, r8
 8013ada:	e03b      	b.n	8013b54 <_dtoa_r+0x6ac>
 8013adc:	4b9e      	ldr	r3, [pc, #632]	; (8013d58 <_dtoa_r+0x8b0>)
 8013ade:	f7ec fd63 	bl	80005a8 <__aeabi_dmul>
 8013ae2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013ae6:	e7bc      	b.n	8013a62 <_dtoa_r+0x5ba>
 8013ae8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8013aec:	9f03      	ldr	r7, [sp, #12]
 8013aee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013af2:	4640      	mov	r0, r8
 8013af4:	4649      	mov	r1, r9
 8013af6:	f7ec fe81 	bl	80007fc <__aeabi_ddiv>
 8013afa:	f7ed f805 	bl	8000b08 <__aeabi_d2iz>
 8013afe:	4604      	mov	r4, r0
 8013b00:	f7ec fce8 	bl	80004d4 <__aeabi_i2d>
 8013b04:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013b08:	f7ec fd4e 	bl	80005a8 <__aeabi_dmul>
 8013b0c:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8013b10:	4602      	mov	r2, r0
 8013b12:	460b      	mov	r3, r1
 8013b14:	4640      	mov	r0, r8
 8013b16:	4649      	mov	r1, r9
 8013b18:	f7ec fb8e 	bl	8000238 <__aeabi_dsub>
 8013b1c:	f807 6b01 	strb.w	r6, [r7], #1
 8013b20:	9e03      	ldr	r6, [sp, #12]
 8013b22:	f8dd c020 	ldr.w	ip, [sp, #32]
 8013b26:	1bbe      	subs	r6, r7, r6
 8013b28:	45b4      	cmp	ip, r6
 8013b2a:	4602      	mov	r2, r0
 8013b2c:	460b      	mov	r3, r1
 8013b2e:	d136      	bne.n	8013b9e <_dtoa_r+0x6f6>
 8013b30:	f7ec fb84 	bl	800023c <__adddf3>
 8013b34:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013b38:	4680      	mov	r8, r0
 8013b3a:	4689      	mov	r9, r1
 8013b3c:	f7ec ffc4 	bl	8000ac8 <__aeabi_dcmpgt>
 8013b40:	bb58      	cbnz	r0, 8013b9a <_dtoa_r+0x6f2>
 8013b42:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013b46:	4640      	mov	r0, r8
 8013b48:	4649      	mov	r1, r9
 8013b4a:	f7ec ff95 	bl	8000a78 <__aeabi_dcmpeq>
 8013b4e:	b108      	cbz	r0, 8013b54 <_dtoa_r+0x6ac>
 8013b50:	07e3      	lsls	r3, r4, #31
 8013b52:	d422      	bmi.n	8013b9a <_dtoa_r+0x6f2>
 8013b54:	4651      	mov	r1, sl
 8013b56:	4628      	mov	r0, r5
 8013b58:	f000 fbc4 	bl	80142e4 <_Bfree>
 8013b5c:	2300      	movs	r3, #0
 8013b5e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8013b60:	703b      	strb	r3, [r7, #0]
 8013b62:	f10b 0301 	add.w	r3, fp, #1
 8013b66:	6013      	str	r3, [r2, #0]
 8013b68:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8013b6a:	2b00      	cmp	r3, #0
 8013b6c:	f43f ace9 	beq.w	8013542 <_dtoa_r+0x9a>
 8013b70:	601f      	str	r7, [r3, #0]
 8013b72:	e4e6      	b.n	8013542 <_dtoa_r+0x9a>
 8013b74:	4627      	mov	r7, r4
 8013b76:	463b      	mov	r3, r7
 8013b78:	461f      	mov	r7, r3
 8013b7a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013b7e:	2a39      	cmp	r2, #57	; 0x39
 8013b80:	d107      	bne.n	8013b92 <_dtoa_r+0x6ea>
 8013b82:	9a03      	ldr	r2, [sp, #12]
 8013b84:	429a      	cmp	r2, r3
 8013b86:	d1f7      	bne.n	8013b78 <_dtoa_r+0x6d0>
 8013b88:	9903      	ldr	r1, [sp, #12]
 8013b8a:	2230      	movs	r2, #48	; 0x30
 8013b8c:	f108 0801 	add.w	r8, r8, #1
 8013b90:	700a      	strb	r2, [r1, #0]
 8013b92:	781a      	ldrb	r2, [r3, #0]
 8013b94:	3201      	adds	r2, #1
 8013b96:	701a      	strb	r2, [r3, #0]
 8013b98:	e79e      	b.n	8013ad8 <_dtoa_r+0x630>
 8013b9a:	46d8      	mov	r8, fp
 8013b9c:	e7eb      	b.n	8013b76 <_dtoa_r+0x6ce>
 8013b9e:	4b6e      	ldr	r3, [pc, #440]	; (8013d58 <_dtoa_r+0x8b0>)
 8013ba0:	2200      	movs	r2, #0
 8013ba2:	f7ec fd01 	bl	80005a8 <__aeabi_dmul>
 8013ba6:	2200      	movs	r2, #0
 8013ba8:	2300      	movs	r3, #0
 8013baa:	4680      	mov	r8, r0
 8013bac:	4689      	mov	r9, r1
 8013bae:	f7ec ff63 	bl	8000a78 <__aeabi_dcmpeq>
 8013bb2:	2800      	cmp	r0, #0
 8013bb4:	d09b      	beq.n	8013aee <_dtoa_r+0x646>
 8013bb6:	e7cd      	b.n	8013b54 <_dtoa_r+0x6ac>
 8013bb8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013bba:	2a00      	cmp	r2, #0
 8013bbc:	f000 80c4 	beq.w	8013d48 <_dtoa_r+0x8a0>
 8013bc0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8013bc2:	2a01      	cmp	r2, #1
 8013bc4:	f300 80a8 	bgt.w	8013d18 <_dtoa_r+0x870>
 8013bc8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8013bca:	2a00      	cmp	r2, #0
 8013bcc:	f000 80a0 	beq.w	8013d10 <_dtoa_r+0x868>
 8013bd0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8013bd4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8013bd6:	464f      	mov	r7, r9
 8013bd8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013bda:	2101      	movs	r1, #1
 8013bdc:	441a      	add	r2, r3
 8013bde:	4628      	mov	r0, r5
 8013be0:	4499      	add	r9, r3
 8013be2:	9209      	str	r2, [sp, #36]	; 0x24
 8013be4:	f000 fc7e 	bl	80144e4 <__i2b>
 8013be8:	4606      	mov	r6, r0
 8013bea:	b15f      	cbz	r7, 8013c04 <_dtoa_r+0x75c>
 8013bec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013bee:	2b00      	cmp	r3, #0
 8013bf0:	dd08      	ble.n	8013c04 <_dtoa_r+0x75c>
 8013bf2:	42bb      	cmp	r3, r7
 8013bf4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013bf6:	bfa8      	it	ge
 8013bf8:	463b      	movge	r3, r7
 8013bfa:	eba9 0903 	sub.w	r9, r9, r3
 8013bfe:	1aff      	subs	r7, r7, r3
 8013c00:	1ad3      	subs	r3, r2, r3
 8013c02:	9309      	str	r3, [sp, #36]	; 0x24
 8013c04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013c06:	b1f3      	cbz	r3, 8013c46 <_dtoa_r+0x79e>
 8013c08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013c0a:	2b00      	cmp	r3, #0
 8013c0c:	f000 80a0 	beq.w	8013d50 <_dtoa_r+0x8a8>
 8013c10:	2c00      	cmp	r4, #0
 8013c12:	dd10      	ble.n	8013c36 <_dtoa_r+0x78e>
 8013c14:	4631      	mov	r1, r6
 8013c16:	4622      	mov	r2, r4
 8013c18:	4628      	mov	r0, r5
 8013c1a:	f000 fd23 	bl	8014664 <__pow5mult>
 8013c1e:	4652      	mov	r2, sl
 8013c20:	4601      	mov	r1, r0
 8013c22:	4606      	mov	r6, r0
 8013c24:	4628      	mov	r0, r5
 8013c26:	f000 fc73 	bl	8014510 <__multiply>
 8013c2a:	4651      	mov	r1, sl
 8013c2c:	4680      	mov	r8, r0
 8013c2e:	4628      	mov	r0, r5
 8013c30:	f000 fb58 	bl	80142e4 <_Bfree>
 8013c34:	46c2      	mov	sl, r8
 8013c36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013c38:	1b1a      	subs	r2, r3, r4
 8013c3a:	d004      	beq.n	8013c46 <_dtoa_r+0x79e>
 8013c3c:	4651      	mov	r1, sl
 8013c3e:	4628      	mov	r0, r5
 8013c40:	f000 fd10 	bl	8014664 <__pow5mult>
 8013c44:	4682      	mov	sl, r0
 8013c46:	2101      	movs	r1, #1
 8013c48:	4628      	mov	r0, r5
 8013c4a:	f000 fc4b 	bl	80144e4 <__i2b>
 8013c4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013c50:	2b00      	cmp	r3, #0
 8013c52:	4604      	mov	r4, r0
 8013c54:	f340 8082 	ble.w	8013d5c <_dtoa_r+0x8b4>
 8013c58:	461a      	mov	r2, r3
 8013c5a:	4601      	mov	r1, r0
 8013c5c:	4628      	mov	r0, r5
 8013c5e:	f000 fd01 	bl	8014664 <__pow5mult>
 8013c62:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8013c64:	2b01      	cmp	r3, #1
 8013c66:	4604      	mov	r4, r0
 8013c68:	dd7b      	ble.n	8013d62 <_dtoa_r+0x8ba>
 8013c6a:	f04f 0800 	mov.w	r8, #0
 8013c6e:	6923      	ldr	r3, [r4, #16]
 8013c70:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8013c74:	6918      	ldr	r0, [r3, #16]
 8013c76:	f000 fbe7 	bl	8014448 <__hi0bits>
 8013c7a:	f1c0 0020 	rsb	r0, r0, #32
 8013c7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013c80:	4418      	add	r0, r3
 8013c82:	f010 001f 	ands.w	r0, r0, #31
 8013c86:	f000 8092 	beq.w	8013dae <_dtoa_r+0x906>
 8013c8a:	f1c0 0320 	rsb	r3, r0, #32
 8013c8e:	2b04      	cmp	r3, #4
 8013c90:	f340 8085 	ble.w	8013d9e <_dtoa_r+0x8f6>
 8013c94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013c96:	f1c0 001c 	rsb	r0, r0, #28
 8013c9a:	4403      	add	r3, r0
 8013c9c:	4481      	add	r9, r0
 8013c9e:	4407      	add	r7, r0
 8013ca0:	9309      	str	r3, [sp, #36]	; 0x24
 8013ca2:	f1b9 0f00 	cmp.w	r9, #0
 8013ca6:	dd05      	ble.n	8013cb4 <_dtoa_r+0x80c>
 8013ca8:	4651      	mov	r1, sl
 8013caa:	464a      	mov	r2, r9
 8013cac:	4628      	mov	r0, r5
 8013cae:	f000 fd33 	bl	8014718 <__lshift>
 8013cb2:	4682      	mov	sl, r0
 8013cb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013cb6:	2b00      	cmp	r3, #0
 8013cb8:	dd05      	ble.n	8013cc6 <_dtoa_r+0x81e>
 8013cba:	4621      	mov	r1, r4
 8013cbc:	461a      	mov	r2, r3
 8013cbe:	4628      	mov	r0, r5
 8013cc0:	f000 fd2a 	bl	8014718 <__lshift>
 8013cc4:	4604      	mov	r4, r0
 8013cc6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013cc8:	2b00      	cmp	r3, #0
 8013cca:	d072      	beq.n	8013db2 <_dtoa_r+0x90a>
 8013ccc:	4621      	mov	r1, r4
 8013cce:	4650      	mov	r0, sl
 8013cd0:	f000 fd8e 	bl	80147f0 <__mcmp>
 8013cd4:	2800      	cmp	r0, #0
 8013cd6:	da6c      	bge.n	8013db2 <_dtoa_r+0x90a>
 8013cd8:	2300      	movs	r3, #0
 8013cda:	4651      	mov	r1, sl
 8013cdc:	220a      	movs	r2, #10
 8013cde:	4628      	mov	r0, r5
 8013ce0:	f000 fb22 	bl	8014328 <__multadd>
 8013ce4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013ce6:	f10b 3bff 	add.w	fp, fp, #4294967295
 8013cea:	4682      	mov	sl, r0
 8013cec:	2b00      	cmp	r3, #0
 8013cee:	f000 81ad 	beq.w	801404c <_dtoa_r+0xba4>
 8013cf2:	2300      	movs	r3, #0
 8013cf4:	4631      	mov	r1, r6
 8013cf6:	220a      	movs	r2, #10
 8013cf8:	4628      	mov	r0, r5
 8013cfa:	f000 fb15 	bl	8014328 <__multadd>
 8013cfe:	9b06      	ldr	r3, [sp, #24]
 8013d00:	2b00      	cmp	r3, #0
 8013d02:	4606      	mov	r6, r0
 8013d04:	f300 8093 	bgt.w	8013e2e <_dtoa_r+0x986>
 8013d08:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8013d0a:	2b02      	cmp	r3, #2
 8013d0c:	dc59      	bgt.n	8013dc2 <_dtoa_r+0x91a>
 8013d0e:	e08e      	b.n	8013e2e <_dtoa_r+0x986>
 8013d10:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8013d12:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8013d16:	e75d      	b.n	8013bd4 <_dtoa_r+0x72c>
 8013d18:	9b08      	ldr	r3, [sp, #32]
 8013d1a:	1e5c      	subs	r4, r3, #1
 8013d1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013d1e:	42a3      	cmp	r3, r4
 8013d20:	bfbf      	itttt	lt
 8013d22:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8013d24:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8013d26:	940a      	strlt	r4, [sp, #40]	; 0x28
 8013d28:	1ae3      	sublt	r3, r4, r3
 8013d2a:	bfb4      	ite	lt
 8013d2c:	18d2      	addlt	r2, r2, r3
 8013d2e:	1b1c      	subge	r4, r3, r4
 8013d30:	9b08      	ldr	r3, [sp, #32]
 8013d32:	bfbc      	itt	lt
 8013d34:	920e      	strlt	r2, [sp, #56]	; 0x38
 8013d36:	2400      	movlt	r4, #0
 8013d38:	2b00      	cmp	r3, #0
 8013d3a:	bfb5      	itete	lt
 8013d3c:	eba9 0703 	sublt.w	r7, r9, r3
 8013d40:	9b08      	ldrge	r3, [sp, #32]
 8013d42:	2300      	movlt	r3, #0
 8013d44:	464f      	movge	r7, r9
 8013d46:	e747      	b.n	8013bd8 <_dtoa_r+0x730>
 8013d48:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8013d4a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8013d4c:	464f      	mov	r7, r9
 8013d4e:	e74c      	b.n	8013bea <_dtoa_r+0x742>
 8013d50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013d52:	e773      	b.n	8013c3c <_dtoa_r+0x794>
 8013d54:	3fe00000 	.word	0x3fe00000
 8013d58:	40240000 	.word	0x40240000
 8013d5c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8013d5e:	2b01      	cmp	r3, #1
 8013d60:	dc18      	bgt.n	8013d94 <_dtoa_r+0x8ec>
 8013d62:	9b04      	ldr	r3, [sp, #16]
 8013d64:	b9b3      	cbnz	r3, 8013d94 <_dtoa_r+0x8ec>
 8013d66:	9b05      	ldr	r3, [sp, #20]
 8013d68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013d6c:	b993      	cbnz	r3, 8013d94 <_dtoa_r+0x8ec>
 8013d6e:	9b05      	ldr	r3, [sp, #20]
 8013d70:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013d74:	0d1b      	lsrs	r3, r3, #20
 8013d76:	051b      	lsls	r3, r3, #20
 8013d78:	b17b      	cbz	r3, 8013d9a <_dtoa_r+0x8f2>
 8013d7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013d7c:	3301      	adds	r3, #1
 8013d7e:	f109 0901 	add.w	r9, r9, #1
 8013d82:	9309      	str	r3, [sp, #36]	; 0x24
 8013d84:	f04f 0801 	mov.w	r8, #1
 8013d88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013d8a:	2b00      	cmp	r3, #0
 8013d8c:	f47f af6f 	bne.w	8013c6e <_dtoa_r+0x7c6>
 8013d90:	2001      	movs	r0, #1
 8013d92:	e774      	b.n	8013c7e <_dtoa_r+0x7d6>
 8013d94:	f04f 0800 	mov.w	r8, #0
 8013d98:	e7f6      	b.n	8013d88 <_dtoa_r+0x8e0>
 8013d9a:	4698      	mov	r8, r3
 8013d9c:	e7f4      	b.n	8013d88 <_dtoa_r+0x8e0>
 8013d9e:	d080      	beq.n	8013ca2 <_dtoa_r+0x7fa>
 8013da0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013da2:	331c      	adds	r3, #28
 8013da4:	441a      	add	r2, r3
 8013da6:	4499      	add	r9, r3
 8013da8:	441f      	add	r7, r3
 8013daa:	9209      	str	r2, [sp, #36]	; 0x24
 8013dac:	e779      	b.n	8013ca2 <_dtoa_r+0x7fa>
 8013dae:	4603      	mov	r3, r0
 8013db0:	e7f6      	b.n	8013da0 <_dtoa_r+0x8f8>
 8013db2:	9b08      	ldr	r3, [sp, #32]
 8013db4:	2b00      	cmp	r3, #0
 8013db6:	dc34      	bgt.n	8013e22 <_dtoa_r+0x97a>
 8013db8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8013dba:	2b02      	cmp	r3, #2
 8013dbc:	dd31      	ble.n	8013e22 <_dtoa_r+0x97a>
 8013dbe:	9b08      	ldr	r3, [sp, #32]
 8013dc0:	9306      	str	r3, [sp, #24]
 8013dc2:	9b06      	ldr	r3, [sp, #24]
 8013dc4:	b963      	cbnz	r3, 8013de0 <_dtoa_r+0x938>
 8013dc6:	4621      	mov	r1, r4
 8013dc8:	2205      	movs	r2, #5
 8013dca:	4628      	mov	r0, r5
 8013dcc:	f000 faac 	bl	8014328 <__multadd>
 8013dd0:	4601      	mov	r1, r0
 8013dd2:	4604      	mov	r4, r0
 8013dd4:	4650      	mov	r0, sl
 8013dd6:	f000 fd0b 	bl	80147f0 <__mcmp>
 8013dda:	2800      	cmp	r0, #0
 8013ddc:	f73f adbf 	bgt.w	801395e <_dtoa_r+0x4b6>
 8013de0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8013de2:	9f03      	ldr	r7, [sp, #12]
 8013de4:	ea6f 0b03 	mvn.w	fp, r3
 8013de8:	f04f 0800 	mov.w	r8, #0
 8013dec:	4621      	mov	r1, r4
 8013dee:	4628      	mov	r0, r5
 8013df0:	f000 fa78 	bl	80142e4 <_Bfree>
 8013df4:	2e00      	cmp	r6, #0
 8013df6:	f43f aead 	beq.w	8013b54 <_dtoa_r+0x6ac>
 8013dfa:	f1b8 0f00 	cmp.w	r8, #0
 8013dfe:	d005      	beq.n	8013e0c <_dtoa_r+0x964>
 8013e00:	45b0      	cmp	r8, r6
 8013e02:	d003      	beq.n	8013e0c <_dtoa_r+0x964>
 8013e04:	4641      	mov	r1, r8
 8013e06:	4628      	mov	r0, r5
 8013e08:	f000 fa6c 	bl	80142e4 <_Bfree>
 8013e0c:	4631      	mov	r1, r6
 8013e0e:	4628      	mov	r0, r5
 8013e10:	f000 fa68 	bl	80142e4 <_Bfree>
 8013e14:	e69e      	b.n	8013b54 <_dtoa_r+0x6ac>
 8013e16:	2400      	movs	r4, #0
 8013e18:	4626      	mov	r6, r4
 8013e1a:	e7e1      	b.n	8013de0 <_dtoa_r+0x938>
 8013e1c:	46c3      	mov	fp, r8
 8013e1e:	4626      	mov	r6, r4
 8013e20:	e59d      	b.n	801395e <_dtoa_r+0x4b6>
 8013e22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013e24:	2b00      	cmp	r3, #0
 8013e26:	f000 80c8 	beq.w	8013fba <_dtoa_r+0xb12>
 8013e2a:	9b08      	ldr	r3, [sp, #32]
 8013e2c:	9306      	str	r3, [sp, #24]
 8013e2e:	2f00      	cmp	r7, #0
 8013e30:	dd05      	ble.n	8013e3e <_dtoa_r+0x996>
 8013e32:	4631      	mov	r1, r6
 8013e34:	463a      	mov	r2, r7
 8013e36:	4628      	mov	r0, r5
 8013e38:	f000 fc6e 	bl	8014718 <__lshift>
 8013e3c:	4606      	mov	r6, r0
 8013e3e:	f1b8 0f00 	cmp.w	r8, #0
 8013e42:	d05b      	beq.n	8013efc <_dtoa_r+0xa54>
 8013e44:	6871      	ldr	r1, [r6, #4]
 8013e46:	4628      	mov	r0, r5
 8013e48:	f000 fa0c 	bl	8014264 <_Balloc>
 8013e4c:	4607      	mov	r7, r0
 8013e4e:	b928      	cbnz	r0, 8013e5c <_dtoa_r+0x9b4>
 8013e50:	4b82      	ldr	r3, [pc, #520]	; (801405c <_dtoa_r+0xbb4>)
 8013e52:	4602      	mov	r2, r0
 8013e54:	f240 21ef 	movw	r1, #751	; 0x2ef
 8013e58:	f7ff bb3a 	b.w	80134d0 <_dtoa_r+0x28>
 8013e5c:	6932      	ldr	r2, [r6, #16]
 8013e5e:	3202      	adds	r2, #2
 8013e60:	0092      	lsls	r2, r2, #2
 8013e62:	f106 010c 	add.w	r1, r6, #12
 8013e66:	300c      	adds	r0, #12
 8013e68:	f002 f8cc 	bl	8016004 <memcpy>
 8013e6c:	2201      	movs	r2, #1
 8013e6e:	4639      	mov	r1, r7
 8013e70:	4628      	mov	r0, r5
 8013e72:	f000 fc51 	bl	8014718 <__lshift>
 8013e76:	9b03      	ldr	r3, [sp, #12]
 8013e78:	9a03      	ldr	r2, [sp, #12]
 8013e7a:	3301      	adds	r3, #1
 8013e7c:	9308      	str	r3, [sp, #32]
 8013e7e:	9b06      	ldr	r3, [sp, #24]
 8013e80:	4413      	add	r3, r2
 8013e82:	930b      	str	r3, [sp, #44]	; 0x2c
 8013e84:	9b04      	ldr	r3, [sp, #16]
 8013e86:	f003 0301 	and.w	r3, r3, #1
 8013e8a:	46b0      	mov	r8, r6
 8013e8c:	930a      	str	r3, [sp, #40]	; 0x28
 8013e8e:	4606      	mov	r6, r0
 8013e90:	9b08      	ldr	r3, [sp, #32]
 8013e92:	4621      	mov	r1, r4
 8013e94:	3b01      	subs	r3, #1
 8013e96:	4650      	mov	r0, sl
 8013e98:	9304      	str	r3, [sp, #16]
 8013e9a:	f7ff fa7d 	bl	8013398 <quorem>
 8013e9e:	4641      	mov	r1, r8
 8013ea0:	9006      	str	r0, [sp, #24]
 8013ea2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8013ea6:	4650      	mov	r0, sl
 8013ea8:	f000 fca2 	bl	80147f0 <__mcmp>
 8013eac:	4632      	mov	r2, r6
 8013eae:	9009      	str	r0, [sp, #36]	; 0x24
 8013eb0:	4621      	mov	r1, r4
 8013eb2:	4628      	mov	r0, r5
 8013eb4:	f000 fcb8 	bl	8014828 <__mdiff>
 8013eb8:	68c2      	ldr	r2, [r0, #12]
 8013eba:	4607      	mov	r7, r0
 8013ebc:	bb02      	cbnz	r2, 8013f00 <_dtoa_r+0xa58>
 8013ebe:	4601      	mov	r1, r0
 8013ec0:	4650      	mov	r0, sl
 8013ec2:	f000 fc95 	bl	80147f0 <__mcmp>
 8013ec6:	4602      	mov	r2, r0
 8013ec8:	4639      	mov	r1, r7
 8013eca:	4628      	mov	r0, r5
 8013ecc:	920c      	str	r2, [sp, #48]	; 0x30
 8013ece:	f000 fa09 	bl	80142e4 <_Bfree>
 8013ed2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8013ed4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013ed6:	9f08      	ldr	r7, [sp, #32]
 8013ed8:	ea43 0102 	orr.w	r1, r3, r2
 8013edc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013ede:	4319      	orrs	r1, r3
 8013ee0:	d110      	bne.n	8013f04 <_dtoa_r+0xa5c>
 8013ee2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8013ee6:	d029      	beq.n	8013f3c <_dtoa_r+0xa94>
 8013ee8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013eea:	2b00      	cmp	r3, #0
 8013eec:	dd02      	ble.n	8013ef4 <_dtoa_r+0xa4c>
 8013eee:	9b06      	ldr	r3, [sp, #24]
 8013ef0:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8013ef4:	9b04      	ldr	r3, [sp, #16]
 8013ef6:	f883 9000 	strb.w	r9, [r3]
 8013efa:	e777      	b.n	8013dec <_dtoa_r+0x944>
 8013efc:	4630      	mov	r0, r6
 8013efe:	e7ba      	b.n	8013e76 <_dtoa_r+0x9ce>
 8013f00:	2201      	movs	r2, #1
 8013f02:	e7e1      	b.n	8013ec8 <_dtoa_r+0xa20>
 8013f04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013f06:	2b00      	cmp	r3, #0
 8013f08:	db04      	blt.n	8013f14 <_dtoa_r+0xa6c>
 8013f0a:	9922      	ldr	r1, [sp, #136]	; 0x88
 8013f0c:	430b      	orrs	r3, r1
 8013f0e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013f10:	430b      	orrs	r3, r1
 8013f12:	d120      	bne.n	8013f56 <_dtoa_r+0xaae>
 8013f14:	2a00      	cmp	r2, #0
 8013f16:	dded      	ble.n	8013ef4 <_dtoa_r+0xa4c>
 8013f18:	4651      	mov	r1, sl
 8013f1a:	2201      	movs	r2, #1
 8013f1c:	4628      	mov	r0, r5
 8013f1e:	f000 fbfb 	bl	8014718 <__lshift>
 8013f22:	4621      	mov	r1, r4
 8013f24:	4682      	mov	sl, r0
 8013f26:	f000 fc63 	bl	80147f0 <__mcmp>
 8013f2a:	2800      	cmp	r0, #0
 8013f2c:	dc03      	bgt.n	8013f36 <_dtoa_r+0xa8e>
 8013f2e:	d1e1      	bne.n	8013ef4 <_dtoa_r+0xa4c>
 8013f30:	f019 0f01 	tst.w	r9, #1
 8013f34:	d0de      	beq.n	8013ef4 <_dtoa_r+0xa4c>
 8013f36:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8013f3a:	d1d8      	bne.n	8013eee <_dtoa_r+0xa46>
 8013f3c:	9a04      	ldr	r2, [sp, #16]
 8013f3e:	2339      	movs	r3, #57	; 0x39
 8013f40:	7013      	strb	r3, [r2, #0]
 8013f42:	463b      	mov	r3, r7
 8013f44:	461f      	mov	r7, r3
 8013f46:	3b01      	subs	r3, #1
 8013f48:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8013f4c:	2a39      	cmp	r2, #57	; 0x39
 8013f4e:	d06c      	beq.n	801402a <_dtoa_r+0xb82>
 8013f50:	3201      	adds	r2, #1
 8013f52:	701a      	strb	r2, [r3, #0]
 8013f54:	e74a      	b.n	8013dec <_dtoa_r+0x944>
 8013f56:	2a00      	cmp	r2, #0
 8013f58:	dd07      	ble.n	8013f6a <_dtoa_r+0xac2>
 8013f5a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8013f5e:	d0ed      	beq.n	8013f3c <_dtoa_r+0xa94>
 8013f60:	9a04      	ldr	r2, [sp, #16]
 8013f62:	f109 0301 	add.w	r3, r9, #1
 8013f66:	7013      	strb	r3, [r2, #0]
 8013f68:	e740      	b.n	8013dec <_dtoa_r+0x944>
 8013f6a:	9b08      	ldr	r3, [sp, #32]
 8013f6c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013f6e:	f803 9c01 	strb.w	r9, [r3, #-1]
 8013f72:	4293      	cmp	r3, r2
 8013f74:	d043      	beq.n	8013ffe <_dtoa_r+0xb56>
 8013f76:	4651      	mov	r1, sl
 8013f78:	2300      	movs	r3, #0
 8013f7a:	220a      	movs	r2, #10
 8013f7c:	4628      	mov	r0, r5
 8013f7e:	f000 f9d3 	bl	8014328 <__multadd>
 8013f82:	45b0      	cmp	r8, r6
 8013f84:	4682      	mov	sl, r0
 8013f86:	f04f 0300 	mov.w	r3, #0
 8013f8a:	f04f 020a 	mov.w	r2, #10
 8013f8e:	4641      	mov	r1, r8
 8013f90:	4628      	mov	r0, r5
 8013f92:	d107      	bne.n	8013fa4 <_dtoa_r+0xafc>
 8013f94:	f000 f9c8 	bl	8014328 <__multadd>
 8013f98:	4680      	mov	r8, r0
 8013f9a:	4606      	mov	r6, r0
 8013f9c:	9b08      	ldr	r3, [sp, #32]
 8013f9e:	3301      	adds	r3, #1
 8013fa0:	9308      	str	r3, [sp, #32]
 8013fa2:	e775      	b.n	8013e90 <_dtoa_r+0x9e8>
 8013fa4:	f000 f9c0 	bl	8014328 <__multadd>
 8013fa8:	4631      	mov	r1, r6
 8013faa:	4680      	mov	r8, r0
 8013fac:	2300      	movs	r3, #0
 8013fae:	220a      	movs	r2, #10
 8013fb0:	4628      	mov	r0, r5
 8013fb2:	f000 f9b9 	bl	8014328 <__multadd>
 8013fb6:	4606      	mov	r6, r0
 8013fb8:	e7f0      	b.n	8013f9c <_dtoa_r+0xaf4>
 8013fba:	9b08      	ldr	r3, [sp, #32]
 8013fbc:	9306      	str	r3, [sp, #24]
 8013fbe:	9f03      	ldr	r7, [sp, #12]
 8013fc0:	4621      	mov	r1, r4
 8013fc2:	4650      	mov	r0, sl
 8013fc4:	f7ff f9e8 	bl	8013398 <quorem>
 8013fc8:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8013fcc:	9b03      	ldr	r3, [sp, #12]
 8013fce:	f807 9b01 	strb.w	r9, [r7], #1
 8013fd2:	1afa      	subs	r2, r7, r3
 8013fd4:	9b06      	ldr	r3, [sp, #24]
 8013fd6:	4293      	cmp	r3, r2
 8013fd8:	dd07      	ble.n	8013fea <_dtoa_r+0xb42>
 8013fda:	4651      	mov	r1, sl
 8013fdc:	2300      	movs	r3, #0
 8013fde:	220a      	movs	r2, #10
 8013fe0:	4628      	mov	r0, r5
 8013fe2:	f000 f9a1 	bl	8014328 <__multadd>
 8013fe6:	4682      	mov	sl, r0
 8013fe8:	e7ea      	b.n	8013fc0 <_dtoa_r+0xb18>
 8013fea:	9b06      	ldr	r3, [sp, #24]
 8013fec:	2b00      	cmp	r3, #0
 8013fee:	bfc8      	it	gt
 8013ff0:	461f      	movgt	r7, r3
 8013ff2:	9b03      	ldr	r3, [sp, #12]
 8013ff4:	bfd8      	it	le
 8013ff6:	2701      	movle	r7, #1
 8013ff8:	441f      	add	r7, r3
 8013ffa:	f04f 0800 	mov.w	r8, #0
 8013ffe:	4651      	mov	r1, sl
 8014000:	2201      	movs	r2, #1
 8014002:	4628      	mov	r0, r5
 8014004:	f000 fb88 	bl	8014718 <__lshift>
 8014008:	4621      	mov	r1, r4
 801400a:	4682      	mov	sl, r0
 801400c:	f000 fbf0 	bl	80147f0 <__mcmp>
 8014010:	2800      	cmp	r0, #0
 8014012:	dc96      	bgt.n	8013f42 <_dtoa_r+0xa9a>
 8014014:	d102      	bne.n	801401c <_dtoa_r+0xb74>
 8014016:	f019 0f01 	tst.w	r9, #1
 801401a:	d192      	bne.n	8013f42 <_dtoa_r+0xa9a>
 801401c:	463b      	mov	r3, r7
 801401e:	461f      	mov	r7, r3
 8014020:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014024:	2a30      	cmp	r2, #48	; 0x30
 8014026:	d0fa      	beq.n	801401e <_dtoa_r+0xb76>
 8014028:	e6e0      	b.n	8013dec <_dtoa_r+0x944>
 801402a:	9a03      	ldr	r2, [sp, #12]
 801402c:	429a      	cmp	r2, r3
 801402e:	d189      	bne.n	8013f44 <_dtoa_r+0xa9c>
 8014030:	f10b 0b01 	add.w	fp, fp, #1
 8014034:	2331      	movs	r3, #49	; 0x31
 8014036:	e796      	b.n	8013f66 <_dtoa_r+0xabe>
 8014038:	4b09      	ldr	r3, [pc, #36]	; (8014060 <_dtoa_r+0xbb8>)
 801403a:	f7ff baa1 	b.w	8013580 <_dtoa_r+0xd8>
 801403e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8014040:	2b00      	cmp	r3, #0
 8014042:	f47f aa79 	bne.w	8013538 <_dtoa_r+0x90>
 8014046:	4b07      	ldr	r3, [pc, #28]	; (8014064 <_dtoa_r+0xbbc>)
 8014048:	f7ff ba9a 	b.w	8013580 <_dtoa_r+0xd8>
 801404c:	9b06      	ldr	r3, [sp, #24]
 801404e:	2b00      	cmp	r3, #0
 8014050:	dcb5      	bgt.n	8013fbe <_dtoa_r+0xb16>
 8014052:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8014054:	2b02      	cmp	r3, #2
 8014056:	f73f aeb4 	bgt.w	8013dc2 <_dtoa_r+0x91a>
 801405a:	e7b0      	b.n	8013fbe <_dtoa_r+0xb16>
 801405c:	08017d78 	.word	0x08017d78
 8014060:	08017cd3 	.word	0x08017cd3
 8014064:	08017cfc 	.word	0x08017cfc

08014068 <_free_r>:
 8014068:	b538      	push	{r3, r4, r5, lr}
 801406a:	4605      	mov	r5, r0
 801406c:	2900      	cmp	r1, #0
 801406e:	d041      	beq.n	80140f4 <_free_r+0x8c>
 8014070:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014074:	1f0c      	subs	r4, r1, #4
 8014076:	2b00      	cmp	r3, #0
 8014078:	bfb8      	it	lt
 801407a:	18e4      	addlt	r4, r4, r3
 801407c:	f000 f8e6 	bl	801424c <__malloc_lock>
 8014080:	4a1d      	ldr	r2, [pc, #116]	; (80140f8 <_free_r+0x90>)
 8014082:	6813      	ldr	r3, [r2, #0]
 8014084:	b933      	cbnz	r3, 8014094 <_free_r+0x2c>
 8014086:	6063      	str	r3, [r4, #4]
 8014088:	6014      	str	r4, [r2, #0]
 801408a:	4628      	mov	r0, r5
 801408c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014090:	f000 b8e2 	b.w	8014258 <__malloc_unlock>
 8014094:	42a3      	cmp	r3, r4
 8014096:	d908      	bls.n	80140aa <_free_r+0x42>
 8014098:	6820      	ldr	r0, [r4, #0]
 801409a:	1821      	adds	r1, r4, r0
 801409c:	428b      	cmp	r3, r1
 801409e:	bf01      	itttt	eq
 80140a0:	6819      	ldreq	r1, [r3, #0]
 80140a2:	685b      	ldreq	r3, [r3, #4]
 80140a4:	1809      	addeq	r1, r1, r0
 80140a6:	6021      	streq	r1, [r4, #0]
 80140a8:	e7ed      	b.n	8014086 <_free_r+0x1e>
 80140aa:	461a      	mov	r2, r3
 80140ac:	685b      	ldr	r3, [r3, #4]
 80140ae:	b10b      	cbz	r3, 80140b4 <_free_r+0x4c>
 80140b0:	42a3      	cmp	r3, r4
 80140b2:	d9fa      	bls.n	80140aa <_free_r+0x42>
 80140b4:	6811      	ldr	r1, [r2, #0]
 80140b6:	1850      	adds	r0, r2, r1
 80140b8:	42a0      	cmp	r0, r4
 80140ba:	d10b      	bne.n	80140d4 <_free_r+0x6c>
 80140bc:	6820      	ldr	r0, [r4, #0]
 80140be:	4401      	add	r1, r0
 80140c0:	1850      	adds	r0, r2, r1
 80140c2:	4283      	cmp	r3, r0
 80140c4:	6011      	str	r1, [r2, #0]
 80140c6:	d1e0      	bne.n	801408a <_free_r+0x22>
 80140c8:	6818      	ldr	r0, [r3, #0]
 80140ca:	685b      	ldr	r3, [r3, #4]
 80140cc:	6053      	str	r3, [r2, #4]
 80140ce:	4408      	add	r0, r1
 80140d0:	6010      	str	r0, [r2, #0]
 80140d2:	e7da      	b.n	801408a <_free_r+0x22>
 80140d4:	d902      	bls.n	80140dc <_free_r+0x74>
 80140d6:	230c      	movs	r3, #12
 80140d8:	602b      	str	r3, [r5, #0]
 80140da:	e7d6      	b.n	801408a <_free_r+0x22>
 80140dc:	6820      	ldr	r0, [r4, #0]
 80140de:	1821      	adds	r1, r4, r0
 80140e0:	428b      	cmp	r3, r1
 80140e2:	bf04      	itt	eq
 80140e4:	6819      	ldreq	r1, [r3, #0]
 80140e6:	685b      	ldreq	r3, [r3, #4]
 80140e8:	6063      	str	r3, [r4, #4]
 80140ea:	bf04      	itt	eq
 80140ec:	1809      	addeq	r1, r1, r0
 80140ee:	6021      	streq	r1, [r4, #0]
 80140f0:	6054      	str	r4, [r2, #4]
 80140f2:	e7ca      	b.n	801408a <_free_r+0x22>
 80140f4:	bd38      	pop	{r3, r4, r5, pc}
 80140f6:	bf00      	nop
 80140f8:	20001b18 	.word	0x20001b18

080140fc <malloc>:
 80140fc:	4b02      	ldr	r3, [pc, #8]	; (8014108 <malloc+0xc>)
 80140fe:	4601      	mov	r1, r0
 8014100:	6818      	ldr	r0, [r3, #0]
 8014102:	f000 b823 	b.w	801414c <_malloc_r>
 8014106:	bf00      	nop
 8014108:	20000138 	.word	0x20000138

0801410c <sbrk_aligned>:
 801410c:	b570      	push	{r4, r5, r6, lr}
 801410e:	4e0e      	ldr	r6, [pc, #56]	; (8014148 <sbrk_aligned+0x3c>)
 8014110:	460c      	mov	r4, r1
 8014112:	6831      	ldr	r1, [r6, #0]
 8014114:	4605      	mov	r5, r0
 8014116:	b911      	cbnz	r1, 801411e <sbrk_aligned+0x12>
 8014118:	f001 ff5c 	bl	8015fd4 <_sbrk_r>
 801411c:	6030      	str	r0, [r6, #0]
 801411e:	4621      	mov	r1, r4
 8014120:	4628      	mov	r0, r5
 8014122:	f001 ff57 	bl	8015fd4 <_sbrk_r>
 8014126:	1c43      	adds	r3, r0, #1
 8014128:	d00a      	beq.n	8014140 <sbrk_aligned+0x34>
 801412a:	1cc4      	adds	r4, r0, #3
 801412c:	f024 0403 	bic.w	r4, r4, #3
 8014130:	42a0      	cmp	r0, r4
 8014132:	d007      	beq.n	8014144 <sbrk_aligned+0x38>
 8014134:	1a21      	subs	r1, r4, r0
 8014136:	4628      	mov	r0, r5
 8014138:	f001 ff4c 	bl	8015fd4 <_sbrk_r>
 801413c:	3001      	adds	r0, #1
 801413e:	d101      	bne.n	8014144 <sbrk_aligned+0x38>
 8014140:	f04f 34ff 	mov.w	r4, #4294967295
 8014144:	4620      	mov	r0, r4
 8014146:	bd70      	pop	{r4, r5, r6, pc}
 8014148:	20001b1c 	.word	0x20001b1c

0801414c <_malloc_r>:
 801414c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014150:	1ccd      	adds	r5, r1, #3
 8014152:	f025 0503 	bic.w	r5, r5, #3
 8014156:	3508      	adds	r5, #8
 8014158:	2d0c      	cmp	r5, #12
 801415a:	bf38      	it	cc
 801415c:	250c      	movcc	r5, #12
 801415e:	2d00      	cmp	r5, #0
 8014160:	4607      	mov	r7, r0
 8014162:	db01      	blt.n	8014168 <_malloc_r+0x1c>
 8014164:	42a9      	cmp	r1, r5
 8014166:	d905      	bls.n	8014174 <_malloc_r+0x28>
 8014168:	230c      	movs	r3, #12
 801416a:	603b      	str	r3, [r7, #0]
 801416c:	2600      	movs	r6, #0
 801416e:	4630      	mov	r0, r6
 8014170:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014174:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8014248 <_malloc_r+0xfc>
 8014178:	f000 f868 	bl	801424c <__malloc_lock>
 801417c:	f8d8 3000 	ldr.w	r3, [r8]
 8014180:	461c      	mov	r4, r3
 8014182:	bb5c      	cbnz	r4, 80141dc <_malloc_r+0x90>
 8014184:	4629      	mov	r1, r5
 8014186:	4638      	mov	r0, r7
 8014188:	f7ff ffc0 	bl	801410c <sbrk_aligned>
 801418c:	1c43      	adds	r3, r0, #1
 801418e:	4604      	mov	r4, r0
 8014190:	d155      	bne.n	801423e <_malloc_r+0xf2>
 8014192:	f8d8 4000 	ldr.w	r4, [r8]
 8014196:	4626      	mov	r6, r4
 8014198:	2e00      	cmp	r6, #0
 801419a:	d145      	bne.n	8014228 <_malloc_r+0xdc>
 801419c:	2c00      	cmp	r4, #0
 801419e:	d048      	beq.n	8014232 <_malloc_r+0xe6>
 80141a0:	6823      	ldr	r3, [r4, #0]
 80141a2:	4631      	mov	r1, r6
 80141a4:	4638      	mov	r0, r7
 80141a6:	eb04 0903 	add.w	r9, r4, r3
 80141aa:	f001 ff13 	bl	8015fd4 <_sbrk_r>
 80141ae:	4581      	cmp	r9, r0
 80141b0:	d13f      	bne.n	8014232 <_malloc_r+0xe6>
 80141b2:	6821      	ldr	r1, [r4, #0]
 80141b4:	1a6d      	subs	r5, r5, r1
 80141b6:	4629      	mov	r1, r5
 80141b8:	4638      	mov	r0, r7
 80141ba:	f7ff ffa7 	bl	801410c <sbrk_aligned>
 80141be:	3001      	adds	r0, #1
 80141c0:	d037      	beq.n	8014232 <_malloc_r+0xe6>
 80141c2:	6823      	ldr	r3, [r4, #0]
 80141c4:	442b      	add	r3, r5
 80141c6:	6023      	str	r3, [r4, #0]
 80141c8:	f8d8 3000 	ldr.w	r3, [r8]
 80141cc:	2b00      	cmp	r3, #0
 80141ce:	d038      	beq.n	8014242 <_malloc_r+0xf6>
 80141d0:	685a      	ldr	r2, [r3, #4]
 80141d2:	42a2      	cmp	r2, r4
 80141d4:	d12b      	bne.n	801422e <_malloc_r+0xe2>
 80141d6:	2200      	movs	r2, #0
 80141d8:	605a      	str	r2, [r3, #4]
 80141da:	e00f      	b.n	80141fc <_malloc_r+0xb0>
 80141dc:	6822      	ldr	r2, [r4, #0]
 80141de:	1b52      	subs	r2, r2, r5
 80141e0:	d41f      	bmi.n	8014222 <_malloc_r+0xd6>
 80141e2:	2a0b      	cmp	r2, #11
 80141e4:	d917      	bls.n	8014216 <_malloc_r+0xca>
 80141e6:	1961      	adds	r1, r4, r5
 80141e8:	42a3      	cmp	r3, r4
 80141ea:	6025      	str	r5, [r4, #0]
 80141ec:	bf18      	it	ne
 80141ee:	6059      	strne	r1, [r3, #4]
 80141f0:	6863      	ldr	r3, [r4, #4]
 80141f2:	bf08      	it	eq
 80141f4:	f8c8 1000 	streq.w	r1, [r8]
 80141f8:	5162      	str	r2, [r4, r5]
 80141fa:	604b      	str	r3, [r1, #4]
 80141fc:	4638      	mov	r0, r7
 80141fe:	f104 060b 	add.w	r6, r4, #11
 8014202:	f000 f829 	bl	8014258 <__malloc_unlock>
 8014206:	f026 0607 	bic.w	r6, r6, #7
 801420a:	1d23      	adds	r3, r4, #4
 801420c:	1af2      	subs	r2, r6, r3
 801420e:	d0ae      	beq.n	801416e <_malloc_r+0x22>
 8014210:	1b9b      	subs	r3, r3, r6
 8014212:	50a3      	str	r3, [r4, r2]
 8014214:	e7ab      	b.n	801416e <_malloc_r+0x22>
 8014216:	42a3      	cmp	r3, r4
 8014218:	6862      	ldr	r2, [r4, #4]
 801421a:	d1dd      	bne.n	80141d8 <_malloc_r+0x8c>
 801421c:	f8c8 2000 	str.w	r2, [r8]
 8014220:	e7ec      	b.n	80141fc <_malloc_r+0xb0>
 8014222:	4623      	mov	r3, r4
 8014224:	6864      	ldr	r4, [r4, #4]
 8014226:	e7ac      	b.n	8014182 <_malloc_r+0x36>
 8014228:	4634      	mov	r4, r6
 801422a:	6876      	ldr	r6, [r6, #4]
 801422c:	e7b4      	b.n	8014198 <_malloc_r+0x4c>
 801422e:	4613      	mov	r3, r2
 8014230:	e7cc      	b.n	80141cc <_malloc_r+0x80>
 8014232:	230c      	movs	r3, #12
 8014234:	603b      	str	r3, [r7, #0]
 8014236:	4638      	mov	r0, r7
 8014238:	f000 f80e 	bl	8014258 <__malloc_unlock>
 801423c:	e797      	b.n	801416e <_malloc_r+0x22>
 801423e:	6025      	str	r5, [r4, #0]
 8014240:	e7dc      	b.n	80141fc <_malloc_r+0xb0>
 8014242:	605b      	str	r3, [r3, #4]
 8014244:	deff      	udf	#255	; 0xff
 8014246:	bf00      	nop
 8014248:	20001b18 	.word	0x20001b18

0801424c <__malloc_lock>:
 801424c:	4801      	ldr	r0, [pc, #4]	; (8014254 <__malloc_lock+0x8>)
 801424e:	f7ff b89d 	b.w	801338c <__retarget_lock_acquire_recursive>
 8014252:	bf00      	nop
 8014254:	20001b14 	.word	0x20001b14

08014258 <__malloc_unlock>:
 8014258:	4801      	ldr	r0, [pc, #4]	; (8014260 <__malloc_unlock+0x8>)
 801425a:	f7ff b898 	b.w	801338e <__retarget_lock_release_recursive>
 801425e:	bf00      	nop
 8014260:	20001b14 	.word	0x20001b14

08014264 <_Balloc>:
 8014264:	b570      	push	{r4, r5, r6, lr}
 8014266:	69c6      	ldr	r6, [r0, #28]
 8014268:	4604      	mov	r4, r0
 801426a:	460d      	mov	r5, r1
 801426c:	b976      	cbnz	r6, 801428c <_Balloc+0x28>
 801426e:	2010      	movs	r0, #16
 8014270:	f7ff ff44 	bl	80140fc <malloc>
 8014274:	4602      	mov	r2, r0
 8014276:	61e0      	str	r0, [r4, #28]
 8014278:	b920      	cbnz	r0, 8014284 <_Balloc+0x20>
 801427a:	4b18      	ldr	r3, [pc, #96]	; (80142dc <_Balloc+0x78>)
 801427c:	4818      	ldr	r0, [pc, #96]	; (80142e0 <_Balloc+0x7c>)
 801427e:	216b      	movs	r1, #107	; 0x6b
 8014280:	f001 fed4 	bl	801602c <__assert_func>
 8014284:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014288:	6006      	str	r6, [r0, #0]
 801428a:	60c6      	str	r6, [r0, #12]
 801428c:	69e6      	ldr	r6, [r4, #28]
 801428e:	68f3      	ldr	r3, [r6, #12]
 8014290:	b183      	cbz	r3, 80142b4 <_Balloc+0x50>
 8014292:	69e3      	ldr	r3, [r4, #28]
 8014294:	68db      	ldr	r3, [r3, #12]
 8014296:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801429a:	b9b8      	cbnz	r0, 80142cc <_Balloc+0x68>
 801429c:	2101      	movs	r1, #1
 801429e:	fa01 f605 	lsl.w	r6, r1, r5
 80142a2:	1d72      	adds	r2, r6, #5
 80142a4:	0092      	lsls	r2, r2, #2
 80142a6:	4620      	mov	r0, r4
 80142a8:	f001 fede 	bl	8016068 <_calloc_r>
 80142ac:	b160      	cbz	r0, 80142c8 <_Balloc+0x64>
 80142ae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80142b2:	e00e      	b.n	80142d2 <_Balloc+0x6e>
 80142b4:	2221      	movs	r2, #33	; 0x21
 80142b6:	2104      	movs	r1, #4
 80142b8:	4620      	mov	r0, r4
 80142ba:	f001 fed5 	bl	8016068 <_calloc_r>
 80142be:	69e3      	ldr	r3, [r4, #28]
 80142c0:	60f0      	str	r0, [r6, #12]
 80142c2:	68db      	ldr	r3, [r3, #12]
 80142c4:	2b00      	cmp	r3, #0
 80142c6:	d1e4      	bne.n	8014292 <_Balloc+0x2e>
 80142c8:	2000      	movs	r0, #0
 80142ca:	bd70      	pop	{r4, r5, r6, pc}
 80142cc:	6802      	ldr	r2, [r0, #0]
 80142ce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80142d2:	2300      	movs	r3, #0
 80142d4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80142d8:	e7f7      	b.n	80142ca <_Balloc+0x66>
 80142da:	bf00      	nop
 80142dc:	08017d09 	.word	0x08017d09
 80142e0:	08017d89 	.word	0x08017d89

080142e4 <_Bfree>:
 80142e4:	b570      	push	{r4, r5, r6, lr}
 80142e6:	69c6      	ldr	r6, [r0, #28]
 80142e8:	4605      	mov	r5, r0
 80142ea:	460c      	mov	r4, r1
 80142ec:	b976      	cbnz	r6, 801430c <_Bfree+0x28>
 80142ee:	2010      	movs	r0, #16
 80142f0:	f7ff ff04 	bl	80140fc <malloc>
 80142f4:	4602      	mov	r2, r0
 80142f6:	61e8      	str	r0, [r5, #28]
 80142f8:	b920      	cbnz	r0, 8014304 <_Bfree+0x20>
 80142fa:	4b09      	ldr	r3, [pc, #36]	; (8014320 <_Bfree+0x3c>)
 80142fc:	4809      	ldr	r0, [pc, #36]	; (8014324 <_Bfree+0x40>)
 80142fe:	218f      	movs	r1, #143	; 0x8f
 8014300:	f001 fe94 	bl	801602c <__assert_func>
 8014304:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014308:	6006      	str	r6, [r0, #0]
 801430a:	60c6      	str	r6, [r0, #12]
 801430c:	b13c      	cbz	r4, 801431e <_Bfree+0x3a>
 801430e:	69eb      	ldr	r3, [r5, #28]
 8014310:	6862      	ldr	r2, [r4, #4]
 8014312:	68db      	ldr	r3, [r3, #12]
 8014314:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014318:	6021      	str	r1, [r4, #0]
 801431a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801431e:	bd70      	pop	{r4, r5, r6, pc}
 8014320:	08017d09 	.word	0x08017d09
 8014324:	08017d89 	.word	0x08017d89

08014328 <__multadd>:
 8014328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801432c:	690d      	ldr	r5, [r1, #16]
 801432e:	4607      	mov	r7, r0
 8014330:	460c      	mov	r4, r1
 8014332:	461e      	mov	r6, r3
 8014334:	f101 0c14 	add.w	ip, r1, #20
 8014338:	2000      	movs	r0, #0
 801433a:	f8dc 3000 	ldr.w	r3, [ip]
 801433e:	b299      	uxth	r1, r3
 8014340:	fb02 6101 	mla	r1, r2, r1, r6
 8014344:	0c1e      	lsrs	r6, r3, #16
 8014346:	0c0b      	lsrs	r3, r1, #16
 8014348:	fb02 3306 	mla	r3, r2, r6, r3
 801434c:	b289      	uxth	r1, r1
 801434e:	3001      	adds	r0, #1
 8014350:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8014354:	4285      	cmp	r5, r0
 8014356:	f84c 1b04 	str.w	r1, [ip], #4
 801435a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801435e:	dcec      	bgt.n	801433a <__multadd+0x12>
 8014360:	b30e      	cbz	r6, 80143a6 <__multadd+0x7e>
 8014362:	68a3      	ldr	r3, [r4, #8]
 8014364:	42ab      	cmp	r3, r5
 8014366:	dc19      	bgt.n	801439c <__multadd+0x74>
 8014368:	6861      	ldr	r1, [r4, #4]
 801436a:	4638      	mov	r0, r7
 801436c:	3101      	adds	r1, #1
 801436e:	f7ff ff79 	bl	8014264 <_Balloc>
 8014372:	4680      	mov	r8, r0
 8014374:	b928      	cbnz	r0, 8014382 <__multadd+0x5a>
 8014376:	4602      	mov	r2, r0
 8014378:	4b0c      	ldr	r3, [pc, #48]	; (80143ac <__multadd+0x84>)
 801437a:	480d      	ldr	r0, [pc, #52]	; (80143b0 <__multadd+0x88>)
 801437c:	21ba      	movs	r1, #186	; 0xba
 801437e:	f001 fe55 	bl	801602c <__assert_func>
 8014382:	6922      	ldr	r2, [r4, #16]
 8014384:	3202      	adds	r2, #2
 8014386:	f104 010c 	add.w	r1, r4, #12
 801438a:	0092      	lsls	r2, r2, #2
 801438c:	300c      	adds	r0, #12
 801438e:	f001 fe39 	bl	8016004 <memcpy>
 8014392:	4621      	mov	r1, r4
 8014394:	4638      	mov	r0, r7
 8014396:	f7ff ffa5 	bl	80142e4 <_Bfree>
 801439a:	4644      	mov	r4, r8
 801439c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80143a0:	3501      	adds	r5, #1
 80143a2:	615e      	str	r6, [r3, #20]
 80143a4:	6125      	str	r5, [r4, #16]
 80143a6:	4620      	mov	r0, r4
 80143a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80143ac:	08017d78 	.word	0x08017d78
 80143b0:	08017d89 	.word	0x08017d89

080143b4 <__s2b>:
 80143b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80143b8:	460c      	mov	r4, r1
 80143ba:	4615      	mov	r5, r2
 80143bc:	461f      	mov	r7, r3
 80143be:	2209      	movs	r2, #9
 80143c0:	3308      	adds	r3, #8
 80143c2:	4606      	mov	r6, r0
 80143c4:	fb93 f3f2 	sdiv	r3, r3, r2
 80143c8:	2100      	movs	r1, #0
 80143ca:	2201      	movs	r2, #1
 80143cc:	429a      	cmp	r2, r3
 80143ce:	db09      	blt.n	80143e4 <__s2b+0x30>
 80143d0:	4630      	mov	r0, r6
 80143d2:	f7ff ff47 	bl	8014264 <_Balloc>
 80143d6:	b940      	cbnz	r0, 80143ea <__s2b+0x36>
 80143d8:	4602      	mov	r2, r0
 80143da:	4b19      	ldr	r3, [pc, #100]	; (8014440 <__s2b+0x8c>)
 80143dc:	4819      	ldr	r0, [pc, #100]	; (8014444 <__s2b+0x90>)
 80143de:	21d3      	movs	r1, #211	; 0xd3
 80143e0:	f001 fe24 	bl	801602c <__assert_func>
 80143e4:	0052      	lsls	r2, r2, #1
 80143e6:	3101      	adds	r1, #1
 80143e8:	e7f0      	b.n	80143cc <__s2b+0x18>
 80143ea:	9b08      	ldr	r3, [sp, #32]
 80143ec:	6143      	str	r3, [r0, #20]
 80143ee:	2d09      	cmp	r5, #9
 80143f0:	f04f 0301 	mov.w	r3, #1
 80143f4:	6103      	str	r3, [r0, #16]
 80143f6:	dd16      	ble.n	8014426 <__s2b+0x72>
 80143f8:	f104 0909 	add.w	r9, r4, #9
 80143fc:	46c8      	mov	r8, r9
 80143fe:	442c      	add	r4, r5
 8014400:	f818 3b01 	ldrb.w	r3, [r8], #1
 8014404:	4601      	mov	r1, r0
 8014406:	3b30      	subs	r3, #48	; 0x30
 8014408:	220a      	movs	r2, #10
 801440a:	4630      	mov	r0, r6
 801440c:	f7ff ff8c 	bl	8014328 <__multadd>
 8014410:	45a0      	cmp	r8, r4
 8014412:	d1f5      	bne.n	8014400 <__s2b+0x4c>
 8014414:	f1a5 0408 	sub.w	r4, r5, #8
 8014418:	444c      	add	r4, r9
 801441a:	1b2d      	subs	r5, r5, r4
 801441c:	1963      	adds	r3, r4, r5
 801441e:	42bb      	cmp	r3, r7
 8014420:	db04      	blt.n	801442c <__s2b+0x78>
 8014422:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014426:	340a      	adds	r4, #10
 8014428:	2509      	movs	r5, #9
 801442a:	e7f6      	b.n	801441a <__s2b+0x66>
 801442c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8014430:	4601      	mov	r1, r0
 8014432:	3b30      	subs	r3, #48	; 0x30
 8014434:	220a      	movs	r2, #10
 8014436:	4630      	mov	r0, r6
 8014438:	f7ff ff76 	bl	8014328 <__multadd>
 801443c:	e7ee      	b.n	801441c <__s2b+0x68>
 801443e:	bf00      	nop
 8014440:	08017d78 	.word	0x08017d78
 8014444:	08017d89 	.word	0x08017d89

08014448 <__hi0bits>:
 8014448:	0c02      	lsrs	r2, r0, #16
 801444a:	0412      	lsls	r2, r2, #16
 801444c:	4603      	mov	r3, r0
 801444e:	b9ca      	cbnz	r2, 8014484 <__hi0bits+0x3c>
 8014450:	0403      	lsls	r3, r0, #16
 8014452:	2010      	movs	r0, #16
 8014454:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8014458:	bf04      	itt	eq
 801445a:	021b      	lsleq	r3, r3, #8
 801445c:	3008      	addeq	r0, #8
 801445e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8014462:	bf04      	itt	eq
 8014464:	011b      	lsleq	r3, r3, #4
 8014466:	3004      	addeq	r0, #4
 8014468:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801446c:	bf04      	itt	eq
 801446e:	009b      	lsleq	r3, r3, #2
 8014470:	3002      	addeq	r0, #2
 8014472:	2b00      	cmp	r3, #0
 8014474:	db05      	blt.n	8014482 <__hi0bits+0x3a>
 8014476:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 801447a:	f100 0001 	add.w	r0, r0, #1
 801447e:	bf08      	it	eq
 8014480:	2020      	moveq	r0, #32
 8014482:	4770      	bx	lr
 8014484:	2000      	movs	r0, #0
 8014486:	e7e5      	b.n	8014454 <__hi0bits+0xc>

08014488 <__lo0bits>:
 8014488:	6803      	ldr	r3, [r0, #0]
 801448a:	4602      	mov	r2, r0
 801448c:	f013 0007 	ands.w	r0, r3, #7
 8014490:	d00b      	beq.n	80144aa <__lo0bits+0x22>
 8014492:	07d9      	lsls	r1, r3, #31
 8014494:	d421      	bmi.n	80144da <__lo0bits+0x52>
 8014496:	0798      	lsls	r0, r3, #30
 8014498:	bf49      	itett	mi
 801449a:	085b      	lsrmi	r3, r3, #1
 801449c:	089b      	lsrpl	r3, r3, #2
 801449e:	2001      	movmi	r0, #1
 80144a0:	6013      	strmi	r3, [r2, #0]
 80144a2:	bf5c      	itt	pl
 80144a4:	6013      	strpl	r3, [r2, #0]
 80144a6:	2002      	movpl	r0, #2
 80144a8:	4770      	bx	lr
 80144aa:	b299      	uxth	r1, r3
 80144ac:	b909      	cbnz	r1, 80144b2 <__lo0bits+0x2a>
 80144ae:	0c1b      	lsrs	r3, r3, #16
 80144b0:	2010      	movs	r0, #16
 80144b2:	b2d9      	uxtb	r1, r3
 80144b4:	b909      	cbnz	r1, 80144ba <__lo0bits+0x32>
 80144b6:	3008      	adds	r0, #8
 80144b8:	0a1b      	lsrs	r3, r3, #8
 80144ba:	0719      	lsls	r1, r3, #28
 80144bc:	bf04      	itt	eq
 80144be:	091b      	lsreq	r3, r3, #4
 80144c0:	3004      	addeq	r0, #4
 80144c2:	0799      	lsls	r1, r3, #30
 80144c4:	bf04      	itt	eq
 80144c6:	089b      	lsreq	r3, r3, #2
 80144c8:	3002      	addeq	r0, #2
 80144ca:	07d9      	lsls	r1, r3, #31
 80144cc:	d403      	bmi.n	80144d6 <__lo0bits+0x4e>
 80144ce:	085b      	lsrs	r3, r3, #1
 80144d0:	f100 0001 	add.w	r0, r0, #1
 80144d4:	d003      	beq.n	80144de <__lo0bits+0x56>
 80144d6:	6013      	str	r3, [r2, #0]
 80144d8:	4770      	bx	lr
 80144da:	2000      	movs	r0, #0
 80144dc:	4770      	bx	lr
 80144de:	2020      	movs	r0, #32
 80144e0:	4770      	bx	lr
	...

080144e4 <__i2b>:
 80144e4:	b510      	push	{r4, lr}
 80144e6:	460c      	mov	r4, r1
 80144e8:	2101      	movs	r1, #1
 80144ea:	f7ff febb 	bl	8014264 <_Balloc>
 80144ee:	4602      	mov	r2, r0
 80144f0:	b928      	cbnz	r0, 80144fe <__i2b+0x1a>
 80144f2:	4b05      	ldr	r3, [pc, #20]	; (8014508 <__i2b+0x24>)
 80144f4:	4805      	ldr	r0, [pc, #20]	; (801450c <__i2b+0x28>)
 80144f6:	f240 1145 	movw	r1, #325	; 0x145
 80144fa:	f001 fd97 	bl	801602c <__assert_func>
 80144fe:	2301      	movs	r3, #1
 8014500:	6144      	str	r4, [r0, #20]
 8014502:	6103      	str	r3, [r0, #16]
 8014504:	bd10      	pop	{r4, pc}
 8014506:	bf00      	nop
 8014508:	08017d78 	.word	0x08017d78
 801450c:	08017d89 	.word	0x08017d89

08014510 <__multiply>:
 8014510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014514:	4691      	mov	r9, r2
 8014516:	690a      	ldr	r2, [r1, #16]
 8014518:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801451c:	429a      	cmp	r2, r3
 801451e:	bfb8      	it	lt
 8014520:	460b      	movlt	r3, r1
 8014522:	460c      	mov	r4, r1
 8014524:	bfbc      	itt	lt
 8014526:	464c      	movlt	r4, r9
 8014528:	4699      	movlt	r9, r3
 801452a:	6927      	ldr	r7, [r4, #16]
 801452c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8014530:	68a3      	ldr	r3, [r4, #8]
 8014532:	6861      	ldr	r1, [r4, #4]
 8014534:	eb07 060a 	add.w	r6, r7, sl
 8014538:	42b3      	cmp	r3, r6
 801453a:	b085      	sub	sp, #20
 801453c:	bfb8      	it	lt
 801453e:	3101      	addlt	r1, #1
 8014540:	f7ff fe90 	bl	8014264 <_Balloc>
 8014544:	b930      	cbnz	r0, 8014554 <__multiply+0x44>
 8014546:	4602      	mov	r2, r0
 8014548:	4b44      	ldr	r3, [pc, #272]	; (801465c <__multiply+0x14c>)
 801454a:	4845      	ldr	r0, [pc, #276]	; (8014660 <__multiply+0x150>)
 801454c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8014550:	f001 fd6c 	bl	801602c <__assert_func>
 8014554:	f100 0514 	add.w	r5, r0, #20
 8014558:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801455c:	462b      	mov	r3, r5
 801455e:	2200      	movs	r2, #0
 8014560:	4543      	cmp	r3, r8
 8014562:	d321      	bcc.n	80145a8 <__multiply+0x98>
 8014564:	f104 0314 	add.w	r3, r4, #20
 8014568:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801456c:	f109 0314 	add.w	r3, r9, #20
 8014570:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8014574:	9202      	str	r2, [sp, #8]
 8014576:	1b3a      	subs	r2, r7, r4
 8014578:	3a15      	subs	r2, #21
 801457a:	f022 0203 	bic.w	r2, r2, #3
 801457e:	3204      	adds	r2, #4
 8014580:	f104 0115 	add.w	r1, r4, #21
 8014584:	428f      	cmp	r7, r1
 8014586:	bf38      	it	cc
 8014588:	2204      	movcc	r2, #4
 801458a:	9201      	str	r2, [sp, #4]
 801458c:	9a02      	ldr	r2, [sp, #8]
 801458e:	9303      	str	r3, [sp, #12]
 8014590:	429a      	cmp	r2, r3
 8014592:	d80c      	bhi.n	80145ae <__multiply+0x9e>
 8014594:	2e00      	cmp	r6, #0
 8014596:	dd03      	ble.n	80145a0 <__multiply+0x90>
 8014598:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801459c:	2b00      	cmp	r3, #0
 801459e:	d05a      	beq.n	8014656 <__multiply+0x146>
 80145a0:	6106      	str	r6, [r0, #16]
 80145a2:	b005      	add	sp, #20
 80145a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80145a8:	f843 2b04 	str.w	r2, [r3], #4
 80145ac:	e7d8      	b.n	8014560 <__multiply+0x50>
 80145ae:	f8b3 a000 	ldrh.w	sl, [r3]
 80145b2:	f1ba 0f00 	cmp.w	sl, #0
 80145b6:	d023      	beq.n	8014600 <__multiply+0xf0>
 80145b8:	f104 0e14 	add.w	lr, r4, #20
 80145bc:	46a9      	mov	r9, r5
 80145be:	f04f 0c00 	mov.w	ip, #0
 80145c2:	f85e 2b04 	ldr.w	r2, [lr], #4
 80145c6:	f8d9 1000 	ldr.w	r1, [r9]
 80145ca:	fa1f fb82 	uxth.w	fp, r2
 80145ce:	b289      	uxth	r1, r1
 80145d0:	fb0a 110b 	mla	r1, sl, fp, r1
 80145d4:	4461      	add	r1, ip
 80145d6:	f8d9 c000 	ldr.w	ip, [r9]
 80145da:	0c12      	lsrs	r2, r2, #16
 80145dc:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80145e0:	fb0a c202 	mla	r2, sl, r2, ip
 80145e4:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80145e8:	b289      	uxth	r1, r1
 80145ea:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80145ee:	4577      	cmp	r7, lr
 80145f0:	f849 1b04 	str.w	r1, [r9], #4
 80145f4:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80145f8:	d8e3      	bhi.n	80145c2 <__multiply+0xb2>
 80145fa:	9a01      	ldr	r2, [sp, #4]
 80145fc:	f845 c002 	str.w	ip, [r5, r2]
 8014600:	9a03      	ldr	r2, [sp, #12]
 8014602:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8014606:	3304      	adds	r3, #4
 8014608:	f1b9 0f00 	cmp.w	r9, #0
 801460c:	d021      	beq.n	8014652 <__multiply+0x142>
 801460e:	6829      	ldr	r1, [r5, #0]
 8014610:	f104 0c14 	add.w	ip, r4, #20
 8014614:	46ae      	mov	lr, r5
 8014616:	f04f 0a00 	mov.w	sl, #0
 801461a:	f8bc b000 	ldrh.w	fp, [ip]
 801461e:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8014622:	fb09 220b 	mla	r2, r9, fp, r2
 8014626:	4452      	add	r2, sl
 8014628:	b289      	uxth	r1, r1
 801462a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801462e:	f84e 1b04 	str.w	r1, [lr], #4
 8014632:	f85c 1b04 	ldr.w	r1, [ip], #4
 8014636:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801463a:	f8be 1000 	ldrh.w	r1, [lr]
 801463e:	fb09 110a 	mla	r1, r9, sl, r1
 8014642:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8014646:	4567      	cmp	r7, ip
 8014648:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801464c:	d8e5      	bhi.n	801461a <__multiply+0x10a>
 801464e:	9a01      	ldr	r2, [sp, #4]
 8014650:	50a9      	str	r1, [r5, r2]
 8014652:	3504      	adds	r5, #4
 8014654:	e79a      	b.n	801458c <__multiply+0x7c>
 8014656:	3e01      	subs	r6, #1
 8014658:	e79c      	b.n	8014594 <__multiply+0x84>
 801465a:	bf00      	nop
 801465c:	08017d78 	.word	0x08017d78
 8014660:	08017d89 	.word	0x08017d89

08014664 <__pow5mult>:
 8014664:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014668:	4615      	mov	r5, r2
 801466a:	f012 0203 	ands.w	r2, r2, #3
 801466e:	4606      	mov	r6, r0
 8014670:	460f      	mov	r7, r1
 8014672:	d007      	beq.n	8014684 <__pow5mult+0x20>
 8014674:	4c25      	ldr	r4, [pc, #148]	; (801470c <__pow5mult+0xa8>)
 8014676:	3a01      	subs	r2, #1
 8014678:	2300      	movs	r3, #0
 801467a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801467e:	f7ff fe53 	bl	8014328 <__multadd>
 8014682:	4607      	mov	r7, r0
 8014684:	10ad      	asrs	r5, r5, #2
 8014686:	d03d      	beq.n	8014704 <__pow5mult+0xa0>
 8014688:	69f4      	ldr	r4, [r6, #28]
 801468a:	b97c      	cbnz	r4, 80146ac <__pow5mult+0x48>
 801468c:	2010      	movs	r0, #16
 801468e:	f7ff fd35 	bl	80140fc <malloc>
 8014692:	4602      	mov	r2, r0
 8014694:	61f0      	str	r0, [r6, #28]
 8014696:	b928      	cbnz	r0, 80146a4 <__pow5mult+0x40>
 8014698:	4b1d      	ldr	r3, [pc, #116]	; (8014710 <__pow5mult+0xac>)
 801469a:	481e      	ldr	r0, [pc, #120]	; (8014714 <__pow5mult+0xb0>)
 801469c:	f240 11b3 	movw	r1, #435	; 0x1b3
 80146a0:	f001 fcc4 	bl	801602c <__assert_func>
 80146a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80146a8:	6004      	str	r4, [r0, #0]
 80146aa:	60c4      	str	r4, [r0, #12]
 80146ac:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80146b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80146b4:	b94c      	cbnz	r4, 80146ca <__pow5mult+0x66>
 80146b6:	f240 2171 	movw	r1, #625	; 0x271
 80146ba:	4630      	mov	r0, r6
 80146bc:	f7ff ff12 	bl	80144e4 <__i2b>
 80146c0:	2300      	movs	r3, #0
 80146c2:	f8c8 0008 	str.w	r0, [r8, #8]
 80146c6:	4604      	mov	r4, r0
 80146c8:	6003      	str	r3, [r0, #0]
 80146ca:	f04f 0900 	mov.w	r9, #0
 80146ce:	07eb      	lsls	r3, r5, #31
 80146d0:	d50a      	bpl.n	80146e8 <__pow5mult+0x84>
 80146d2:	4639      	mov	r1, r7
 80146d4:	4622      	mov	r2, r4
 80146d6:	4630      	mov	r0, r6
 80146d8:	f7ff ff1a 	bl	8014510 <__multiply>
 80146dc:	4639      	mov	r1, r7
 80146de:	4680      	mov	r8, r0
 80146e0:	4630      	mov	r0, r6
 80146e2:	f7ff fdff 	bl	80142e4 <_Bfree>
 80146e6:	4647      	mov	r7, r8
 80146e8:	106d      	asrs	r5, r5, #1
 80146ea:	d00b      	beq.n	8014704 <__pow5mult+0xa0>
 80146ec:	6820      	ldr	r0, [r4, #0]
 80146ee:	b938      	cbnz	r0, 8014700 <__pow5mult+0x9c>
 80146f0:	4622      	mov	r2, r4
 80146f2:	4621      	mov	r1, r4
 80146f4:	4630      	mov	r0, r6
 80146f6:	f7ff ff0b 	bl	8014510 <__multiply>
 80146fa:	6020      	str	r0, [r4, #0]
 80146fc:	f8c0 9000 	str.w	r9, [r0]
 8014700:	4604      	mov	r4, r0
 8014702:	e7e4      	b.n	80146ce <__pow5mult+0x6a>
 8014704:	4638      	mov	r0, r7
 8014706:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801470a:	bf00      	nop
 801470c:	08017ed8 	.word	0x08017ed8
 8014710:	08017d09 	.word	0x08017d09
 8014714:	08017d89 	.word	0x08017d89

08014718 <__lshift>:
 8014718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801471c:	460c      	mov	r4, r1
 801471e:	6849      	ldr	r1, [r1, #4]
 8014720:	6923      	ldr	r3, [r4, #16]
 8014722:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8014726:	68a3      	ldr	r3, [r4, #8]
 8014728:	4607      	mov	r7, r0
 801472a:	4691      	mov	r9, r2
 801472c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014730:	f108 0601 	add.w	r6, r8, #1
 8014734:	42b3      	cmp	r3, r6
 8014736:	db0b      	blt.n	8014750 <__lshift+0x38>
 8014738:	4638      	mov	r0, r7
 801473a:	f7ff fd93 	bl	8014264 <_Balloc>
 801473e:	4605      	mov	r5, r0
 8014740:	b948      	cbnz	r0, 8014756 <__lshift+0x3e>
 8014742:	4602      	mov	r2, r0
 8014744:	4b28      	ldr	r3, [pc, #160]	; (80147e8 <__lshift+0xd0>)
 8014746:	4829      	ldr	r0, [pc, #164]	; (80147ec <__lshift+0xd4>)
 8014748:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 801474c:	f001 fc6e 	bl	801602c <__assert_func>
 8014750:	3101      	adds	r1, #1
 8014752:	005b      	lsls	r3, r3, #1
 8014754:	e7ee      	b.n	8014734 <__lshift+0x1c>
 8014756:	2300      	movs	r3, #0
 8014758:	f100 0114 	add.w	r1, r0, #20
 801475c:	f100 0210 	add.w	r2, r0, #16
 8014760:	4618      	mov	r0, r3
 8014762:	4553      	cmp	r3, sl
 8014764:	db33      	blt.n	80147ce <__lshift+0xb6>
 8014766:	6920      	ldr	r0, [r4, #16]
 8014768:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801476c:	f104 0314 	add.w	r3, r4, #20
 8014770:	f019 091f 	ands.w	r9, r9, #31
 8014774:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014778:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801477c:	d02b      	beq.n	80147d6 <__lshift+0xbe>
 801477e:	f1c9 0e20 	rsb	lr, r9, #32
 8014782:	468a      	mov	sl, r1
 8014784:	2200      	movs	r2, #0
 8014786:	6818      	ldr	r0, [r3, #0]
 8014788:	fa00 f009 	lsl.w	r0, r0, r9
 801478c:	4310      	orrs	r0, r2
 801478e:	f84a 0b04 	str.w	r0, [sl], #4
 8014792:	f853 2b04 	ldr.w	r2, [r3], #4
 8014796:	459c      	cmp	ip, r3
 8014798:	fa22 f20e 	lsr.w	r2, r2, lr
 801479c:	d8f3      	bhi.n	8014786 <__lshift+0x6e>
 801479e:	ebac 0304 	sub.w	r3, ip, r4
 80147a2:	3b15      	subs	r3, #21
 80147a4:	f023 0303 	bic.w	r3, r3, #3
 80147a8:	3304      	adds	r3, #4
 80147aa:	f104 0015 	add.w	r0, r4, #21
 80147ae:	4584      	cmp	ip, r0
 80147b0:	bf38      	it	cc
 80147b2:	2304      	movcc	r3, #4
 80147b4:	50ca      	str	r2, [r1, r3]
 80147b6:	b10a      	cbz	r2, 80147bc <__lshift+0xa4>
 80147b8:	f108 0602 	add.w	r6, r8, #2
 80147bc:	3e01      	subs	r6, #1
 80147be:	4638      	mov	r0, r7
 80147c0:	612e      	str	r6, [r5, #16]
 80147c2:	4621      	mov	r1, r4
 80147c4:	f7ff fd8e 	bl	80142e4 <_Bfree>
 80147c8:	4628      	mov	r0, r5
 80147ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80147ce:	f842 0f04 	str.w	r0, [r2, #4]!
 80147d2:	3301      	adds	r3, #1
 80147d4:	e7c5      	b.n	8014762 <__lshift+0x4a>
 80147d6:	3904      	subs	r1, #4
 80147d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80147dc:	f841 2f04 	str.w	r2, [r1, #4]!
 80147e0:	459c      	cmp	ip, r3
 80147e2:	d8f9      	bhi.n	80147d8 <__lshift+0xc0>
 80147e4:	e7ea      	b.n	80147bc <__lshift+0xa4>
 80147e6:	bf00      	nop
 80147e8:	08017d78 	.word	0x08017d78
 80147ec:	08017d89 	.word	0x08017d89

080147f0 <__mcmp>:
 80147f0:	690a      	ldr	r2, [r1, #16]
 80147f2:	4603      	mov	r3, r0
 80147f4:	6900      	ldr	r0, [r0, #16]
 80147f6:	1a80      	subs	r0, r0, r2
 80147f8:	b530      	push	{r4, r5, lr}
 80147fa:	d10d      	bne.n	8014818 <__mcmp+0x28>
 80147fc:	3314      	adds	r3, #20
 80147fe:	3114      	adds	r1, #20
 8014800:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8014804:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8014808:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801480c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8014810:	4295      	cmp	r5, r2
 8014812:	d002      	beq.n	801481a <__mcmp+0x2a>
 8014814:	d304      	bcc.n	8014820 <__mcmp+0x30>
 8014816:	2001      	movs	r0, #1
 8014818:	bd30      	pop	{r4, r5, pc}
 801481a:	42a3      	cmp	r3, r4
 801481c:	d3f4      	bcc.n	8014808 <__mcmp+0x18>
 801481e:	e7fb      	b.n	8014818 <__mcmp+0x28>
 8014820:	f04f 30ff 	mov.w	r0, #4294967295
 8014824:	e7f8      	b.n	8014818 <__mcmp+0x28>
	...

08014828 <__mdiff>:
 8014828:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801482c:	460d      	mov	r5, r1
 801482e:	4607      	mov	r7, r0
 8014830:	4611      	mov	r1, r2
 8014832:	4628      	mov	r0, r5
 8014834:	4614      	mov	r4, r2
 8014836:	f7ff ffdb 	bl	80147f0 <__mcmp>
 801483a:	1e06      	subs	r6, r0, #0
 801483c:	d111      	bne.n	8014862 <__mdiff+0x3a>
 801483e:	4631      	mov	r1, r6
 8014840:	4638      	mov	r0, r7
 8014842:	f7ff fd0f 	bl	8014264 <_Balloc>
 8014846:	4602      	mov	r2, r0
 8014848:	b928      	cbnz	r0, 8014856 <__mdiff+0x2e>
 801484a:	4b39      	ldr	r3, [pc, #228]	; (8014930 <__mdiff+0x108>)
 801484c:	f240 2137 	movw	r1, #567	; 0x237
 8014850:	4838      	ldr	r0, [pc, #224]	; (8014934 <__mdiff+0x10c>)
 8014852:	f001 fbeb 	bl	801602c <__assert_func>
 8014856:	2301      	movs	r3, #1
 8014858:	e9c0 3604 	strd	r3, r6, [r0, #16]
 801485c:	4610      	mov	r0, r2
 801485e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014862:	bfa4      	itt	ge
 8014864:	4623      	movge	r3, r4
 8014866:	462c      	movge	r4, r5
 8014868:	4638      	mov	r0, r7
 801486a:	6861      	ldr	r1, [r4, #4]
 801486c:	bfa6      	itte	ge
 801486e:	461d      	movge	r5, r3
 8014870:	2600      	movge	r6, #0
 8014872:	2601      	movlt	r6, #1
 8014874:	f7ff fcf6 	bl	8014264 <_Balloc>
 8014878:	4602      	mov	r2, r0
 801487a:	b918      	cbnz	r0, 8014884 <__mdiff+0x5c>
 801487c:	4b2c      	ldr	r3, [pc, #176]	; (8014930 <__mdiff+0x108>)
 801487e:	f240 2145 	movw	r1, #581	; 0x245
 8014882:	e7e5      	b.n	8014850 <__mdiff+0x28>
 8014884:	6927      	ldr	r7, [r4, #16]
 8014886:	60c6      	str	r6, [r0, #12]
 8014888:	692e      	ldr	r6, [r5, #16]
 801488a:	f104 0014 	add.w	r0, r4, #20
 801488e:	f105 0914 	add.w	r9, r5, #20
 8014892:	f102 0e14 	add.w	lr, r2, #20
 8014896:	eb00 0c87 	add.w	ip, r0, r7, lsl #2
 801489a:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801489e:	3410      	adds	r4, #16
 80148a0:	46f2      	mov	sl, lr
 80148a2:	2100      	movs	r1, #0
 80148a4:	f859 3b04 	ldr.w	r3, [r9], #4
 80148a8:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80148ac:	fa11 f88b 	uxtah	r8, r1, fp
 80148b0:	b299      	uxth	r1, r3
 80148b2:	0c1b      	lsrs	r3, r3, #16
 80148b4:	eba8 0801 	sub.w	r8, r8, r1
 80148b8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80148bc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80148c0:	fa1f f888 	uxth.w	r8, r8
 80148c4:	1419      	asrs	r1, r3, #16
 80148c6:	454e      	cmp	r6, r9
 80148c8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80148cc:	f84a 3b04 	str.w	r3, [sl], #4
 80148d0:	d8e8      	bhi.n	80148a4 <__mdiff+0x7c>
 80148d2:	1b73      	subs	r3, r6, r5
 80148d4:	3b15      	subs	r3, #21
 80148d6:	f023 0303 	bic.w	r3, r3, #3
 80148da:	3304      	adds	r3, #4
 80148dc:	3515      	adds	r5, #21
 80148de:	42ae      	cmp	r6, r5
 80148e0:	bf38      	it	cc
 80148e2:	2304      	movcc	r3, #4
 80148e4:	4418      	add	r0, r3
 80148e6:	4473      	add	r3, lr
 80148e8:	469e      	mov	lr, r3
 80148ea:	4606      	mov	r6, r0
 80148ec:	4566      	cmp	r6, ip
 80148ee:	d30e      	bcc.n	801490e <__mdiff+0xe6>
 80148f0:	f10c 0103 	add.w	r1, ip, #3
 80148f4:	1a09      	subs	r1, r1, r0
 80148f6:	f021 0103 	bic.w	r1, r1, #3
 80148fa:	3803      	subs	r0, #3
 80148fc:	4584      	cmp	ip, r0
 80148fe:	bf38      	it	cc
 8014900:	2100      	movcc	r1, #0
 8014902:	440b      	add	r3, r1
 8014904:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8014908:	b179      	cbz	r1, 801492a <__mdiff+0x102>
 801490a:	6117      	str	r7, [r2, #16]
 801490c:	e7a6      	b.n	801485c <__mdiff+0x34>
 801490e:	f856 8b04 	ldr.w	r8, [r6], #4
 8014912:	fa11 f488 	uxtah	r4, r1, r8
 8014916:	1425      	asrs	r5, r4, #16
 8014918:	eb05 4518 	add.w	r5, r5, r8, lsr #16
 801491c:	b2a4      	uxth	r4, r4
 801491e:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8014922:	f84e 4b04 	str.w	r4, [lr], #4
 8014926:	1429      	asrs	r1, r5, #16
 8014928:	e7e0      	b.n	80148ec <__mdiff+0xc4>
 801492a:	3f01      	subs	r7, #1
 801492c:	e7ea      	b.n	8014904 <__mdiff+0xdc>
 801492e:	bf00      	nop
 8014930:	08017d78 	.word	0x08017d78
 8014934:	08017d89 	.word	0x08017d89

08014938 <__ulp>:
 8014938:	4b0e      	ldr	r3, [pc, #56]	; (8014974 <__ulp+0x3c>)
 801493a:	400b      	ands	r3, r1
 801493c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8014940:	2b00      	cmp	r3, #0
 8014942:	dc08      	bgt.n	8014956 <__ulp+0x1e>
 8014944:	425b      	negs	r3, r3
 8014946:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 801494a:	ea4f 5223 	mov.w	r2, r3, asr #20
 801494e:	da04      	bge.n	801495a <__ulp+0x22>
 8014950:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8014954:	4113      	asrs	r3, r2
 8014956:	2200      	movs	r2, #0
 8014958:	e008      	b.n	801496c <__ulp+0x34>
 801495a:	f1a2 0314 	sub.w	r3, r2, #20
 801495e:	2b1e      	cmp	r3, #30
 8014960:	bfda      	itte	le
 8014962:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8014966:	40da      	lsrle	r2, r3
 8014968:	2201      	movgt	r2, #1
 801496a:	2300      	movs	r3, #0
 801496c:	4619      	mov	r1, r3
 801496e:	4610      	mov	r0, r2
 8014970:	4770      	bx	lr
 8014972:	bf00      	nop
 8014974:	7ff00000 	.word	0x7ff00000

08014978 <__b2d>:
 8014978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801497a:	6905      	ldr	r5, [r0, #16]
 801497c:	f100 0714 	add.w	r7, r0, #20
 8014980:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8014984:	1f2e      	subs	r6, r5, #4
 8014986:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801498a:	4620      	mov	r0, r4
 801498c:	f7ff fd5c 	bl	8014448 <__hi0bits>
 8014990:	f1c0 0220 	rsb	r2, r0, #32
 8014994:	280a      	cmp	r0, #10
 8014996:	f8df c06c 	ldr.w	ip, [pc, #108]	; 8014a04 <__b2d+0x8c>
 801499a:	600a      	str	r2, [r1, #0]
 801499c:	4603      	mov	r3, r0
 801499e:	dc12      	bgt.n	80149c6 <__b2d+0x4e>
 80149a0:	f1c0 0e0b 	rsb	lr, r0, #11
 80149a4:	fa24 f20e 	lsr.w	r2, r4, lr
 80149a8:	42b7      	cmp	r7, r6
 80149aa:	ea42 010c 	orr.w	r1, r2, ip
 80149ae:	bf34      	ite	cc
 80149b0:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 80149b4:	2200      	movcs	r2, #0
 80149b6:	3315      	adds	r3, #21
 80149b8:	fa04 f303 	lsl.w	r3, r4, r3
 80149bc:	fa22 f20e 	lsr.w	r2, r2, lr
 80149c0:	431a      	orrs	r2, r3
 80149c2:	4610      	mov	r0, r2
 80149c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80149c6:	42b7      	cmp	r7, r6
 80149c8:	bf3a      	itte	cc
 80149ca:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 80149ce:	f1a5 0608 	subcc.w	r6, r5, #8
 80149d2:	2200      	movcs	r2, #0
 80149d4:	3b0b      	subs	r3, #11
 80149d6:	d012      	beq.n	80149fe <__b2d+0x86>
 80149d8:	f1c3 0520 	rsb	r5, r3, #32
 80149dc:	fa22 f105 	lsr.w	r1, r2, r5
 80149e0:	409c      	lsls	r4, r3
 80149e2:	430c      	orrs	r4, r1
 80149e4:	42be      	cmp	r6, r7
 80149e6:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 80149ea:	bf8c      	ite	hi
 80149ec:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80149f0:	2400      	movls	r4, #0
 80149f2:	409a      	lsls	r2, r3
 80149f4:	40ec      	lsrs	r4, r5
 80149f6:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80149fa:	4322      	orrs	r2, r4
 80149fc:	e7e1      	b.n	80149c2 <__b2d+0x4a>
 80149fe:	ea44 010c 	orr.w	r1, r4, ip
 8014a02:	e7de      	b.n	80149c2 <__b2d+0x4a>
 8014a04:	3ff00000 	.word	0x3ff00000

08014a08 <__d2b>:
 8014a08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014a0a:	2101      	movs	r1, #1
 8014a0c:	9e08      	ldr	r6, [sp, #32]
 8014a0e:	4617      	mov	r7, r2
 8014a10:	461c      	mov	r4, r3
 8014a12:	f7ff fc27 	bl	8014264 <_Balloc>
 8014a16:	4605      	mov	r5, r0
 8014a18:	b930      	cbnz	r0, 8014a28 <__d2b+0x20>
 8014a1a:	4602      	mov	r2, r0
 8014a1c:	4b23      	ldr	r3, [pc, #140]	; (8014aac <__d2b+0xa4>)
 8014a1e:	4824      	ldr	r0, [pc, #144]	; (8014ab0 <__d2b+0xa8>)
 8014a20:	f240 310f 	movw	r1, #783	; 0x30f
 8014a24:	f001 fb02 	bl	801602c <__assert_func>
 8014a28:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8014a2c:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8014a30:	bb24      	cbnz	r4, 8014a7c <__d2b+0x74>
 8014a32:	2f00      	cmp	r7, #0
 8014a34:	9301      	str	r3, [sp, #4]
 8014a36:	d026      	beq.n	8014a86 <__d2b+0x7e>
 8014a38:	4668      	mov	r0, sp
 8014a3a:	9700      	str	r7, [sp, #0]
 8014a3c:	f7ff fd24 	bl	8014488 <__lo0bits>
 8014a40:	e9dd 1200 	ldrd	r1, r2, [sp]
 8014a44:	b1e8      	cbz	r0, 8014a82 <__d2b+0x7a>
 8014a46:	f1c0 0320 	rsb	r3, r0, #32
 8014a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8014a4e:	430b      	orrs	r3, r1
 8014a50:	40c2      	lsrs	r2, r0
 8014a52:	616b      	str	r3, [r5, #20]
 8014a54:	9201      	str	r2, [sp, #4]
 8014a56:	9b01      	ldr	r3, [sp, #4]
 8014a58:	61ab      	str	r3, [r5, #24]
 8014a5a:	2b00      	cmp	r3, #0
 8014a5c:	bf14      	ite	ne
 8014a5e:	2102      	movne	r1, #2
 8014a60:	2101      	moveq	r1, #1
 8014a62:	6129      	str	r1, [r5, #16]
 8014a64:	b1bc      	cbz	r4, 8014a96 <__d2b+0x8e>
 8014a66:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8014a6a:	4404      	add	r4, r0
 8014a6c:	6034      	str	r4, [r6, #0]
 8014a6e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8014a72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014a74:	6018      	str	r0, [r3, #0]
 8014a76:	4628      	mov	r0, r5
 8014a78:	b003      	add	sp, #12
 8014a7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014a7c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014a80:	e7d7      	b.n	8014a32 <__d2b+0x2a>
 8014a82:	6169      	str	r1, [r5, #20]
 8014a84:	e7e7      	b.n	8014a56 <__d2b+0x4e>
 8014a86:	a801      	add	r0, sp, #4
 8014a88:	f7ff fcfe 	bl	8014488 <__lo0bits>
 8014a8c:	9b01      	ldr	r3, [sp, #4]
 8014a8e:	616b      	str	r3, [r5, #20]
 8014a90:	3020      	adds	r0, #32
 8014a92:	2101      	movs	r1, #1
 8014a94:	e7e5      	b.n	8014a62 <__d2b+0x5a>
 8014a96:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8014a9a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8014a9e:	6030      	str	r0, [r6, #0]
 8014aa0:	6918      	ldr	r0, [r3, #16]
 8014aa2:	f7ff fcd1 	bl	8014448 <__hi0bits>
 8014aa6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8014aaa:	e7e2      	b.n	8014a72 <__d2b+0x6a>
 8014aac:	08017d78 	.word	0x08017d78
 8014ab0:	08017d89 	.word	0x08017d89

08014ab4 <__ratio>:
 8014ab4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ab8:	4688      	mov	r8, r1
 8014aba:	4669      	mov	r1, sp
 8014abc:	4681      	mov	r9, r0
 8014abe:	f7ff ff5b 	bl	8014978 <__b2d>
 8014ac2:	460f      	mov	r7, r1
 8014ac4:	4604      	mov	r4, r0
 8014ac6:	460d      	mov	r5, r1
 8014ac8:	4640      	mov	r0, r8
 8014aca:	a901      	add	r1, sp, #4
 8014acc:	f7ff ff54 	bl	8014978 <__b2d>
 8014ad0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8014ad4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8014ad8:	eba3 0c02 	sub.w	ip, r3, r2
 8014adc:	e9dd 3200 	ldrd	r3, r2, [sp]
 8014ae0:	1a9b      	subs	r3, r3, r2
 8014ae2:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8014ae6:	2b00      	cmp	r3, #0
 8014ae8:	bfd5      	itete	le
 8014aea:	460a      	movle	r2, r1
 8014aec:	462a      	movgt	r2, r5
 8014aee:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8014af2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8014af6:	468b      	mov	fp, r1
 8014af8:	bfd8      	it	le
 8014afa:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8014afe:	465b      	mov	r3, fp
 8014b00:	4602      	mov	r2, r0
 8014b02:	4639      	mov	r1, r7
 8014b04:	4620      	mov	r0, r4
 8014b06:	f7eb fe79 	bl	80007fc <__aeabi_ddiv>
 8014b0a:	b003      	add	sp, #12
 8014b0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014b10 <_mprec_log10>:
 8014b10:	2817      	cmp	r0, #23
 8014b12:	b5d0      	push	{r4, r6, r7, lr}
 8014b14:	4604      	mov	r4, r0
 8014b16:	dc05      	bgt.n	8014b24 <_mprec_log10+0x14>
 8014b18:	4b08      	ldr	r3, [pc, #32]	; (8014b3c <_mprec_log10+0x2c>)
 8014b1a:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8014b1e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8014b22:	bdd0      	pop	{r4, r6, r7, pc}
 8014b24:	4906      	ldr	r1, [pc, #24]	; (8014b40 <_mprec_log10+0x30>)
 8014b26:	4f07      	ldr	r7, [pc, #28]	; (8014b44 <_mprec_log10+0x34>)
 8014b28:	2000      	movs	r0, #0
 8014b2a:	2600      	movs	r6, #0
 8014b2c:	4632      	mov	r2, r6
 8014b2e:	463b      	mov	r3, r7
 8014b30:	f7eb fd3a 	bl	80005a8 <__aeabi_dmul>
 8014b34:	3c01      	subs	r4, #1
 8014b36:	d1f9      	bne.n	8014b2c <_mprec_log10+0x1c>
 8014b38:	e7f3      	b.n	8014b22 <_mprec_log10+0x12>
 8014b3a:	bf00      	nop
 8014b3c:	08017e10 	.word	0x08017e10
 8014b40:	3ff00000 	.word	0x3ff00000
 8014b44:	40240000 	.word	0x40240000

08014b48 <__copybits>:
 8014b48:	3901      	subs	r1, #1
 8014b4a:	b570      	push	{r4, r5, r6, lr}
 8014b4c:	1149      	asrs	r1, r1, #5
 8014b4e:	6914      	ldr	r4, [r2, #16]
 8014b50:	3101      	adds	r1, #1
 8014b52:	f102 0314 	add.w	r3, r2, #20
 8014b56:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8014b5a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8014b5e:	1f05      	subs	r5, r0, #4
 8014b60:	42a3      	cmp	r3, r4
 8014b62:	d30c      	bcc.n	8014b7e <__copybits+0x36>
 8014b64:	1aa3      	subs	r3, r4, r2
 8014b66:	3b11      	subs	r3, #17
 8014b68:	f023 0303 	bic.w	r3, r3, #3
 8014b6c:	3211      	adds	r2, #17
 8014b6e:	42a2      	cmp	r2, r4
 8014b70:	bf88      	it	hi
 8014b72:	2300      	movhi	r3, #0
 8014b74:	4418      	add	r0, r3
 8014b76:	2300      	movs	r3, #0
 8014b78:	4288      	cmp	r0, r1
 8014b7a:	d305      	bcc.n	8014b88 <__copybits+0x40>
 8014b7c:	bd70      	pop	{r4, r5, r6, pc}
 8014b7e:	f853 6b04 	ldr.w	r6, [r3], #4
 8014b82:	f845 6f04 	str.w	r6, [r5, #4]!
 8014b86:	e7eb      	b.n	8014b60 <__copybits+0x18>
 8014b88:	f840 3b04 	str.w	r3, [r0], #4
 8014b8c:	e7f4      	b.n	8014b78 <__copybits+0x30>

08014b8e <__any_on>:
 8014b8e:	f100 0214 	add.w	r2, r0, #20
 8014b92:	6900      	ldr	r0, [r0, #16]
 8014b94:	114b      	asrs	r3, r1, #5
 8014b96:	4298      	cmp	r0, r3
 8014b98:	b510      	push	{r4, lr}
 8014b9a:	db11      	blt.n	8014bc0 <__any_on+0x32>
 8014b9c:	dd0a      	ble.n	8014bb4 <__any_on+0x26>
 8014b9e:	f011 011f 	ands.w	r1, r1, #31
 8014ba2:	d007      	beq.n	8014bb4 <__any_on+0x26>
 8014ba4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8014ba8:	fa24 f001 	lsr.w	r0, r4, r1
 8014bac:	fa00 f101 	lsl.w	r1, r0, r1
 8014bb0:	428c      	cmp	r4, r1
 8014bb2:	d10b      	bne.n	8014bcc <__any_on+0x3e>
 8014bb4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014bb8:	4293      	cmp	r3, r2
 8014bba:	d803      	bhi.n	8014bc4 <__any_on+0x36>
 8014bbc:	2000      	movs	r0, #0
 8014bbe:	bd10      	pop	{r4, pc}
 8014bc0:	4603      	mov	r3, r0
 8014bc2:	e7f7      	b.n	8014bb4 <__any_on+0x26>
 8014bc4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8014bc8:	2900      	cmp	r1, #0
 8014bca:	d0f5      	beq.n	8014bb8 <__any_on+0x2a>
 8014bcc:	2001      	movs	r0, #1
 8014bce:	e7f6      	b.n	8014bbe <__any_on+0x30>

08014bd0 <sulp>:
 8014bd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014bd4:	460f      	mov	r7, r1
 8014bd6:	4690      	mov	r8, r2
 8014bd8:	f7ff feae 	bl	8014938 <__ulp>
 8014bdc:	4604      	mov	r4, r0
 8014bde:	460d      	mov	r5, r1
 8014be0:	f1b8 0f00 	cmp.w	r8, #0
 8014be4:	d011      	beq.n	8014c0a <sulp+0x3a>
 8014be6:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8014bea:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8014bee:	2b00      	cmp	r3, #0
 8014bf0:	dd0b      	ble.n	8014c0a <sulp+0x3a>
 8014bf2:	051b      	lsls	r3, r3, #20
 8014bf4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8014bf8:	2400      	movs	r4, #0
 8014bfa:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8014bfe:	4622      	mov	r2, r4
 8014c00:	462b      	mov	r3, r5
 8014c02:	f7eb fcd1 	bl	80005a8 <__aeabi_dmul>
 8014c06:	4604      	mov	r4, r0
 8014c08:	460d      	mov	r5, r1
 8014c0a:	4620      	mov	r0, r4
 8014c0c:	4629      	mov	r1, r5
 8014c0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014c12:	0000      	movs	r0, r0
 8014c14:	0000      	movs	r0, r0
	...

08014c18 <_strtod_l>:
 8014c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c1c:	b09f      	sub	sp, #124	; 0x7c
 8014c1e:	4604      	mov	r4, r0
 8014c20:	9217      	str	r2, [sp, #92]	; 0x5c
 8014c22:	2200      	movs	r2, #0
 8014c24:	921a      	str	r2, [sp, #104]	; 0x68
 8014c26:	460d      	mov	r5, r1
 8014c28:	f04f 0800 	mov.w	r8, #0
 8014c2c:	f04f 0900 	mov.w	r9, #0
 8014c30:	460a      	mov	r2, r1
 8014c32:	9219      	str	r2, [sp, #100]	; 0x64
 8014c34:	7811      	ldrb	r1, [r2, #0]
 8014c36:	292b      	cmp	r1, #43	; 0x2b
 8014c38:	d04a      	beq.n	8014cd0 <_strtod_l+0xb8>
 8014c3a:	d838      	bhi.n	8014cae <_strtod_l+0x96>
 8014c3c:	290d      	cmp	r1, #13
 8014c3e:	d832      	bhi.n	8014ca6 <_strtod_l+0x8e>
 8014c40:	2908      	cmp	r1, #8
 8014c42:	d832      	bhi.n	8014caa <_strtod_l+0x92>
 8014c44:	2900      	cmp	r1, #0
 8014c46:	d03b      	beq.n	8014cc0 <_strtod_l+0xa8>
 8014c48:	2200      	movs	r2, #0
 8014c4a:	920e      	str	r2, [sp, #56]	; 0x38
 8014c4c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8014c4e:	7832      	ldrb	r2, [r6, #0]
 8014c50:	2a30      	cmp	r2, #48	; 0x30
 8014c52:	f040 80b2 	bne.w	8014dba <_strtod_l+0x1a2>
 8014c56:	7872      	ldrb	r2, [r6, #1]
 8014c58:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8014c5c:	2a58      	cmp	r2, #88	; 0x58
 8014c5e:	d16e      	bne.n	8014d3e <_strtod_l+0x126>
 8014c60:	9302      	str	r3, [sp, #8]
 8014c62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014c64:	9301      	str	r3, [sp, #4]
 8014c66:	ab1a      	add	r3, sp, #104	; 0x68
 8014c68:	9300      	str	r3, [sp, #0]
 8014c6a:	4a8d      	ldr	r2, [pc, #564]	; (8014ea0 <_strtod_l+0x288>)
 8014c6c:	ab1b      	add	r3, sp, #108	; 0x6c
 8014c6e:	a919      	add	r1, sp, #100	; 0x64
 8014c70:	4620      	mov	r0, r4
 8014c72:	f001 fa75 	bl	8016160 <__gethex>
 8014c76:	f010 070f 	ands.w	r7, r0, #15
 8014c7a:	4605      	mov	r5, r0
 8014c7c:	d005      	beq.n	8014c8a <_strtod_l+0x72>
 8014c7e:	2f06      	cmp	r7, #6
 8014c80:	d128      	bne.n	8014cd4 <_strtod_l+0xbc>
 8014c82:	3601      	adds	r6, #1
 8014c84:	2300      	movs	r3, #0
 8014c86:	9619      	str	r6, [sp, #100]	; 0x64
 8014c88:	930e      	str	r3, [sp, #56]	; 0x38
 8014c8a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014c8c:	2b00      	cmp	r3, #0
 8014c8e:	f040 859c 	bne.w	80157ca <_strtod_l+0xbb2>
 8014c92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014c94:	b1cb      	cbz	r3, 8014cca <_strtod_l+0xb2>
 8014c96:	4642      	mov	r2, r8
 8014c98:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8014c9c:	4610      	mov	r0, r2
 8014c9e:	4619      	mov	r1, r3
 8014ca0:	b01f      	add	sp, #124	; 0x7c
 8014ca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ca6:	2920      	cmp	r1, #32
 8014ca8:	d1ce      	bne.n	8014c48 <_strtod_l+0x30>
 8014caa:	3201      	adds	r2, #1
 8014cac:	e7c1      	b.n	8014c32 <_strtod_l+0x1a>
 8014cae:	292d      	cmp	r1, #45	; 0x2d
 8014cb0:	d1ca      	bne.n	8014c48 <_strtod_l+0x30>
 8014cb2:	2101      	movs	r1, #1
 8014cb4:	910e      	str	r1, [sp, #56]	; 0x38
 8014cb6:	1c51      	adds	r1, r2, #1
 8014cb8:	9119      	str	r1, [sp, #100]	; 0x64
 8014cba:	7852      	ldrb	r2, [r2, #1]
 8014cbc:	2a00      	cmp	r2, #0
 8014cbe:	d1c5      	bne.n	8014c4c <_strtod_l+0x34>
 8014cc0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014cc2:	9519      	str	r5, [sp, #100]	; 0x64
 8014cc4:	2b00      	cmp	r3, #0
 8014cc6:	f040 857e 	bne.w	80157c6 <_strtod_l+0xbae>
 8014cca:	4642      	mov	r2, r8
 8014ccc:	464b      	mov	r3, r9
 8014cce:	e7e5      	b.n	8014c9c <_strtod_l+0x84>
 8014cd0:	2100      	movs	r1, #0
 8014cd2:	e7ef      	b.n	8014cb4 <_strtod_l+0x9c>
 8014cd4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8014cd6:	b13a      	cbz	r2, 8014ce8 <_strtod_l+0xd0>
 8014cd8:	2135      	movs	r1, #53	; 0x35
 8014cda:	a81c      	add	r0, sp, #112	; 0x70
 8014cdc:	f7ff ff34 	bl	8014b48 <__copybits>
 8014ce0:	991a      	ldr	r1, [sp, #104]	; 0x68
 8014ce2:	4620      	mov	r0, r4
 8014ce4:	f7ff fafe 	bl	80142e4 <_Bfree>
 8014ce8:	3f01      	subs	r7, #1
 8014cea:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8014cec:	2f04      	cmp	r7, #4
 8014cee:	d806      	bhi.n	8014cfe <_strtod_l+0xe6>
 8014cf0:	e8df f007 	tbb	[pc, r7]
 8014cf4:	201d0314 	.word	0x201d0314
 8014cf8:	14          	.byte	0x14
 8014cf9:	00          	.byte	0x00
 8014cfa:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8014cfe:	05e9      	lsls	r1, r5, #23
 8014d00:	bf48      	it	mi
 8014d02:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8014d06:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8014d0a:	0d1b      	lsrs	r3, r3, #20
 8014d0c:	051b      	lsls	r3, r3, #20
 8014d0e:	2b00      	cmp	r3, #0
 8014d10:	d1bb      	bne.n	8014c8a <_strtod_l+0x72>
 8014d12:	f7fe fb11 	bl	8013338 <__errno>
 8014d16:	2322      	movs	r3, #34	; 0x22
 8014d18:	6003      	str	r3, [r0, #0]
 8014d1a:	e7b6      	b.n	8014c8a <_strtod_l+0x72>
 8014d1c:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8014d20:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8014d24:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8014d28:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8014d2c:	e7e7      	b.n	8014cfe <_strtod_l+0xe6>
 8014d2e:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8014ea4 <_strtod_l+0x28c>
 8014d32:	e7e4      	b.n	8014cfe <_strtod_l+0xe6>
 8014d34:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8014d38:	f04f 38ff 	mov.w	r8, #4294967295
 8014d3c:	e7df      	b.n	8014cfe <_strtod_l+0xe6>
 8014d3e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014d40:	1c5a      	adds	r2, r3, #1
 8014d42:	9219      	str	r2, [sp, #100]	; 0x64
 8014d44:	785b      	ldrb	r3, [r3, #1]
 8014d46:	2b30      	cmp	r3, #48	; 0x30
 8014d48:	d0f9      	beq.n	8014d3e <_strtod_l+0x126>
 8014d4a:	2b00      	cmp	r3, #0
 8014d4c:	d09d      	beq.n	8014c8a <_strtod_l+0x72>
 8014d4e:	2301      	movs	r3, #1
 8014d50:	f04f 0a00 	mov.w	sl, #0
 8014d54:	9305      	str	r3, [sp, #20]
 8014d56:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014d58:	930b      	str	r3, [sp, #44]	; 0x2c
 8014d5a:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8014d5e:	46d3      	mov	fp, sl
 8014d60:	220a      	movs	r2, #10
 8014d62:	9819      	ldr	r0, [sp, #100]	; 0x64
 8014d64:	7806      	ldrb	r6, [r0, #0]
 8014d66:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8014d6a:	b2d9      	uxtb	r1, r3
 8014d6c:	2909      	cmp	r1, #9
 8014d6e:	d926      	bls.n	8014dbe <_strtod_l+0x1a6>
 8014d70:	494d      	ldr	r1, [pc, #308]	; (8014ea8 <_strtod_l+0x290>)
 8014d72:	2201      	movs	r2, #1
 8014d74:	f001 f91c 	bl	8015fb0 <strncmp>
 8014d78:	2800      	cmp	r0, #0
 8014d7a:	d030      	beq.n	8014dde <_strtod_l+0x1c6>
 8014d7c:	2000      	movs	r0, #0
 8014d7e:	4632      	mov	r2, r6
 8014d80:	9008      	str	r0, [sp, #32]
 8014d82:	465e      	mov	r6, fp
 8014d84:	4603      	mov	r3, r0
 8014d86:	2a65      	cmp	r2, #101	; 0x65
 8014d88:	d001      	beq.n	8014d8e <_strtod_l+0x176>
 8014d8a:	2a45      	cmp	r2, #69	; 0x45
 8014d8c:	d113      	bne.n	8014db6 <_strtod_l+0x19e>
 8014d8e:	b91e      	cbnz	r6, 8014d98 <_strtod_l+0x180>
 8014d90:	9a05      	ldr	r2, [sp, #20]
 8014d92:	4302      	orrs	r2, r0
 8014d94:	d094      	beq.n	8014cc0 <_strtod_l+0xa8>
 8014d96:	2600      	movs	r6, #0
 8014d98:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8014d9a:	1c6a      	adds	r2, r5, #1
 8014d9c:	9219      	str	r2, [sp, #100]	; 0x64
 8014d9e:	786a      	ldrb	r2, [r5, #1]
 8014da0:	2a2b      	cmp	r2, #43	; 0x2b
 8014da2:	d074      	beq.n	8014e8e <_strtod_l+0x276>
 8014da4:	2a2d      	cmp	r2, #45	; 0x2d
 8014da6:	d078      	beq.n	8014e9a <_strtod_l+0x282>
 8014da8:	f04f 0c00 	mov.w	ip, #0
 8014dac:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8014db0:	2909      	cmp	r1, #9
 8014db2:	d97f      	bls.n	8014eb4 <_strtod_l+0x29c>
 8014db4:	9519      	str	r5, [sp, #100]	; 0x64
 8014db6:	2700      	movs	r7, #0
 8014db8:	e09e      	b.n	8014ef8 <_strtod_l+0x2e0>
 8014dba:	2300      	movs	r3, #0
 8014dbc:	e7c8      	b.n	8014d50 <_strtod_l+0x138>
 8014dbe:	f1bb 0f08 	cmp.w	fp, #8
 8014dc2:	bfd8      	it	le
 8014dc4:	990a      	ldrle	r1, [sp, #40]	; 0x28
 8014dc6:	f100 0001 	add.w	r0, r0, #1
 8014dca:	bfda      	itte	le
 8014dcc:	fb02 3301 	mlale	r3, r2, r1, r3
 8014dd0:	930a      	strle	r3, [sp, #40]	; 0x28
 8014dd2:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8014dd6:	f10b 0b01 	add.w	fp, fp, #1
 8014dda:	9019      	str	r0, [sp, #100]	; 0x64
 8014ddc:	e7c1      	b.n	8014d62 <_strtod_l+0x14a>
 8014dde:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014de0:	1c5a      	adds	r2, r3, #1
 8014de2:	9219      	str	r2, [sp, #100]	; 0x64
 8014de4:	785a      	ldrb	r2, [r3, #1]
 8014de6:	f1bb 0f00 	cmp.w	fp, #0
 8014dea:	d037      	beq.n	8014e5c <_strtod_l+0x244>
 8014dec:	9008      	str	r0, [sp, #32]
 8014dee:	465e      	mov	r6, fp
 8014df0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8014df4:	2b09      	cmp	r3, #9
 8014df6:	d912      	bls.n	8014e1e <_strtod_l+0x206>
 8014df8:	2301      	movs	r3, #1
 8014dfa:	e7c4      	b.n	8014d86 <_strtod_l+0x16e>
 8014dfc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014dfe:	1c5a      	adds	r2, r3, #1
 8014e00:	9219      	str	r2, [sp, #100]	; 0x64
 8014e02:	785a      	ldrb	r2, [r3, #1]
 8014e04:	3001      	adds	r0, #1
 8014e06:	2a30      	cmp	r2, #48	; 0x30
 8014e08:	d0f8      	beq.n	8014dfc <_strtod_l+0x1e4>
 8014e0a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8014e0e:	2b08      	cmp	r3, #8
 8014e10:	f200 84e0 	bhi.w	80157d4 <_strtod_l+0xbbc>
 8014e14:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014e16:	9008      	str	r0, [sp, #32]
 8014e18:	2000      	movs	r0, #0
 8014e1a:	930b      	str	r3, [sp, #44]	; 0x2c
 8014e1c:	4606      	mov	r6, r0
 8014e1e:	3a30      	subs	r2, #48	; 0x30
 8014e20:	f100 0301 	add.w	r3, r0, #1
 8014e24:	d014      	beq.n	8014e50 <_strtod_l+0x238>
 8014e26:	9908      	ldr	r1, [sp, #32]
 8014e28:	4419      	add	r1, r3
 8014e2a:	9108      	str	r1, [sp, #32]
 8014e2c:	4633      	mov	r3, r6
 8014e2e:	eb00 0c06 	add.w	ip, r0, r6
 8014e32:	210a      	movs	r1, #10
 8014e34:	4563      	cmp	r3, ip
 8014e36:	d113      	bne.n	8014e60 <_strtod_l+0x248>
 8014e38:	1833      	adds	r3, r6, r0
 8014e3a:	2b08      	cmp	r3, #8
 8014e3c:	f106 0601 	add.w	r6, r6, #1
 8014e40:	4406      	add	r6, r0
 8014e42:	dc1a      	bgt.n	8014e7a <_strtod_l+0x262>
 8014e44:	990a      	ldr	r1, [sp, #40]	; 0x28
 8014e46:	230a      	movs	r3, #10
 8014e48:	fb03 2301 	mla	r3, r3, r1, r2
 8014e4c:	930a      	str	r3, [sp, #40]	; 0x28
 8014e4e:	2300      	movs	r3, #0
 8014e50:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8014e52:	1c51      	adds	r1, r2, #1
 8014e54:	9119      	str	r1, [sp, #100]	; 0x64
 8014e56:	7852      	ldrb	r2, [r2, #1]
 8014e58:	4618      	mov	r0, r3
 8014e5a:	e7c9      	b.n	8014df0 <_strtod_l+0x1d8>
 8014e5c:	4658      	mov	r0, fp
 8014e5e:	e7d2      	b.n	8014e06 <_strtod_l+0x1ee>
 8014e60:	2b08      	cmp	r3, #8
 8014e62:	f103 0301 	add.w	r3, r3, #1
 8014e66:	dc03      	bgt.n	8014e70 <_strtod_l+0x258>
 8014e68:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8014e6a:	434f      	muls	r7, r1
 8014e6c:	970a      	str	r7, [sp, #40]	; 0x28
 8014e6e:	e7e1      	b.n	8014e34 <_strtod_l+0x21c>
 8014e70:	2b10      	cmp	r3, #16
 8014e72:	bfd8      	it	le
 8014e74:	fb01 fa0a 	mulle.w	sl, r1, sl
 8014e78:	e7dc      	b.n	8014e34 <_strtod_l+0x21c>
 8014e7a:	2e10      	cmp	r6, #16
 8014e7c:	bfdc      	itt	le
 8014e7e:	230a      	movle	r3, #10
 8014e80:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8014e84:	e7e3      	b.n	8014e4e <_strtod_l+0x236>
 8014e86:	2300      	movs	r3, #0
 8014e88:	9308      	str	r3, [sp, #32]
 8014e8a:	2301      	movs	r3, #1
 8014e8c:	e780      	b.n	8014d90 <_strtod_l+0x178>
 8014e8e:	f04f 0c00 	mov.w	ip, #0
 8014e92:	1caa      	adds	r2, r5, #2
 8014e94:	9219      	str	r2, [sp, #100]	; 0x64
 8014e96:	78aa      	ldrb	r2, [r5, #2]
 8014e98:	e788      	b.n	8014dac <_strtod_l+0x194>
 8014e9a:	f04f 0c01 	mov.w	ip, #1
 8014e9e:	e7f8      	b.n	8014e92 <_strtod_l+0x27a>
 8014ea0:	08017ee8 	.word	0x08017ee8
 8014ea4:	7ff00000 	.word	0x7ff00000
 8014ea8:	08017ee4 	.word	0x08017ee4
 8014eac:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8014eae:	1c51      	adds	r1, r2, #1
 8014eb0:	9119      	str	r1, [sp, #100]	; 0x64
 8014eb2:	7852      	ldrb	r2, [r2, #1]
 8014eb4:	2a30      	cmp	r2, #48	; 0x30
 8014eb6:	d0f9      	beq.n	8014eac <_strtod_l+0x294>
 8014eb8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8014ebc:	2908      	cmp	r1, #8
 8014ebe:	f63f af7a 	bhi.w	8014db6 <_strtod_l+0x19e>
 8014ec2:	3a30      	subs	r2, #48	; 0x30
 8014ec4:	9209      	str	r2, [sp, #36]	; 0x24
 8014ec6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8014ec8:	920c      	str	r2, [sp, #48]	; 0x30
 8014eca:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8014ecc:	1c57      	adds	r7, r2, #1
 8014ece:	9719      	str	r7, [sp, #100]	; 0x64
 8014ed0:	7852      	ldrb	r2, [r2, #1]
 8014ed2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8014ed6:	f1be 0f09 	cmp.w	lr, #9
 8014eda:	d938      	bls.n	8014f4e <_strtod_l+0x336>
 8014edc:	990c      	ldr	r1, [sp, #48]	; 0x30
 8014ede:	1a7f      	subs	r7, r7, r1
 8014ee0:	2f08      	cmp	r7, #8
 8014ee2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8014ee6:	dc03      	bgt.n	8014ef0 <_strtod_l+0x2d8>
 8014ee8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014eea:	428f      	cmp	r7, r1
 8014eec:	bfa8      	it	ge
 8014eee:	460f      	movge	r7, r1
 8014ef0:	f1bc 0f00 	cmp.w	ip, #0
 8014ef4:	d000      	beq.n	8014ef8 <_strtod_l+0x2e0>
 8014ef6:	427f      	negs	r7, r7
 8014ef8:	2e00      	cmp	r6, #0
 8014efa:	d14f      	bne.n	8014f9c <_strtod_l+0x384>
 8014efc:	9905      	ldr	r1, [sp, #20]
 8014efe:	4301      	orrs	r1, r0
 8014f00:	f47f aec3 	bne.w	8014c8a <_strtod_l+0x72>
 8014f04:	2b00      	cmp	r3, #0
 8014f06:	f47f aedb 	bne.w	8014cc0 <_strtod_l+0xa8>
 8014f0a:	2a69      	cmp	r2, #105	; 0x69
 8014f0c:	d029      	beq.n	8014f62 <_strtod_l+0x34a>
 8014f0e:	dc26      	bgt.n	8014f5e <_strtod_l+0x346>
 8014f10:	2a49      	cmp	r2, #73	; 0x49
 8014f12:	d026      	beq.n	8014f62 <_strtod_l+0x34a>
 8014f14:	2a4e      	cmp	r2, #78	; 0x4e
 8014f16:	f47f aed3 	bne.w	8014cc0 <_strtod_l+0xa8>
 8014f1a:	499a      	ldr	r1, [pc, #616]	; (8015184 <_strtod_l+0x56c>)
 8014f1c:	a819      	add	r0, sp, #100	; 0x64
 8014f1e:	f001 fb61 	bl	80165e4 <__match>
 8014f22:	2800      	cmp	r0, #0
 8014f24:	f43f aecc 	beq.w	8014cc0 <_strtod_l+0xa8>
 8014f28:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014f2a:	781b      	ldrb	r3, [r3, #0]
 8014f2c:	2b28      	cmp	r3, #40	; 0x28
 8014f2e:	d12f      	bne.n	8014f90 <_strtod_l+0x378>
 8014f30:	4995      	ldr	r1, [pc, #596]	; (8015188 <_strtod_l+0x570>)
 8014f32:	aa1c      	add	r2, sp, #112	; 0x70
 8014f34:	a819      	add	r0, sp, #100	; 0x64
 8014f36:	f001 fb69 	bl	801660c <__hexnan>
 8014f3a:	2805      	cmp	r0, #5
 8014f3c:	d128      	bne.n	8014f90 <_strtod_l+0x378>
 8014f3e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014f40:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8014f44:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8014f48:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8014f4c:	e69d      	b.n	8014c8a <_strtod_l+0x72>
 8014f4e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8014f50:	210a      	movs	r1, #10
 8014f52:	fb01 2107 	mla	r1, r1, r7, r2
 8014f56:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8014f5a:	9209      	str	r2, [sp, #36]	; 0x24
 8014f5c:	e7b5      	b.n	8014eca <_strtod_l+0x2b2>
 8014f5e:	2a6e      	cmp	r2, #110	; 0x6e
 8014f60:	e7d9      	b.n	8014f16 <_strtod_l+0x2fe>
 8014f62:	498a      	ldr	r1, [pc, #552]	; (801518c <_strtod_l+0x574>)
 8014f64:	a819      	add	r0, sp, #100	; 0x64
 8014f66:	f001 fb3d 	bl	80165e4 <__match>
 8014f6a:	2800      	cmp	r0, #0
 8014f6c:	f43f aea8 	beq.w	8014cc0 <_strtod_l+0xa8>
 8014f70:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014f72:	4987      	ldr	r1, [pc, #540]	; (8015190 <_strtod_l+0x578>)
 8014f74:	3b01      	subs	r3, #1
 8014f76:	a819      	add	r0, sp, #100	; 0x64
 8014f78:	9319      	str	r3, [sp, #100]	; 0x64
 8014f7a:	f001 fb33 	bl	80165e4 <__match>
 8014f7e:	b910      	cbnz	r0, 8014f86 <_strtod_l+0x36e>
 8014f80:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014f82:	3301      	adds	r3, #1
 8014f84:	9319      	str	r3, [sp, #100]	; 0x64
 8014f86:	f8df 920c 	ldr.w	r9, [pc, #524]	; 8015194 <_strtod_l+0x57c>
 8014f8a:	f04f 0800 	mov.w	r8, #0
 8014f8e:	e67c      	b.n	8014c8a <_strtod_l+0x72>
 8014f90:	4881      	ldr	r0, [pc, #516]	; (8015198 <_strtod_l+0x580>)
 8014f92:	f001 f845 	bl	8016020 <nan>
 8014f96:	4680      	mov	r8, r0
 8014f98:	4689      	mov	r9, r1
 8014f9a:	e676      	b.n	8014c8a <_strtod_l+0x72>
 8014f9c:	9b08      	ldr	r3, [sp, #32]
 8014f9e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014fa0:	1afb      	subs	r3, r7, r3
 8014fa2:	f1bb 0f00 	cmp.w	fp, #0
 8014fa6:	bf08      	it	eq
 8014fa8:	46b3      	moveq	fp, r6
 8014faa:	2e10      	cmp	r6, #16
 8014fac:	9309      	str	r3, [sp, #36]	; 0x24
 8014fae:	4635      	mov	r5, r6
 8014fb0:	bfa8      	it	ge
 8014fb2:	2510      	movge	r5, #16
 8014fb4:	f7eb fa7e 	bl	80004b4 <__aeabi_ui2d>
 8014fb8:	2e09      	cmp	r6, #9
 8014fba:	4680      	mov	r8, r0
 8014fbc:	4689      	mov	r9, r1
 8014fbe:	dd13      	ble.n	8014fe8 <_strtod_l+0x3d0>
 8014fc0:	4b76      	ldr	r3, [pc, #472]	; (801519c <_strtod_l+0x584>)
 8014fc2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8014fc6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8014fca:	f7eb faed 	bl	80005a8 <__aeabi_dmul>
 8014fce:	4680      	mov	r8, r0
 8014fd0:	4650      	mov	r0, sl
 8014fd2:	4689      	mov	r9, r1
 8014fd4:	f7eb fa6e 	bl	80004b4 <__aeabi_ui2d>
 8014fd8:	4602      	mov	r2, r0
 8014fda:	460b      	mov	r3, r1
 8014fdc:	4640      	mov	r0, r8
 8014fde:	4649      	mov	r1, r9
 8014fe0:	f7eb f92c 	bl	800023c <__adddf3>
 8014fe4:	4680      	mov	r8, r0
 8014fe6:	4689      	mov	r9, r1
 8014fe8:	2e0f      	cmp	r6, #15
 8014fea:	dc36      	bgt.n	801505a <_strtod_l+0x442>
 8014fec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014fee:	2b00      	cmp	r3, #0
 8014ff0:	f43f ae4b 	beq.w	8014c8a <_strtod_l+0x72>
 8014ff4:	dd22      	ble.n	801503c <_strtod_l+0x424>
 8014ff6:	2b16      	cmp	r3, #22
 8014ff8:	dc09      	bgt.n	801500e <_strtod_l+0x3f6>
 8014ffa:	4968      	ldr	r1, [pc, #416]	; (801519c <_strtod_l+0x584>)
 8014ffc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8015000:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015004:	4642      	mov	r2, r8
 8015006:	464b      	mov	r3, r9
 8015008:	f7eb face 	bl	80005a8 <__aeabi_dmul>
 801500c:	e7c3      	b.n	8014f96 <_strtod_l+0x37e>
 801500e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015010:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8015014:	4293      	cmp	r3, r2
 8015016:	db20      	blt.n	801505a <_strtod_l+0x442>
 8015018:	4c60      	ldr	r4, [pc, #384]	; (801519c <_strtod_l+0x584>)
 801501a:	f1c6 060f 	rsb	r6, r6, #15
 801501e:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8015022:	4642      	mov	r2, r8
 8015024:	464b      	mov	r3, r9
 8015026:	e9d1 0100 	ldrd	r0, r1, [r1]
 801502a:	f7eb fabd 	bl	80005a8 <__aeabi_dmul>
 801502e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015030:	1b9e      	subs	r6, r3, r6
 8015032:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8015036:	e9d4 2300 	ldrd	r2, r3, [r4]
 801503a:	e7e5      	b.n	8015008 <_strtod_l+0x3f0>
 801503c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801503e:	3316      	adds	r3, #22
 8015040:	db0b      	blt.n	801505a <_strtod_l+0x442>
 8015042:	9b08      	ldr	r3, [sp, #32]
 8015044:	1bdf      	subs	r7, r3, r7
 8015046:	4b55      	ldr	r3, [pc, #340]	; (801519c <_strtod_l+0x584>)
 8015048:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 801504c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015050:	4640      	mov	r0, r8
 8015052:	4649      	mov	r1, r9
 8015054:	f7eb fbd2 	bl	80007fc <__aeabi_ddiv>
 8015058:	e79d      	b.n	8014f96 <_strtod_l+0x37e>
 801505a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801505c:	1b75      	subs	r5, r6, r5
 801505e:	441d      	add	r5, r3
 8015060:	2d00      	cmp	r5, #0
 8015062:	dd70      	ble.n	8015146 <_strtod_l+0x52e>
 8015064:	f015 030f 	ands.w	r3, r5, #15
 8015068:	d00a      	beq.n	8015080 <_strtod_l+0x468>
 801506a:	494c      	ldr	r1, [pc, #304]	; (801519c <_strtod_l+0x584>)
 801506c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8015070:	4642      	mov	r2, r8
 8015072:	464b      	mov	r3, r9
 8015074:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015078:	f7eb fa96 	bl	80005a8 <__aeabi_dmul>
 801507c:	4680      	mov	r8, r0
 801507e:	4689      	mov	r9, r1
 8015080:	f035 050f 	bics.w	r5, r5, #15
 8015084:	d04d      	beq.n	8015122 <_strtod_l+0x50a>
 8015086:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 801508a:	dd22      	ble.n	80150d2 <_strtod_l+0x4ba>
 801508c:	2600      	movs	r6, #0
 801508e:	46b3      	mov	fp, r6
 8015090:	960b      	str	r6, [sp, #44]	; 0x2c
 8015092:	9608      	str	r6, [sp, #32]
 8015094:	2322      	movs	r3, #34	; 0x22
 8015096:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 8015194 <_strtod_l+0x57c>
 801509a:	6023      	str	r3, [r4, #0]
 801509c:	f04f 0800 	mov.w	r8, #0
 80150a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80150a2:	2b00      	cmp	r3, #0
 80150a4:	f43f adf1 	beq.w	8014c8a <_strtod_l+0x72>
 80150a8:	991a      	ldr	r1, [sp, #104]	; 0x68
 80150aa:	4620      	mov	r0, r4
 80150ac:	f7ff f91a 	bl	80142e4 <_Bfree>
 80150b0:	9908      	ldr	r1, [sp, #32]
 80150b2:	4620      	mov	r0, r4
 80150b4:	f7ff f916 	bl	80142e4 <_Bfree>
 80150b8:	4659      	mov	r1, fp
 80150ba:	4620      	mov	r0, r4
 80150bc:	f7ff f912 	bl	80142e4 <_Bfree>
 80150c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80150c2:	4620      	mov	r0, r4
 80150c4:	f7ff f90e 	bl	80142e4 <_Bfree>
 80150c8:	4631      	mov	r1, r6
 80150ca:	4620      	mov	r0, r4
 80150cc:	f7ff f90a 	bl	80142e4 <_Bfree>
 80150d0:	e5db      	b.n	8014c8a <_strtod_l+0x72>
 80150d2:	4b33      	ldr	r3, [pc, #204]	; (80151a0 <_strtod_l+0x588>)
 80150d4:	9305      	str	r3, [sp, #20]
 80150d6:	2300      	movs	r3, #0
 80150d8:	112d      	asrs	r5, r5, #4
 80150da:	4640      	mov	r0, r8
 80150dc:	4649      	mov	r1, r9
 80150de:	469a      	mov	sl, r3
 80150e0:	2d01      	cmp	r5, #1
 80150e2:	dc21      	bgt.n	8015128 <_strtod_l+0x510>
 80150e4:	b10b      	cbz	r3, 80150ea <_strtod_l+0x4d2>
 80150e6:	4680      	mov	r8, r0
 80150e8:	4689      	mov	r9, r1
 80150ea:	492d      	ldr	r1, [pc, #180]	; (80151a0 <_strtod_l+0x588>)
 80150ec:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80150f0:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80150f4:	4642      	mov	r2, r8
 80150f6:	464b      	mov	r3, r9
 80150f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80150fc:	f7eb fa54 	bl	80005a8 <__aeabi_dmul>
 8015100:	4b24      	ldr	r3, [pc, #144]	; (8015194 <_strtod_l+0x57c>)
 8015102:	460a      	mov	r2, r1
 8015104:	400b      	ands	r3, r1
 8015106:	4927      	ldr	r1, [pc, #156]	; (80151a4 <_strtod_l+0x58c>)
 8015108:	428b      	cmp	r3, r1
 801510a:	4680      	mov	r8, r0
 801510c:	d8be      	bhi.n	801508c <_strtod_l+0x474>
 801510e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8015112:	428b      	cmp	r3, r1
 8015114:	bf86      	itte	hi
 8015116:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 80151a8 <_strtod_l+0x590>
 801511a:	f04f 38ff 	movhi.w	r8, #4294967295
 801511e:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8015122:	2300      	movs	r3, #0
 8015124:	9305      	str	r3, [sp, #20]
 8015126:	e07b      	b.n	8015220 <_strtod_l+0x608>
 8015128:	07ea      	lsls	r2, r5, #31
 801512a:	d505      	bpl.n	8015138 <_strtod_l+0x520>
 801512c:	9b05      	ldr	r3, [sp, #20]
 801512e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015132:	f7eb fa39 	bl	80005a8 <__aeabi_dmul>
 8015136:	2301      	movs	r3, #1
 8015138:	9a05      	ldr	r2, [sp, #20]
 801513a:	3208      	adds	r2, #8
 801513c:	f10a 0a01 	add.w	sl, sl, #1
 8015140:	106d      	asrs	r5, r5, #1
 8015142:	9205      	str	r2, [sp, #20]
 8015144:	e7cc      	b.n	80150e0 <_strtod_l+0x4c8>
 8015146:	d0ec      	beq.n	8015122 <_strtod_l+0x50a>
 8015148:	426d      	negs	r5, r5
 801514a:	f015 020f 	ands.w	r2, r5, #15
 801514e:	d00a      	beq.n	8015166 <_strtod_l+0x54e>
 8015150:	4b12      	ldr	r3, [pc, #72]	; (801519c <_strtod_l+0x584>)
 8015152:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015156:	4640      	mov	r0, r8
 8015158:	4649      	mov	r1, r9
 801515a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801515e:	f7eb fb4d 	bl	80007fc <__aeabi_ddiv>
 8015162:	4680      	mov	r8, r0
 8015164:	4689      	mov	r9, r1
 8015166:	112d      	asrs	r5, r5, #4
 8015168:	d0db      	beq.n	8015122 <_strtod_l+0x50a>
 801516a:	2d1f      	cmp	r5, #31
 801516c:	dd1e      	ble.n	80151ac <_strtod_l+0x594>
 801516e:	2600      	movs	r6, #0
 8015170:	46b3      	mov	fp, r6
 8015172:	960b      	str	r6, [sp, #44]	; 0x2c
 8015174:	9608      	str	r6, [sp, #32]
 8015176:	2322      	movs	r3, #34	; 0x22
 8015178:	f04f 0800 	mov.w	r8, #0
 801517c:	f04f 0900 	mov.w	r9, #0
 8015180:	6023      	str	r3, [r4, #0]
 8015182:	e78d      	b.n	80150a0 <_strtod_l+0x488>
 8015184:	08017cd0 	.word	0x08017cd0
 8015188:	08017efc 	.word	0x08017efc
 801518c:	08017cc8 	.word	0x08017cc8
 8015190:	08017cff 	.word	0x08017cff
 8015194:	7ff00000 	.word	0x7ff00000
 8015198:	0801808d 	.word	0x0801808d
 801519c:	08017e10 	.word	0x08017e10
 80151a0:	08017de8 	.word	0x08017de8
 80151a4:	7ca00000 	.word	0x7ca00000
 80151a8:	7fefffff 	.word	0x7fefffff
 80151ac:	f015 0310 	ands.w	r3, r5, #16
 80151b0:	bf18      	it	ne
 80151b2:	236a      	movne	r3, #106	; 0x6a
 80151b4:	f8df a2cc 	ldr.w	sl, [pc, #716]	; 8015484 <_strtod_l+0x86c>
 80151b8:	9305      	str	r3, [sp, #20]
 80151ba:	4640      	mov	r0, r8
 80151bc:	4649      	mov	r1, r9
 80151be:	2300      	movs	r3, #0
 80151c0:	07ea      	lsls	r2, r5, #31
 80151c2:	d504      	bpl.n	80151ce <_strtod_l+0x5b6>
 80151c4:	e9da 2300 	ldrd	r2, r3, [sl]
 80151c8:	f7eb f9ee 	bl	80005a8 <__aeabi_dmul>
 80151cc:	2301      	movs	r3, #1
 80151ce:	106d      	asrs	r5, r5, #1
 80151d0:	f10a 0a08 	add.w	sl, sl, #8
 80151d4:	d1f4      	bne.n	80151c0 <_strtod_l+0x5a8>
 80151d6:	b10b      	cbz	r3, 80151dc <_strtod_l+0x5c4>
 80151d8:	4680      	mov	r8, r0
 80151da:	4689      	mov	r9, r1
 80151dc:	9b05      	ldr	r3, [sp, #20]
 80151de:	b1bb      	cbz	r3, 8015210 <_strtod_l+0x5f8>
 80151e0:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80151e4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80151e8:	2b00      	cmp	r3, #0
 80151ea:	4649      	mov	r1, r9
 80151ec:	dd10      	ble.n	8015210 <_strtod_l+0x5f8>
 80151ee:	2b1f      	cmp	r3, #31
 80151f0:	f340 8125 	ble.w	801543e <_strtod_l+0x826>
 80151f4:	2b34      	cmp	r3, #52	; 0x34
 80151f6:	bfde      	ittt	le
 80151f8:	f04f 33ff 	movle.w	r3, #4294967295
 80151fc:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8015200:	4093      	lslle	r3, r2
 8015202:	f04f 0800 	mov.w	r8, #0
 8015206:	bfcc      	ite	gt
 8015208:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 801520c:	ea03 0901 	andle.w	r9, r3, r1
 8015210:	2200      	movs	r2, #0
 8015212:	2300      	movs	r3, #0
 8015214:	4640      	mov	r0, r8
 8015216:	4649      	mov	r1, r9
 8015218:	f7eb fc2e 	bl	8000a78 <__aeabi_dcmpeq>
 801521c:	2800      	cmp	r0, #0
 801521e:	d1a6      	bne.n	801516e <_strtod_l+0x556>
 8015220:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015222:	9300      	str	r3, [sp, #0]
 8015224:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015226:	4633      	mov	r3, r6
 8015228:	465a      	mov	r2, fp
 801522a:	4620      	mov	r0, r4
 801522c:	f7ff f8c2 	bl	80143b4 <__s2b>
 8015230:	900b      	str	r0, [sp, #44]	; 0x2c
 8015232:	2800      	cmp	r0, #0
 8015234:	f43f af2a 	beq.w	801508c <_strtod_l+0x474>
 8015238:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801523a:	9b08      	ldr	r3, [sp, #32]
 801523c:	2a00      	cmp	r2, #0
 801523e:	eba3 0307 	sub.w	r3, r3, r7
 8015242:	bfa8      	it	ge
 8015244:	2300      	movge	r3, #0
 8015246:	9312      	str	r3, [sp, #72]	; 0x48
 8015248:	2600      	movs	r6, #0
 801524a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801524e:	9316      	str	r3, [sp, #88]	; 0x58
 8015250:	46b3      	mov	fp, r6
 8015252:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015254:	4620      	mov	r0, r4
 8015256:	6859      	ldr	r1, [r3, #4]
 8015258:	f7ff f804 	bl	8014264 <_Balloc>
 801525c:	9008      	str	r0, [sp, #32]
 801525e:	2800      	cmp	r0, #0
 8015260:	f43f af18 	beq.w	8015094 <_strtod_l+0x47c>
 8015264:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015266:	691a      	ldr	r2, [r3, #16]
 8015268:	3202      	adds	r2, #2
 801526a:	f103 010c 	add.w	r1, r3, #12
 801526e:	0092      	lsls	r2, r2, #2
 8015270:	300c      	adds	r0, #12
 8015272:	f000 fec7 	bl	8016004 <memcpy>
 8015276:	ab1c      	add	r3, sp, #112	; 0x70
 8015278:	9301      	str	r3, [sp, #4]
 801527a:	ab1b      	add	r3, sp, #108	; 0x6c
 801527c:	9300      	str	r3, [sp, #0]
 801527e:	4642      	mov	r2, r8
 8015280:	464b      	mov	r3, r9
 8015282:	4620      	mov	r0, r4
 8015284:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8015288:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 801528c:	f7ff fbbc 	bl	8014a08 <__d2b>
 8015290:	901a      	str	r0, [sp, #104]	; 0x68
 8015292:	2800      	cmp	r0, #0
 8015294:	f43f aefe 	beq.w	8015094 <_strtod_l+0x47c>
 8015298:	2101      	movs	r1, #1
 801529a:	4620      	mov	r0, r4
 801529c:	f7ff f922 	bl	80144e4 <__i2b>
 80152a0:	4683      	mov	fp, r0
 80152a2:	2800      	cmp	r0, #0
 80152a4:	f43f aef6 	beq.w	8015094 <_strtod_l+0x47c>
 80152a8:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 80152aa:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80152ac:	2f00      	cmp	r7, #0
 80152ae:	bfab      	itete	ge
 80152b0:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 80152b2:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80152b4:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 80152b6:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 80152ba:	bfac      	ite	ge
 80152bc:	eb07 0a03 	addge.w	sl, r7, r3
 80152c0:	1bdd      	sublt	r5, r3, r7
 80152c2:	9b05      	ldr	r3, [sp, #20]
 80152c4:	1aff      	subs	r7, r7, r3
 80152c6:	4417      	add	r7, r2
 80152c8:	4b6f      	ldr	r3, [pc, #444]	; (8015488 <_strtod_l+0x870>)
 80152ca:	3f01      	subs	r7, #1
 80152cc:	429f      	cmp	r7, r3
 80152ce:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80152d2:	f280 80c7 	bge.w	8015464 <_strtod_l+0x84c>
 80152d6:	1bdb      	subs	r3, r3, r7
 80152d8:	2b1f      	cmp	r3, #31
 80152da:	eba2 0203 	sub.w	r2, r2, r3
 80152de:	f04f 0101 	mov.w	r1, #1
 80152e2:	f300 80b3 	bgt.w	801544c <_strtod_l+0x834>
 80152e6:	fa01 f303 	lsl.w	r3, r1, r3
 80152ea:	9313      	str	r3, [sp, #76]	; 0x4c
 80152ec:	2300      	movs	r3, #0
 80152ee:	9310      	str	r3, [sp, #64]	; 0x40
 80152f0:	eb0a 0702 	add.w	r7, sl, r2
 80152f4:	9b05      	ldr	r3, [sp, #20]
 80152f6:	45ba      	cmp	sl, r7
 80152f8:	4415      	add	r5, r2
 80152fa:	441d      	add	r5, r3
 80152fc:	4653      	mov	r3, sl
 80152fe:	bfa8      	it	ge
 8015300:	463b      	movge	r3, r7
 8015302:	42ab      	cmp	r3, r5
 8015304:	bfa8      	it	ge
 8015306:	462b      	movge	r3, r5
 8015308:	2b00      	cmp	r3, #0
 801530a:	bfc2      	ittt	gt
 801530c:	1aff      	subgt	r7, r7, r3
 801530e:	1aed      	subgt	r5, r5, r3
 8015310:	ebaa 0a03 	subgt.w	sl, sl, r3
 8015314:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015316:	2b00      	cmp	r3, #0
 8015318:	dd17      	ble.n	801534a <_strtod_l+0x732>
 801531a:	4659      	mov	r1, fp
 801531c:	461a      	mov	r2, r3
 801531e:	4620      	mov	r0, r4
 8015320:	f7ff f9a0 	bl	8014664 <__pow5mult>
 8015324:	4683      	mov	fp, r0
 8015326:	2800      	cmp	r0, #0
 8015328:	f43f aeb4 	beq.w	8015094 <_strtod_l+0x47c>
 801532c:	4601      	mov	r1, r0
 801532e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8015330:	4620      	mov	r0, r4
 8015332:	f7ff f8ed 	bl	8014510 <__multiply>
 8015336:	900a      	str	r0, [sp, #40]	; 0x28
 8015338:	2800      	cmp	r0, #0
 801533a:	f43f aeab 	beq.w	8015094 <_strtod_l+0x47c>
 801533e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8015340:	4620      	mov	r0, r4
 8015342:	f7fe ffcf 	bl	80142e4 <_Bfree>
 8015346:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015348:	931a      	str	r3, [sp, #104]	; 0x68
 801534a:	2f00      	cmp	r7, #0
 801534c:	f300 808f 	bgt.w	801546e <_strtod_l+0x856>
 8015350:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015352:	2b00      	cmp	r3, #0
 8015354:	dd08      	ble.n	8015368 <_strtod_l+0x750>
 8015356:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8015358:	9908      	ldr	r1, [sp, #32]
 801535a:	4620      	mov	r0, r4
 801535c:	f7ff f982 	bl	8014664 <__pow5mult>
 8015360:	9008      	str	r0, [sp, #32]
 8015362:	2800      	cmp	r0, #0
 8015364:	f43f ae96 	beq.w	8015094 <_strtod_l+0x47c>
 8015368:	2d00      	cmp	r5, #0
 801536a:	dd08      	ble.n	801537e <_strtod_l+0x766>
 801536c:	9908      	ldr	r1, [sp, #32]
 801536e:	462a      	mov	r2, r5
 8015370:	4620      	mov	r0, r4
 8015372:	f7ff f9d1 	bl	8014718 <__lshift>
 8015376:	9008      	str	r0, [sp, #32]
 8015378:	2800      	cmp	r0, #0
 801537a:	f43f ae8b 	beq.w	8015094 <_strtod_l+0x47c>
 801537e:	f1ba 0f00 	cmp.w	sl, #0
 8015382:	dd08      	ble.n	8015396 <_strtod_l+0x77e>
 8015384:	4659      	mov	r1, fp
 8015386:	4652      	mov	r2, sl
 8015388:	4620      	mov	r0, r4
 801538a:	f7ff f9c5 	bl	8014718 <__lshift>
 801538e:	4683      	mov	fp, r0
 8015390:	2800      	cmp	r0, #0
 8015392:	f43f ae7f 	beq.w	8015094 <_strtod_l+0x47c>
 8015396:	9a08      	ldr	r2, [sp, #32]
 8015398:	991a      	ldr	r1, [sp, #104]	; 0x68
 801539a:	4620      	mov	r0, r4
 801539c:	f7ff fa44 	bl	8014828 <__mdiff>
 80153a0:	4606      	mov	r6, r0
 80153a2:	2800      	cmp	r0, #0
 80153a4:	f43f ae76 	beq.w	8015094 <_strtod_l+0x47c>
 80153a8:	2500      	movs	r5, #0
 80153aa:	68c3      	ldr	r3, [r0, #12]
 80153ac:	60c5      	str	r5, [r0, #12]
 80153ae:	4659      	mov	r1, fp
 80153b0:	930a      	str	r3, [sp, #40]	; 0x28
 80153b2:	f7ff fa1d 	bl	80147f0 <__mcmp>
 80153b6:	42a8      	cmp	r0, r5
 80153b8:	da6c      	bge.n	8015494 <_strtod_l+0x87c>
 80153ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80153bc:	ea53 0308 	orrs.w	r3, r3, r8
 80153c0:	f040 8090 	bne.w	80154e4 <_strtod_l+0x8cc>
 80153c4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80153c8:	2b00      	cmp	r3, #0
 80153ca:	f040 808b 	bne.w	80154e4 <_strtod_l+0x8cc>
 80153ce:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80153d2:	0d1b      	lsrs	r3, r3, #20
 80153d4:	051b      	lsls	r3, r3, #20
 80153d6:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80153da:	f240 8083 	bls.w	80154e4 <_strtod_l+0x8cc>
 80153de:	6973      	ldr	r3, [r6, #20]
 80153e0:	b913      	cbnz	r3, 80153e8 <_strtod_l+0x7d0>
 80153e2:	6933      	ldr	r3, [r6, #16]
 80153e4:	2b01      	cmp	r3, #1
 80153e6:	dd7d      	ble.n	80154e4 <_strtod_l+0x8cc>
 80153e8:	4631      	mov	r1, r6
 80153ea:	2201      	movs	r2, #1
 80153ec:	4620      	mov	r0, r4
 80153ee:	f7ff f993 	bl	8014718 <__lshift>
 80153f2:	4659      	mov	r1, fp
 80153f4:	4606      	mov	r6, r0
 80153f6:	f7ff f9fb 	bl	80147f0 <__mcmp>
 80153fa:	2800      	cmp	r0, #0
 80153fc:	dd72      	ble.n	80154e4 <_strtod_l+0x8cc>
 80153fe:	9905      	ldr	r1, [sp, #20]
 8015400:	4a22      	ldr	r2, [pc, #136]	; (801548c <_strtod_l+0x874>)
 8015402:	464b      	mov	r3, r9
 8015404:	2900      	cmp	r1, #0
 8015406:	f000 808e 	beq.w	8015526 <_strtod_l+0x90e>
 801540a:	ea02 0109 	and.w	r1, r2, r9
 801540e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8015412:	f300 8088 	bgt.w	8015526 <_strtod_l+0x90e>
 8015416:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801541a:	f77f aeac 	ble.w	8015176 <_strtod_l+0x55e>
 801541e:	4b1c      	ldr	r3, [pc, #112]	; (8015490 <_strtod_l+0x878>)
 8015420:	4640      	mov	r0, r8
 8015422:	4649      	mov	r1, r9
 8015424:	2200      	movs	r2, #0
 8015426:	f7eb f8bf 	bl	80005a8 <__aeabi_dmul>
 801542a:	4b18      	ldr	r3, [pc, #96]	; (801548c <_strtod_l+0x874>)
 801542c:	400b      	ands	r3, r1
 801542e:	4680      	mov	r8, r0
 8015430:	4689      	mov	r9, r1
 8015432:	2b00      	cmp	r3, #0
 8015434:	f47f ae38 	bne.w	80150a8 <_strtod_l+0x490>
 8015438:	2322      	movs	r3, #34	; 0x22
 801543a:	6023      	str	r3, [r4, #0]
 801543c:	e634      	b.n	80150a8 <_strtod_l+0x490>
 801543e:	f04f 32ff 	mov.w	r2, #4294967295
 8015442:	fa02 f303 	lsl.w	r3, r2, r3
 8015446:	ea03 0808 	and.w	r8, r3, r8
 801544a:	e6e1      	b.n	8015210 <_strtod_l+0x5f8>
 801544c:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 8015450:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 8015454:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 8015458:	37e2      	adds	r7, #226	; 0xe2
 801545a:	fa01 f307 	lsl.w	r3, r1, r7
 801545e:	9310      	str	r3, [sp, #64]	; 0x40
 8015460:	9113      	str	r1, [sp, #76]	; 0x4c
 8015462:	e745      	b.n	80152f0 <_strtod_l+0x6d8>
 8015464:	2300      	movs	r3, #0
 8015466:	9310      	str	r3, [sp, #64]	; 0x40
 8015468:	2301      	movs	r3, #1
 801546a:	9313      	str	r3, [sp, #76]	; 0x4c
 801546c:	e740      	b.n	80152f0 <_strtod_l+0x6d8>
 801546e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8015470:	463a      	mov	r2, r7
 8015472:	4620      	mov	r0, r4
 8015474:	f7ff f950 	bl	8014718 <__lshift>
 8015478:	901a      	str	r0, [sp, #104]	; 0x68
 801547a:	2800      	cmp	r0, #0
 801547c:	f47f af68 	bne.w	8015350 <_strtod_l+0x738>
 8015480:	e608      	b.n	8015094 <_strtod_l+0x47c>
 8015482:	bf00      	nop
 8015484:	08017f10 	.word	0x08017f10
 8015488:	fffffc02 	.word	0xfffffc02
 801548c:	7ff00000 	.word	0x7ff00000
 8015490:	39500000 	.word	0x39500000
 8015494:	46ca      	mov	sl, r9
 8015496:	d165      	bne.n	8015564 <_strtod_l+0x94c>
 8015498:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801549a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801549e:	b352      	cbz	r2, 80154f6 <_strtod_l+0x8de>
 80154a0:	4a9d      	ldr	r2, [pc, #628]	; (8015718 <_strtod_l+0xb00>)
 80154a2:	4293      	cmp	r3, r2
 80154a4:	d12a      	bne.n	80154fc <_strtod_l+0x8e4>
 80154a6:	9b05      	ldr	r3, [sp, #20]
 80154a8:	4641      	mov	r1, r8
 80154aa:	b1fb      	cbz	r3, 80154ec <_strtod_l+0x8d4>
 80154ac:	4b9b      	ldr	r3, [pc, #620]	; (801571c <_strtod_l+0xb04>)
 80154ae:	ea09 0303 	and.w	r3, r9, r3
 80154b2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80154b6:	f04f 32ff 	mov.w	r2, #4294967295
 80154ba:	d81a      	bhi.n	80154f2 <_strtod_l+0x8da>
 80154bc:	0d1b      	lsrs	r3, r3, #20
 80154be:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80154c2:	fa02 f303 	lsl.w	r3, r2, r3
 80154c6:	4299      	cmp	r1, r3
 80154c8:	d118      	bne.n	80154fc <_strtod_l+0x8e4>
 80154ca:	4b95      	ldr	r3, [pc, #596]	; (8015720 <_strtod_l+0xb08>)
 80154cc:	459a      	cmp	sl, r3
 80154ce:	d102      	bne.n	80154d6 <_strtod_l+0x8be>
 80154d0:	3101      	adds	r1, #1
 80154d2:	f43f addf 	beq.w	8015094 <_strtod_l+0x47c>
 80154d6:	4b91      	ldr	r3, [pc, #580]	; (801571c <_strtod_l+0xb04>)
 80154d8:	ea0a 0303 	and.w	r3, sl, r3
 80154dc:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80154e0:	f04f 0800 	mov.w	r8, #0
 80154e4:	9b05      	ldr	r3, [sp, #20]
 80154e6:	2b00      	cmp	r3, #0
 80154e8:	d199      	bne.n	801541e <_strtod_l+0x806>
 80154ea:	e5dd      	b.n	80150a8 <_strtod_l+0x490>
 80154ec:	f04f 33ff 	mov.w	r3, #4294967295
 80154f0:	e7e9      	b.n	80154c6 <_strtod_l+0x8ae>
 80154f2:	4613      	mov	r3, r2
 80154f4:	e7e7      	b.n	80154c6 <_strtod_l+0x8ae>
 80154f6:	ea53 0308 	orrs.w	r3, r3, r8
 80154fa:	d080      	beq.n	80153fe <_strtod_l+0x7e6>
 80154fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80154fe:	b1e3      	cbz	r3, 801553a <_strtod_l+0x922>
 8015500:	ea13 0f0a 	tst.w	r3, sl
 8015504:	d0ee      	beq.n	80154e4 <_strtod_l+0x8cc>
 8015506:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015508:	9a05      	ldr	r2, [sp, #20]
 801550a:	4640      	mov	r0, r8
 801550c:	4649      	mov	r1, r9
 801550e:	b1c3      	cbz	r3, 8015542 <_strtod_l+0x92a>
 8015510:	f7ff fb5e 	bl	8014bd0 <sulp>
 8015514:	4602      	mov	r2, r0
 8015516:	460b      	mov	r3, r1
 8015518:	980c      	ldr	r0, [sp, #48]	; 0x30
 801551a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801551c:	f7ea fe8e 	bl	800023c <__adddf3>
 8015520:	4680      	mov	r8, r0
 8015522:	4689      	mov	r9, r1
 8015524:	e7de      	b.n	80154e4 <_strtod_l+0x8cc>
 8015526:	4013      	ands	r3, r2
 8015528:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801552c:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8015530:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8015534:	f04f 38ff 	mov.w	r8, #4294967295
 8015538:	e7d4      	b.n	80154e4 <_strtod_l+0x8cc>
 801553a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801553c:	ea13 0f08 	tst.w	r3, r8
 8015540:	e7e0      	b.n	8015504 <_strtod_l+0x8ec>
 8015542:	f7ff fb45 	bl	8014bd0 <sulp>
 8015546:	4602      	mov	r2, r0
 8015548:	460b      	mov	r3, r1
 801554a:	980c      	ldr	r0, [sp, #48]	; 0x30
 801554c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801554e:	f7ea fe73 	bl	8000238 <__aeabi_dsub>
 8015552:	2200      	movs	r2, #0
 8015554:	2300      	movs	r3, #0
 8015556:	4680      	mov	r8, r0
 8015558:	4689      	mov	r9, r1
 801555a:	f7eb fa8d 	bl	8000a78 <__aeabi_dcmpeq>
 801555e:	2800      	cmp	r0, #0
 8015560:	d0c0      	beq.n	80154e4 <_strtod_l+0x8cc>
 8015562:	e608      	b.n	8015176 <_strtod_l+0x55e>
 8015564:	4659      	mov	r1, fp
 8015566:	4630      	mov	r0, r6
 8015568:	f7ff faa4 	bl	8014ab4 <__ratio>
 801556c:	4602      	mov	r2, r0
 801556e:	460b      	mov	r3, r1
 8015570:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8015574:	2200      	movs	r2, #0
 8015576:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801557a:	f7eb fa91 	bl	8000aa0 <__aeabi_dcmple>
 801557e:	2800      	cmp	r0, #0
 8015580:	d06f      	beq.n	8015662 <_strtod_l+0xa4a>
 8015582:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015584:	2b00      	cmp	r3, #0
 8015586:	d17c      	bne.n	8015682 <_strtod_l+0xa6a>
 8015588:	f1b8 0f00 	cmp.w	r8, #0
 801558c:	d159      	bne.n	8015642 <_strtod_l+0xa2a>
 801558e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8015592:	2b00      	cmp	r3, #0
 8015594:	d17b      	bne.n	801568e <_strtod_l+0xa76>
 8015596:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801559a:	4b62      	ldr	r3, [pc, #392]	; (8015724 <_strtod_l+0xb0c>)
 801559c:	2200      	movs	r2, #0
 801559e:	f7eb fa75 	bl	8000a8c <__aeabi_dcmplt>
 80155a2:	2800      	cmp	r0, #0
 80155a4:	d15a      	bne.n	801565c <_strtod_l+0xa44>
 80155a6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80155aa:	4b5f      	ldr	r3, [pc, #380]	; (8015728 <_strtod_l+0xb10>)
 80155ac:	2200      	movs	r2, #0
 80155ae:	f7ea fffb 	bl	80005a8 <__aeabi_dmul>
 80155b2:	4605      	mov	r5, r0
 80155b4:	460f      	mov	r7, r1
 80155b6:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80155ba:	9506      	str	r5, [sp, #24]
 80155bc:	9307      	str	r3, [sp, #28]
 80155be:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80155c2:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80155c6:	4b55      	ldr	r3, [pc, #340]	; (801571c <_strtod_l+0xb04>)
 80155c8:	4a54      	ldr	r2, [pc, #336]	; (801571c <_strtod_l+0xb04>)
 80155ca:	ea0a 0303 	and.w	r3, sl, r3
 80155ce:	9313      	str	r3, [sp, #76]	; 0x4c
 80155d0:	4b56      	ldr	r3, [pc, #344]	; (801572c <_strtod_l+0xb14>)
 80155d2:	ea0a 0202 	and.w	r2, sl, r2
 80155d6:	429a      	cmp	r2, r3
 80155d8:	f040 80ae 	bne.w	8015738 <_strtod_l+0xb20>
 80155dc:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 80155e0:	4640      	mov	r0, r8
 80155e2:	4649      	mov	r1, r9
 80155e4:	f7ff f9a8 	bl	8014938 <__ulp>
 80155e8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80155ec:	f7ea ffdc 	bl	80005a8 <__aeabi_dmul>
 80155f0:	4642      	mov	r2, r8
 80155f2:	464b      	mov	r3, r9
 80155f4:	f7ea fe22 	bl	800023c <__adddf3>
 80155f8:	f8df a120 	ldr.w	sl, [pc, #288]	; 801571c <_strtod_l+0xb04>
 80155fc:	4a4c      	ldr	r2, [pc, #304]	; (8015730 <_strtod_l+0xb18>)
 80155fe:	ea01 0a0a 	and.w	sl, r1, sl
 8015602:	4592      	cmp	sl, r2
 8015604:	4680      	mov	r8, r0
 8015606:	d948      	bls.n	801569a <_strtod_l+0xa82>
 8015608:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801560a:	4b45      	ldr	r3, [pc, #276]	; (8015720 <_strtod_l+0xb08>)
 801560c:	429a      	cmp	r2, r3
 801560e:	d103      	bne.n	8015618 <_strtod_l+0xa00>
 8015610:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015612:	3301      	adds	r3, #1
 8015614:	f43f ad3e 	beq.w	8015094 <_strtod_l+0x47c>
 8015618:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8015720 <_strtod_l+0xb08>
 801561c:	f04f 38ff 	mov.w	r8, #4294967295
 8015620:	991a      	ldr	r1, [sp, #104]	; 0x68
 8015622:	4620      	mov	r0, r4
 8015624:	f7fe fe5e 	bl	80142e4 <_Bfree>
 8015628:	9908      	ldr	r1, [sp, #32]
 801562a:	4620      	mov	r0, r4
 801562c:	f7fe fe5a 	bl	80142e4 <_Bfree>
 8015630:	4659      	mov	r1, fp
 8015632:	4620      	mov	r0, r4
 8015634:	f7fe fe56 	bl	80142e4 <_Bfree>
 8015638:	4631      	mov	r1, r6
 801563a:	4620      	mov	r0, r4
 801563c:	f7fe fe52 	bl	80142e4 <_Bfree>
 8015640:	e607      	b.n	8015252 <_strtod_l+0x63a>
 8015642:	f1b8 0f01 	cmp.w	r8, #1
 8015646:	d103      	bne.n	8015650 <_strtod_l+0xa38>
 8015648:	f1b9 0f00 	cmp.w	r9, #0
 801564c:	f43f ad93 	beq.w	8015176 <_strtod_l+0x55e>
 8015650:	4b38      	ldr	r3, [pc, #224]	; (8015734 <_strtod_l+0xb1c>)
 8015652:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8015654:	2200      	movs	r2, #0
 8015656:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801565a:	e016      	b.n	801568a <_strtod_l+0xa72>
 801565c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801565e:	4f32      	ldr	r7, [pc, #200]	; (8015728 <_strtod_l+0xb10>)
 8015660:	e7a9      	b.n	80155b6 <_strtod_l+0x99e>
 8015662:	4b31      	ldr	r3, [pc, #196]	; (8015728 <_strtod_l+0xb10>)
 8015664:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8015668:	2200      	movs	r2, #0
 801566a:	f7ea ff9d 	bl	80005a8 <__aeabi_dmul>
 801566e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015670:	4605      	mov	r5, r0
 8015672:	460f      	mov	r7, r1
 8015674:	2b00      	cmp	r3, #0
 8015676:	d09e      	beq.n	80155b6 <_strtod_l+0x99e>
 8015678:	4602      	mov	r2, r0
 801567a:	460b      	mov	r3, r1
 801567c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8015680:	e79d      	b.n	80155be <_strtod_l+0x9a6>
 8015682:	4b28      	ldr	r3, [pc, #160]	; (8015724 <_strtod_l+0xb0c>)
 8015684:	2200      	movs	r2, #0
 8015686:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801568a:	4f26      	ldr	r7, [pc, #152]	; (8015724 <_strtod_l+0xb0c>)
 801568c:	e797      	b.n	80155be <_strtod_l+0x9a6>
 801568e:	4b29      	ldr	r3, [pc, #164]	; (8015734 <_strtod_l+0xb1c>)
 8015690:	2200      	movs	r2, #0
 8015692:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8015696:	4645      	mov	r5, r8
 8015698:	e7f7      	b.n	801568a <_strtod_l+0xa72>
 801569a:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 801569e:	9b05      	ldr	r3, [sp, #20]
 80156a0:	46ca      	mov	sl, r9
 80156a2:	2b00      	cmp	r3, #0
 80156a4:	d1bc      	bne.n	8015620 <_strtod_l+0xa08>
 80156a6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80156aa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80156ac:	0d1b      	lsrs	r3, r3, #20
 80156ae:	051b      	lsls	r3, r3, #20
 80156b0:	429a      	cmp	r2, r3
 80156b2:	d1b5      	bne.n	8015620 <_strtod_l+0xa08>
 80156b4:	4628      	mov	r0, r5
 80156b6:	4639      	mov	r1, r7
 80156b8:	f7eb fda4 	bl	8001204 <__aeabi_d2lz>
 80156bc:	f7ea ff46 	bl	800054c <__aeabi_l2d>
 80156c0:	4602      	mov	r2, r0
 80156c2:	460b      	mov	r3, r1
 80156c4:	4628      	mov	r0, r5
 80156c6:	4639      	mov	r1, r7
 80156c8:	f7ea fdb6 	bl	8000238 <__aeabi_dsub>
 80156cc:	460b      	mov	r3, r1
 80156ce:	4602      	mov	r2, r0
 80156d0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80156d4:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 80156d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80156da:	ea4a 0a08 	orr.w	sl, sl, r8
 80156de:	ea5a 0a03 	orrs.w	sl, sl, r3
 80156e2:	d06a      	beq.n	80157ba <_strtod_l+0xba2>
 80156e4:	a308      	add	r3, pc, #32	; (adr r3, 8015708 <_strtod_l+0xaf0>)
 80156e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156ea:	f7eb f9cf 	bl	8000a8c <__aeabi_dcmplt>
 80156ee:	2800      	cmp	r0, #0
 80156f0:	f47f acda 	bne.w	80150a8 <_strtod_l+0x490>
 80156f4:	a306      	add	r3, pc, #24	; (adr r3, 8015710 <_strtod_l+0xaf8>)
 80156f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156fa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80156fe:	f7eb f9e3 	bl	8000ac8 <__aeabi_dcmpgt>
 8015702:	2800      	cmp	r0, #0
 8015704:	d08c      	beq.n	8015620 <_strtod_l+0xa08>
 8015706:	e4cf      	b.n	80150a8 <_strtod_l+0x490>
 8015708:	94a03595 	.word	0x94a03595
 801570c:	3fdfffff 	.word	0x3fdfffff
 8015710:	35afe535 	.word	0x35afe535
 8015714:	3fe00000 	.word	0x3fe00000
 8015718:	000fffff 	.word	0x000fffff
 801571c:	7ff00000 	.word	0x7ff00000
 8015720:	7fefffff 	.word	0x7fefffff
 8015724:	3ff00000 	.word	0x3ff00000
 8015728:	3fe00000 	.word	0x3fe00000
 801572c:	7fe00000 	.word	0x7fe00000
 8015730:	7c9fffff 	.word	0x7c9fffff
 8015734:	bff00000 	.word	0xbff00000
 8015738:	9b05      	ldr	r3, [sp, #20]
 801573a:	b333      	cbz	r3, 801578a <_strtod_l+0xb72>
 801573c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801573e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8015742:	d822      	bhi.n	801578a <_strtod_l+0xb72>
 8015744:	a328      	add	r3, pc, #160	; (adr r3, 80157e8 <_strtod_l+0xbd0>)
 8015746:	e9d3 2300 	ldrd	r2, r3, [r3]
 801574a:	4628      	mov	r0, r5
 801574c:	4639      	mov	r1, r7
 801574e:	f7eb f9a7 	bl	8000aa0 <__aeabi_dcmple>
 8015752:	b1a0      	cbz	r0, 801577e <_strtod_l+0xb66>
 8015754:	4639      	mov	r1, r7
 8015756:	4628      	mov	r0, r5
 8015758:	f7eb f9fe 	bl	8000b58 <__aeabi_d2uiz>
 801575c:	2801      	cmp	r0, #1
 801575e:	bf38      	it	cc
 8015760:	2001      	movcc	r0, #1
 8015762:	f7ea fea7 	bl	80004b4 <__aeabi_ui2d>
 8015766:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015768:	4605      	mov	r5, r0
 801576a:	460f      	mov	r7, r1
 801576c:	bb03      	cbnz	r3, 80157b0 <_strtod_l+0xb98>
 801576e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015772:	9014      	str	r0, [sp, #80]	; 0x50
 8015774:	9315      	str	r3, [sp, #84]	; 0x54
 8015776:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 801577a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 801577e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015780:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8015782:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8015786:	1a9b      	subs	r3, r3, r2
 8015788:	9311      	str	r3, [sp, #68]	; 0x44
 801578a:	980c      	ldr	r0, [sp, #48]	; 0x30
 801578c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801578e:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 8015792:	f7ff f8d1 	bl	8014938 <__ulp>
 8015796:	4602      	mov	r2, r0
 8015798:	460b      	mov	r3, r1
 801579a:	4640      	mov	r0, r8
 801579c:	4649      	mov	r1, r9
 801579e:	f7ea ff03 	bl	80005a8 <__aeabi_dmul>
 80157a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80157a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80157a6:	f7ea fd49 	bl	800023c <__adddf3>
 80157aa:	4680      	mov	r8, r0
 80157ac:	4689      	mov	r9, r1
 80157ae:	e776      	b.n	801569e <_strtod_l+0xa86>
 80157b0:	4602      	mov	r2, r0
 80157b2:	460b      	mov	r3, r1
 80157b4:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80157b8:	e7dd      	b.n	8015776 <_strtod_l+0xb5e>
 80157ba:	a30d      	add	r3, pc, #52	; (adr r3, 80157f0 <_strtod_l+0xbd8>)
 80157bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157c0:	f7eb f964 	bl	8000a8c <__aeabi_dcmplt>
 80157c4:	e79d      	b.n	8015702 <_strtod_l+0xaea>
 80157c6:	2300      	movs	r3, #0
 80157c8:	930e      	str	r3, [sp, #56]	; 0x38
 80157ca:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80157cc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80157ce:	6013      	str	r3, [r2, #0]
 80157d0:	f7ff ba5f 	b.w	8014c92 <_strtod_l+0x7a>
 80157d4:	2a65      	cmp	r2, #101	; 0x65
 80157d6:	f43f ab56 	beq.w	8014e86 <_strtod_l+0x26e>
 80157da:	2a45      	cmp	r2, #69	; 0x45
 80157dc:	f43f ab53 	beq.w	8014e86 <_strtod_l+0x26e>
 80157e0:	2301      	movs	r3, #1
 80157e2:	f7ff bb8b 	b.w	8014efc <_strtod_l+0x2e4>
 80157e6:	bf00      	nop
 80157e8:	ffc00000 	.word	0xffc00000
 80157ec:	41dfffff 	.word	0x41dfffff
 80157f0:	94a03595 	.word	0x94a03595
 80157f4:	3fcfffff 	.word	0x3fcfffff

080157f8 <_strtod_r>:
 80157f8:	4b01      	ldr	r3, [pc, #4]	; (8015800 <_strtod_r+0x8>)
 80157fa:	f7ff ba0d 	b.w	8014c18 <_strtod_l>
 80157fe:	bf00      	nop
 8015800:	2000013c 	.word	0x2000013c

08015804 <_strtol_l.constprop.0>:
 8015804:	2b01      	cmp	r3, #1
 8015806:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801580a:	4686      	mov	lr, r0
 801580c:	4690      	mov	r8, r2
 801580e:	d001      	beq.n	8015814 <_strtol_l.constprop.0+0x10>
 8015810:	2b24      	cmp	r3, #36	; 0x24
 8015812:	d906      	bls.n	8015822 <_strtol_l.constprop.0+0x1e>
 8015814:	f7fd fd90 	bl	8013338 <__errno>
 8015818:	2316      	movs	r3, #22
 801581a:	6003      	str	r3, [r0, #0]
 801581c:	2000      	movs	r0, #0
 801581e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015822:	4836      	ldr	r0, [pc, #216]	; (80158fc <_strtol_l.constprop.0+0xf8>)
 8015824:	460d      	mov	r5, r1
 8015826:	462a      	mov	r2, r5
 8015828:	f815 4b01 	ldrb.w	r4, [r5], #1
 801582c:	5d06      	ldrb	r6, [r0, r4]
 801582e:	f016 0608 	ands.w	r6, r6, #8
 8015832:	d1f8      	bne.n	8015826 <_strtol_l.constprop.0+0x22>
 8015834:	2c2d      	cmp	r4, #45	; 0x2d
 8015836:	d12e      	bne.n	8015896 <_strtol_l.constprop.0+0x92>
 8015838:	782c      	ldrb	r4, [r5, #0]
 801583a:	2601      	movs	r6, #1
 801583c:	1c95      	adds	r5, r2, #2
 801583e:	2b00      	cmp	r3, #0
 8015840:	d057      	beq.n	80158f2 <_strtol_l.constprop.0+0xee>
 8015842:	2b10      	cmp	r3, #16
 8015844:	d109      	bne.n	801585a <_strtol_l.constprop.0+0x56>
 8015846:	2c30      	cmp	r4, #48	; 0x30
 8015848:	d107      	bne.n	801585a <_strtol_l.constprop.0+0x56>
 801584a:	782a      	ldrb	r2, [r5, #0]
 801584c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8015850:	2a58      	cmp	r2, #88	; 0x58
 8015852:	d149      	bne.n	80158e8 <_strtol_l.constprop.0+0xe4>
 8015854:	786c      	ldrb	r4, [r5, #1]
 8015856:	2310      	movs	r3, #16
 8015858:	3502      	adds	r5, #2
 801585a:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 801585e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8015862:	2200      	movs	r2, #0
 8015864:	fbbc f9f3 	udiv	r9, ip, r3
 8015868:	4610      	mov	r0, r2
 801586a:	fb03 ca19 	mls	sl, r3, r9, ip
 801586e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8015872:	2f09      	cmp	r7, #9
 8015874:	d814      	bhi.n	80158a0 <_strtol_l.constprop.0+0x9c>
 8015876:	463c      	mov	r4, r7
 8015878:	42a3      	cmp	r3, r4
 801587a:	dd20      	ble.n	80158be <_strtol_l.constprop.0+0xba>
 801587c:	1c57      	adds	r7, r2, #1
 801587e:	d007      	beq.n	8015890 <_strtol_l.constprop.0+0x8c>
 8015880:	4581      	cmp	r9, r0
 8015882:	d319      	bcc.n	80158b8 <_strtol_l.constprop.0+0xb4>
 8015884:	d101      	bne.n	801588a <_strtol_l.constprop.0+0x86>
 8015886:	45a2      	cmp	sl, r4
 8015888:	db16      	blt.n	80158b8 <_strtol_l.constprop.0+0xb4>
 801588a:	fb00 4003 	mla	r0, r0, r3, r4
 801588e:	2201      	movs	r2, #1
 8015890:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015894:	e7eb      	b.n	801586e <_strtol_l.constprop.0+0x6a>
 8015896:	2c2b      	cmp	r4, #43	; 0x2b
 8015898:	bf04      	itt	eq
 801589a:	782c      	ldrbeq	r4, [r5, #0]
 801589c:	1c95      	addeq	r5, r2, #2
 801589e:	e7ce      	b.n	801583e <_strtol_l.constprop.0+0x3a>
 80158a0:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80158a4:	2f19      	cmp	r7, #25
 80158a6:	d801      	bhi.n	80158ac <_strtol_l.constprop.0+0xa8>
 80158a8:	3c37      	subs	r4, #55	; 0x37
 80158aa:	e7e5      	b.n	8015878 <_strtol_l.constprop.0+0x74>
 80158ac:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80158b0:	2f19      	cmp	r7, #25
 80158b2:	d804      	bhi.n	80158be <_strtol_l.constprop.0+0xba>
 80158b4:	3c57      	subs	r4, #87	; 0x57
 80158b6:	e7df      	b.n	8015878 <_strtol_l.constprop.0+0x74>
 80158b8:	f04f 32ff 	mov.w	r2, #4294967295
 80158bc:	e7e8      	b.n	8015890 <_strtol_l.constprop.0+0x8c>
 80158be:	1c53      	adds	r3, r2, #1
 80158c0:	d108      	bne.n	80158d4 <_strtol_l.constprop.0+0xd0>
 80158c2:	2322      	movs	r3, #34	; 0x22
 80158c4:	f8ce 3000 	str.w	r3, [lr]
 80158c8:	4660      	mov	r0, ip
 80158ca:	f1b8 0f00 	cmp.w	r8, #0
 80158ce:	d0a6      	beq.n	801581e <_strtol_l.constprop.0+0x1a>
 80158d0:	1e69      	subs	r1, r5, #1
 80158d2:	e006      	b.n	80158e2 <_strtol_l.constprop.0+0xde>
 80158d4:	b106      	cbz	r6, 80158d8 <_strtol_l.constprop.0+0xd4>
 80158d6:	4240      	negs	r0, r0
 80158d8:	f1b8 0f00 	cmp.w	r8, #0
 80158dc:	d09f      	beq.n	801581e <_strtol_l.constprop.0+0x1a>
 80158de:	2a00      	cmp	r2, #0
 80158e0:	d1f6      	bne.n	80158d0 <_strtol_l.constprop.0+0xcc>
 80158e2:	f8c8 1000 	str.w	r1, [r8]
 80158e6:	e79a      	b.n	801581e <_strtol_l.constprop.0+0x1a>
 80158e8:	2430      	movs	r4, #48	; 0x30
 80158ea:	2b00      	cmp	r3, #0
 80158ec:	d1b5      	bne.n	801585a <_strtol_l.constprop.0+0x56>
 80158ee:	2308      	movs	r3, #8
 80158f0:	e7b3      	b.n	801585a <_strtol_l.constprop.0+0x56>
 80158f2:	2c30      	cmp	r4, #48	; 0x30
 80158f4:	d0a9      	beq.n	801584a <_strtol_l.constprop.0+0x46>
 80158f6:	230a      	movs	r3, #10
 80158f8:	e7af      	b.n	801585a <_strtol_l.constprop.0+0x56>
 80158fa:	bf00      	nop
 80158fc:	08017f39 	.word	0x08017f39

08015900 <_strtol_r>:
 8015900:	f7ff bf80 	b.w	8015804 <_strtol_l.constprop.0>

08015904 <print_e>:
 8015904:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015906:	b08b      	sub	sp, #44	; 0x2c
 8015908:	460d      	mov	r5, r1
 801590a:	a908      	add	r1, sp, #32
 801590c:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801590e:	9104      	str	r1, [sp, #16]
 8015910:	a907      	add	r1, sp, #28
 8015912:	9103      	str	r1, [sp, #12]
 8015914:	a909      	add	r1, sp, #36	; 0x24
 8015916:	9102      	str	r1, [sp, #8]
 8015918:	1c71      	adds	r1, r6, #1
 801591a:	9101      	str	r1, [sp, #4]
 801591c:	2102      	movs	r1, #2
 801591e:	9100      	str	r1, [sp, #0]
 8015920:	f89d 7044 	ldrb.w	r7, [sp, #68]	; 0x44
 8015924:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8015926:	f7fd fdbf 	bl	80134a8 <_dtoa_r>
 801592a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801592c:	f242 730f 	movw	r3, #9999	; 0x270f
 8015930:	429a      	cmp	r2, r3
 8015932:	4601      	mov	r1, r0
 8015934:	d104      	bne.n	8015940 <print_e+0x3c>
 8015936:	4628      	mov	r0, r5
 8015938:	f000 fb5c 	bl	8015ff4 <strcpy>
 801593c:	b00b      	add	sp, #44	; 0x2c
 801593e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015940:	462b      	mov	r3, r5
 8015942:	7800      	ldrb	r0, [r0, #0]
 8015944:	f803 0b01 	strb.w	r0, [r3], #1
 8015948:	2e00      	cmp	r6, #0
 801594a:	bfc8      	it	gt
 801594c:	2401      	movgt	r4, #1
 801594e:	202e      	movs	r0, #46	; 0x2e
 8015950:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8015954:	b10d      	cbz	r5, 801595a <print_e+0x56>
 8015956:	2e00      	cmp	r6, #0
 8015958:	dc37      	bgt.n	80159ca <print_e+0xc6>
 801595a:	2f67      	cmp	r7, #103	; 0x67
 801595c:	d046      	beq.n	80159ec <print_e+0xe8>
 801595e:	2f47      	cmp	r7, #71	; 0x47
 8015960:	d046      	beq.n	80159f0 <print_e+0xec>
 8015962:	212e      	movs	r1, #46	; 0x2e
 8015964:	2030      	movs	r0, #48	; 0x30
 8015966:	2e00      	cmp	r6, #0
 8015968:	dc38      	bgt.n	80159dc <print_e+0xd8>
 801596a:	1e51      	subs	r1, r2, #1
 801596c:	2900      	cmp	r1, #0
 801596e:	bfb8      	it	lt
 8015970:	f1c2 0201 	rsblt	r2, r2, #1
 8015974:	4618      	mov	r0, r3
 8015976:	9109      	str	r1, [sp, #36]	; 0x24
 8015978:	bfac      	ite	ge
 801597a:	222b      	movge	r2, #43	; 0x2b
 801597c:	9209      	strlt	r2, [sp, #36]	; 0x24
 801597e:	f800 7b02 	strb.w	r7, [r0], #2
 8015982:	bfa8      	it	ge
 8015984:	705a      	strbge	r2, [r3, #1]
 8015986:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015988:	bfbc      	itt	lt
 801598a:	212d      	movlt	r1, #45	; 0x2d
 801598c:	7059      	strblt	r1, [r3, #1]
 801598e:	2a63      	cmp	r2, #99	; 0x63
 8015990:	dd0b      	ble.n	80159aa <print_e+0xa6>
 8015992:	2164      	movs	r1, #100	; 0x64
 8015994:	fb92 f1f1 	sdiv	r1, r2, r1
 8015998:	f101 0430 	add.w	r4, r1, #48	; 0x30
 801599c:	1cd8      	adds	r0, r3, #3
 801599e:	709c      	strb	r4, [r3, #2]
 80159a0:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80159a4:	fb03 2201 	mla	r2, r3, r1, r2
 80159a8:	9209      	str	r2, [sp, #36]	; 0x24
 80159aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80159ac:	220a      	movs	r2, #10
 80159ae:	fb93 f2f2 	sdiv	r2, r3, r2
 80159b2:	f102 0130 	add.w	r1, r2, #48	; 0x30
 80159b6:	7001      	strb	r1, [r0, #0]
 80159b8:	f06f 0109 	mvn.w	r1, #9
 80159bc:	fb01 3302 	mla	r3, r1, r2, r3
 80159c0:	3330      	adds	r3, #48	; 0x30
 80159c2:	7043      	strb	r3, [r0, #1]
 80159c4:	2300      	movs	r3, #0
 80159c6:	7083      	strb	r3, [r0, #2]
 80159c8:	e7b8      	b.n	801593c <print_e+0x38>
 80159ca:	b10c      	cbz	r4, 80159d0 <print_e+0xcc>
 80159cc:	f803 0b01 	strb.w	r0, [r3], #1
 80159d0:	780c      	ldrb	r4, [r1, #0]
 80159d2:	f803 4b01 	strb.w	r4, [r3], #1
 80159d6:	3e01      	subs	r6, #1
 80159d8:	2400      	movs	r4, #0
 80159da:	e7b9      	b.n	8015950 <print_e+0x4c>
 80159dc:	b10c      	cbz	r4, 80159e2 <print_e+0xde>
 80159de:	f803 1b01 	strb.w	r1, [r3], #1
 80159e2:	f803 0b01 	strb.w	r0, [r3], #1
 80159e6:	3e01      	subs	r6, #1
 80159e8:	2400      	movs	r4, #0
 80159ea:	e7bc      	b.n	8015966 <print_e+0x62>
 80159ec:	2765      	movs	r7, #101	; 0x65
 80159ee:	e7bc      	b.n	801596a <print_e+0x66>
 80159f0:	2745      	movs	r7, #69	; 0x45
 80159f2:	e7ba      	b.n	801596a <print_e+0x66>
 80159f4:	0000      	movs	r0, r0
	...

080159f8 <_gcvt>:
 80159f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80159fc:	4690      	mov	r8, r2
 80159fe:	b08b      	sub	sp, #44	; 0x2c
 8015a00:	461c      	mov	r4, r3
 8015a02:	4681      	mov	r9, r0
 8015a04:	2200      	movs	r2, #0
 8015a06:	2300      	movs	r3, #0
 8015a08:	4640      	mov	r0, r8
 8015a0a:	4621      	mov	r1, r4
 8015a0c:	e9dd 7512 	ldrd	r7, r5, [sp, #72]	; 0x48
 8015a10:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8015a12:	f7eb f83b 	bl	8000a8c <__aeabi_dcmplt>
 8015a16:	b108      	cbz	r0, 8015a1c <_gcvt+0x24>
 8015a18:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
 8015a1c:	2200      	movs	r2, #0
 8015a1e:	2300      	movs	r3, #0
 8015a20:	4640      	mov	r0, r8
 8015a22:	4621      	mov	r1, r4
 8015a24:	f7eb f828 	bl	8000a78 <__aeabi_dcmpeq>
 8015a28:	b138      	cbz	r0, 8015a3a <_gcvt+0x42>
 8015a2a:	2330      	movs	r3, #48	; 0x30
 8015a2c:	702b      	strb	r3, [r5, #0]
 8015a2e:	2300      	movs	r3, #0
 8015a30:	706b      	strb	r3, [r5, #1]
 8015a32:	4628      	mov	r0, r5
 8015a34:	b00b      	add	sp, #44	; 0x2c
 8015a36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015a3a:	a34d      	add	r3, pc, #308	; (adr r3, 8015b70 <_gcvt+0x178>)
 8015a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a40:	4640      	mov	r0, r8
 8015a42:	4621      	mov	r1, r4
 8015a44:	f7eb f82c 	bl	8000aa0 <__aeabi_dcmple>
 8015a48:	b160      	cbz	r0, 8015a64 <_gcvt+0x6c>
 8015a4a:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8015a4e:	9301      	str	r3, [sp, #4]
 8015a50:	3f01      	subs	r7, #1
 8015a52:	9602      	str	r6, [sp, #8]
 8015a54:	9700      	str	r7, [sp, #0]
 8015a56:	4642      	mov	r2, r8
 8015a58:	4623      	mov	r3, r4
 8015a5a:	4629      	mov	r1, r5
 8015a5c:	4648      	mov	r0, r9
 8015a5e:	f7ff ff51 	bl	8015904 <print_e>
 8015a62:	e7e6      	b.n	8015a32 <_gcvt+0x3a>
 8015a64:	4638      	mov	r0, r7
 8015a66:	f7ff f853 	bl	8014b10 <_mprec_log10>
 8015a6a:	4642      	mov	r2, r8
 8015a6c:	4623      	mov	r3, r4
 8015a6e:	f7eb f817 	bl	8000aa0 <__aeabi_dcmple>
 8015a72:	2800      	cmp	r0, #0
 8015a74:	d1e9      	bne.n	8015a4a <_gcvt+0x52>
 8015a76:	ab09      	add	r3, sp, #36	; 0x24
 8015a78:	9304      	str	r3, [sp, #16]
 8015a7a:	ab08      	add	r3, sp, #32
 8015a7c:	9303      	str	r3, [sp, #12]
 8015a7e:	ab07      	add	r3, sp, #28
 8015a80:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8015a84:	2302      	movs	r3, #2
 8015a86:	9300      	str	r3, [sp, #0]
 8015a88:	4642      	mov	r2, r8
 8015a8a:	4623      	mov	r3, r4
 8015a8c:	4648      	mov	r0, r9
 8015a8e:	f7fd fd0b 	bl	80134a8 <_dtoa_r>
 8015a92:	9a07      	ldr	r2, [sp, #28]
 8015a94:	f242 730f 	movw	r3, #9999	; 0x270f
 8015a98:	429a      	cmp	r2, r3
 8015a9a:	4601      	mov	r1, r0
 8015a9c:	d00f      	beq.n	8015abe <_gcvt+0xc6>
 8015a9e:	462b      	mov	r3, r5
 8015aa0:	442f      	add	r7, r5
 8015aa2:	4608      	mov	r0, r1
 8015aa4:	f811 cb01 	ldrb.w	ip, [r1], #1
 8015aa8:	9a07      	ldr	r2, [sp, #28]
 8015aaa:	1afc      	subs	r4, r7, r3
 8015aac:	f1bc 0f00 	cmp.w	ip, #0
 8015ab0:	d001      	beq.n	8015ab6 <_gcvt+0xbe>
 8015ab2:	2a00      	cmp	r2, #0
 8015ab4:	dc07      	bgt.n	8015ac6 <_gcvt+0xce>
 8015ab6:	2100      	movs	r1, #0
 8015ab8:	f04f 0c30 	mov.w	ip, #48	; 0x30
 8015abc:	e00c      	b.n	8015ad8 <_gcvt+0xe0>
 8015abe:	4628      	mov	r0, r5
 8015ac0:	f000 fa98 	bl	8015ff4 <strcpy>
 8015ac4:	e7b5      	b.n	8015a32 <_gcvt+0x3a>
 8015ac6:	3a01      	subs	r2, #1
 8015ac8:	f803 cb01 	strb.w	ip, [r3], #1
 8015acc:	9207      	str	r2, [sp, #28]
 8015ace:	e7e8      	b.n	8015aa2 <_gcvt+0xaa>
 8015ad0:	f803 cb01 	strb.w	ip, [r3], #1
 8015ad4:	3c01      	subs	r4, #1
 8015ad6:	2101      	movs	r1, #1
 8015ad8:	2a00      	cmp	r2, #0
 8015ada:	4617      	mov	r7, r2
 8015adc:	dc2a      	bgt.n	8015b34 <_gcvt+0x13c>
 8015ade:	b101      	cbz	r1, 8015ae2 <_gcvt+0xea>
 8015ae0:	9207      	str	r2, [sp, #28]
 8015ae2:	b90e      	cbnz	r6, 8015ae8 <_gcvt+0xf0>
 8015ae4:	7802      	ldrb	r2, [r0, #0]
 8015ae6:	b312      	cbz	r2, 8015b2e <_gcvt+0x136>
 8015ae8:	42ab      	cmp	r3, r5
 8015aea:	bf04      	itt	eq
 8015aec:	2230      	moveq	r2, #48	; 0x30
 8015aee:	f803 2b01 	strbeq.w	r2, [r3], #1
 8015af2:	222e      	movs	r2, #46	; 0x2e
 8015af4:	701a      	strb	r2, [r3, #0]
 8015af6:	9a07      	ldr	r2, [sp, #28]
 8015af8:	4619      	mov	r1, r3
 8015afa:	2700      	movs	r7, #0
 8015afc:	eba2 0c03 	sub.w	ip, r2, r3
 8015b00:	f04f 0e30 	mov.w	lr, #48	; 0x30
 8015b04:	eb1c 0f01 	cmn.w	ip, r1
 8015b08:	d41c      	bmi.n	8015b44 <_gcvt+0x14c>
 8015b0a:	2a00      	cmp	r2, #0
 8015b0c:	f1c2 0100 	rsb	r1, r2, #0
 8015b10:	bfc8      	it	gt
 8015b12:	2100      	movgt	r1, #0
 8015b14:	f101 0c01 	add.w	ip, r1, #1
 8015b18:	4463      	add	r3, ip
 8015b1a:	440a      	add	r2, r1
 8015b1c:	b107      	cbz	r7, 8015b20 <_gcvt+0x128>
 8015b1e:	9207      	str	r2, [sp, #28]
 8015b20:	1e42      	subs	r2, r0, #1
 8015b22:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8015b26:	b109      	cbz	r1, 8015b2c <_gcvt+0x134>
 8015b28:	2c00      	cmp	r4, #0
 8015b2a:	dc0f      	bgt.n	8015b4c <_gcvt+0x154>
 8015b2c:	b9de      	cbnz	r6, 8015b66 <_gcvt+0x16e>
 8015b2e:	2200      	movs	r2, #0
 8015b30:	701a      	strb	r2, [r3, #0]
 8015b32:	e77e      	b.n	8015a32 <_gcvt+0x3a>
 8015b34:	2c00      	cmp	r4, #0
 8015b36:	f102 32ff 	add.w	r2, r2, #4294967295
 8015b3a:	dcc9      	bgt.n	8015ad0 <_gcvt+0xd8>
 8015b3c:	2900      	cmp	r1, #0
 8015b3e:	d0d0      	beq.n	8015ae2 <_gcvt+0xea>
 8015b40:	9707      	str	r7, [sp, #28]
 8015b42:	e7ce      	b.n	8015ae2 <_gcvt+0xea>
 8015b44:	f801 ef01 	strb.w	lr, [r1, #1]!
 8015b48:	2701      	movs	r7, #1
 8015b4a:	e7db      	b.n	8015b04 <_gcvt+0x10c>
 8015b4c:	f803 1b01 	strb.w	r1, [r3], #1
 8015b50:	3c01      	subs	r4, #1
 8015b52:	e7e6      	b.n	8015b22 <_gcvt+0x12a>
 8015b54:	f802 6b01 	strb.w	r6, [r2], #1
 8015b58:	1a81      	subs	r1, r0, r2
 8015b5a:	2900      	cmp	r1, #0
 8015b5c:	dcfa      	bgt.n	8015b54 <_gcvt+0x15c>
 8015b5e:	2c00      	cmp	r4, #0
 8015b60:	bfa8      	it	ge
 8015b62:	191b      	addge	r3, r3, r4
 8015b64:	e7e3      	b.n	8015b2e <_gcvt+0x136>
 8015b66:	461a      	mov	r2, r3
 8015b68:	1918      	adds	r0, r3, r4
 8015b6a:	2630      	movs	r6, #48	; 0x30
 8015b6c:	e7f4      	b.n	8015b58 <_gcvt+0x160>
 8015b6e:	bf00      	nop
 8015b70:	eb1c432d 	.word	0xeb1c432d
 8015b74:	3f1a36e2 	.word	0x3f1a36e2

08015b78 <__ssputs_r>:
 8015b78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015b7c:	688e      	ldr	r6, [r1, #8]
 8015b7e:	461f      	mov	r7, r3
 8015b80:	42be      	cmp	r6, r7
 8015b82:	680b      	ldr	r3, [r1, #0]
 8015b84:	4682      	mov	sl, r0
 8015b86:	460c      	mov	r4, r1
 8015b88:	4690      	mov	r8, r2
 8015b8a:	d82c      	bhi.n	8015be6 <__ssputs_r+0x6e>
 8015b8c:	898a      	ldrh	r2, [r1, #12]
 8015b8e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8015b92:	d026      	beq.n	8015be2 <__ssputs_r+0x6a>
 8015b94:	6965      	ldr	r5, [r4, #20]
 8015b96:	6909      	ldr	r1, [r1, #16]
 8015b98:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015b9c:	eba3 0901 	sub.w	r9, r3, r1
 8015ba0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015ba4:	1c7b      	adds	r3, r7, #1
 8015ba6:	444b      	add	r3, r9
 8015ba8:	106d      	asrs	r5, r5, #1
 8015baa:	429d      	cmp	r5, r3
 8015bac:	bf38      	it	cc
 8015bae:	461d      	movcc	r5, r3
 8015bb0:	0553      	lsls	r3, r2, #21
 8015bb2:	d527      	bpl.n	8015c04 <__ssputs_r+0x8c>
 8015bb4:	4629      	mov	r1, r5
 8015bb6:	f7fe fac9 	bl	801414c <_malloc_r>
 8015bba:	4606      	mov	r6, r0
 8015bbc:	b360      	cbz	r0, 8015c18 <__ssputs_r+0xa0>
 8015bbe:	6921      	ldr	r1, [r4, #16]
 8015bc0:	464a      	mov	r2, r9
 8015bc2:	f000 fa1f 	bl	8016004 <memcpy>
 8015bc6:	89a3      	ldrh	r3, [r4, #12]
 8015bc8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8015bcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015bd0:	81a3      	strh	r3, [r4, #12]
 8015bd2:	6126      	str	r6, [r4, #16]
 8015bd4:	6165      	str	r5, [r4, #20]
 8015bd6:	444e      	add	r6, r9
 8015bd8:	eba5 0509 	sub.w	r5, r5, r9
 8015bdc:	6026      	str	r6, [r4, #0]
 8015bde:	60a5      	str	r5, [r4, #8]
 8015be0:	463e      	mov	r6, r7
 8015be2:	42be      	cmp	r6, r7
 8015be4:	d900      	bls.n	8015be8 <__ssputs_r+0x70>
 8015be6:	463e      	mov	r6, r7
 8015be8:	6820      	ldr	r0, [r4, #0]
 8015bea:	4632      	mov	r2, r6
 8015bec:	4641      	mov	r1, r8
 8015bee:	f000 f9c5 	bl	8015f7c <memmove>
 8015bf2:	68a3      	ldr	r3, [r4, #8]
 8015bf4:	1b9b      	subs	r3, r3, r6
 8015bf6:	60a3      	str	r3, [r4, #8]
 8015bf8:	6823      	ldr	r3, [r4, #0]
 8015bfa:	4433      	add	r3, r6
 8015bfc:	6023      	str	r3, [r4, #0]
 8015bfe:	2000      	movs	r0, #0
 8015c00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015c04:	462a      	mov	r2, r5
 8015c06:	f000 fdae 	bl	8016766 <_realloc_r>
 8015c0a:	4606      	mov	r6, r0
 8015c0c:	2800      	cmp	r0, #0
 8015c0e:	d1e0      	bne.n	8015bd2 <__ssputs_r+0x5a>
 8015c10:	6921      	ldr	r1, [r4, #16]
 8015c12:	4650      	mov	r0, sl
 8015c14:	f7fe fa28 	bl	8014068 <_free_r>
 8015c18:	230c      	movs	r3, #12
 8015c1a:	f8ca 3000 	str.w	r3, [sl]
 8015c1e:	89a3      	ldrh	r3, [r4, #12]
 8015c20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015c24:	81a3      	strh	r3, [r4, #12]
 8015c26:	f04f 30ff 	mov.w	r0, #4294967295
 8015c2a:	e7e9      	b.n	8015c00 <__ssputs_r+0x88>

08015c2c <_svfiprintf_r>:
 8015c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c30:	4698      	mov	r8, r3
 8015c32:	898b      	ldrh	r3, [r1, #12]
 8015c34:	061b      	lsls	r3, r3, #24
 8015c36:	b09d      	sub	sp, #116	; 0x74
 8015c38:	4607      	mov	r7, r0
 8015c3a:	460d      	mov	r5, r1
 8015c3c:	4614      	mov	r4, r2
 8015c3e:	d50e      	bpl.n	8015c5e <_svfiprintf_r+0x32>
 8015c40:	690b      	ldr	r3, [r1, #16]
 8015c42:	b963      	cbnz	r3, 8015c5e <_svfiprintf_r+0x32>
 8015c44:	2140      	movs	r1, #64	; 0x40
 8015c46:	f7fe fa81 	bl	801414c <_malloc_r>
 8015c4a:	6028      	str	r0, [r5, #0]
 8015c4c:	6128      	str	r0, [r5, #16]
 8015c4e:	b920      	cbnz	r0, 8015c5a <_svfiprintf_r+0x2e>
 8015c50:	230c      	movs	r3, #12
 8015c52:	603b      	str	r3, [r7, #0]
 8015c54:	f04f 30ff 	mov.w	r0, #4294967295
 8015c58:	e0d0      	b.n	8015dfc <_svfiprintf_r+0x1d0>
 8015c5a:	2340      	movs	r3, #64	; 0x40
 8015c5c:	616b      	str	r3, [r5, #20]
 8015c5e:	2300      	movs	r3, #0
 8015c60:	9309      	str	r3, [sp, #36]	; 0x24
 8015c62:	2320      	movs	r3, #32
 8015c64:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015c68:	f8cd 800c 	str.w	r8, [sp, #12]
 8015c6c:	2330      	movs	r3, #48	; 0x30
 8015c6e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8015e14 <_svfiprintf_r+0x1e8>
 8015c72:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015c76:	f04f 0901 	mov.w	r9, #1
 8015c7a:	4623      	mov	r3, r4
 8015c7c:	469a      	mov	sl, r3
 8015c7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015c82:	b10a      	cbz	r2, 8015c88 <_svfiprintf_r+0x5c>
 8015c84:	2a25      	cmp	r2, #37	; 0x25
 8015c86:	d1f9      	bne.n	8015c7c <_svfiprintf_r+0x50>
 8015c88:	ebba 0b04 	subs.w	fp, sl, r4
 8015c8c:	d00b      	beq.n	8015ca6 <_svfiprintf_r+0x7a>
 8015c8e:	465b      	mov	r3, fp
 8015c90:	4622      	mov	r2, r4
 8015c92:	4629      	mov	r1, r5
 8015c94:	4638      	mov	r0, r7
 8015c96:	f7ff ff6f 	bl	8015b78 <__ssputs_r>
 8015c9a:	3001      	adds	r0, #1
 8015c9c:	f000 80a9 	beq.w	8015df2 <_svfiprintf_r+0x1c6>
 8015ca0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015ca2:	445a      	add	r2, fp
 8015ca4:	9209      	str	r2, [sp, #36]	; 0x24
 8015ca6:	f89a 3000 	ldrb.w	r3, [sl]
 8015caa:	2b00      	cmp	r3, #0
 8015cac:	f000 80a1 	beq.w	8015df2 <_svfiprintf_r+0x1c6>
 8015cb0:	2300      	movs	r3, #0
 8015cb2:	f04f 32ff 	mov.w	r2, #4294967295
 8015cb6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015cba:	f10a 0a01 	add.w	sl, sl, #1
 8015cbe:	9304      	str	r3, [sp, #16]
 8015cc0:	9307      	str	r3, [sp, #28]
 8015cc2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015cc6:	931a      	str	r3, [sp, #104]	; 0x68
 8015cc8:	4654      	mov	r4, sl
 8015cca:	2205      	movs	r2, #5
 8015ccc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015cd0:	4850      	ldr	r0, [pc, #320]	; (8015e14 <_svfiprintf_r+0x1e8>)
 8015cd2:	f7ea fa55 	bl	8000180 <memchr>
 8015cd6:	9a04      	ldr	r2, [sp, #16]
 8015cd8:	b9d8      	cbnz	r0, 8015d12 <_svfiprintf_r+0xe6>
 8015cda:	06d0      	lsls	r0, r2, #27
 8015cdc:	bf44      	itt	mi
 8015cde:	2320      	movmi	r3, #32
 8015ce0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015ce4:	0711      	lsls	r1, r2, #28
 8015ce6:	bf44      	itt	mi
 8015ce8:	232b      	movmi	r3, #43	; 0x2b
 8015cea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015cee:	f89a 3000 	ldrb.w	r3, [sl]
 8015cf2:	2b2a      	cmp	r3, #42	; 0x2a
 8015cf4:	d015      	beq.n	8015d22 <_svfiprintf_r+0xf6>
 8015cf6:	9a07      	ldr	r2, [sp, #28]
 8015cf8:	4654      	mov	r4, sl
 8015cfa:	2000      	movs	r0, #0
 8015cfc:	f04f 0c0a 	mov.w	ip, #10
 8015d00:	4621      	mov	r1, r4
 8015d02:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015d06:	3b30      	subs	r3, #48	; 0x30
 8015d08:	2b09      	cmp	r3, #9
 8015d0a:	d94d      	bls.n	8015da8 <_svfiprintf_r+0x17c>
 8015d0c:	b1b0      	cbz	r0, 8015d3c <_svfiprintf_r+0x110>
 8015d0e:	9207      	str	r2, [sp, #28]
 8015d10:	e014      	b.n	8015d3c <_svfiprintf_r+0x110>
 8015d12:	eba0 0308 	sub.w	r3, r0, r8
 8015d16:	fa09 f303 	lsl.w	r3, r9, r3
 8015d1a:	4313      	orrs	r3, r2
 8015d1c:	9304      	str	r3, [sp, #16]
 8015d1e:	46a2      	mov	sl, r4
 8015d20:	e7d2      	b.n	8015cc8 <_svfiprintf_r+0x9c>
 8015d22:	9b03      	ldr	r3, [sp, #12]
 8015d24:	1d19      	adds	r1, r3, #4
 8015d26:	681b      	ldr	r3, [r3, #0]
 8015d28:	9103      	str	r1, [sp, #12]
 8015d2a:	2b00      	cmp	r3, #0
 8015d2c:	bfbb      	ittet	lt
 8015d2e:	425b      	neglt	r3, r3
 8015d30:	f042 0202 	orrlt.w	r2, r2, #2
 8015d34:	9307      	strge	r3, [sp, #28]
 8015d36:	9307      	strlt	r3, [sp, #28]
 8015d38:	bfb8      	it	lt
 8015d3a:	9204      	strlt	r2, [sp, #16]
 8015d3c:	7823      	ldrb	r3, [r4, #0]
 8015d3e:	2b2e      	cmp	r3, #46	; 0x2e
 8015d40:	d10c      	bne.n	8015d5c <_svfiprintf_r+0x130>
 8015d42:	7863      	ldrb	r3, [r4, #1]
 8015d44:	2b2a      	cmp	r3, #42	; 0x2a
 8015d46:	d134      	bne.n	8015db2 <_svfiprintf_r+0x186>
 8015d48:	9b03      	ldr	r3, [sp, #12]
 8015d4a:	1d1a      	adds	r2, r3, #4
 8015d4c:	681b      	ldr	r3, [r3, #0]
 8015d4e:	9203      	str	r2, [sp, #12]
 8015d50:	2b00      	cmp	r3, #0
 8015d52:	bfb8      	it	lt
 8015d54:	f04f 33ff 	movlt.w	r3, #4294967295
 8015d58:	3402      	adds	r4, #2
 8015d5a:	9305      	str	r3, [sp, #20]
 8015d5c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8015e18 <_svfiprintf_r+0x1ec>
 8015d60:	7821      	ldrb	r1, [r4, #0]
 8015d62:	2203      	movs	r2, #3
 8015d64:	4650      	mov	r0, sl
 8015d66:	f7ea fa0b 	bl	8000180 <memchr>
 8015d6a:	b138      	cbz	r0, 8015d7c <_svfiprintf_r+0x150>
 8015d6c:	9b04      	ldr	r3, [sp, #16]
 8015d6e:	eba0 000a 	sub.w	r0, r0, sl
 8015d72:	2240      	movs	r2, #64	; 0x40
 8015d74:	4082      	lsls	r2, r0
 8015d76:	4313      	orrs	r3, r2
 8015d78:	3401      	adds	r4, #1
 8015d7a:	9304      	str	r3, [sp, #16]
 8015d7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015d80:	4826      	ldr	r0, [pc, #152]	; (8015e1c <_svfiprintf_r+0x1f0>)
 8015d82:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015d86:	2206      	movs	r2, #6
 8015d88:	f7ea f9fa 	bl	8000180 <memchr>
 8015d8c:	2800      	cmp	r0, #0
 8015d8e:	d038      	beq.n	8015e02 <_svfiprintf_r+0x1d6>
 8015d90:	4b23      	ldr	r3, [pc, #140]	; (8015e20 <_svfiprintf_r+0x1f4>)
 8015d92:	bb1b      	cbnz	r3, 8015ddc <_svfiprintf_r+0x1b0>
 8015d94:	9b03      	ldr	r3, [sp, #12]
 8015d96:	3307      	adds	r3, #7
 8015d98:	f023 0307 	bic.w	r3, r3, #7
 8015d9c:	3308      	adds	r3, #8
 8015d9e:	9303      	str	r3, [sp, #12]
 8015da0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015da2:	4433      	add	r3, r6
 8015da4:	9309      	str	r3, [sp, #36]	; 0x24
 8015da6:	e768      	b.n	8015c7a <_svfiprintf_r+0x4e>
 8015da8:	fb0c 3202 	mla	r2, ip, r2, r3
 8015dac:	460c      	mov	r4, r1
 8015dae:	2001      	movs	r0, #1
 8015db0:	e7a6      	b.n	8015d00 <_svfiprintf_r+0xd4>
 8015db2:	2300      	movs	r3, #0
 8015db4:	3401      	adds	r4, #1
 8015db6:	9305      	str	r3, [sp, #20]
 8015db8:	4619      	mov	r1, r3
 8015dba:	f04f 0c0a 	mov.w	ip, #10
 8015dbe:	4620      	mov	r0, r4
 8015dc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015dc4:	3a30      	subs	r2, #48	; 0x30
 8015dc6:	2a09      	cmp	r2, #9
 8015dc8:	d903      	bls.n	8015dd2 <_svfiprintf_r+0x1a6>
 8015dca:	2b00      	cmp	r3, #0
 8015dcc:	d0c6      	beq.n	8015d5c <_svfiprintf_r+0x130>
 8015dce:	9105      	str	r1, [sp, #20]
 8015dd0:	e7c4      	b.n	8015d5c <_svfiprintf_r+0x130>
 8015dd2:	fb0c 2101 	mla	r1, ip, r1, r2
 8015dd6:	4604      	mov	r4, r0
 8015dd8:	2301      	movs	r3, #1
 8015dda:	e7f0      	b.n	8015dbe <_svfiprintf_r+0x192>
 8015ddc:	ab03      	add	r3, sp, #12
 8015dde:	9300      	str	r3, [sp, #0]
 8015de0:	462a      	mov	r2, r5
 8015de2:	4b10      	ldr	r3, [pc, #64]	; (8015e24 <_svfiprintf_r+0x1f8>)
 8015de4:	a904      	add	r1, sp, #16
 8015de6:	4638      	mov	r0, r7
 8015de8:	f7fc fb78 	bl	80124dc <_printf_float>
 8015dec:	1c42      	adds	r2, r0, #1
 8015dee:	4606      	mov	r6, r0
 8015df0:	d1d6      	bne.n	8015da0 <_svfiprintf_r+0x174>
 8015df2:	89ab      	ldrh	r3, [r5, #12]
 8015df4:	065b      	lsls	r3, r3, #25
 8015df6:	f53f af2d 	bmi.w	8015c54 <_svfiprintf_r+0x28>
 8015dfa:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015dfc:	b01d      	add	sp, #116	; 0x74
 8015dfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e02:	ab03      	add	r3, sp, #12
 8015e04:	9300      	str	r3, [sp, #0]
 8015e06:	462a      	mov	r2, r5
 8015e08:	4b06      	ldr	r3, [pc, #24]	; (8015e24 <_svfiprintf_r+0x1f8>)
 8015e0a:	a904      	add	r1, sp, #16
 8015e0c:	4638      	mov	r0, r7
 8015e0e:	f7fc fdff 	bl	8012a10 <_printf_i>
 8015e12:	e7eb      	b.n	8015dec <_svfiprintf_r+0x1c0>
 8015e14:	08018039 	.word	0x08018039
 8015e18:	0801803f 	.word	0x0801803f
 8015e1c:	08018043 	.word	0x08018043
 8015e20:	080124dd 	.word	0x080124dd
 8015e24:	08015b79 	.word	0x08015b79

08015e28 <__sflush_r>:
 8015e28:	898a      	ldrh	r2, [r1, #12]
 8015e2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015e2c:	4605      	mov	r5, r0
 8015e2e:	0710      	lsls	r0, r2, #28
 8015e30:	460c      	mov	r4, r1
 8015e32:	d457      	bmi.n	8015ee4 <__sflush_r+0xbc>
 8015e34:	684b      	ldr	r3, [r1, #4]
 8015e36:	2b00      	cmp	r3, #0
 8015e38:	dc04      	bgt.n	8015e44 <__sflush_r+0x1c>
 8015e3a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015e3c:	2b00      	cmp	r3, #0
 8015e3e:	dc01      	bgt.n	8015e44 <__sflush_r+0x1c>
 8015e40:	2000      	movs	r0, #0
 8015e42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015e44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015e46:	2e00      	cmp	r6, #0
 8015e48:	d0fa      	beq.n	8015e40 <__sflush_r+0x18>
 8015e4a:	2300      	movs	r3, #0
 8015e4c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015e50:	682f      	ldr	r7, [r5, #0]
 8015e52:	6a21      	ldr	r1, [r4, #32]
 8015e54:	602b      	str	r3, [r5, #0]
 8015e56:	d032      	beq.n	8015ebe <__sflush_r+0x96>
 8015e58:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015e5a:	89a3      	ldrh	r3, [r4, #12]
 8015e5c:	075a      	lsls	r2, r3, #29
 8015e5e:	d505      	bpl.n	8015e6c <__sflush_r+0x44>
 8015e60:	6863      	ldr	r3, [r4, #4]
 8015e62:	1ac0      	subs	r0, r0, r3
 8015e64:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015e66:	b10b      	cbz	r3, 8015e6c <__sflush_r+0x44>
 8015e68:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015e6a:	1ac0      	subs	r0, r0, r3
 8015e6c:	2300      	movs	r3, #0
 8015e6e:	4602      	mov	r2, r0
 8015e70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015e72:	6a21      	ldr	r1, [r4, #32]
 8015e74:	4628      	mov	r0, r5
 8015e76:	47b0      	blx	r6
 8015e78:	1c43      	adds	r3, r0, #1
 8015e7a:	89a3      	ldrh	r3, [r4, #12]
 8015e7c:	d106      	bne.n	8015e8c <__sflush_r+0x64>
 8015e7e:	6829      	ldr	r1, [r5, #0]
 8015e80:	291d      	cmp	r1, #29
 8015e82:	d82b      	bhi.n	8015edc <__sflush_r+0xb4>
 8015e84:	4a28      	ldr	r2, [pc, #160]	; (8015f28 <__sflush_r+0x100>)
 8015e86:	410a      	asrs	r2, r1
 8015e88:	07d6      	lsls	r6, r2, #31
 8015e8a:	d427      	bmi.n	8015edc <__sflush_r+0xb4>
 8015e8c:	2200      	movs	r2, #0
 8015e8e:	6062      	str	r2, [r4, #4]
 8015e90:	04d9      	lsls	r1, r3, #19
 8015e92:	6922      	ldr	r2, [r4, #16]
 8015e94:	6022      	str	r2, [r4, #0]
 8015e96:	d504      	bpl.n	8015ea2 <__sflush_r+0x7a>
 8015e98:	1c42      	adds	r2, r0, #1
 8015e9a:	d101      	bne.n	8015ea0 <__sflush_r+0x78>
 8015e9c:	682b      	ldr	r3, [r5, #0]
 8015e9e:	b903      	cbnz	r3, 8015ea2 <__sflush_r+0x7a>
 8015ea0:	6560      	str	r0, [r4, #84]	; 0x54
 8015ea2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015ea4:	602f      	str	r7, [r5, #0]
 8015ea6:	2900      	cmp	r1, #0
 8015ea8:	d0ca      	beq.n	8015e40 <__sflush_r+0x18>
 8015eaa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015eae:	4299      	cmp	r1, r3
 8015eb0:	d002      	beq.n	8015eb8 <__sflush_r+0x90>
 8015eb2:	4628      	mov	r0, r5
 8015eb4:	f7fe f8d8 	bl	8014068 <_free_r>
 8015eb8:	2000      	movs	r0, #0
 8015eba:	6360      	str	r0, [r4, #52]	; 0x34
 8015ebc:	e7c1      	b.n	8015e42 <__sflush_r+0x1a>
 8015ebe:	2301      	movs	r3, #1
 8015ec0:	4628      	mov	r0, r5
 8015ec2:	47b0      	blx	r6
 8015ec4:	1c41      	adds	r1, r0, #1
 8015ec6:	d1c8      	bne.n	8015e5a <__sflush_r+0x32>
 8015ec8:	682b      	ldr	r3, [r5, #0]
 8015eca:	2b00      	cmp	r3, #0
 8015ecc:	d0c5      	beq.n	8015e5a <__sflush_r+0x32>
 8015ece:	2b1d      	cmp	r3, #29
 8015ed0:	d001      	beq.n	8015ed6 <__sflush_r+0xae>
 8015ed2:	2b16      	cmp	r3, #22
 8015ed4:	d101      	bne.n	8015eda <__sflush_r+0xb2>
 8015ed6:	602f      	str	r7, [r5, #0]
 8015ed8:	e7b2      	b.n	8015e40 <__sflush_r+0x18>
 8015eda:	89a3      	ldrh	r3, [r4, #12]
 8015edc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015ee0:	81a3      	strh	r3, [r4, #12]
 8015ee2:	e7ae      	b.n	8015e42 <__sflush_r+0x1a>
 8015ee4:	690f      	ldr	r7, [r1, #16]
 8015ee6:	2f00      	cmp	r7, #0
 8015ee8:	d0aa      	beq.n	8015e40 <__sflush_r+0x18>
 8015eea:	0793      	lsls	r3, r2, #30
 8015eec:	680e      	ldr	r6, [r1, #0]
 8015eee:	bf08      	it	eq
 8015ef0:	694b      	ldreq	r3, [r1, #20]
 8015ef2:	600f      	str	r7, [r1, #0]
 8015ef4:	bf18      	it	ne
 8015ef6:	2300      	movne	r3, #0
 8015ef8:	1bf6      	subs	r6, r6, r7
 8015efa:	608b      	str	r3, [r1, #8]
 8015efc:	2e00      	cmp	r6, #0
 8015efe:	dd9f      	ble.n	8015e40 <__sflush_r+0x18>
 8015f00:	6a21      	ldr	r1, [r4, #32]
 8015f02:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8015f06:	4633      	mov	r3, r6
 8015f08:	463a      	mov	r2, r7
 8015f0a:	4628      	mov	r0, r5
 8015f0c:	47e0      	blx	ip
 8015f0e:	2800      	cmp	r0, #0
 8015f10:	dc06      	bgt.n	8015f20 <__sflush_r+0xf8>
 8015f12:	89a3      	ldrh	r3, [r4, #12]
 8015f14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015f18:	81a3      	strh	r3, [r4, #12]
 8015f1a:	f04f 30ff 	mov.w	r0, #4294967295
 8015f1e:	e790      	b.n	8015e42 <__sflush_r+0x1a>
 8015f20:	4407      	add	r7, r0
 8015f22:	1a36      	subs	r6, r6, r0
 8015f24:	e7ea      	b.n	8015efc <__sflush_r+0xd4>
 8015f26:	bf00      	nop
 8015f28:	dfbffffe 	.word	0xdfbffffe

08015f2c <_fflush_r>:
 8015f2c:	b538      	push	{r3, r4, r5, lr}
 8015f2e:	690b      	ldr	r3, [r1, #16]
 8015f30:	4605      	mov	r5, r0
 8015f32:	460c      	mov	r4, r1
 8015f34:	b913      	cbnz	r3, 8015f3c <_fflush_r+0x10>
 8015f36:	2500      	movs	r5, #0
 8015f38:	4628      	mov	r0, r5
 8015f3a:	bd38      	pop	{r3, r4, r5, pc}
 8015f3c:	b118      	cbz	r0, 8015f46 <_fflush_r+0x1a>
 8015f3e:	6a03      	ldr	r3, [r0, #32]
 8015f40:	b90b      	cbnz	r3, 8015f46 <_fflush_r+0x1a>
 8015f42:	f7fd f90d 	bl	8013160 <__sinit>
 8015f46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015f4a:	2b00      	cmp	r3, #0
 8015f4c:	d0f3      	beq.n	8015f36 <_fflush_r+0xa>
 8015f4e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015f50:	07d0      	lsls	r0, r2, #31
 8015f52:	d404      	bmi.n	8015f5e <_fflush_r+0x32>
 8015f54:	0599      	lsls	r1, r3, #22
 8015f56:	d402      	bmi.n	8015f5e <_fflush_r+0x32>
 8015f58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015f5a:	f7fd fa17 	bl	801338c <__retarget_lock_acquire_recursive>
 8015f5e:	4628      	mov	r0, r5
 8015f60:	4621      	mov	r1, r4
 8015f62:	f7ff ff61 	bl	8015e28 <__sflush_r>
 8015f66:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015f68:	07da      	lsls	r2, r3, #31
 8015f6a:	4605      	mov	r5, r0
 8015f6c:	d4e4      	bmi.n	8015f38 <_fflush_r+0xc>
 8015f6e:	89a3      	ldrh	r3, [r4, #12]
 8015f70:	059b      	lsls	r3, r3, #22
 8015f72:	d4e1      	bmi.n	8015f38 <_fflush_r+0xc>
 8015f74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015f76:	f7fd fa0a 	bl	801338e <__retarget_lock_release_recursive>
 8015f7a:	e7dd      	b.n	8015f38 <_fflush_r+0xc>

08015f7c <memmove>:
 8015f7c:	4288      	cmp	r0, r1
 8015f7e:	b510      	push	{r4, lr}
 8015f80:	eb01 0402 	add.w	r4, r1, r2
 8015f84:	d902      	bls.n	8015f8c <memmove+0x10>
 8015f86:	4284      	cmp	r4, r0
 8015f88:	4623      	mov	r3, r4
 8015f8a:	d807      	bhi.n	8015f9c <memmove+0x20>
 8015f8c:	1e43      	subs	r3, r0, #1
 8015f8e:	42a1      	cmp	r1, r4
 8015f90:	d008      	beq.n	8015fa4 <memmove+0x28>
 8015f92:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015f96:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015f9a:	e7f8      	b.n	8015f8e <memmove+0x12>
 8015f9c:	4402      	add	r2, r0
 8015f9e:	4601      	mov	r1, r0
 8015fa0:	428a      	cmp	r2, r1
 8015fa2:	d100      	bne.n	8015fa6 <memmove+0x2a>
 8015fa4:	bd10      	pop	{r4, pc}
 8015fa6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015faa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8015fae:	e7f7      	b.n	8015fa0 <memmove+0x24>

08015fb0 <strncmp>:
 8015fb0:	b510      	push	{r4, lr}
 8015fb2:	b16a      	cbz	r2, 8015fd0 <strncmp+0x20>
 8015fb4:	3901      	subs	r1, #1
 8015fb6:	1884      	adds	r4, r0, r2
 8015fb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015fbc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8015fc0:	429a      	cmp	r2, r3
 8015fc2:	d103      	bne.n	8015fcc <strncmp+0x1c>
 8015fc4:	42a0      	cmp	r0, r4
 8015fc6:	d001      	beq.n	8015fcc <strncmp+0x1c>
 8015fc8:	2a00      	cmp	r2, #0
 8015fca:	d1f5      	bne.n	8015fb8 <strncmp+0x8>
 8015fcc:	1ad0      	subs	r0, r2, r3
 8015fce:	bd10      	pop	{r4, pc}
 8015fd0:	4610      	mov	r0, r2
 8015fd2:	e7fc      	b.n	8015fce <strncmp+0x1e>

08015fd4 <_sbrk_r>:
 8015fd4:	b538      	push	{r3, r4, r5, lr}
 8015fd6:	4d06      	ldr	r5, [pc, #24]	; (8015ff0 <_sbrk_r+0x1c>)
 8015fd8:	2300      	movs	r3, #0
 8015fda:	4604      	mov	r4, r0
 8015fdc:	4608      	mov	r0, r1
 8015fde:	602b      	str	r3, [r5, #0]
 8015fe0:	f7eb ff16 	bl	8001e10 <_sbrk>
 8015fe4:	1c43      	adds	r3, r0, #1
 8015fe6:	d102      	bne.n	8015fee <_sbrk_r+0x1a>
 8015fe8:	682b      	ldr	r3, [r5, #0]
 8015fea:	b103      	cbz	r3, 8015fee <_sbrk_r+0x1a>
 8015fec:	6023      	str	r3, [r4, #0]
 8015fee:	bd38      	pop	{r3, r4, r5, pc}
 8015ff0:	20001b10 	.word	0x20001b10

08015ff4 <strcpy>:
 8015ff4:	4603      	mov	r3, r0
 8015ff6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015ffa:	f803 2b01 	strb.w	r2, [r3], #1
 8015ffe:	2a00      	cmp	r2, #0
 8016000:	d1f9      	bne.n	8015ff6 <strcpy+0x2>
 8016002:	4770      	bx	lr

08016004 <memcpy>:
 8016004:	440a      	add	r2, r1
 8016006:	4291      	cmp	r1, r2
 8016008:	f100 33ff 	add.w	r3, r0, #4294967295
 801600c:	d100      	bne.n	8016010 <memcpy+0xc>
 801600e:	4770      	bx	lr
 8016010:	b510      	push	{r4, lr}
 8016012:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016016:	f803 4f01 	strb.w	r4, [r3, #1]!
 801601a:	4291      	cmp	r1, r2
 801601c:	d1f9      	bne.n	8016012 <memcpy+0xe>
 801601e:	bd10      	pop	{r4, pc}

08016020 <nan>:
 8016020:	4901      	ldr	r1, [pc, #4]	; (8016028 <nan+0x8>)
 8016022:	2000      	movs	r0, #0
 8016024:	4770      	bx	lr
 8016026:	bf00      	nop
 8016028:	7ff80000 	.word	0x7ff80000

0801602c <__assert_func>:
 801602c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801602e:	4614      	mov	r4, r2
 8016030:	461a      	mov	r2, r3
 8016032:	4b09      	ldr	r3, [pc, #36]	; (8016058 <__assert_func+0x2c>)
 8016034:	681b      	ldr	r3, [r3, #0]
 8016036:	4605      	mov	r5, r0
 8016038:	68d8      	ldr	r0, [r3, #12]
 801603a:	b14c      	cbz	r4, 8016050 <__assert_func+0x24>
 801603c:	4b07      	ldr	r3, [pc, #28]	; (801605c <__assert_func+0x30>)
 801603e:	9100      	str	r1, [sp, #0]
 8016040:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016044:	4906      	ldr	r1, [pc, #24]	; (8016060 <__assert_func+0x34>)
 8016046:	462b      	mov	r3, r5
 8016048:	f000 fbca 	bl	80167e0 <fiprintf>
 801604c:	f000 fbda 	bl	8016804 <abort>
 8016050:	4b04      	ldr	r3, [pc, #16]	; (8016064 <__assert_func+0x38>)
 8016052:	461c      	mov	r4, r3
 8016054:	e7f3      	b.n	801603e <__assert_func+0x12>
 8016056:	bf00      	nop
 8016058:	20000138 	.word	0x20000138
 801605c:	08018052 	.word	0x08018052
 8016060:	0801805f 	.word	0x0801805f
 8016064:	0801808d 	.word	0x0801808d

08016068 <_calloc_r>:
 8016068:	b570      	push	{r4, r5, r6, lr}
 801606a:	fba1 5402 	umull	r5, r4, r1, r2
 801606e:	b934      	cbnz	r4, 801607e <_calloc_r+0x16>
 8016070:	4629      	mov	r1, r5
 8016072:	f7fe f86b 	bl	801414c <_malloc_r>
 8016076:	4606      	mov	r6, r0
 8016078:	b928      	cbnz	r0, 8016086 <_calloc_r+0x1e>
 801607a:	4630      	mov	r0, r6
 801607c:	bd70      	pop	{r4, r5, r6, pc}
 801607e:	220c      	movs	r2, #12
 8016080:	6002      	str	r2, [r0, #0]
 8016082:	2600      	movs	r6, #0
 8016084:	e7f9      	b.n	801607a <_calloc_r+0x12>
 8016086:	462a      	mov	r2, r5
 8016088:	4621      	mov	r1, r4
 801608a:	f7fd f902 	bl	8013292 <memset>
 801608e:	e7f4      	b.n	801607a <_calloc_r+0x12>

08016090 <rshift>:
 8016090:	6903      	ldr	r3, [r0, #16]
 8016092:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8016096:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801609a:	ea4f 1261 	mov.w	r2, r1, asr #5
 801609e:	f100 0414 	add.w	r4, r0, #20
 80160a2:	dd45      	ble.n	8016130 <rshift+0xa0>
 80160a4:	f011 011f 	ands.w	r1, r1, #31
 80160a8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80160ac:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80160b0:	d10c      	bne.n	80160cc <rshift+0x3c>
 80160b2:	f100 0710 	add.w	r7, r0, #16
 80160b6:	4629      	mov	r1, r5
 80160b8:	42b1      	cmp	r1, r6
 80160ba:	d334      	bcc.n	8016126 <rshift+0x96>
 80160bc:	1a9b      	subs	r3, r3, r2
 80160be:	009b      	lsls	r3, r3, #2
 80160c0:	1eea      	subs	r2, r5, #3
 80160c2:	4296      	cmp	r6, r2
 80160c4:	bf38      	it	cc
 80160c6:	2300      	movcc	r3, #0
 80160c8:	4423      	add	r3, r4
 80160ca:	e015      	b.n	80160f8 <rshift+0x68>
 80160cc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80160d0:	f1c1 0820 	rsb	r8, r1, #32
 80160d4:	40cf      	lsrs	r7, r1
 80160d6:	f105 0e04 	add.w	lr, r5, #4
 80160da:	46a1      	mov	r9, r4
 80160dc:	4576      	cmp	r6, lr
 80160de:	46f4      	mov	ip, lr
 80160e0:	d815      	bhi.n	801610e <rshift+0x7e>
 80160e2:	1a9a      	subs	r2, r3, r2
 80160e4:	0092      	lsls	r2, r2, #2
 80160e6:	3a04      	subs	r2, #4
 80160e8:	3501      	adds	r5, #1
 80160ea:	42ae      	cmp	r6, r5
 80160ec:	bf38      	it	cc
 80160ee:	2200      	movcc	r2, #0
 80160f0:	18a3      	adds	r3, r4, r2
 80160f2:	50a7      	str	r7, [r4, r2]
 80160f4:	b107      	cbz	r7, 80160f8 <rshift+0x68>
 80160f6:	3304      	adds	r3, #4
 80160f8:	1b1a      	subs	r2, r3, r4
 80160fa:	42a3      	cmp	r3, r4
 80160fc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8016100:	bf08      	it	eq
 8016102:	2300      	moveq	r3, #0
 8016104:	6102      	str	r2, [r0, #16]
 8016106:	bf08      	it	eq
 8016108:	6143      	streq	r3, [r0, #20]
 801610a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801610e:	f8dc c000 	ldr.w	ip, [ip]
 8016112:	fa0c fc08 	lsl.w	ip, ip, r8
 8016116:	ea4c 0707 	orr.w	r7, ip, r7
 801611a:	f849 7b04 	str.w	r7, [r9], #4
 801611e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8016122:	40cf      	lsrs	r7, r1
 8016124:	e7da      	b.n	80160dc <rshift+0x4c>
 8016126:	f851 cb04 	ldr.w	ip, [r1], #4
 801612a:	f847 cf04 	str.w	ip, [r7, #4]!
 801612e:	e7c3      	b.n	80160b8 <rshift+0x28>
 8016130:	4623      	mov	r3, r4
 8016132:	e7e1      	b.n	80160f8 <rshift+0x68>

08016134 <__hexdig_fun>:
 8016134:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8016138:	2b09      	cmp	r3, #9
 801613a:	d802      	bhi.n	8016142 <__hexdig_fun+0xe>
 801613c:	3820      	subs	r0, #32
 801613e:	b2c0      	uxtb	r0, r0
 8016140:	4770      	bx	lr
 8016142:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8016146:	2b05      	cmp	r3, #5
 8016148:	d801      	bhi.n	801614e <__hexdig_fun+0x1a>
 801614a:	3847      	subs	r0, #71	; 0x47
 801614c:	e7f7      	b.n	801613e <__hexdig_fun+0xa>
 801614e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8016152:	2b05      	cmp	r3, #5
 8016154:	d801      	bhi.n	801615a <__hexdig_fun+0x26>
 8016156:	3827      	subs	r0, #39	; 0x27
 8016158:	e7f1      	b.n	801613e <__hexdig_fun+0xa>
 801615a:	2000      	movs	r0, #0
 801615c:	4770      	bx	lr
	...

08016160 <__gethex>:
 8016160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016164:	4617      	mov	r7, r2
 8016166:	680a      	ldr	r2, [r1, #0]
 8016168:	b085      	sub	sp, #20
 801616a:	f102 0b02 	add.w	fp, r2, #2
 801616e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8016172:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8016176:	4681      	mov	r9, r0
 8016178:	468a      	mov	sl, r1
 801617a:	9302      	str	r3, [sp, #8]
 801617c:	32fe      	adds	r2, #254	; 0xfe
 801617e:	eb02 030b 	add.w	r3, r2, fp
 8016182:	46d8      	mov	r8, fp
 8016184:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8016188:	9301      	str	r3, [sp, #4]
 801618a:	2830      	cmp	r0, #48	; 0x30
 801618c:	d0f7      	beq.n	801617e <__gethex+0x1e>
 801618e:	f7ff ffd1 	bl	8016134 <__hexdig_fun>
 8016192:	4604      	mov	r4, r0
 8016194:	2800      	cmp	r0, #0
 8016196:	d138      	bne.n	801620a <__gethex+0xaa>
 8016198:	49a8      	ldr	r1, [pc, #672]	; (801643c <__gethex+0x2dc>)
 801619a:	2201      	movs	r2, #1
 801619c:	4640      	mov	r0, r8
 801619e:	f7ff ff07 	bl	8015fb0 <strncmp>
 80161a2:	4606      	mov	r6, r0
 80161a4:	2800      	cmp	r0, #0
 80161a6:	d169      	bne.n	801627c <__gethex+0x11c>
 80161a8:	f898 0001 	ldrb.w	r0, [r8, #1]
 80161ac:	465d      	mov	r5, fp
 80161ae:	f7ff ffc1 	bl	8016134 <__hexdig_fun>
 80161b2:	2800      	cmp	r0, #0
 80161b4:	d064      	beq.n	8016280 <__gethex+0x120>
 80161b6:	465a      	mov	r2, fp
 80161b8:	7810      	ldrb	r0, [r2, #0]
 80161ba:	2830      	cmp	r0, #48	; 0x30
 80161bc:	4690      	mov	r8, r2
 80161be:	f102 0201 	add.w	r2, r2, #1
 80161c2:	d0f9      	beq.n	80161b8 <__gethex+0x58>
 80161c4:	f7ff ffb6 	bl	8016134 <__hexdig_fun>
 80161c8:	2301      	movs	r3, #1
 80161ca:	fab0 f480 	clz	r4, r0
 80161ce:	0964      	lsrs	r4, r4, #5
 80161d0:	465e      	mov	r6, fp
 80161d2:	9301      	str	r3, [sp, #4]
 80161d4:	4642      	mov	r2, r8
 80161d6:	4615      	mov	r5, r2
 80161d8:	3201      	adds	r2, #1
 80161da:	7828      	ldrb	r0, [r5, #0]
 80161dc:	f7ff ffaa 	bl	8016134 <__hexdig_fun>
 80161e0:	2800      	cmp	r0, #0
 80161e2:	d1f8      	bne.n	80161d6 <__gethex+0x76>
 80161e4:	4995      	ldr	r1, [pc, #596]	; (801643c <__gethex+0x2dc>)
 80161e6:	2201      	movs	r2, #1
 80161e8:	4628      	mov	r0, r5
 80161ea:	f7ff fee1 	bl	8015fb0 <strncmp>
 80161ee:	b978      	cbnz	r0, 8016210 <__gethex+0xb0>
 80161f0:	b946      	cbnz	r6, 8016204 <__gethex+0xa4>
 80161f2:	1c6e      	adds	r6, r5, #1
 80161f4:	4632      	mov	r2, r6
 80161f6:	4615      	mov	r5, r2
 80161f8:	3201      	adds	r2, #1
 80161fa:	7828      	ldrb	r0, [r5, #0]
 80161fc:	f7ff ff9a 	bl	8016134 <__hexdig_fun>
 8016200:	2800      	cmp	r0, #0
 8016202:	d1f8      	bne.n	80161f6 <__gethex+0x96>
 8016204:	1b73      	subs	r3, r6, r5
 8016206:	009e      	lsls	r6, r3, #2
 8016208:	e004      	b.n	8016214 <__gethex+0xb4>
 801620a:	2400      	movs	r4, #0
 801620c:	4626      	mov	r6, r4
 801620e:	e7e1      	b.n	80161d4 <__gethex+0x74>
 8016210:	2e00      	cmp	r6, #0
 8016212:	d1f7      	bne.n	8016204 <__gethex+0xa4>
 8016214:	782b      	ldrb	r3, [r5, #0]
 8016216:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801621a:	2b50      	cmp	r3, #80	; 0x50
 801621c:	d13d      	bne.n	801629a <__gethex+0x13a>
 801621e:	786b      	ldrb	r3, [r5, #1]
 8016220:	2b2b      	cmp	r3, #43	; 0x2b
 8016222:	d02f      	beq.n	8016284 <__gethex+0x124>
 8016224:	2b2d      	cmp	r3, #45	; 0x2d
 8016226:	d031      	beq.n	801628c <__gethex+0x12c>
 8016228:	1c69      	adds	r1, r5, #1
 801622a:	f04f 0b00 	mov.w	fp, #0
 801622e:	7808      	ldrb	r0, [r1, #0]
 8016230:	f7ff ff80 	bl	8016134 <__hexdig_fun>
 8016234:	1e42      	subs	r2, r0, #1
 8016236:	b2d2      	uxtb	r2, r2
 8016238:	2a18      	cmp	r2, #24
 801623a:	d82e      	bhi.n	801629a <__gethex+0x13a>
 801623c:	f1a0 0210 	sub.w	r2, r0, #16
 8016240:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8016244:	f7ff ff76 	bl	8016134 <__hexdig_fun>
 8016248:	f100 3cff 	add.w	ip, r0, #4294967295
 801624c:	fa5f fc8c 	uxtb.w	ip, ip
 8016250:	f1bc 0f18 	cmp.w	ip, #24
 8016254:	d91d      	bls.n	8016292 <__gethex+0x132>
 8016256:	f1bb 0f00 	cmp.w	fp, #0
 801625a:	d000      	beq.n	801625e <__gethex+0xfe>
 801625c:	4252      	negs	r2, r2
 801625e:	4416      	add	r6, r2
 8016260:	f8ca 1000 	str.w	r1, [sl]
 8016264:	b1dc      	cbz	r4, 801629e <__gethex+0x13e>
 8016266:	9b01      	ldr	r3, [sp, #4]
 8016268:	2b00      	cmp	r3, #0
 801626a:	bf14      	ite	ne
 801626c:	f04f 0800 	movne.w	r8, #0
 8016270:	f04f 0806 	moveq.w	r8, #6
 8016274:	4640      	mov	r0, r8
 8016276:	b005      	add	sp, #20
 8016278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801627c:	4645      	mov	r5, r8
 801627e:	4626      	mov	r6, r4
 8016280:	2401      	movs	r4, #1
 8016282:	e7c7      	b.n	8016214 <__gethex+0xb4>
 8016284:	f04f 0b00 	mov.w	fp, #0
 8016288:	1ca9      	adds	r1, r5, #2
 801628a:	e7d0      	b.n	801622e <__gethex+0xce>
 801628c:	f04f 0b01 	mov.w	fp, #1
 8016290:	e7fa      	b.n	8016288 <__gethex+0x128>
 8016292:	230a      	movs	r3, #10
 8016294:	fb03 0002 	mla	r0, r3, r2, r0
 8016298:	e7d0      	b.n	801623c <__gethex+0xdc>
 801629a:	4629      	mov	r1, r5
 801629c:	e7e0      	b.n	8016260 <__gethex+0x100>
 801629e:	eba5 0308 	sub.w	r3, r5, r8
 80162a2:	3b01      	subs	r3, #1
 80162a4:	4621      	mov	r1, r4
 80162a6:	2b07      	cmp	r3, #7
 80162a8:	dc0a      	bgt.n	80162c0 <__gethex+0x160>
 80162aa:	4648      	mov	r0, r9
 80162ac:	f7fd ffda 	bl	8014264 <_Balloc>
 80162b0:	4604      	mov	r4, r0
 80162b2:	b940      	cbnz	r0, 80162c6 <__gethex+0x166>
 80162b4:	4b62      	ldr	r3, [pc, #392]	; (8016440 <__gethex+0x2e0>)
 80162b6:	4602      	mov	r2, r0
 80162b8:	21e4      	movs	r1, #228	; 0xe4
 80162ba:	4862      	ldr	r0, [pc, #392]	; (8016444 <__gethex+0x2e4>)
 80162bc:	f7ff feb6 	bl	801602c <__assert_func>
 80162c0:	3101      	adds	r1, #1
 80162c2:	105b      	asrs	r3, r3, #1
 80162c4:	e7ef      	b.n	80162a6 <__gethex+0x146>
 80162c6:	f100 0a14 	add.w	sl, r0, #20
 80162ca:	2300      	movs	r3, #0
 80162cc:	f8cd a004 	str.w	sl, [sp, #4]
 80162d0:	469b      	mov	fp, r3
 80162d2:	45a8      	cmp	r8, r5
 80162d4:	d344      	bcc.n	8016360 <__gethex+0x200>
 80162d6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80162da:	f848 bb04 	str.w	fp, [r8], #4
 80162de:	eba8 080a 	sub.w	r8, r8, sl
 80162e2:	ea4f 02a8 	mov.w	r2, r8, asr #2
 80162e6:	6122      	str	r2, [r4, #16]
 80162e8:	4658      	mov	r0, fp
 80162ea:	ea4f 1842 	mov.w	r8, r2, lsl #5
 80162ee:	f7fe f8ab 	bl	8014448 <__hi0bits>
 80162f2:	683d      	ldr	r5, [r7, #0]
 80162f4:	eba8 0800 	sub.w	r8, r8, r0
 80162f8:	45a8      	cmp	r8, r5
 80162fa:	dd59      	ble.n	80163b0 <__gethex+0x250>
 80162fc:	eba8 0805 	sub.w	r8, r8, r5
 8016300:	4641      	mov	r1, r8
 8016302:	4620      	mov	r0, r4
 8016304:	f7fe fc43 	bl	8014b8e <__any_on>
 8016308:	4683      	mov	fp, r0
 801630a:	b1b8      	cbz	r0, 801633c <__gethex+0x1dc>
 801630c:	f108 33ff 	add.w	r3, r8, #4294967295
 8016310:	1159      	asrs	r1, r3, #5
 8016312:	f003 021f 	and.w	r2, r3, #31
 8016316:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801631a:	f04f 0b01 	mov.w	fp, #1
 801631e:	fa0b f202 	lsl.w	r2, fp, r2
 8016322:	420a      	tst	r2, r1
 8016324:	d00a      	beq.n	801633c <__gethex+0x1dc>
 8016326:	455b      	cmp	r3, fp
 8016328:	dd06      	ble.n	8016338 <__gethex+0x1d8>
 801632a:	f1a8 0102 	sub.w	r1, r8, #2
 801632e:	4620      	mov	r0, r4
 8016330:	f7fe fc2d 	bl	8014b8e <__any_on>
 8016334:	2800      	cmp	r0, #0
 8016336:	d138      	bne.n	80163aa <__gethex+0x24a>
 8016338:	f04f 0b02 	mov.w	fp, #2
 801633c:	4641      	mov	r1, r8
 801633e:	4620      	mov	r0, r4
 8016340:	f7ff fea6 	bl	8016090 <rshift>
 8016344:	4446      	add	r6, r8
 8016346:	68bb      	ldr	r3, [r7, #8]
 8016348:	42b3      	cmp	r3, r6
 801634a:	da41      	bge.n	80163d0 <__gethex+0x270>
 801634c:	4621      	mov	r1, r4
 801634e:	4648      	mov	r0, r9
 8016350:	f7fd ffc8 	bl	80142e4 <_Bfree>
 8016354:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016356:	2300      	movs	r3, #0
 8016358:	6013      	str	r3, [r2, #0]
 801635a:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 801635e:	e789      	b.n	8016274 <__gethex+0x114>
 8016360:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8016364:	2a2e      	cmp	r2, #46	; 0x2e
 8016366:	d014      	beq.n	8016392 <__gethex+0x232>
 8016368:	2b20      	cmp	r3, #32
 801636a:	d106      	bne.n	801637a <__gethex+0x21a>
 801636c:	9b01      	ldr	r3, [sp, #4]
 801636e:	f843 bb04 	str.w	fp, [r3], #4
 8016372:	f04f 0b00 	mov.w	fp, #0
 8016376:	9301      	str	r3, [sp, #4]
 8016378:	465b      	mov	r3, fp
 801637a:	7828      	ldrb	r0, [r5, #0]
 801637c:	9303      	str	r3, [sp, #12]
 801637e:	f7ff fed9 	bl	8016134 <__hexdig_fun>
 8016382:	9b03      	ldr	r3, [sp, #12]
 8016384:	f000 000f 	and.w	r0, r0, #15
 8016388:	4098      	lsls	r0, r3
 801638a:	ea4b 0b00 	orr.w	fp, fp, r0
 801638e:	3304      	adds	r3, #4
 8016390:	e79f      	b.n	80162d2 <__gethex+0x172>
 8016392:	45a8      	cmp	r8, r5
 8016394:	d8e8      	bhi.n	8016368 <__gethex+0x208>
 8016396:	4929      	ldr	r1, [pc, #164]	; (801643c <__gethex+0x2dc>)
 8016398:	9303      	str	r3, [sp, #12]
 801639a:	2201      	movs	r2, #1
 801639c:	4628      	mov	r0, r5
 801639e:	f7ff fe07 	bl	8015fb0 <strncmp>
 80163a2:	9b03      	ldr	r3, [sp, #12]
 80163a4:	2800      	cmp	r0, #0
 80163a6:	d1df      	bne.n	8016368 <__gethex+0x208>
 80163a8:	e793      	b.n	80162d2 <__gethex+0x172>
 80163aa:	f04f 0b03 	mov.w	fp, #3
 80163ae:	e7c5      	b.n	801633c <__gethex+0x1dc>
 80163b0:	da0b      	bge.n	80163ca <__gethex+0x26a>
 80163b2:	eba5 0808 	sub.w	r8, r5, r8
 80163b6:	4621      	mov	r1, r4
 80163b8:	4642      	mov	r2, r8
 80163ba:	4648      	mov	r0, r9
 80163bc:	f7fe f9ac 	bl	8014718 <__lshift>
 80163c0:	eba6 0608 	sub.w	r6, r6, r8
 80163c4:	4604      	mov	r4, r0
 80163c6:	f100 0a14 	add.w	sl, r0, #20
 80163ca:	f04f 0b00 	mov.w	fp, #0
 80163ce:	e7ba      	b.n	8016346 <__gethex+0x1e6>
 80163d0:	687b      	ldr	r3, [r7, #4]
 80163d2:	42b3      	cmp	r3, r6
 80163d4:	dd74      	ble.n	80164c0 <__gethex+0x360>
 80163d6:	1b9e      	subs	r6, r3, r6
 80163d8:	42b5      	cmp	r5, r6
 80163da:	dc35      	bgt.n	8016448 <__gethex+0x2e8>
 80163dc:	68fb      	ldr	r3, [r7, #12]
 80163de:	2b02      	cmp	r3, #2
 80163e0:	d023      	beq.n	801642a <__gethex+0x2ca>
 80163e2:	2b03      	cmp	r3, #3
 80163e4:	d025      	beq.n	8016432 <__gethex+0x2d2>
 80163e6:	2b01      	cmp	r3, #1
 80163e8:	d115      	bne.n	8016416 <__gethex+0x2b6>
 80163ea:	42b5      	cmp	r5, r6
 80163ec:	d113      	bne.n	8016416 <__gethex+0x2b6>
 80163ee:	2d01      	cmp	r5, #1
 80163f0:	d10b      	bne.n	801640a <__gethex+0x2aa>
 80163f2:	9a02      	ldr	r2, [sp, #8]
 80163f4:	687b      	ldr	r3, [r7, #4]
 80163f6:	6013      	str	r3, [r2, #0]
 80163f8:	2301      	movs	r3, #1
 80163fa:	6123      	str	r3, [r4, #16]
 80163fc:	f8ca 3000 	str.w	r3, [sl]
 8016400:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016402:	f04f 0862 	mov.w	r8, #98	; 0x62
 8016406:	601c      	str	r4, [r3, #0]
 8016408:	e734      	b.n	8016274 <__gethex+0x114>
 801640a:	1e69      	subs	r1, r5, #1
 801640c:	4620      	mov	r0, r4
 801640e:	f7fe fbbe 	bl	8014b8e <__any_on>
 8016412:	2800      	cmp	r0, #0
 8016414:	d1ed      	bne.n	80163f2 <__gethex+0x292>
 8016416:	4621      	mov	r1, r4
 8016418:	4648      	mov	r0, r9
 801641a:	f7fd ff63 	bl	80142e4 <_Bfree>
 801641e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016420:	2300      	movs	r3, #0
 8016422:	6013      	str	r3, [r2, #0]
 8016424:	f04f 0850 	mov.w	r8, #80	; 0x50
 8016428:	e724      	b.n	8016274 <__gethex+0x114>
 801642a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801642c:	2b00      	cmp	r3, #0
 801642e:	d1f2      	bne.n	8016416 <__gethex+0x2b6>
 8016430:	e7df      	b.n	80163f2 <__gethex+0x292>
 8016432:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016434:	2b00      	cmp	r3, #0
 8016436:	d1dc      	bne.n	80163f2 <__gethex+0x292>
 8016438:	e7ed      	b.n	8016416 <__gethex+0x2b6>
 801643a:	bf00      	nop
 801643c:	08017ee4 	.word	0x08017ee4
 8016440:	08017d78 	.word	0x08017d78
 8016444:	0801808e 	.word	0x0801808e
 8016448:	f106 38ff 	add.w	r8, r6, #4294967295
 801644c:	f1bb 0f00 	cmp.w	fp, #0
 8016450:	d133      	bne.n	80164ba <__gethex+0x35a>
 8016452:	f1b8 0f00 	cmp.w	r8, #0
 8016456:	d004      	beq.n	8016462 <__gethex+0x302>
 8016458:	4641      	mov	r1, r8
 801645a:	4620      	mov	r0, r4
 801645c:	f7fe fb97 	bl	8014b8e <__any_on>
 8016460:	4683      	mov	fp, r0
 8016462:	ea4f 1268 	mov.w	r2, r8, asr #5
 8016466:	2301      	movs	r3, #1
 8016468:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801646c:	f008 081f 	and.w	r8, r8, #31
 8016470:	fa03 f308 	lsl.w	r3, r3, r8
 8016474:	4213      	tst	r3, r2
 8016476:	4631      	mov	r1, r6
 8016478:	4620      	mov	r0, r4
 801647a:	bf18      	it	ne
 801647c:	f04b 0b02 	orrne.w	fp, fp, #2
 8016480:	1bad      	subs	r5, r5, r6
 8016482:	f7ff fe05 	bl	8016090 <rshift>
 8016486:	687e      	ldr	r6, [r7, #4]
 8016488:	f04f 0802 	mov.w	r8, #2
 801648c:	f1bb 0f00 	cmp.w	fp, #0
 8016490:	d04a      	beq.n	8016528 <__gethex+0x3c8>
 8016492:	68fb      	ldr	r3, [r7, #12]
 8016494:	2b02      	cmp	r3, #2
 8016496:	d016      	beq.n	80164c6 <__gethex+0x366>
 8016498:	2b03      	cmp	r3, #3
 801649a:	d018      	beq.n	80164ce <__gethex+0x36e>
 801649c:	2b01      	cmp	r3, #1
 801649e:	d109      	bne.n	80164b4 <__gethex+0x354>
 80164a0:	f01b 0f02 	tst.w	fp, #2
 80164a4:	d006      	beq.n	80164b4 <__gethex+0x354>
 80164a6:	f8da 3000 	ldr.w	r3, [sl]
 80164aa:	ea4b 0b03 	orr.w	fp, fp, r3
 80164ae:	f01b 0f01 	tst.w	fp, #1
 80164b2:	d10f      	bne.n	80164d4 <__gethex+0x374>
 80164b4:	f048 0810 	orr.w	r8, r8, #16
 80164b8:	e036      	b.n	8016528 <__gethex+0x3c8>
 80164ba:	f04f 0b01 	mov.w	fp, #1
 80164be:	e7d0      	b.n	8016462 <__gethex+0x302>
 80164c0:	f04f 0801 	mov.w	r8, #1
 80164c4:	e7e2      	b.n	801648c <__gethex+0x32c>
 80164c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80164c8:	f1c3 0301 	rsb	r3, r3, #1
 80164cc:	930f      	str	r3, [sp, #60]	; 0x3c
 80164ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80164d0:	2b00      	cmp	r3, #0
 80164d2:	d0ef      	beq.n	80164b4 <__gethex+0x354>
 80164d4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80164d8:	f104 0214 	add.w	r2, r4, #20
 80164dc:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80164e0:	9301      	str	r3, [sp, #4]
 80164e2:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 80164e6:	2300      	movs	r3, #0
 80164e8:	4694      	mov	ip, r2
 80164ea:	f852 1b04 	ldr.w	r1, [r2], #4
 80164ee:	f1b1 3fff 	cmp.w	r1, #4294967295
 80164f2:	d01e      	beq.n	8016532 <__gethex+0x3d2>
 80164f4:	3101      	adds	r1, #1
 80164f6:	f8cc 1000 	str.w	r1, [ip]
 80164fa:	f1b8 0f02 	cmp.w	r8, #2
 80164fe:	f104 0214 	add.w	r2, r4, #20
 8016502:	d13d      	bne.n	8016580 <__gethex+0x420>
 8016504:	683b      	ldr	r3, [r7, #0]
 8016506:	3b01      	subs	r3, #1
 8016508:	42ab      	cmp	r3, r5
 801650a:	d10b      	bne.n	8016524 <__gethex+0x3c4>
 801650c:	1169      	asrs	r1, r5, #5
 801650e:	2301      	movs	r3, #1
 8016510:	f005 051f 	and.w	r5, r5, #31
 8016514:	fa03 f505 	lsl.w	r5, r3, r5
 8016518:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801651c:	421d      	tst	r5, r3
 801651e:	bf18      	it	ne
 8016520:	f04f 0801 	movne.w	r8, #1
 8016524:	f048 0820 	orr.w	r8, r8, #32
 8016528:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801652a:	601c      	str	r4, [r3, #0]
 801652c:	9b02      	ldr	r3, [sp, #8]
 801652e:	601e      	str	r6, [r3, #0]
 8016530:	e6a0      	b.n	8016274 <__gethex+0x114>
 8016532:	4290      	cmp	r0, r2
 8016534:	f842 3c04 	str.w	r3, [r2, #-4]
 8016538:	d8d6      	bhi.n	80164e8 <__gethex+0x388>
 801653a:	68a2      	ldr	r2, [r4, #8]
 801653c:	4593      	cmp	fp, r2
 801653e:	db17      	blt.n	8016570 <__gethex+0x410>
 8016540:	6861      	ldr	r1, [r4, #4]
 8016542:	4648      	mov	r0, r9
 8016544:	3101      	adds	r1, #1
 8016546:	f7fd fe8d 	bl	8014264 <_Balloc>
 801654a:	4682      	mov	sl, r0
 801654c:	b918      	cbnz	r0, 8016556 <__gethex+0x3f6>
 801654e:	4b1b      	ldr	r3, [pc, #108]	; (80165bc <__gethex+0x45c>)
 8016550:	4602      	mov	r2, r0
 8016552:	2184      	movs	r1, #132	; 0x84
 8016554:	e6b1      	b.n	80162ba <__gethex+0x15a>
 8016556:	6922      	ldr	r2, [r4, #16]
 8016558:	3202      	adds	r2, #2
 801655a:	f104 010c 	add.w	r1, r4, #12
 801655e:	0092      	lsls	r2, r2, #2
 8016560:	300c      	adds	r0, #12
 8016562:	f7ff fd4f 	bl	8016004 <memcpy>
 8016566:	4621      	mov	r1, r4
 8016568:	4648      	mov	r0, r9
 801656a:	f7fd febb 	bl	80142e4 <_Bfree>
 801656e:	4654      	mov	r4, sl
 8016570:	6922      	ldr	r2, [r4, #16]
 8016572:	1c51      	adds	r1, r2, #1
 8016574:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8016578:	6121      	str	r1, [r4, #16]
 801657a:	2101      	movs	r1, #1
 801657c:	6151      	str	r1, [r2, #20]
 801657e:	e7bc      	b.n	80164fa <__gethex+0x39a>
 8016580:	6921      	ldr	r1, [r4, #16]
 8016582:	4559      	cmp	r1, fp
 8016584:	dd0b      	ble.n	801659e <__gethex+0x43e>
 8016586:	2101      	movs	r1, #1
 8016588:	4620      	mov	r0, r4
 801658a:	f7ff fd81 	bl	8016090 <rshift>
 801658e:	68bb      	ldr	r3, [r7, #8]
 8016590:	3601      	adds	r6, #1
 8016592:	42b3      	cmp	r3, r6
 8016594:	f6ff aeda 	blt.w	801634c <__gethex+0x1ec>
 8016598:	f04f 0801 	mov.w	r8, #1
 801659c:	e7c2      	b.n	8016524 <__gethex+0x3c4>
 801659e:	f015 051f 	ands.w	r5, r5, #31
 80165a2:	d0f9      	beq.n	8016598 <__gethex+0x438>
 80165a4:	9b01      	ldr	r3, [sp, #4]
 80165a6:	441a      	add	r2, r3
 80165a8:	f1c5 0520 	rsb	r5, r5, #32
 80165ac:	f852 0c04 	ldr.w	r0, [r2, #-4]
 80165b0:	f7fd ff4a 	bl	8014448 <__hi0bits>
 80165b4:	42a8      	cmp	r0, r5
 80165b6:	dbe6      	blt.n	8016586 <__gethex+0x426>
 80165b8:	e7ee      	b.n	8016598 <__gethex+0x438>
 80165ba:	bf00      	nop
 80165bc:	08017d78 	.word	0x08017d78

080165c0 <L_shift>:
 80165c0:	f1c2 0208 	rsb	r2, r2, #8
 80165c4:	0092      	lsls	r2, r2, #2
 80165c6:	b570      	push	{r4, r5, r6, lr}
 80165c8:	f1c2 0620 	rsb	r6, r2, #32
 80165cc:	6843      	ldr	r3, [r0, #4]
 80165ce:	6804      	ldr	r4, [r0, #0]
 80165d0:	fa03 f506 	lsl.w	r5, r3, r6
 80165d4:	432c      	orrs	r4, r5
 80165d6:	40d3      	lsrs	r3, r2
 80165d8:	6004      	str	r4, [r0, #0]
 80165da:	f840 3f04 	str.w	r3, [r0, #4]!
 80165de:	4288      	cmp	r0, r1
 80165e0:	d3f4      	bcc.n	80165cc <L_shift+0xc>
 80165e2:	bd70      	pop	{r4, r5, r6, pc}

080165e4 <__match>:
 80165e4:	b530      	push	{r4, r5, lr}
 80165e6:	6803      	ldr	r3, [r0, #0]
 80165e8:	3301      	adds	r3, #1
 80165ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80165ee:	b914      	cbnz	r4, 80165f6 <__match+0x12>
 80165f0:	6003      	str	r3, [r0, #0]
 80165f2:	2001      	movs	r0, #1
 80165f4:	bd30      	pop	{r4, r5, pc}
 80165f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80165fa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80165fe:	2d19      	cmp	r5, #25
 8016600:	bf98      	it	ls
 8016602:	3220      	addls	r2, #32
 8016604:	42a2      	cmp	r2, r4
 8016606:	d0f0      	beq.n	80165ea <__match+0x6>
 8016608:	2000      	movs	r0, #0
 801660a:	e7f3      	b.n	80165f4 <__match+0x10>

0801660c <__hexnan>:
 801660c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016610:	680b      	ldr	r3, [r1, #0]
 8016612:	6801      	ldr	r1, [r0, #0]
 8016614:	115e      	asrs	r6, r3, #5
 8016616:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801661a:	f013 031f 	ands.w	r3, r3, #31
 801661e:	b087      	sub	sp, #28
 8016620:	bf18      	it	ne
 8016622:	3604      	addne	r6, #4
 8016624:	2500      	movs	r5, #0
 8016626:	1f37      	subs	r7, r6, #4
 8016628:	4682      	mov	sl, r0
 801662a:	4690      	mov	r8, r2
 801662c:	9301      	str	r3, [sp, #4]
 801662e:	f846 5c04 	str.w	r5, [r6, #-4]
 8016632:	46b9      	mov	r9, r7
 8016634:	463c      	mov	r4, r7
 8016636:	9502      	str	r5, [sp, #8]
 8016638:	46ab      	mov	fp, r5
 801663a:	784a      	ldrb	r2, [r1, #1]
 801663c:	1c4b      	adds	r3, r1, #1
 801663e:	9303      	str	r3, [sp, #12]
 8016640:	b342      	cbz	r2, 8016694 <__hexnan+0x88>
 8016642:	4610      	mov	r0, r2
 8016644:	9105      	str	r1, [sp, #20]
 8016646:	9204      	str	r2, [sp, #16]
 8016648:	f7ff fd74 	bl	8016134 <__hexdig_fun>
 801664c:	2800      	cmp	r0, #0
 801664e:	d14f      	bne.n	80166f0 <__hexnan+0xe4>
 8016650:	9a04      	ldr	r2, [sp, #16]
 8016652:	9905      	ldr	r1, [sp, #20]
 8016654:	2a20      	cmp	r2, #32
 8016656:	d818      	bhi.n	801668a <__hexnan+0x7e>
 8016658:	9b02      	ldr	r3, [sp, #8]
 801665a:	459b      	cmp	fp, r3
 801665c:	dd13      	ble.n	8016686 <__hexnan+0x7a>
 801665e:	454c      	cmp	r4, r9
 8016660:	d206      	bcs.n	8016670 <__hexnan+0x64>
 8016662:	2d07      	cmp	r5, #7
 8016664:	dc04      	bgt.n	8016670 <__hexnan+0x64>
 8016666:	462a      	mov	r2, r5
 8016668:	4649      	mov	r1, r9
 801666a:	4620      	mov	r0, r4
 801666c:	f7ff ffa8 	bl	80165c0 <L_shift>
 8016670:	4544      	cmp	r4, r8
 8016672:	d950      	bls.n	8016716 <__hexnan+0x10a>
 8016674:	2300      	movs	r3, #0
 8016676:	f1a4 0904 	sub.w	r9, r4, #4
 801667a:	f844 3c04 	str.w	r3, [r4, #-4]
 801667e:	f8cd b008 	str.w	fp, [sp, #8]
 8016682:	464c      	mov	r4, r9
 8016684:	461d      	mov	r5, r3
 8016686:	9903      	ldr	r1, [sp, #12]
 8016688:	e7d7      	b.n	801663a <__hexnan+0x2e>
 801668a:	2a29      	cmp	r2, #41	; 0x29
 801668c:	d155      	bne.n	801673a <__hexnan+0x12e>
 801668e:	3102      	adds	r1, #2
 8016690:	f8ca 1000 	str.w	r1, [sl]
 8016694:	f1bb 0f00 	cmp.w	fp, #0
 8016698:	d04f      	beq.n	801673a <__hexnan+0x12e>
 801669a:	454c      	cmp	r4, r9
 801669c:	d206      	bcs.n	80166ac <__hexnan+0xa0>
 801669e:	2d07      	cmp	r5, #7
 80166a0:	dc04      	bgt.n	80166ac <__hexnan+0xa0>
 80166a2:	462a      	mov	r2, r5
 80166a4:	4649      	mov	r1, r9
 80166a6:	4620      	mov	r0, r4
 80166a8:	f7ff ff8a 	bl	80165c0 <L_shift>
 80166ac:	4544      	cmp	r4, r8
 80166ae:	d934      	bls.n	801671a <__hexnan+0x10e>
 80166b0:	f1a8 0204 	sub.w	r2, r8, #4
 80166b4:	4623      	mov	r3, r4
 80166b6:	f853 1b04 	ldr.w	r1, [r3], #4
 80166ba:	f842 1f04 	str.w	r1, [r2, #4]!
 80166be:	429f      	cmp	r7, r3
 80166c0:	d2f9      	bcs.n	80166b6 <__hexnan+0xaa>
 80166c2:	1b3b      	subs	r3, r7, r4
 80166c4:	f023 0303 	bic.w	r3, r3, #3
 80166c8:	3304      	adds	r3, #4
 80166ca:	3e03      	subs	r6, #3
 80166cc:	3401      	adds	r4, #1
 80166ce:	42a6      	cmp	r6, r4
 80166d0:	bf38      	it	cc
 80166d2:	2304      	movcc	r3, #4
 80166d4:	4443      	add	r3, r8
 80166d6:	2200      	movs	r2, #0
 80166d8:	f843 2b04 	str.w	r2, [r3], #4
 80166dc:	429f      	cmp	r7, r3
 80166de:	d2fb      	bcs.n	80166d8 <__hexnan+0xcc>
 80166e0:	683b      	ldr	r3, [r7, #0]
 80166e2:	b91b      	cbnz	r3, 80166ec <__hexnan+0xe0>
 80166e4:	4547      	cmp	r7, r8
 80166e6:	d126      	bne.n	8016736 <__hexnan+0x12a>
 80166e8:	2301      	movs	r3, #1
 80166ea:	603b      	str	r3, [r7, #0]
 80166ec:	2005      	movs	r0, #5
 80166ee:	e025      	b.n	801673c <__hexnan+0x130>
 80166f0:	3501      	adds	r5, #1
 80166f2:	2d08      	cmp	r5, #8
 80166f4:	f10b 0b01 	add.w	fp, fp, #1
 80166f8:	dd06      	ble.n	8016708 <__hexnan+0xfc>
 80166fa:	4544      	cmp	r4, r8
 80166fc:	d9c3      	bls.n	8016686 <__hexnan+0x7a>
 80166fe:	2300      	movs	r3, #0
 8016700:	f844 3c04 	str.w	r3, [r4, #-4]
 8016704:	2501      	movs	r5, #1
 8016706:	3c04      	subs	r4, #4
 8016708:	6822      	ldr	r2, [r4, #0]
 801670a:	f000 000f 	and.w	r0, r0, #15
 801670e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8016712:	6020      	str	r0, [r4, #0]
 8016714:	e7b7      	b.n	8016686 <__hexnan+0x7a>
 8016716:	2508      	movs	r5, #8
 8016718:	e7b5      	b.n	8016686 <__hexnan+0x7a>
 801671a:	9b01      	ldr	r3, [sp, #4]
 801671c:	2b00      	cmp	r3, #0
 801671e:	d0df      	beq.n	80166e0 <__hexnan+0xd4>
 8016720:	f1c3 0320 	rsb	r3, r3, #32
 8016724:	f04f 32ff 	mov.w	r2, #4294967295
 8016728:	40da      	lsrs	r2, r3
 801672a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801672e:	4013      	ands	r3, r2
 8016730:	f846 3c04 	str.w	r3, [r6, #-4]
 8016734:	e7d4      	b.n	80166e0 <__hexnan+0xd4>
 8016736:	3f04      	subs	r7, #4
 8016738:	e7d2      	b.n	80166e0 <__hexnan+0xd4>
 801673a:	2004      	movs	r0, #4
 801673c:	b007      	add	sp, #28
 801673e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016742 <__ascii_mbtowc>:
 8016742:	b082      	sub	sp, #8
 8016744:	b901      	cbnz	r1, 8016748 <__ascii_mbtowc+0x6>
 8016746:	a901      	add	r1, sp, #4
 8016748:	b142      	cbz	r2, 801675c <__ascii_mbtowc+0x1a>
 801674a:	b14b      	cbz	r3, 8016760 <__ascii_mbtowc+0x1e>
 801674c:	7813      	ldrb	r3, [r2, #0]
 801674e:	600b      	str	r3, [r1, #0]
 8016750:	7812      	ldrb	r2, [r2, #0]
 8016752:	1e10      	subs	r0, r2, #0
 8016754:	bf18      	it	ne
 8016756:	2001      	movne	r0, #1
 8016758:	b002      	add	sp, #8
 801675a:	4770      	bx	lr
 801675c:	4610      	mov	r0, r2
 801675e:	e7fb      	b.n	8016758 <__ascii_mbtowc+0x16>
 8016760:	f06f 0001 	mvn.w	r0, #1
 8016764:	e7f8      	b.n	8016758 <__ascii_mbtowc+0x16>

08016766 <_realloc_r>:
 8016766:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801676a:	4680      	mov	r8, r0
 801676c:	4614      	mov	r4, r2
 801676e:	460e      	mov	r6, r1
 8016770:	b921      	cbnz	r1, 801677c <_realloc_r+0x16>
 8016772:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016776:	4611      	mov	r1, r2
 8016778:	f7fd bce8 	b.w	801414c <_malloc_r>
 801677c:	b92a      	cbnz	r2, 801678a <_realloc_r+0x24>
 801677e:	f7fd fc73 	bl	8014068 <_free_r>
 8016782:	4625      	mov	r5, r4
 8016784:	4628      	mov	r0, r5
 8016786:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801678a:	f000 f842 	bl	8016812 <_malloc_usable_size_r>
 801678e:	4284      	cmp	r4, r0
 8016790:	4607      	mov	r7, r0
 8016792:	d802      	bhi.n	801679a <_realloc_r+0x34>
 8016794:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8016798:	d812      	bhi.n	80167c0 <_realloc_r+0x5a>
 801679a:	4621      	mov	r1, r4
 801679c:	4640      	mov	r0, r8
 801679e:	f7fd fcd5 	bl	801414c <_malloc_r>
 80167a2:	4605      	mov	r5, r0
 80167a4:	2800      	cmp	r0, #0
 80167a6:	d0ed      	beq.n	8016784 <_realloc_r+0x1e>
 80167a8:	42bc      	cmp	r4, r7
 80167aa:	4622      	mov	r2, r4
 80167ac:	4631      	mov	r1, r6
 80167ae:	bf28      	it	cs
 80167b0:	463a      	movcs	r2, r7
 80167b2:	f7ff fc27 	bl	8016004 <memcpy>
 80167b6:	4631      	mov	r1, r6
 80167b8:	4640      	mov	r0, r8
 80167ba:	f7fd fc55 	bl	8014068 <_free_r>
 80167be:	e7e1      	b.n	8016784 <_realloc_r+0x1e>
 80167c0:	4635      	mov	r5, r6
 80167c2:	e7df      	b.n	8016784 <_realloc_r+0x1e>

080167c4 <__ascii_wctomb>:
 80167c4:	4603      	mov	r3, r0
 80167c6:	4608      	mov	r0, r1
 80167c8:	b141      	cbz	r1, 80167dc <__ascii_wctomb+0x18>
 80167ca:	2aff      	cmp	r2, #255	; 0xff
 80167cc:	d904      	bls.n	80167d8 <__ascii_wctomb+0x14>
 80167ce:	228a      	movs	r2, #138	; 0x8a
 80167d0:	601a      	str	r2, [r3, #0]
 80167d2:	f04f 30ff 	mov.w	r0, #4294967295
 80167d6:	4770      	bx	lr
 80167d8:	700a      	strb	r2, [r1, #0]
 80167da:	2001      	movs	r0, #1
 80167dc:	4770      	bx	lr
	...

080167e0 <fiprintf>:
 80167e0:	b40e      	push	{r1, r2, r3}
 80167e2:	b503      	push	{r0, r1, lr}
 80167e4:	4601      	mov	r1, r0
 80167e6:	ab03      	add	r3, sp, #12
 80167e8:	4805      	ldr	r0, [pc, #20]	; (8016800 <fiprintf+0x20>)
 80167ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80167ee:	6800      	ldr	r0, [r0, #0]
 80167f0:	9301      	str	r3, [sp, #4]
 80167f2:	f000 f83d 	bl	8016870 <_vfiprintf_r>
 80167f6:	b002      	add	sp, #8
 80167f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80167fc:	b003      	add	sp, #12
 80167fe:	4770      	bx	lr
 8016800:	20000138 	.word	0x20000138

08016804 <abort>:
 8016804:	b508      	push	{r3, lr}
 8016806:	2006      	movs	r0, #6
 8016808:	f000 fa0a 	bl	8016c20 <raise>
 801680c:	2001      	movs	r0, #1
 801680e:	f7eb facf 	bl	8001db0 <_exit>

08016812 <_malloc_usable_size_r>:
 8016812:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016816:	1f18      	subs	r0, r3, #4
 8016818:	2b00      	cmp	r3, #0
 801681a:	bfbc      	itt	lt
 801681c:	580b      	ldrlt	r3, [r1, r0]
 801681e:	18c0      	addlt	r0, r0, r3
 8016820:	4770      	bx	lr

08016822 <__sfputc_r>:
 8016822:	6893      	ldr	r3, [r2, #8]
 8016824:	3b01      	subs	r3, #1
 8016826:	2b00      	cmp	r3, #0
 8016828:	b410      	push	{r4}
 801682a:	6093      	str	r3, [r2, #8]
 801682c:	da07      	bge.n	801683e <__sfputc_r+0x1c>
 801682e:	6994      	ldr	r4, [r2, #24]
 8016830:	42a3      	cmp	r3, r4
 8016832:	db01      	blt.n	8016838 <__sfputc_r+0x16>
 8016834:	290a      	cmp	r1, #10
 8016836:	d102      	bne.n	801683e <__sfputc_r+0x1c>
 8016838:	bc10      	pop	{r4}
 801683a:	f000 b933 	b.w	8016aa4 <__swbuf_r>
 801683e:	6813      	ldr	r3, [r2, #0]
 8016840:	1c58      	adds	r0, r3, #1
 8016842:	6010      	str	r0, [r2, #0]
 8016844:	7019      	strb	r1, [r3, #0]
 8016846:	4608      	mov	r0, r1
 8016848:	bc10      	pop	{r4}
 801684a:	4770      	bx	lr

0801684c <__sfputs_r>:
 801684c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801684e:	4606      	mov	r6, r0
 8016850:	460f      	mov	r7, r1
 8016852:	4614      	mov	r4, r2
 8016854:	18d5      	adds	r5, r2, r3
 8016856:	42ac      	cmp	r4, r5
 8016858:	d101      	bne.n	801685e <__sfputs_r+0x12>
 801685a:	2000      	movs	r0, #0
 801685c:	e007      	b.n	801686e <__sfputs_r+0x22>
 801685e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016862:	463a      	mov	r2, r7
 8016864:	4630      	mov	r0, r6
 8016866:	f7ff ffdc 	bl	8016822 <__sfputc_r>
 801686a:	1c43      	adds	r3, r0, #1
 801686c:	d1f3      	bne.n	8016856 <__sfputs_r+0xa>
 801686e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016870 <_vfiprintf_r>:
 8016870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016874:	460d      	mov	r5, r1
 8016876:	b09d      	sub	sp, #116	; 0x74
 8016878:	4614      	mov	r4, r2
 801687a:	4698      	mov	r8, r3
 801687c:	4606      	mov	r6, r0
 801687e:	b118      	cbz	r0, 8016888 <_vfiprintf_r+0x18>
 8016880:	6a03      	ldr	r3, [r0, #32]
 8016882:	b90b      	cbnz	r3, 8016888 <_vfiprintf_r+0x18>
 8016884:	f7fc fc6c 	bl	8013160 <__sinit>
 8016888:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801688a:	07d9      	lsls	r1, r3, #31
 801688c:	d405      	bmi.n	801689a <_vfiprintf_r+0x2a>
 801688e:	89ab      	ldrh	r3, [r5, #12]
 8016890:	059a      	lsls	r2, r3, #22
 8016892:	d402      	bmi.n	801689a <_vfiprintf_r+0x2a>
 8016894:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016896:	f7fc fd79 	bl	801338c <__retarget_lock_acquire_recursive>
 801689a:	89ab      	ldrh	r3, [r5, #12]
 801689c:	071b      	lsls	r3, r3, #28
 801689e:	d501      	bpl.n	80168a4 <_vfiprintf_r+0x34>
 80168a0:	692b      	ldr	r3, [r5, #16]
 80168a2:	b99b      	cbnz	r3, 80168cc <_vfiprintf_r+0x5c>
 80168a4:	4629      	mov	r1, r5
 80168a6:	4630      	mov	r0, r6
 80168a8:	f000 f93a 	bl	8016b20 <__swsetup_r>
 80168ac:	b170      	cbz	r0, 80168cc <_vfiprintf_r+0x5c>
 80168ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80168b0:	07dc      	lsls	r4, r3, #31
 80168b2:	d504      	bpl.n	80168be <_vfiprintf_r+0x4e>
 80168b4:	f04f 30ff 	mov.w	r0, #4294967295
 80168b8:	b01d      	add	sp, #116	; 0x74
 80168ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80168be:	89ab      	ldrh	r3, [r5, #12]
 80168c0:	0598      	lsls	r0, r3, #22
 80168c2:	d4f7      	bmi.n	80168b4 <_vfiprintf_r+0x44>
 80168c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80168c6:	f7fc fd62 	bl	801338e <__retarget_lock_release_recursive>
 80168ca:	e7f3      	b.n	80168b4 <_vfiprintf_r+0x44>
 80168cc:	2300      	movs	r3, #0
 80168ce:	9309      	str	r3, [sp, #36]	; 0x24
 80168d0:	2320      	movs	r3, #32
 80168d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80168d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80168da:	2330      	movs	r3, #48	; 0x30
 80168dc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8016a90 <_vfiprintf_r+0x220>
 80168e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80168e4:	f04f 0901 	mov.w	r9, #1
 80168e8:	4623      	mov	r3, r4
 80168ea:	469a      	mov	sl, r3
 80168ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80168f0:	b10a      	cbz	r2, 80168f6 <_vfiprintf_r+0x86>
 80168f2:	2a25      	cmp	r2, #37	; 0x25
 80168f4:	d1f9      	bne.n	80168ea <_vfiprintf_r+0x7a>
 80168f6:	ebba 0b04 	subs.w	fp, sl, r4
 80168fa:	d00b      	beq.n	8016914 <_vfiprintf_r+0xa4>
 80168fc:	465b      	mov	r3, fp
 80168fe:	4622      	mov	r2, r4
 8016900:	4629      	mov	r1, r5
 8016902:	4630      	mov	r0, r6
 8016904:	f7ff ffa2 	bl	801684c <__sfputs_r>
 8016908:	3001      	adds	r0, #1
 801690a:	f000 80a9 	beq.w	8016a60 <_vfiprintf_r+0x1f0>
 801690e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016910:	445a      	add	r2, fp
 8016912:	9209      	str	r2, [sp, #36]	; 0x24
 8016914:	f89a 3000 	ldrb.w	r3, [sl]
 8016918:	2b00      	cmp	r3, #0
 801691a:	f000 80a1 	beq.w	8016a60 <_vfiprintf_r+0x1f0>
 801691e:	2300      	movs	r3, #0
 8016920:	f04f 32ff 	mov.w	r2, #4294967295
 8016924:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016928:	f10a 0a01 	add.w	sl, sl, #1
 801692c:	9304      	str	r3, [sp, #16]
 801692e:	9307      	str	r3, [sp, #28]
 8016930:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016934:	931a      	str	r3, [sp, #104]	; 0x68
 8016936:	4654      	mov	r4, sl
 8016938:	2205      	movs	r2, #5
 801693a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801693e:	4854      	ldr	r0, [pc, #336]	; (8016a90 <_vfiprintf_r+0x220>)
 8016940:	f7e9 fc1e 	bl	8000180 <memchr>
 8016944:	9a04      	ldr	r2, [sp, #16]
 8016946:	b9d8      	cbnz	r0, 8016980 <_vfiprintf_r+0x110>
 8016948:	06d1      	lsls	r1, r2, #27
 801694a:	bf44      	itt	mi
 801694c:	2320      	movmi	r3, #32
 801694e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016952:	0713      	lsls	r3, r2, #28
 8016954:	bf44      	itt	mi
 8016956:	232b      	movmi	r3, #43	; 0x2b
 8016958:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801695c:	f89a 3000 	ldrb.w	r3, [sl]
 8016960:	2b2a      	cmp	r3, #42	; 0x2a
 8016962:	d015      	beq.n	8016990 <_vfiprintf_r+0x120>
 8016964:	9a07      	ldr	r2, [sp, #28]
 8016966:	4654      	mov	r4, sl
 8016968:	2000      	movs	r0, #0
 801696a:	f04f 0c0a 	mov.w	ip, #10
 801696e:	4621      	mov	r1, r4
 8016970:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016974:	3b30      	subs	r3, #48	; 0x30
 8016976:	2b09      	cmp	r3, #9
 8016978:	d94d      	bls.n	8016a16 <_vfiprintf_r+0x1a6>
 801697a:	b1b0      	cbz	r0, 80169aa <_vfiprintf_r+0x13a>
 801697c:	9207      	str	r2, [sp, #28]
 801697e:	e014      	b.n	80169aa <_vfiprintf_r+0x13a>
 8016980:	eba0 0308 	sub.w	r3, r0, r8
 8016984:	fa09 f303 	lsl.w	r3, r9, r3
 8016988:	4313      	orrs	r3, r2
 801698a:	9304      	str	r3, [sp, #16]
 801698c:	46a2      	mov	sl, r4
 801698e:	e7d2      	b.n	8016936 <_vfiprintf_r+0xc6>
 8016990:	9b03      	ldr	r3, [sp, #12]
 8016992:	1d19      	adds	r1, r3, #4
 8016994:	681b      	ldr	r3, [r3, #0]
 8016996:	9103      	str	r1, [sp, #12]
 8016998:	2b00      	cmp	r3, #0
 801699a:	bfbb      	ittet	lt
 801699c:	425b      	neglt	r3, r3
 801699e:	f042 0202 	orrlt.w	r2, r2, #2
 80169a2:	9307      	strge	r3, [sp, #28]
 80169a4:	9307      	strlt	r3, [sp, #28]
 80169a6:	bfb8      	it	lt
 80169a8:	9204      	strlt	r2, [sp, #16]
 80169aa:	7823      	ldrb	r3, [r4, #0]
 80169ac:	2b2e      	cmp	r3, #46	; 0x2e
 80169ae:	d10c      	bne.n	80169ca <_vfiprintf_r+0x15a>
 80169b0:	7863      	ldrb	r3, [r4, #1]
 80169b2:	2b2a      	cmp	r3, #42	; 0x2a
 80169b4:	d134      	bne.n	8016a20 <_vfiprintf_r+0x1b0>
 80169b6:	9b03      	ldr	r3, [sp, #12]
 80169b8:	1d1a      	adds	r2, r3, #4
 80169ba:	681b      	ldr	r3, [r3, #0]
 80169bc:	9203      	str	r2, [sp, #12]
 80169be:	2b00      	cmp	r3, #0
 80169c0:	bfb8      	it	lt
 80169c2:	f04f 33ff 	movlt.w	r3, #4294967295
 80169c6:	3402      	adds	r4, #2
 80169c8:	9305      	str	r3, [sp, #20]
 80169ca:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8016a94 <_vfiprintf_r+0x224>
 80169ce:	7821      	ldrb	r1, [r4, #0]
 80169d0:	2203      	movs	r2, #3
 80169d2:	4650      	mov	r0, sl
 80169d4:	f7e9 fbd4 	bl	8000180 <memchr>
 80169d8:	b138      	cbz	r0, 80169ea <_vfiprintf_r+0x17a>
 80169da:	9b04      	ldr	r3, [sp, #16]
 80169dc:	eba0 000a 	sub.w	r0, r0, sl
 80169e0:	2240      	movs	r2, #64	; 0x40
 80169e2:	4082      	lsls	r2, r0
 80169e4:	4313      	orrs	r3, r2
 80169e6:	3401      	adds	r4, #1
 80169e8:	9304      	str	r3, [sp, #16]
 80169ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80169ee:	482a      	ldr	r0, [pc, #168]	; (8016a98 <_vfiprintf_r+0x228>)
 80169f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80169f4:	2206      	movs	r2, #6
 80169f6:	f7e9 fbc3 	bl	8000180 <memchr>
 80169fa:	2800      	cmp	r0, #0
 80169fc:	d03f      	beq.n	8016a7e <_vfiprintf_r+0x20e>
 80169fe:	4b27      	ldr	r3, [pc, #156]	; (8016a9c <_vfiprintf_r+0x22c>)
 8016a00:	bb1b      	cbnz	r3, 8016a4a <_vfiprintf_r+0x1da>
 8016a02:	9b03      	ldr	r3, [sp, #12]
 8016a04:	3307      	adds	r3, #7
 8016a06:	f023 0307 	bic.w	r3, r3, #7
 8016a0a:	3308      	adds	r3, #8
 8016a0c:	9303      	str	r3, [sp, #12]
 8016a0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016a10:	443b      	add	r3, r7
 8016a12:	9309      	str	r3, [sp, #36]	; 0x24
 8016a14:	e768      	b.n	80168e8 <_vfiprintf_r+0x78>
 8016a16:	fb0c 3202 	mla	r2, ip, r2, r3
 8016a1a:	460c      	mov	r4, r1
 8016a1c:	2001      	movs	r0, #1
 8016a1e:	e7a6      	b.n	801696e <_vfiprintf_r+0xfe>
 8016a20:	2300      	movs	r3, #0
 8016a22:	3401      	adds	r4, #1
 8016a24:	9305      	str	r3, [sp, #20]
 8016a26:	4619      	mov	r1, r3
 8016a28:	f04f 0c0a 	mov.w	ip, #10
 8016a2c:	4620      	mov	r0, r4
 8016a2e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016a32:	3a30      	subs	r2, #48	; 0x30
 8016a34:	2a09      	cmp	r2, #9
 8016a36:	d903      	bls.n	8016a40 <_vfiprintf_r+0x1d0>
 8016a38:	2b00      	cmp	r3, #0
 8016a3a:	d0c6      	beq.n	80169ca <_vfiprintf_r+0x15a>
 8016a3c:	9105      	str	r1, [sp, #20]
 8016a3e:	e7c4      	b.n	80169ca <_vfiprintf_r+0x15a>
 8016a40:	fb0c 2101 	mla	r1, ip, r1, r2
 8016a44:	4604      	mov	r4, r0
 8016a46:	2301      	movs	r3, #1
 8016a48:	e7f0      	b.n	8016a2c <_vfiprintf_r+0x1bc>
 8016a4a:	ab03      	add	r3, sp, #12
 8016a4c:	9300      	str	r3, [sp, #0]
 8016a4e:	462a      	mov	r2, r5
 8016a50:	4b13      	ldr	r3, [pc, #76]	; (8016aa0 <_vfiprintf_r+0x230>)
 8016a52:	a904      	add	r1, sp, #16
 8016a54:	4630      	mov	r0, r6
 8016a56:	f7fb fd41 	bl	80124dc <_printf_float>
 8016a5a:	4607      	mov	r7, r0
 8016a5c:	1c78      	adds	r0, r7, #1
 8016a5e:	d1d6      	bne.n	8016a0e <_vfiprintf_r+0x19e>
 8016a60:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016a62:	07d9      	lsls	r1, r3, #31
 8016a64:	d405      	bmi.n	8016a72 <_vfiprintf_r+0x202>
 8016a66:	89ab      	ldrh	r3, [r5, #12]
 8016a68:	059a      	lsls	r2, r3, #22
 8016a6a:	d402      	bmi.n	8016a72 <_vfiprintf_r+0x202>
 8016a6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016a6e:	f7fc fc8e 	bl	801338e <__retarget_lock_release_recursive>
 8016a72:	89ab      	ldrh	r3, [r5, #12]
 8016a74:	065b      	lsls	r3, r3, #25
 8016a76:	f53f af1d 	bmi.w	80168b4 <_vfiprintf_r+0x44>
 8016a7a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016a7c:	e71c      	b.n	80168b8 <_vfiprintf_r+0x48>
 8016a7e:	ab03      	add	r3, sp, #12
 8016a80:	9300      	str	r3, [sp, #0]
 8016a82:	462a      	mov	r2, r5
 8016a84:	4b06      	ldr	r3, [pc, #24]	; (8016aa0 <_vfiprintf_r+0x230>)
 8016a86:	a904      	add	r1, sp, #16
 8016a88:	4630      	mov	r0, r6
 8016a8a:	f7fb ffc1 	bl	8012a10 <_printf_i>
 8016a8e:	e7e4      	b.n	8016a5a <_vfiprintf_r+0x1ea>
 8016a90:	08018039 	.word	0x08018039
 8016a94:	0801803f 	.word	0x0801803f
 8016a98:	08018043 	.word	0x08018043
 8016a9c:	080124dd 	.word	0x080124dd
 8016aa0:	0801684d 	.word	0x0801684d

08016aa4 <__swbuf_r>:
 8016aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016aa6:	460e      	mov	r6, r1
 8016aa8:	4614      	mov	r4, r2
 8016aaa:	4605      	mov	r5, r0
 8016aac:	b118      	cbz	r0, 8016ab6 <__swbuf_r+0x12>
 8016aae:	6a03      	ldr	r3, [r0, #32]
 8016ab0:	b90b      	cbnz	r3, 8016ab6 <__swbuf_r+0x12>
 8016ab2:	f7fc fb55 	bl	8013160 <__sinit>
 8016ab6:	69a3      	ldr	r3, [r4, #24]
 8016ab8:	60a3      	str	r3, [r4, #8]
 8016aba:	89a3      	ldrh	r3, [r4, #12]
 8016abc:	071a      	lsls	r2, r3, #28
 8016abe:	d525      	bpl.n	8016b0c <__swbuf_r+0x68>
 8016ac0:	6923      	ldr	r3, [r4, #16]
 8016ac2:	b31b      	cbz	r3, 8016b0c <__swbuf_r+0x68>
 8016ac4:	6823      	ldr	r3, [r4, #0]
 8016ac6:	6922      	ldr	r2, [r4, #16]
 8016ac8:	1a98      	subs	r0, r3, r2
 8016aca:	6963      	ldr	r3, [r4, #20]
 8016acc:	b2f6      	uxtb	r6, r6
 8016ace:	4283      	cmp	r3, r0
 8016ad0:	4637      	mov	r7, r6
 8016ad2:	dc04      	bgt.n	8016ade <__swbuf_r+0x3a>
 8016ad4:	4621      	mov	r1, r4
 8016ad6:	4628      	mov	r0, r5
 8016ad8:	f7ff fa28 	bl	8015f2c <_fflush_r>
 8016adc:	b9e0      	cbnz	r0, 8016b18 <__swbuf_r+0x74>
 8016ade:	68a3      	ldr	r3, [r4, #8]
 8016ae0:	3b01      	subs	r3, #1
 8016ae2:	60a3      	str	r3, [r4, #8]
 8016ae4:	6823      	ldr	r3, [r4, #0]
 8016ae6:	1c5a      	adds	r2, r3, #1
 8016ae8:	6022      	str	r2, [r4, #0]
 8016aea:	701e      	strb	r6, [r3, #0]
 8016aec:	6962      	ldr	r2, [r4, #20]
 8016aee:	1c43      	adds	r3, r0, #1
 8016af0:	429a      	cmp	r2, r3
 8016af2:	d004      	beq.n	8016afe <__swbuf_r+0x5a>
 8016af4:	89a3      	ldrh	r3, [r4, #12]
 8016af6:	07db      	lsls	r3, r3, #31
 8016af8:	d506      	bpl.n	8016b08 <__swbuf_r+0x64>
 8016afa:	2e0a      	cmp	r6, #10
 8016afc:	d104      	bne.n	8016b08 <__swbuf_r+0x64>
 8016afe:	4621      	mov	r1, r4
 8016b00:	4628      	mov	r0, r5
 8016b02:	f7ff fa13 	bl	8015f2c <_fflush_r>
 8016b06:	b938      	cbnz	r0, 8016b18 <__swbuf_r+0x74>
 8016b08:	4638      	mov	r0, r7
 8016b0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016b0c:	4621      	mov	r1, r4
 8016b0e:	4628      	mov	r0, r5
 8016b10:	f000 f806 	bl	8016b20 <__swsetup_r>
 8016b14:	2800      	cmp	r0, #0
 8016b16:	d0d5      	beq.n	8016ac4 <__swbuf_r+0x20>
 8016b18:	f04f 37ff 	mov.w	r7, #4294967295
 8016b1c:	e7f4      	b.n	8016b08 <__swbuf_r+0x64>
	...

08016b20 <__swsetup_r>:
 8016b20:	b538      	push	{r3, r4, r5, lr}
 8016b22:	4b2a      	ldr	r3, [pc, #168]	; (8016bcc <__swsetup_r+0xac>)
 8016b24:	4605      	mov	r5, r0
 8016b26:	6818      	ldr	r0, [r3, #0]
 8016b28:	460c      	mov	r4, r1
 8016b2a:	b118      	cbz	r0, 8016b34 <__swsetup_r+0x14>
 8016b2c:	6a03      	ldr	r3, [r0, #32]
 8016b2e:	b90b      	cbnz	r3, 8016b34 <__swsetup_r+0x14>
 8016b30:	f7fc fb16 	bl	8013160 <__sinit>
 8016b34:	89a3      	ldrh	r3, [r4, #12]
 8016b36:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016b3a:	0718      	lsls	r0, r3, #28
 8016b3c:	d422      	bmi.n	8016b84 <__swsetup_r+0x64>
 8016b3e:	06d9      	lsls	r1, r3, #27
 8016b40:	d407      	bmi.n	8016b52 <__swsetup_r+0x32>
 8016b42:	2309      	movs	r3, #9
 8016b44:	602b      	str	r3, [r5, #0]
 8016b46:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8016b4a:	81a3      	strh	r3, [r4, #12]
 8016b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8016b50:	e034      	b.n	8016bbc <__swsetup_r+0x9c>
 8016b52:	0758      	lsls	r0, r3, #29
 8016b54:	d512      	bpl.n	8016b7c <__swsetup_r+0x5c>
 8016b56:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016b58:	b141      	cbz	r1, 8016b6c <__swsetup_r+0x4c>
 8016b5a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016b5e:	4299      	cmp	r1, r3
 8016b60:	d002      	beq.n	8016b68 <__swsetup_r+0x48>
 8016b62:	4628      	mov	r0, r5
 8016b64:	f7fd fa80 	bl	8014068 <_free_r>
 8016b68:	2300      	movs	r3, #0
 8016b6a:	6363      	str	r3, [r4, #52]	; 0x34
 8016b6c:	89a3      	ldrh	r3, [r4, #12]
 8016b6e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8016b72:	81a3      	strh	r3, [r4, #12]
 8016b74:	2300      	movs	r3, #0
 8016b76:	6063      	str	r3, [r4, #4]
 8016b78:	6923      	ldr	r3, [r4, #16]
 8016b7a:	6023      	str	r3, [r4, #0]
 8016b7c:	89a3      	ldrh	r3, [r4, #12]
 8016b7e:	f043 0308 	orr.w	r3, r3, #8
 8016b82:	81a3      	strh	r3, [r4, #12]
 8016b84:	6923      	ldr	r3, [r4, #16]
 8016b86:	b94b      	cbnz	r3, 8016b9c <__swsetup_r+0x7c>
 8016b88:	89a3      	ldrh	r3, [r4, #12]
 8016b8a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016b8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016b92:	d003      	beq.n	8016b9c <__swsetup_r+0x7c>
 8016b94:	4621      	mov	r1, r4
 8016b96:	4628      	mov	r0, r5
 8016b98:	f000 f884 	bl	8016ca4 <__smakebuf_r>
 8016b9c:	89a0      	ldrh	r0, [r4, #12]
 8016b9e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016ba2:	f010 0301 	ands.w	r3, r0, #1
 8016ba6:	d00a      	beq.n	8016bbe <__swsetup_r+0x9e>
 8016ba8:	2300      	movs	r3, #0
 8016baa:	60a3      	str	r3, [r4, #8]
 8016bac:	6963      	ldr	r3, [r4, #20]
 8016bae:	425b      	negs	r3, r3
 8016bb0:	61a3      	str	r3, [r4, #24]
 8016bb2:	6923      	ldr	r3, [r4, #16]
 8016bb4:	b943      	cbnz	r3, 8016bc8 <__swsetup_r+0xa8>
 8016bb6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8016bba:	d1c4      	bne.n	8016b46 <__swsetup_r+0x26>
 8016bbc:	bd38      	pop	{r3, r4, r5, pc}
 8016bbe:	0781      	lsls	r1, r0, #30
 8016bc0:	bf58      	it	pl
 8016bc2:	6963      	ldrpl	r3, [r4, #20]
 8016bc4:	60a3      	str	r3, [r4, #8]
 8016bc6:	e7f4      	b.n	8016bb2 <__swsetup_r+0x92>
 8016bc8:	2000      	movs	r0, #0
 8016bca:	e7f7      	b.n	8016bbc <__swsetup_r+0x9c>
 8016bcc:	20000138 	.word	0x20000138

08016bd0 <_raise_r>:
 8016bd0:	291f      	cmp	r1, #31
 8016bd2:	b538      	push	{r3, r4, r5, lr}
 8016bd4:	4604      	mov	r4, r0
 8016bd6:	460d      	mov	r5, r1
 8016bd8:	d904      	bls.n	8016be4 <_raise_r+0x14>
 8016bda:	2316      	movs	r3, #22
 8016bdc:	6003      	str	r3, [r0, #0]
 8016bde:	f04f 30ff 	mov.w	r0, #4294967295
 8016be2:	bd38      	pop	{r3, r4, r5, pc}
 8016be4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8016be6:	b112      	cbz	r2, 8016bee <_raise_r+0x1e>
 8016be8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016bec:	b94b      	cbnz	r3, 8016c02 <_raise_r+0x32>
 8016bee:	4620      	mov	r0, r4
 8016bf0:	f000 f830 	bl	8016c54 <_getpid_r>
 8016bf4:	462a      	mov	r2, r5
 8016bf6:	4601      	mov	r1, r0
 8016bf8:	4620      	mov	r0, r4
 8016bfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016bfe:	f000 b817 	b.w	8016c30 <_kill_r>
 8016c02:	2b01      	cmp	r3, #1
 8016c04:	d00a      	beq.n	8016c1c <_raise_r+0x4c>
 8016c06:	1c59      	adds	r1, r3, #1
 8016c08:	d103      	bne.n	8016c12 <_raise_r+0x42>
 8016c0a:	2316      	movs	r3, #22
 8016c0c:	6003      	str	r3, [r0, #0]
 8016c0e:	2001      	movs	r0, #1
 8016c10:	e7e7      	b.n	8016be2 <_raise_r+0x12>
 8016c12:	2400      	movs	r4, #0
 8016c14:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8016c18:	4628      	mov	r0, r5
 8016c1a:	4798      	blx	r3
 8016c1c:	2000      	movs	r0, #0
 8016c1e:	e7e0      	b.n	8016be2 <_raise_r+0x12>

08016c20 <raise>:
 8016c20:	4b02      	ldr	r3, [pc, #8]	; (8016c2c <raise+0xc>)
 8016c22:	4601      	mov	r1, r0
 8016c24:	6818      	ldr	r0, [r3, #0]
 8016c26:	f7ff bfd3 	b.w	8016bd0 <_raise_r>
 8016c2a:	bf00      	nop
 8016c2c:	20000138 	.word	0x20000138

08016c30 <_kill_r>:
 8016c30:	b538      	push	{r3, r4, r5, lr}
 8016c32:	4d07      	ldr	r5, [pc, #28]	; (8016c50 <_kill_r+0x20>)
 8016c34:	2300      	movs	r3, #0
 8016c36:	4604      	mov	r4, r0
 8016c38:	4608      	mov	r0, r1
 8016c3a:	4611      	mov	r1, r2
 8016c3c:	602b      	str	r3, [r5, #0]
 8016c3e:	f7eb f8af 	bl	8001da0 <_kill>
 8016c42:	1c43      	adds	r3, r0, #1
 8016c44:	d102      	bne.n	8016c4c <_kill_r+0x1c>
 8016c46:	682b      	ldr	r3, [r5, #0]
 8016c48:	b103      	cbz	r3, 8016c4c <_kill_r+0x1c>
 8016c4a:	6023      	str	r3, [r4, #0]
 8016c4c:	bd38      	pop	{r3, r4, r5, pc}
 8016c4e:	bf00      	nop
 8016c50:	20001b10 	.word	0x20001b10

08016c54 <_getpid_r>:
 8016c54:	f7eb b8a2 	b.w	8001d9c <_getpid>

08016c58 <__swhatbuf_r>:
 8016c58:	b570      	push	{r4, r5, r6, lr}
 8016c5a:	460c      	mov	r4, r1
 8016c5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016c60:	2900      	cmp	r1, #0
 8016c62:	b096      	sub	sp, #88	; 0x58
 8016c64:	4615      	mov	r5, r2
 8016c66:	461e      	mov	r6, r3
 8016c68:	da0d      	bge.n	8016c86 <__swhatbuf_r+0x2e>
 8016c6a:	89a3      	ldrh	r3, [r4, #12]
 8016c6c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8016c70:	f04f 0100 	mov.w	r1, #0
 8016c74:	bf0c      	ite	eq
 8016c76:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8016c7a:	2340      	movne	r3, #64	; 0x40
 8016c7c:	2000      	movs	r0, #0
 8016c7e:	6031      	str	r1, [r6, #0]
 8016c80:	602b      	str	r3, [r5, #0]
 8016c82:	b016      	add	sp, #88	; 0x58
 8016c84:	bd70      	pop	{r4, r5, r6, pc}
 8016c86:	466a      	mov	r2, sp
 8016c88:	f000 f848 	bl	8016d1c <_fstat_r>
 8016c8c:	2800      	cmp	r0, #0
 8016c8e:	dbec      	blt.n	8016c6a <__swhatbuf_r+0x12>
 8016c90:	9901      	ldr	r1, [sp, #4]
 8016c92:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8016c96:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8016c9a:	4259      	negs	r1, r3
 8016c9c:	4159      	adcs	r1, r3
 8016c9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016ca2:	e7eb      	b.n	8016c7c <__swhatbuf_r+0x24>

08016ca4 <__smakebuf_r>:
 8016ca4:	898b      	ldrh	r3, [r1, #12]
 8016ca6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016ca8:	079d      	lsls	r5, r3, #30
 8016caa:	4606      	mov	r6, r0
 8016cac:	460c      	mov	r4, r1
 8016cae:	d507      	bpl.n	8016cc0 <__smakebuf_r+0x1c>
 8016cb0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016cb4:	6023      	str	r3, [r4, #0]
 8016cb6:	6123      	str	r3, [r4, #16]
 8016cb8:	2301      	movs	r3, #1
 8016cba:	6163      	str	r3, [r4, #20]
 8016cbc:	b002      	add	sp, #8
 8016cbe:	bd70      	pop	{r4, r5, r6, pc}
 8016cc0:	ab01      	add	r3, sp, #4
 8016cc2:	466a      	mov	r2, sp
 8016cc4:	f7ff ffc8 	bl	8016c58 <__swhatbuf_r>
 8016cc8:	9900      	ldr	r1, [sp, #0]
 8016cca:	4605      	mov	r5, r0
 8016ccc:	4630      	mov	r0, r6
 8016cce:	f7fd fa3d 	bl	801414c <_malloc_r>
 8016cd2:	b948      	cbnz	r0, 8016ce8 <__smakebuf_r+0x44>
 8016cd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016cd8:	059a      	lsls	r2, r3, #22
 8016cda:	d4ef      	bmi.n	8016cbc <__smakebuf_r+0x18>
 8016cdc:	f023 0303 	bic.w	r3, r3, #3
 8016ce0:	f043 0302 	orr.w	r3, r3, #2
 8016ce4:	81a3      	strh	r3, [r4, #12]
 8016ce6:	e7e3      	b.n	8016cb0 <__smakebuf_r+0xc>
 8016ce8:	89a3      	ldrh	r3, [r4, #12]
 8016cea:	6020      	str	r0, [r4, #0]
 8016cec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016cf0:	81a3      	strh	r3, [r4, #12]
 8016cf2:	9b00      	ldr	r3, [sp, #0]
 8016cf4:	6163      	str	r3, [r4, #20]
 8016cf6:	9b01      	ldr	r3, [sp, #4]
 8016cf8:	6120      	str	r0, [r4, #16]
 8016cfa:	b15b      	cbz	r3, 8016d14 <__smakebuf_r+0x70>
 8016cfc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016d00:	4630      	mov	r0, r6
 8016d02:	f000 f81d 	bl	8016d40 <_isatty_r>
 8016d06:	b128      	cbz	r0, 8016d14 <__smakebuf_r+0x70>
 8016d08:	89a3      	ldrh	r3, [r4, #12]
 8016d0a:	f023 0303 	bic.w	r3, r3, #3
 8016d0e:	f043 0301 	orr.w	r3, r3, #1
 8016d12:	81a3      	strh	r3, [r4, #12]
 8016d14:	89a3      	ldrh	r3, [r4, #12]
 8016d16:	431d      	orrs	r5, r3
 8016d18:	81a5      	strh	r5, [r4, #12]
 8016d1a:	e7cf      	b.n	8016cbc <__smakebuf_r+0x18>

08016d1c <_fstat_r>:
 8016d1c:	b538      	push	{r3, r4, r5, lr}
 8016d1e:	4d07      	ldr	r5, [pc, #28]	; (8016d3c <_fstat_r+0x20>)
 8016d20:	2300      	movs	r3, #0
 8016d22:	4604      	mov	r4, r0
 8016d24:	4608      	mov	r0, r1
 8016d26:	4611      	mov	r1, r2
 8016d28:	602b      	str	r3, [r5, #0]
 8016d2a:	f7eb f868 	bl	8001dfe <_fstat>
 8016d2e:	1c43      	adds	r3, r0, #1
 8016d30:	d102      	bne.n	8016d38 <_fstat_r+0x1c>
 8016d32:	682b      	ldr	r3, [r5, #0]
 8016d34:	b103      	cbz	r3, 8016d38 <_fstat_r+0x1c>
 8016d36:	6023      	str	r3, [r4, #0]
 8016d38:	bd38      	pop	{r3, r4, r5, pc}
 8016d3a:	bf00      	nop
 8016d3c:	20001b10 	.word	0x20001b10

08016d40 <_isatty_r>:
 8016d40:	b538      	push	{r3, r4, r5, lr}
 8016d42:	4d06      	ldr	r5, [pc, #24]	; (8016d5c <_isatty_r+0x1c>)
 8016d44:	2300      	movs	r3, #0
 8016d46:	4604      	mov	r4, r0
 8016d48:	4608      	mov	r0, r1
 8016d4a:	602b      	str	r3, [r5, #0]
 8016d4c:	f7eb f85c 	bl	8001e08 <_isatty>
 8016d50:	1c43      	adds	r3, r0, #1
 8016d52:	d102      	bne.n	8016d5a <_isatty_r+0x1a>
 8016d54:	682b      	ldr	r3, [r5, #0]
 8016d56:	b103      	cbz	r3, 8016d5a <_isatty_r+0x1a>
 8016d58:	6023      	str	r3, [r4, #0]
 8016d5a:	bd38      	pop	{r3, r4, r5, pc}
 8016d5c:	20001b10 	.word	0x20001b10

08016d60 <floor>:
 8016d60:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8016d64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016d68:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8016d6c:	2e13      	cmp	r6, #19
 8016d6e:	460b      	mov	r3, r1
 8016d70:	4607      	mov	r7, r0
 8016d72:	460c      	mov	r4, r1
 8016d74:	4605      	mov	r5, r0
 8016d76:	dc32      	bgt.n	8016dde <floor+0x7e>
 8016d78:	2e00      	cmp	r6, #0
 8016d7a:	da14      	bge.n	8016da6 <floor+0x46>
 8016d7c:	a334      	add	r3, pc, #208	; (adr r3, 8016e50 <floor+0xf0>)
 8016d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d82:	f7e9 fa5b 	bl	800023c <__adddf3>
 8016d86:	2200      	movs	r2, #0
 8016d88:	2300      	movs	r3, #0
 8016d8a:	f7e9 fe9d 	bl	8000ac8 <__aeabi_dcmpgt>
 8016d8e:	b138      	cbz	r0, 8016da0 <floor+0x40>
 8016d90:	2c00      	cmp	r4, #0
 8016d92:	da56      	bge.n	8016e42 <floor+0xe2>
 8016d94:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8016d98:	4325      	orrs	r5, r4
 8016d9a:	d055      	beq.n	8016e48 <floor+0xe8>
 8016d9c:	4c2e      	ldr	r4, [pc, #184]	; (8016e58 <floor+0xf8>)
 8016d9e:	2500      	movs	r5, #0
 8016da0:	4623      	mov	r3, r4
 8016da2:	462f      	mov	r7, r5
 8016da4:	e025      	b.n	8016df2 <floor+0x92>
 8016da6:	4a2d      	ldr	r2, [pc, #180]	; (8016e5c <floor+0xfc>)
 8016da8:	fa42 f806 	asr.w	r8, r2, r6
 8016dac:	ea01 0208 	and.w	r2, r1, r8
 8016db0:	4302      	orrs	r2, r0
 8016db2:	d01e      	beq.n	8016df2 <floor+0x92>
 8016db4:	a326      	add	r3, pc, #152	; (adr r3, 8016e50 <floor+0xf0>)
 8016db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016dba:	f7e9 fa3f 	bl	800023c <__adddf3>
 8016dbe:	2200      	movs	r2, #0
 8016dc0:	2300      	movs	r3, #0
 8016dc2:	f7e9 fe81 	bl	8000ac8 <__aeabi_dcmpgt>
 8016dc6:	2800      	cmp	r0, #0
 8016dc8:	d0ea      	beq.n	8016da0 <floor+0x40>
 8016dca:	2c00      	cmp	r4, #0
 8016dcc:	bfbe      	ittt	lt
 8016dce:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8016dd2:	4133      	asrlt	r3, r6
 8016dd4:	18e4      	addlt	r4, r4, r3
 8016dd6:	ea24 0408 	bic.w	r4, r4, r8
 8016dda:	2500      	movs	r5, #0
 8016ddc:	e7e0      	b.n	8016da0 <floor+0x40>
 8016dde:	2e33      	cmp	r6, #51	; 0x33
 8016de0:	dd0b      	ble.n	8016dfa <floor+0x9a>
 8016de2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8016de6:	d104      	bne.n	8016df2 <floor+0x92>
 8016de8:	4602      	mov	r2, r0
 8016dea:	f7e9 fa27 	bl	800023c <__adddf3>
 8016dee:	4607      	mov	r7, r0
 8016df0:	460b      	mov	r3, r1
 8016df2:	4638      	mov	r0, r7
 8016df4:	4619      	mov	r1, r3
 8016df6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016dfa:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8016dfe:	f04f 38ff 	mov.w	r8, #4294967295
 8016e02:	fa28 f802 	lsr.w	r8, r8, r2
 8016e06:	ea10 0f08 	tst.w	r0, r8
 8016e0a:	d0f2      	beq.n	8016df2 <floor+0x92>
 8016e0c:	a310      	add	r3, pc, #64	; (adr r3, 8016e50 <floor+0xf0>)
 8016e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e12:	f7e9 fa13 	bl	800023c <__adddf3>
 8016e16:	2200      	movs	r2, #0
 8016e18:	2300      	movs	r3, #0
 8016e1a:	f7e9 fe55 	bl	8000ac8 <__aeabi_dcmpgt>
 8016e1e:	2800      	cmp	r0, #0
 8016e20:	d0be      	beq.n	8016da0 <floor+0x40>
 8016e22:	2c00      	cmp	r4, #0
 8016e24:	da0a      	bge.n	8016e3c <floor+0xdc>
 8016e26:	2e14      	cmp	r6, #20
 8016e28:	d101      	bne.n	8016e2e <floor+0xce>
 8016e2a:	3401      	adds	r4, #1
 8016e2c:	e006      	b.n	8016e3c <floor+0xdc>
 8016e2e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8016e32:	2301      	movs	r3, #1
 8016e34:	40b3      	lsls	r3, r6
 8016e36:	441d      	add	r5, r3
 8016e38:	42af      	cmp	r7, r5
 8016e3a:	d8f6      	bhi.n	8016e2a <floor+0xca>
 8016e3c:	ea25 0508 	bic.w	r5, r5, r8
 8016e40:	e7ae      	b.n	8016da0 <floor+0x40>
 8016e42:	2500      	movs	r5, #0
 8016e44:	462c      	mov	r4, r5
 8016e46:	e7ab      	b.n	8016da0 <floor+0x40>
 8016e48:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8016e4c:	e7a8      	b.n	8016da0 <floor+0x40>
 8016e4e:	bf00      	nop
 8016e50:	8800759c 	.word	0x8800759c
 8016e54:	7e37e43c 	.word	0x7e37e43c
 8016e58:	bff00000 	.word	0xbff00000
 8016e5c:	000fffff 	.word	0x000fffff

08016e60 <_init>:
 8016e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016e62:	bf00      	nop
 8016e64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016e66:	bc08      	pop	{r3}
 8016e68:	469e      	mov	lr, r3
 8016e6a:	4770      	bx	lr

08016e6c <_fini>:
 8016e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016e6e:	bf00      	nop
 8016e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016e72:	bc08      	pop	{r3}
 8016e74:	469e      	mov	lr, r3
 8016e76:	4770      	bx	lr
